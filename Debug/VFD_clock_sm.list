
VFD_clock_sm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b578  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800b684  0800b684  0001b684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd70  0800bd70  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd70  0800bd70  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd70  0800bd70  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd74  0800bd74  0001bd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800bd78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d4  20000188  0800bf00  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000165c  0800bf00  0002165c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acc4  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de2  00000000  00000000  0003ae75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0003ec58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  0003fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b526  00000000  00000000  00040e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176a3  00000000  00000000  0005c35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6f3  00000000  00000000  00073a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe0f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  000fe148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b66c 	.word	0x0800b66c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	0800b66c 	.word	0x0800b66c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <d3231_init>:
uint8_t d3231_mem[19];

I2C_HandleTypeDef * hi2c;

void d3231_init(I2C_HandleTypeDef * hi2ci)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	hi2c = hi2ci;
 8000178:	4a03      	ldr	r2, [pc, #12]	; (8000188 <d3231_init+0x18>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	6013      	str	r3, [r2, #0]
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	200003f4 	.word	0x200003f4

0800018c <d3231_get_time>:

uint8_t * d3231_get_time(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(hi2c, D3231_ADDRESS, 0, 1, d3231_mem, 3, 10);
 8000192:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <d3231_get_time+0x28>)
 8000194:	6818      	ldr	r0, [r3, #0]
 8000196:	230a      	movs	r3, #10
 8000198:	9302      	str	r3, [sp, #8]
 800019a:	2303      	movs	r3, #3
 800019c:	9301      	str	r3, [sp, #4]
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <d3231_get_time+0x2c>)
 80001a0:	9300      	str	r3, [sp, #0]
 80001a2:	2301      	movs	r3, #1
 80001a4:	2200      	movs	r2, #0
 80001a6:	21d0      	movs	r1, #208	; 0xd0
 80001a8:	f003 fd9e 	bl	8003ce8 <HAL_I2C_Mem_Read>
	return d3231_mem;
 80001ac:	4b02      	ldr	r3, [pc, #8]	; (80001b8 <d3231_get_time+0x2c>)
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	200003f4 	.word	0x200003f4
 80001b8:	200003e0 	.word	0x200003e0

080001bc <d3231_get_temp>:

uint8_t * d3231_get_temp(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(hi2c, D3231_ADDRESS, 0x11, 1, d3231_mem+0x11, 2, 10);
 80001c2:	4b08      	ldr	r3, [pc, #32]	; (80001e4 <d3231_get_temp+0x28>)
 80001c4:	6818      	ldr	r0, [r3, #0]
 80001c6:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <d3231_get_temp+0x2c>)
 80001c8:	220a      	movs	r2, #10
 80001ca:	9202      	str	r2, [sp, #8]
 80001cc:	2202      	movs	r2, #2
 80001ce:	9201      	str	r2, [sp, #4]
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2301      	movs	r3, #1
 80001d4:	2211      	movs	r2, #17
 80001d6:	21d0      	movs	r1, #208	; 0xd0
 80001d8:	f003 fd86 	bl	8003ce8 <HAL_I2C_Mem_Read>
	return d3231_mem+0x11;
 80001dc:	4b02      	ldr	r3, [pc, #8]	; (80001e8 <d3231_get_temp+0x2c>)
}
 80001de:	4618      	mov	r0, r3
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	200003f4 	.word	0x200003f4
 80001e8:	200003f1 	.word	0x200003f1

080001ec <d3231_get_all>:

uint8_t * d3231_get_all(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(hi2c, D3231_ADDRESS, 0, 1, d3231_mem, 19, 100);
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <d3231_get_all+0x28>)
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	2364      	movs	r3, #100	; 0x64
 80001f8:	9302      	str	r3, [sp, #8]
 80001fa:	2313      	movs	r3, #19
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <d3231_get_all+0x2c>)
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2301      	movs	r3, #1
 8000204:	2200      	movs	r2, #0
 8000206:	21d0      	movs	r1, #208	; 0xd0
 8000208:	f003 fd6e 	bl	8003ce8 <HAL_I2C_Mem_Read>
	return d3231_mem;
 800020c:	4b02      	ldr	r3, [pc, #8]	; (8000218 <d3231_get_all+0x2c>)
}
 800020e:	4618      	mov	r0, r3
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200003f4 	.word	0x200003f4
 8000218:	200003e0 	.word	0x200003e0

0800021c <d3231_get_A2M2>:

uint8_t d3231_get_A2M2(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	return d3231_get_all()[0xB];
 8000220:	f7ff ffe4 	bl	80001ec <d3231_get_all>
 8000224:	4603      	mov	r3, r0
 8000226:	7adb      	ldrb	r3, [r3, #11]
}
 8000228:	4618      	mov	r0, r3
 800022a:	bd80      	pop	{r7, pc}

0800022c <d3231_set_A2M2>:

void d3231_set_A2M2(uint8_t data)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af04      	add	r7, sp, #16
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c, D3231_ADDRESS, 0xB, 1, &data, 1, 100);
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <d3231_set_A2M2+0x2c>)
 8000238:	6818      	ldr	r0, [r3, #0]
 800023a:	2364      	movs	r3, #100	; 0x64
 800023c:	9302      	str	r3, [sp, #8]
 800023e:	2301      	movs	r3, #1
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2301      	movs	r3, #1
 8000248:	220b      	movs	r2, #11
 800024a:	21d0      	movs	r1, #208	; 0xd0
 800024c:	f003 fc52 	bl	8003af4 <HAL_I2C_Mem_Write>
}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	200003f4 	.word	0x200003f4

0800025c <d3231_set>:

void d3231_set(uint8_t * arr, bool date)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af04      	add	r7, sp, #16
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	460b      	mov	r3, r1
 8000266:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(hi2c, D3231_ADDRESS, date<<2, 1, arr, 3, 100);
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <d3231_set+0x34>)
 800026a:	6818      	ldr	r0, [r3, #0]
 800026c:	78fb      	ldrb	r3, [r7, #3]
 800026e:	b29b      	uxth	r3, r3
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	b29a      	uxth	r2, r3
 8000274:	2364      	movs	r3, #100	; 0x64
 8000276:	9302      	str	r3, [sp, #8]
 8000278:	2303      	movs	r3, #3
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2301      	movs	r3, #1
 8000282:	21d0      	movs	r1, #208	; 0xd0
 8000284:	f003 fc36 	bl	8003af4 <HAL_I2C_Mem_Write>
}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	200003f4 	.word	0x200003f4

08000294 <fifo_push>:
buff_t fifo_buffer[BUFF_SIZE];
uint32_t head_index = 0;
uint32_t tail_index = 0;

bool fifo_push(buff_t data)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	if (fifo_length() >= BUFF_SIZE - 1)
 800029e:	f000 f859 	bl	8000354 <fifo_length>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2bfe      	cmp	r3, #254	; 0xfe
 80002a6:	d901      	bls.n	80002ac <fifo_push+0x18>
		return 1; // too much data!
 80002a8:	2301      	movs	r3, #1
 80002aa:	e012      	b.n	80002d2 <fifo_push+0x3e>
	if (++tail_index == BUFF_SIZE)
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <fifo_push+0x48>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3301      	adds	r3, #1
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <fifo_push+0x48>)
 80002b4:	6013      	str	r3, [r2, #0]
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <fifo_push+0x48>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002be:	d102      	bne.n	80002c6 <fifo_push+0x32>
		tail_index = 0;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <fifo_push+0x48>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
	fifo_buffer[tail_index] = data;
 80002c6:	4b05      	ldr	r3, [pc, #20]	; (80002dc <fifo_push+0x48>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4905      	ldr	r1, [pc, #20]	; (80002e0 <fifo_push+0x4c>)
 80002cc:	79fa      	ldrb	r2, [r7, #7]
 80002ce:	54ca      	strb	r2, [r1, r3]
	return 0;
 80002d0:	2300      	movs	r3, #0
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200001a8 	.word	0x200001a8
 80002e0:	200003f8 	.word	0x200003f8

080002e4 <fifo_pop>:

buff_t fifo_pop(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	if (fifo_is_empty())
 80002e8:	f000 f820 	bl	800032c <fifo_is_empty>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d004      	beq.n	80002fc <fifo_pop+0x18>
		return fifo_buffer[head_index]; // buffer is empty, return the last value
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <fifo_pop+0x40>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <fifo_pop+0x44>)
 80002f8:	5cd3      	ldrb	r3, [r2, r3]
 80002fa:	e010      	b.n	800031e <fifo_pop+0x3a>
	if (++head_index == BUFF_SIZE)
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <fifo_pop+0x40>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	4a08      	ldr	r2, [pc, #32]	; (8000324 <fifo_pop+0x40>)
 8000304:	6013      	str	r3, [r2, #0]
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <fifo_pop+0x40>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800030e:	d102      	bne.n	8000316 <fifo_pop+0x32>
		head_index = 0;
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <fifo_pop+0x40>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
	return fifo_buffer[head_index];
 8000316:	4b03      	ldr	r3, [pc, #12]	; (8000324 <fifo_pop+0x40>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a03      	ldr	r2, [pc, #12]	; (8000328 <fifo_pop+0x44>)
 800031c:	5cd3      	ldrb	r3, [r2, r3]
}
 800031e:	4618      	mov	r0, r3
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200001a4 	.word	0x200001a4
 8000328:	200003f8 	.word	0x200003f8

0800032c <fifo_is_empty>:

bool fifo_is_empty(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	return head_index == tail_index;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <fifo_is_empty+0x20>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <fifo_is_empty+0x24>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	429a      	cmp	r2, r3
 800033a:	bf0c      	ite	eq
 800033c:	2301      	moveq	r3, #1
 800033e:	2300      	movne	r3, #0
 8000340:	b2db      	uxtb	r3, r3
}
 8000342:	4618      	mov	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	200001a4 	.word	0x200001a4
 8000350:	200001a8 	.word	0x200001a8

08000354 <fifo_length>:

uint32_t fifo_length(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	if (tail_index >= head_index)
 8000358:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <fifo_length+0x34>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <fifo_length+0x38>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	429a      	cmp	r2, r3
 8000362:	d305      	bcc.n	8000370 <fifo_length+0x1c>
		return tail_index - head_index;
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <fifo_length+0x34>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <fifo_length+0x38>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	e006      	b.n	800037e <fifo_length+0x2a>
	else
		return tail_index + BUFF_SIZE - head_index;
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <fifo_length+0x34>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <fifo_length+0x38>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	1ad3      	subs	r3, r2, r3
 800037a:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
 800037e:	4618      	mov	r0, r3
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	200001a8 	.word	0x200001a8
 800038c:	200001a4 	.word	0x200001a4

08000390 <vfd_update>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vfd_update(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
			uint8_t data = 0b11000000; // command 3, set address to 0
 8000396:	23c0      	movs	r3, #192	; 0xc0
 8000398:	71fb      	strb	r3, [r7, #7]
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <vfd_update+0x48>)
 80003a2:	f003 fa32 	bl	800380a <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003a6:	1df9      	adds	r1, r7, #7
 80003a8:	f04f 33ff 	mov.w	r3, #4294967295
 80003ac:	2201      	movs	r2, #1
 80003ae:	480b      	ldr	r0, [pc, #44]	; (80003dc <vfd_update+0x4c>)
 80003b0:	f006 fc64 	bl	8006c7c <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80003b4:	f04f 33ff 	mov.w	r3, #4294967295
 80003b8:	2221      	movs	r2, #33	; 0x21
 80003ba:	4909      	ldr	r1, [pc, #36]	; (80003e0 <vfd_update+0x50>)
 80003bc:	4807      	ldr	r0, [pc, #28]	; (80003dc <vfd_update+0x4c>)
 80003be:	f006 fc5d 	bl	8006c7c <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c8:	4803      	ldr	r0, [pc, #12]	; (80003d8 <vfd_update+0x48>)
 80003ca:	f003 fa1e 	bl	800380a <HAL_GPIO_WritePin>
		}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010c00 	.word	0x40010c00
 80003dc:	200004f8 	.word	0x200004f8
 80003e0:	200005a4 	.word	0x200005a4

080003e4 <do_microrl>:

void do_microrl(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
	while (!fifo_is_empty())
 80003ea:	e007      	b.n	80003fc <do_microrl+0x18>
	{
	  uint8_t buf = fifo_pop();
 80003ec:	f7ff ff7a 	bl	80002e4 <fifo_pop>
 80003f0:	4603      	mov	r3, r0
 80003f2:	71fb      	strb	r3, [r7, #7]
	  microrl_print_char(buf);
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fe1e 	bl	8002038 <microrl_print_char>
	while (!fifo_is_empty())
 80003fc:	f7ff ff96 	bl	800032c <fifo_is_empty>
 8000400:	4603      	mov	r3, r0
 8000402:	f083 0301 	eor.w	r3, r3, #1
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1ef      	bne.n	80003ec <do_microrl+0x8>
	}
}
 800040c:	bf00      	nop
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <do_vfd_init>:

void do_vfd_init(void)
{
 8000418:	b5b0      	push	{r4, r5, r7, lr}
 800041a:	b098      	sub	sp, #96	; 0x60
 800041c:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1); // put CS high
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000424:	48c0      	ldr	r0, [pc, #768]	; (8000728 <do_vfd_init+0x310>)
 8000426:	f003 f9f0 	bl	800380a <HAL_GPIO_WritePin>

		HAL_Delay(300);
 800042a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800042e:	f002 ff1f 	bl	8003270 <HAL_Delay>
		HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000432:	2201      	movs	r2, #1
 8000434:	2120      	movs	r1, #32
 8000436:	48bc      	ldr	r0, [pc, #752]	; (8000728 <do_vfd_init+0x310>)
 8000438:	f003 f9e7 	bl	800380a <HAL_GPIO_WritePin>

		for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800043c:	2300      	movs	r3, #0
 800043e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000440:	e007      	b.n	8000452 <do_vfd_init+0x3a>
			vfd.arr1[i] = 0xFF;
 8000442:	4aba      	ldr	r2, [pc, #744]	; (800072c <do_vfd_init+0x314>)
 8000444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000446:	4413      	add	r3, r2
 8000448:	22ff      	movs	r2, #255	; 0xff
 800044a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800044c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800044e:	3301      	adds	r3, #1
 8000450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000454:	2b20      	cmp	r3, #32
 8000456:	d9f4      	bls.n	8000442 <do_vfd_init+0x2a>
		}
		uint8_t data;

		data = 0b01000001; // command 2, write to LED port
 8000458:	2341      	movs	r3, #65	; 0x41
 800045a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000464:	48b0      	ldr	r0, [pc, #704]	; (8000728 <do_vfd_init+0x310>)
 8000466:	f003 f9d0 	bl	800380a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800046a:	f107 0137 	add.w	r1, r7, #55	; 0x37
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
 8000472:	2201      	movs	r2, #1
 8000474:	48ae      	ldr	r0, [pc, #696]	; (8000730 <do_vfd_init+0x318>)
 8000476:	f006 fc01 	bl	8006c7c <HAL_SPI_Transmit>
		HAL_Delay(10);
 800047a:	200a      	movs	r0, #10
 800047c:	f002 fef8 	bl	8003270 <HAL_Delay>

		data = 0b1111; // disable LEDs
 8000480:	230f      	movs	r3, #15
 8000482:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000486:	f107 0137 	add.w	r1, r7, #55	; 0x37
 800048a:	f04f 33ff 	mov.w	r3, #4294967295
 800048e:	2201      	movs	r2, #1
 8000490:	48a7      	ldr	r0, [pc, #668]	; (8000730 <do_vfd_init+0x318>)
 8000492:	f006 fbf3 	bl	8006c7c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	48a2      	ldr	r0, [pc, #648]	; (8000728 <do_vfd_init+0x310>)
 800049e:	f003 f9b4 	bl	800380a <HAL_GPIO_WritePin>

		data = 0b01000000; // command 2, write to Display port
 80004a2:	2340      	movs	r3, #64	; 0x40
 80004a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ae:	489e      	ldr	r0, [pc, #632]	; (8000728 <do_vfd_init+0x310>)
 80004b0:	f003 f9ab 	bl	800380a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004b4:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80004b8:	f04f 33ff 	mov.w	r3, #4294967295
 80004bc:	2201      	movs	r2, #1
 80004be:	489c      	ldr	r0, [pc, #624]	; (8000730 <do_vfd_init+0x318>)
 80004c0:	f006 fbdc 	bl	8006c7c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ca:	4897      	ldr	r0, [pc, #604]	; (8000728 <do_vfd_init+0x310>)
 80004cc:	f003 f99d 	bl	800380a <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80004d0:	200a      	movs	r0, #10
 80004d2:	f002 fecd 	bl	8003270 <HAL_Delay>
		vfd_update();
 80004d6:	f7ff ff5b 	bl	8000390 <vfd_update>
		HAL_Delay(10);
 80004da:	200a      	movs	r0, #10
 80004dc:	f002 fec8 	bl	8003270 <HAL_Delay>
		// init display, 11 digits 17 segments
		data = 0b00000111; // command 1, 11 digits 17 segments
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ec:	488e      	ldr	r0, [pc, #568]	; (8000728 <do_vfd_init+0x310>)
 80004ee:	f003 f98c 	bl	800380a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004f2:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
 80004fa:	2201      	movs	r2, #1
 80004fc:	488c      	ldr	r0, [pc, #560]	; (8000730 <do_vfd_init+0x318>)
 80004fe:	f006 fbbd 	bl	8006c7c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000508:	4887      	ldr	r0, [pc, #540]	; (8000728 <do_vfd_init+0x310>)
 800050a:	f003 f97e 	bl	800380a <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800050e:	200a      	movs	r0, #10
 8000510:	f002 feae 	bl	8003270 <HAL_Delay>

		for (uint8_t i = 0; i <= 0b111; i++) {
 8000514:	2300      	movs	r3, #0
 8000516:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800051a:	e02f      	b.n	800057c <do_vfd_init+0x164>
			data = 0b10000000; // command 4
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			data |= 1 << 3; // enable/disable display
 8000522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	b2db      	uxtb	r3, r3
 800052c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			data |= i; // set brightness
 8000530:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000534:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000538:	4313      	orrs	r3, r2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000546:	4878      	ldr	r0, [pc, #480]	; (8000728 <do_vfd_init+0x310>)
 8000548:	f003 f95f 	bl	800380a <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800054c:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8000550:	f04f 33ff 	mov.w	r3, #4294967295
 8000554:	2201      	movs	r2, #1
 8000556:	4876      	ldr	r0, [pc, #472]	; (8000730 <do_vfd_init+0x318>)
 8000558:	f006 fb90 	bl	8006c7c <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4871      	ldr	r0, [pc, #452]	; (8000728 <do_vfd_init+0x310>)
 8000564:	f003 f951 	bl	800380a <HAL_GPIO_WritePin>
			HAL_Delay(250);
 8000568:	20fa      	movs	r0, #250	; 0xfa
 800056a:	f002 fe81 	bl	8003270 <HAL_Delay>
			do_microrl();
 800056e:	f7ff ff39 	bl	80003e4 <do_microrl>
		for (uint8_t i = 0; i <= 0b111; i++) {
 8000572:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000576:	3301      	adds	r3, #1
 8000578:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800057c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000580:	2b07      	cmp	r3, #7
 8000582:	d9cb      	bls.n	800051c <do_vfd_init+0x104>
		}

		for (int i = 0; i < 11; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
 8000588:	e01c      	b.n	80005c4 <do_vfd_init+0x1ac>
			for (int b = 0; b < 3; b++) // erasing from right to left
 800058a:	2300      	movs	r3, #0
 800058c:	653b      	str	r3, [r7, #80]	; 0x50
 800058e:	e00c      	b.n	80005aa <do_vfd_init+0x192>
					{
				vfd.arr2[i][b] = 0;
 8000590:	4966      	ldr	r1, [pc, #408]	; (800072c <do_vfd_init+0x314>)
 8000592:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000594:	4613      	mov	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	4413      	add	r3, r2
 800059a:	18ca      	adds	r2, r1, r3
 800059c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800059e:	4413      	add	r3, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++) // erasing from right to left
 80005a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005a6:	3301      	adds	r3, #1
 80005a8:	653b      	str	r3, [r7, #80]	; 0x50
 80005aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	ddef      	ble.n	8000590 <do_vfd_init+0x178>
			}
			vfd_update();
 80005b0:	f7ff feee 	bl	8000390 <vfd_update>
			HAL_Delay(150);
 80005b4:	2096      	movs	r0, #150	; 0x96
 80005b6:	f002 fe5b 	bl	8003270 <HAL_Delay>
			do_microrl();
 80005ba:	f7ff ff13 	bl	80003e4 <do_microrl>
		for (int i = 0; i < 11; i++) {
 80005be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005c0:	3301      	adds	r3, #1
 80005c2:	657b      	str	r3, [r7, #84]	; 0x54
 80005c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005c6:	2b0a      	cmp	r3, #10
 80005c8:	dddf      	ble.n	800058a <do_vfd_init+0x172>
		}
		HAL_Delay(500);
 80005ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ce:	f002 fe4f 	bl	8003270 <HAL_Delay>
		do_microrl();
 80005d2:	f7ff ff07 	bl	80003e4 <do_microrl>

		//erase everything... just in case
		clr_vfd();
 80005d6:	f002 fd69 	bl	80030ac <clr_vfd>

		// fill everything
		for (int j = 1; j < 15; j++) {
 80005da:	2301      	movs	r3, #1
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005de:	e03b      	b.n	8000658 <do_vfd_init+0x240>
			uint32_t temp = 1 << j;
 80005e0:	2201      	movs	r2, #1
 80005e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
			for (int i = 1; i < 11; i++) {
 80005ea:	2301      	movs	r3, #1
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80005ee:	e026      	b.n	800063e <do_vfd_init+0x226>
				for (int b = 0; b < 3; b++) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
 80005f4:	e01d      	b.n	8000632 <do_vfd_init+0x21a>
					vfd.arr2[i][b] |= (temp >> (b << 3)) & 0xFF;
 80005f6:	494d      	ldr	r1, [pc, #308]	; (800072c <do_vfd_init+0x314>)
 80005f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80005fa:	4613      	mov	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	18ca      	adds	r2, r1, r3
 8000602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000604:	4413      	add	r3, r2
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800060e:	fa21 f303 	lsr.w	r3, r1, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4313      	orrs	r3, r2
 8000616:	b2d8      	uxtb	r0, r3
 8000618:	4944      	ldr	r1, [pc, #272]	; (800072c <do_vfd_init+0x314>)
 800061a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800061c:	4613      	mov	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4413      	add	r3, r2
 8000622:	18ca      	adds	r2, r1, r3
 8000624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000626:	4413      	add	r3, r2
 8000628:	4602      	mov	r2, r0
 800062a:	701a      	strb	r2, [r3, #0]
				for (int b = 0; b < 3; b++) {
 800062c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800062e:	3301      	adds	r3, #1
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
 8000632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000634:	2b02      	cmp	r3, #2
 8000636:	ddde      	ble.n	80005f6 <do_vfd_init+0x1de>
			for (int i = 1; i < 11; i++) {
 8000638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800063a:	3301      	adds	r3, #1
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
 800063e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000640:	2b0a      	cmp	r3, #10
 8000642:	ddd5      	ble.n	80005f0 <do_vfd_init+0x1d8>
				}
			}
			vfd_update();
 8000644:	f7ff fea4 	bl	8000390 <vfd_update>
			HAL_Delay(100);
 8000648:	2064      	movs	r0, #100	; 0x64
 800064a:	f002 fe11 	bl	8003270 <HAL_Delay>
			do_microrl();
 800064e:	f7ff fec9 	bl	80003e4 <do_microrl>
		for (int j = 1; j < 15; j++) {
 8000652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000654:	3301      	adds	r3, #1
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800065a:	2b0e      	cmp	r3, #14
 800065c:	ddc0      	ble.n	80005e0 <do_vfd_init+0x1c8>
		}

		const uint8_t arr[][2] = {
 800065e:	4b35      	ldr	r3, [pc, #212]	; (8000734 <do_vfd_init+0x31c>)
 8000660:	1d3c      	adds	r4, r7, #4
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	682b      	ldr	r3, [r5, #0]
 8000672:	8023      	strh	r3, [r4, #0]
				{ 9, 16 },
				{ 10, 16 },
				{ 10, 15 },
		};

		for (int j = 0; j < sizeof(arr) / 2; j++) {
 8000674:	2300      	movs	r3, #0
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
 8000678:	e047      	b.n	800070a <do_vfd_init+0x2f2>
			for (int b = 0; b < 3; b++)
 800067a:	2300      	movs	r3, #0
 800067c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800067e:	e037      	b.n	80006f0 <do_vfd_init+0x2d8>
				vfd.arr2[arr[j][0]][b] |= ((1 << arr[j][1]) >> (b << 3)) & 0xFF;
 8000680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000688:	4413      	add	r3, r2
 800068a:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 800068e:	4619      	mov	r1, r3
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <do_vfd_init+0x314>)
 8000692:	460b      	mov	r3, r1
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	440b      	add	r3, r1
 8000698:	441a      	add	r2, r3
 800069a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800069c:	4413      	add	r3, r2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b25a      	sxtb	r2, r3
 80006a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006aa:	440b      	add	r3, r1
 80006ac:	f813 3c5b 	ldrb.w	r3, [r3, #-91]
 80006b0:	4619      	mov	r1, r3
 80006b2:	2301      	movs	r3, #1
 80006b4:	fa03 f101 	lsl.w	r1, r3, r1
 80006b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	fa41 f303 	asr.w	r3, r1, r3
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006ce:	440b      	add	r3, r1
 80006d0:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 80006d4:	4619      	mov	r1, r3
 80006d6:	b2d0      	uxtb	r0, r2
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <do_vfd_init+0x314>)
 80006da:	460b      	mov	r3, r1
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	440b      	add	r3, r1
 80006e0:	441a      	add	r2, r3
 80006e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e4:	4413      	add	r3, r2
 80006e6:	4602      	mov	r2, r0
 80006e8:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 80006ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ec:	3301      	adds	r3, #1
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	ddc4      	ble.n	8000680 <do_vfd_init+0x268>
			vfd_update();
 80006f6:	f7ff fe4b 	bl	8000390 <vfd_update>
			HAL_Delay(70);
 80006fa:	2046      	movs	r0, #70	; 0x46
 80006fc:	f002 fdb8 	bl	8003270 <HAL_Delay>
			do_microrl();
 8000700:	f7ff fe70 	bl	80003e4 <do_microrl>
		for (int j = 0; j < sizeof(arr) / 2; j++) {
 8000704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000706:	3301      	adds	r3, #1
 8000708:	643b      	str	r3, [r7, #64]	; 0x40
 800070a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800070c:	2b18      	cmp	r3, #24
 800070e:	d9b4      	bls.n	800067a <do_vfd_init+0x262>
		}

		HAL_Delay(300);
 8000710:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000714:	f002 fdac 	bl	8003270 <HAL_Delay>

		//erase everything... just in case
		clr_vfd();
 8000718:	f002 fcc8 	bl	80030ac <clr_vfd>

		vfd_update();
 800071c:	f7ff fe38 	bl	8000390 <vfd_update>
}
 8000720:	bf00      	nop
 8000722:	3760      	adds	r7, #96	; 0x60
 8000724:	46bd      	mov	sp, r7
 8000726:	bdb0      	pop	{r4, r5, r7, pc}
 8000728:	40010c00 	.word	0x40010c00
 800072c:	200005a4 	.word	0x200005a4
 8000730:	200004f8 	.word	0x200004f8
 8000734:	0800b684 	.word	0x0800b684

08000738 <do_brightness>:

void do_brightness(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
	uint8_t data;
	static uint32_t last_time = 0;
	if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))
 800073e:	2104      	movs	r1, #4
 8000740:	4841      	ldr	r0, [pc, #260]	; (8000848 <do_brightness+0x110>)
 8000742:	f003 f84b 	bl	80037dc <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d078      	beq.n	800083e <do_brightness+0x106>
	{
		// update only if pause shorter than 2 sec
		if (HAL_GetTick() - last_time < 2000)
 800074c:	f002 fd86 	bl	800325c <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <do_brightness+0x114>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800075c:	d210      	bcs.n	8000780 <do_brightness+0x48>
		{
		  brightness = (brightness - 1)&0b111;
 800075e:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <do_brightness+0x118>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	3b01      	subs	r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b38      	ldr	r3, [pc, #224]	; (8000850 <do_brightness+0x118>)
 800076e:	701a      	strb	r2, [r3, #0]
		  d3231_set_A2M2(0b111-brightness);
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <do_brightness+0x118>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	f1c3 0307 	rsb	r3, r3, #7
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fd56 	bl	800022c <d3231_set_A2M2>
		}
		last_time = HAL_GetTick();
 8000780:	f002 fd6c 	bl	800325c <HAL_GetTick>
 8000784:	4603      	mov	r3, r0
 8000786:	4a31      	ldr	r2, [pc, #196]	; (800084c <do_brightness+0x114>)
 8000788:	6013      	str	r3, [r2, #0]

	  save_vfd();
 800078a:	f002 fca9 	bl	80030e0 <save_vfd>
	  clr_vfd();
 800078e:	f002 fc8d 	bl	80030ac <clr_vfd>
	  uint32_t bits = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
	  for (int i = 2; i < 1 + 2 + brightness; i++)
 8000796:	2302      	movs	r3, #2
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	e00a      	b.n	80007b2 <do_brightness+0x7a>
		  bits |= 1<<i;
 800079c:	2201      	movs	r2, #1
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]
	  for (int i = 2; i < 1 + 2 + brightness; i++)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	3301      	adds	r3, #1
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b27      	ldr	r3, [pc, #156]	; (8000850 <do_brightness+0x118>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	3302      	adds	r3, #2
 80007b8:	68ba      	ldr	r2, [r7, #8]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	ddee      	ble.n	800079c <do_brightness+0x64>
	  symbols_vfd(bits);
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	f002 fbe4 	bl	8002f8c <symbols_vfd>
	  str2vfd("brightness");
 80007c4:	4823      	ldr	r0, [pc, #140]	; (8000854 <do_brightness+0x11c>)
 80007c6:	f002 fb5b 	bl	8002e80 <str2vfd>
	  vfd_update();
 80007ca:	f7ff fde1 	bl	8000390 <vfd_update>

	  data = 0b10000000; // command 4
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	71fb      	strb	r3, [r7, #7]
	  data |= 1<<3; // enable/disable display
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	71fb      	strb	r3, [r7, #7]
	  data |= brightness&0b111; // set brightness
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <do_brightness+0x118>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	4813      	ldr	r0, [pc, #76]	; (8000848 <do_brightness+0x110>)
 80007fc:	f003 f805 	bl	800380a <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000800:	1df9      	adds	r1, r7, #7
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	2201      	movs	r2, #1
 8000808:	4813      	ldr	r0, [pc, #76]	; (8000858 <do_brightness+0x120>)
 800080a:	f006 fa37 	bl	8006c7c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <do_brightness+0x110>)
 8000816:	f002 fff8 	bl	800380a <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 800081a:	2014      	movs	r0, #20
 800081c:	f002 fd28 	bl	8003270 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin)); // wait release
 8000820:	bf00      	nop
 8000822:	2104      	movs	r1, #4
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <do_brightness+0x110>)
 8000826:	f002 ffd9 	bl	80037dc <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f8      	bne.n	8000822 <do_brightness+0xea>
	  HAL_Delay(100);
 8000830:	2064      	movs	r0, #100	; 0x64
 8000832:	f002 fd1d 	bl	8003270 <HAL_Delay>
	  restore_vfd();
 8000836:	f002 fc73 	bl	8003120 <restore_vfd>
	  vfd_update();
 800083a:	f7ff fda9 	bl	8000390 <vfd_update>
	}
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40010c00 	.word	0x40010c00
 800084c:	200001ac 	.word	0x200001ac
 8000850:	200005c5 	.word	0x200005c5
 8000854:	0800b6b8 	.word	0x0800b6b8
 8000858:	200004f8 	.word	0x200004f8

0800085c <do_clock>:

void do_clock(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 50)
 8000862:	f002 fcfb 	bl	800325c <HAL_GetTick>
 8000866:	4602      	mov	r2, r0
 8000868:	4b46      	ldr	r3, [pc, #280]	; (8000984 <do_clock+0x128>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b31      	cmp	r3, #49	; 0x31
 8000870:	f240 8084 	bls.w	800097c <do_clock+0x120>
		return;
	last_time = HAL_GetTick();
 8000874:	f002 fcf2 	bl	800325c <HAL_GetTick>
 8000878:	4603      	mov	r3, r0
 800087a:	4a42      	ldr	r2, [pc, #264]	; (8000984 <do_clock+0x128>)
 800087c:	6013      	str	r3, [r2, #0]

	if (show_clock)
 800087e:	4b42      	ldr	r3, [pc, #264]	; (8000988 <do_clock+0x12c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d07b      	beq.n	800097e <do_clock+0x122>
		  {
			  uint8_t * time = d3231_get_time();
 8000886:	f7ff fc81 	bl	800018c <d3231_get_time>
 800088a:	60f8      	str	r0, [r7, #12]
			  uint8_t clock [4];

			  static uint8_t old_seconds = 0;
			  clock[0] = time[1] & 0xF;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	b2db      	uxtb	r3, r3
 8000898:	713b      	strb	r3, [r7, #4]
			  clock[1] = (time[1] >> 4) & 0xF;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	717b      	strb	r3, [r7, #5]
			  clock[2] = time[2] & 0xF;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3302      	adds	r3, #2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f003 030f 	and.w	r3, r3, #15
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	71bb      	strb	r3, [r7, #6]
			  clock[3] = (time[2] >> 4) & 0xF;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3302      	adds	r3, #2
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	091b      	lsrs	r3, r3, #4
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	71fb      	strb	r3, [r7, #7]

			  if (time[0] != old_seconds)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <do_clock+0x130>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d058      	beq.n	800097e <do_clock+0x122>
			  {
				  old_seconds = time[0];
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	4b2e      	ldr	r3, [pc, #184]	; (800098c <do_clock+0x130>)
 80008d2:	701a      	strb	r2, [r3, #0]

				  //erase everything...
				  clr_vfd();
 80008d4:	f002 fbea 	bl	80030ac <clr_vfd>


				  for (int i = 0; i < 4; i++)
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e024      	b.n	8000928 <do_clock+0xcc>
				  {
					  uint16_t buf = get_char(clock[i]);
 80008de:	1d3a      	adds	r2, r7, #4
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	4413      	add	r3, r2
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fa5e 	bl	8002da8 <get_char>
 80008ec:	4603      	mov	r3, r0
 80008ee:	817b      	strh	r3, [r7, #10]

					  vfd.arr2[4+i][0] = buf & 0xFF;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	1d1a      	adds	r2, r3, #4
 80008f4:	897b      	ldrh	r3, [r7, #10]
 80008f6:	b2d8      	uxtb	r0, r3
 80008f8:	4925      	ldr	r1, [pc, #148]	; (8000990 <do_clock+0x134>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	440b      	add	r3, r1
 8000902:	4602      	mov	r2, r0
 8000904:	701a      	strb	r2, [r3, #0]
					  vfd.arr2[4+i][1] = (buf>>8)&0xFF;
 8000906:	897b      	ldrh	r3, [r7, #10]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	b299      	uxth	r1, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	1d1a      	adds	r2, r3, #4
 8000910:	b2c8      	uxtb	r0, r1
 8000912:	491f      	ldr	r1, [pc, #124]	; (8000990 <do_clock+0x134>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	440b      	add	r3, r1
 800091c:	3301      	adds	r3, #1
 800091e:	4602      	mov	r2, r0
 8000920:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 4; i++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	2b03      	cmp	r3, #3
 800092c:	ddd7      	ble.n	80008de <do_clock+0x82>
				  }

				  if ((time[0]&0b1) == 0)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	2b00      	cmp	r3, #0
 8000938:	d11d      	bne.n	8000976 <do_clock+0x11a>
				  {
						for (int b = 0; b < 3; b++)
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	e017      	b.n	8000970 <do_clock+0x114>
						  vfd.arr2[6][b] |= ((1<<0)>>(b<<3))&0xFF;
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <do_clock+0x134>)
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4413      	add	r3, r2
 8000946:	3312      	adds	r3, #18
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b25a      	sxtb	r2, r3
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	2101      	movs	r1, #1
 8000952:	fa41 f303 	asr.w	r3, r1, r3
 8000956:	b25b      	sxtb	r3, r3
 8000958:	4313      	orrs	r3, r2
 800095a:	b25b      	sxtb	r3, r3
 800095c:	b2d9      	uxtb	r1, r3
 800095e:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <do_clock+0x134>)
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	4413      	add	r3, r2
 8000964:	3312      	adds	r3, #18
 8000966:	460a      	mov	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
						for (int b = 0; b < 3; b++)
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	3301      	adds	r3, #1
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	2b02      	cmp	r3, #2
 8000974:	dde4      	ble.n	8000940 <do_clock+0xe4>
				  }

				  vfd_update();
 8000976:	f7ff fd0b 	bl	8000390 <vfd_update>
 800097a:	e000      	b.n	800097e <do_clock+0x122>
		return;
 800097c:	bf00      	nop
			  }
		  }
}
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200001b0 	.word	0x200001b0
 8000988:	20000009 	.word	0x20000009
 800098c:	200001b4 	.word	0x200001b4
 8000990:	200005a4 	.word	0x200005a4

08000994 <do_leds>:

void do_leds(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	static uint8_t tick_counter = 0;
	if (HAL_GetTick() - last_time < 500)
 800099a:	f002 fc5f 	bl	800325c <HAL_GetTick>
 800099e:	4602      	mov	r2, r0
 80009a0:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <do_leds+0xe4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009aa:	d360      	bcc.n	8000a6e <do_leds+0xda>
		return;
	last_time = HAL_GetTick();
 80009ac:	f002 fc56 	bl	800325c <HAL_GetTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a31      	ldr	r2, [pc, #196]	; (8000a78 <do_leds+0xe4>)
 80009b4:	6013      	str	r3, [r2, #0]
	if (use_leds)
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <do_leds+0xe8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d032      	beq.n	8000a24 <do_leds+0x90>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80009be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c2:	482f      	ldr	r0, [pc, #188]	; (8000a80 <do_leds+0xec>)
 80009c4:	f002 ff39 	bl	800383a <HAL_GPIO_TogglePin>

		uint8_t data = 0b01000001; // command 2, write to LED port
 80009c8:	2341      	movs	r3, #65	; 0x41
 80009ca:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d2:	482c      	ldr	r0, [pc, #176]	; (8000a84 <do_leds+0xf0>)
 80009d4:	f002 ff19 	bl	800380a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80009d8:	1df9      	adds	r1, r7, #7
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	2201      	movs	r2, #1
 80009e0:	4829      	ldr	r0, [pc, #164]	; (8000a88 <do_leds+0xf4>)
 80009e2:	f006 f94b 	bl	8006c7c <HAL_SPI_Transmit>

		data = ~(1<<((tick_counter++ >> 1)&0b11));
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <do_leds+0xf8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	b2d1      	uxtb	r1, r2
 80009ee:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <do_leds+0xf8>)
 80009f0:	7011      	strb	r1, [r2, #0]
 80009f2:	085b      	lsrs	r3, r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f003 0303 	and.w	r3, r3, #3
 80009fa:	2201      	movs	r2, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	71fb      	strb	r3, [r7, #7]

		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000a08:	1df9      	adds	r1, r7, #7
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	2201      	movs	r2, #1
 8000a10:	481d      	ldr	r0, [pc, #116]	; (8000a88 <do_leds+0xf4>)
 8000a12:	f006 f933 	bl	8006c7c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1c:	4819      	ldr	r0, [pc, #100]	; (8000a84 <do_leds+0xf0>)
 8000a1e:	f002 fef4 	bl	800380a <HAL_GPIO_WritePin>
 8000a22:	e025      	b.n	8000a70 <do_leds+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <do_leds+0xec>)
 8000a2c:	f002 feed 	bl	800380a <HAL_GPIO_WritePin>
		uint8_t data = 0b01000001; // command 2, write to LED port
 8000a30:	2341      	movs	r3, #65	; 0x41
 8000a32:	71bb      	strb	r3, [r7, #6]
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3a:	4812      	ldr	r0, [pc, #72]	; (8000a84 <do_leds+0xf0>)
 8000a3c:	f002 fee5 	bl	800380a <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000a40:	1db9      	adds	r1, r7, #6
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	2201      	movs	r2, #1
 8000a48:	480f      	ldr	r0, [pc, #60]	; (8000a88 <do_leds+0xf4>)
 8000a4a:	f006 f917 	bl	8006c7c <HAL_SPI_Transmit>

		data = 0b1111; // disable all leds
 8000a4e:	230f      	movs	r3, #15
 8000a50:	71bb      	strb	r3, [r7, #6]

		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000a52:	1db9      	adds	r1, r7, #6
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	2201      	movs	r2, #1
 8000a5a:	480b      	ldr	r0, [pc, #44]	; (8000a88 <do_leds+0xf4>)
 8000a5c:	f006 f90e 	bl	8006c7c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <do_leds+0xf0>)
 8000a68:	f002 fecf 	bl	800380a <HAL_GPIO_WritePin>
 8000a6c:	e000      	b.n	8000a70 <do_leds+0xdc>
		return;
 8000a6e:	bf00      	nop
	}


}
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200001b8 	.word	0x200001b8
 8000a7c:	200001be 	.word	0x200001be
 8000a80:	40011000 	.word	0x40011000
 8000a84:	40010c00 	.word	0x40010c00
 8000a88:	200004f8 	.word	0x200004f8
 8000a8c:	200001bc 	.word	0x200001bc

08000a90 <do_temperature>:

void do_temperature(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
	uint16_t buf;
	// show temperature
	if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
 8000a96:	2102      	movs	r1, #2
 8000a98:	4842      	ldr	r0, [pc, #264]	; (8000ba4 <do_temperature+0x114>)
 8000a9a:	f002 fe9f 	bl	80037dc <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d07a      	beq.n	8000b9a <do_temperature+0x10a>
	{
	  //erase everything...
	  clr_vfd();
 8000aa4:	f002 fb02 	bl	80030ac <clr_vfd>

	  uint8_t td3231 = *d3231_get_temp();
 8000aa8:	f7ff fb88 	bl	80001bc <d3231_get_temp>
 8000aac:	4603      	mov	r3, r0
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	73fb      	strb	r3, [r7, #15]
	  uint8_t td [6];

	  td[0] = 'C';
 8000ab2:	2343      	movs	r3, #67	; 0x43
 8000ab4:	703b      	strb	r3, [r7, #0]
	  td[1] = 176; //°
 8000ab6:	23b0      	movs	r3, #176	; 0xb0
 8000ab8:	707b      	strb	r3, [r7, #1]
	  uint8_t i = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	73bb      	strb	r3, [r7, #14]
	  while (td3231)
 8000abe:	e019      	b.n	8000af4 <do_temperature+0x64>
	  {
		  td[i++] = td3231 %10;
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	73ba      	strb	r2, [r7, #14]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	7bfa      	ldrb	r2, [r7, #15]
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <do_temperature+0x118>)
 8000acc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ad0:	08d9      	lsrs	r1, r3, #3
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4403      	add	r3, r0
 8000ae4:	f803 2c10 	strb.w	r2, [r3, #-16]
		  td3231 /= 10;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <do_temperature+0x118>)
 8000aec:	fba2 2303 	umull	r2, r3, r2, r3
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	73fb      	strb	r3, [r7, #15]
	  while (td3231)
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1e2      	bne.n	8000ac0 <do_temperature+0x30>
	  }
	  if (i>2)
 8000afa:	7bbb      	ldrb	r3, [r7, #14]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d90c      	bls.n	8000b1a <do_temperature+0x8a>
		  td[i] = td3231&(1<<7)?'-':'+';
 8000b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	da01      	bge.n	8000b0c <do_temperature+0x7c>
 8000b08:	222d      	movs	r2, #45	; 0x2d
 8000b0a:	e000      	b.n	8000b0e <do_temperature+0x7e>
 8000b0c:	222b      	movs	r2, #43	; 0x2b
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
 8000b10:	f107 0110 	add.w	r1, r7, #16
 8000b14:	440b      	add	r3, r1
 8000b16:	f803 2c10 	strb.w	r2, [r3, #-16]

	  for (int j = 0; j <= i; j++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	e024      	b.n	8000b6a <do_temperature+0xda>
	  {
		  buf = get_char(td[j]);
 8000b20:	463a      	mov	r2, r7
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	4413      	add	r3, r2
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 f93d 	bl	8002da8 <get_char>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]

		  vfd.arr2[j+1][0] = buf & 0xFF;
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	b2d8      	uxtb	r0, r3
 8000b3a:	491c      	ldr	r1, [pc, #112]	; (8000bac <do_temperature+0x11c>)
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	4602      	mov	r2, r0
 8000b46:	701a      	strb	r2, [r3, #0]
		  vfd.arr2[j+1][1] = (buf>>8)&0xFF;
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	b299      	uxth	r1, r3
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	b2c8      	uxtb	r0, r1
 8000b54:	4915      	ldr	r1, [pc, #84]	; (8000bac <do_temperature+0x11c>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4602      	mov	r2, r0
 8000b62:	701a      	strb	r2, [r3, #0]
	  for (int j = 0; j <= i; j++)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3301      	adds	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	68ba      	ldr	r2, [r7, #8]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	ddd6      	ble.n	8000b20 <do_temperature+0x90>
	  }

	  vfd_update();
 8000b72:	f7ff fc0d 	bl	8000390 <vfd_update>
	  HAL_Delay(20);
 8000b76:	2014      	movs	r0, #20
 8000b78:	f002 fb7a 	bl	8003270 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)); // wait release
 8000b7c:	bf00      	nop
 8000b7e:	2102      	movs	r1, #2
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <do_temperature+0x114>)
 8000b82:	f002 fe2b 	bl	80037dc <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1f8      	bne.n	8000b7e <do_temperature+0xee>
	  HAL_Delay(1000);
 8000b8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b90:	f002 fb6e 	bl	8003270 <HAL_Delay>
	  show_clock = true;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <do_temperature+0x120>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	cccccccd 	.word	0xcccccccd
 8000bac:	200005a4 	.word	0x200005a4
 8000bb0:	20000009 	.word	0x20000009

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bba:	f002 faf7 	bl	80031ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbe:	f000 f85b 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc2:	f000 f919 	bl	8000df8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bc6:	f000 f8b3 	bl	8000d30 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000bca:	f000 f8df 	bl	8000d8c <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000bce:	f00a f833 	bl	800ac38 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, 1); // we have initialized USB, pull it up!
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd8:	4822      	ldr	r0, [pc, #136]	; (8000c64 <main+0xb0>)
 8000bda:	f002 fe16 	bl	800380a <HAL_GPIO_WritePin>
  d3231_init(&hi2c1);
 8000bde:	4822      	ldr	r0, [pc, #136]	; (8000c68 <main+0xb4>)
 8000be0:	f7ff fac6 	bl	8000170 <d3231_init>
  init_microrl(); // we are ready for microrl!
 8000be4:	f001 fd90 	bl	8002708 <init_microrl>

  do_vfd_init(); // nice demo
 8000be8:	f7ff fc16 	bl	8000418 <do_vfd_init>

	d3231_get_all();
 8000bec:	f7ff fafe 	bl	80001ec <d3231_get_all>

	brightness = 0b111-d3231_get_A2M2(); // alarm2 minutes as EEPROM, default max
 8000bf0:	f7ff fb14 	bl	800021c <d3231_get_A2M2>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <main+0xb8>)
 8000bfe:	701a      	strb	r2, [r3, #0]

	uint8_t data;

	data = 0b10000000; // command 4
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	71fb      	strb	r3, [r7, #7]
	data |= 1<<3; // enable/disable display
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	71fb      	strb	r3, [r7, #7]
	data |= brightness&0b111; // set brightness
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <main+0xb8>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	b25a      	sxtb	r2, r3
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <main+0xbc>)
 8000c2e:	f002 fdec 	bl	800380a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000c32:	1df9      	adds	r1, r7, #7
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
 8000c38:	2201      	movs	r2, #1
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <main+0xc0>)
 8000c3c:	f006 f81e 	bl	8006c7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <main+0xbc>)
 8000c48:	f002 fddf 	bl	800380a <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do_microrl();
 8000c4c:	f7ff fbca 	bl	80003e4 <do_microrl>
	  do_brightness();
 8000c50:	f7ff fd72 	bl	8000738 <do_brightness>
	  do_clock();
 8000c54:	f7ff fe02 	bl	800085c <do_clock>
	  do_leds();
 8000c58:	f7ff fe9c 	bl	8000994 <do_leds>
	  do_temperature();
 8000c5c:	f7ff ff18 	bl	8000a90 <do_temperature>
	  do_microrl();
 8000c60:	e7f4      	b.n	8000c4c <main+0x98>
 8000c62:	bf00      	nop
 8000c64:	40010800 	.word	0x40010800
 8000c68:	20000550 	.word	0x20000550
 8000c6c:	200005c5 	.word	0x200005c5
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	200004f8 	.word	0x200004f8

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	; 0x50
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c82:	2228      	movs	r2, #40	; 0x28
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00a fcd0 	bl	800b62c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cc6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 fa91 	bl	80061f8 <HAL_RCC_OscConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000cdc:	f000 f922 	bl	8000f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f005 fcfb 	bl	80066f8 <HAL_RCC_ClockConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d08:	f000 f90c 	bl	8000f24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f005 fe76 	bl	8006a08 <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d22:	f000 f8ff 	bl	8000f24 <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	; 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d36:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <MX_I2C1_Init+0x54>)
 8000d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <MX_I2C1_Init+0x58>)
 8000d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d6e:	f002 fd7d 	bl	800386c <HAL_I2C_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d78:	f000 f8d4 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000550 	.word	0x20000550
 8000d84:	40005400 	.word	0x40005400
 8000d88:	000186a0 	.word	0x000186a0

08000d8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000d92:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dc0:	2218      	movs	r2, #24
 8000dc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dd8:	220a      	movs	r2, #10
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dde:	f005 fec9 	bl	8006b74 <HAL_SPI_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000de8:	f000 f89c 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200004f8 	.word	0x200004f8
 8000df4:	40003800 	.word	0x40003800

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0c:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a40      	ldr	r2, [pc, #256]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e24:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a3a      	ldr	r2, [pc, #232]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e2a:	f043 0320 	orr.w	r3, r3, #32
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0320 	and.w	r3, r3, #32
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a34      	ldr	r2, [pc, #208]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e42:	f043 0308 	orr.w	r3, r3, #8
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0308 	and.w	r3, r3, #8
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a2e      	ldr	r2, [pc, #184]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <MX_GPIO_Init+0x11c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e72:	4829      	ldr	r0, [pc, #164]	; (8000f18 <MX_GPIO_Init+0x120>)
 8000e74:	f002 fcc9 	bl	800380a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|PT6315_STB_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8000e7e:	4827      	ldr	r0, [pc, #156]	; (8000f1c <MX_GPIO_Init+0x124>)
 8000e80:	f002 fcc3 	bl	800380a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8a:	4825      	ldr	r0, [pc, #148]	; (8000f20 <MX_GPIO_Init+0x128>)
 8000e8c:	f002 fcbd 	bl	800380a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2120      	movs	r1, #32
 8000e94:	4821      	ldr	r0, [pc, #132]	; (8000f1c <MX_GPIO_Init+0x124>)
 8000e96:	f002 fcb8 	bl	800380a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4819      	ldr	r0, [pc, #100]	; (8000f18 <MX_GPIO_Init+0x120>)
 8000eb4:	f002 fb0e 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_Pin PB2_Pin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 8000eb8:	2306      	movs	r3, #6
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4814      	ldr	r0, [pc, #80]	; (8000f1c <MX_GPIO_Init+0x124>)
 8000ecc:	f002 fb02 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nRF_CSn_Pin HV_EN_Pin PT6315_STB_Pin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000ed0:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <MX_GPIO_Init+0x124>)
 8000eea:	f002 faf3 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PU_Pin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <MX_GPIO_Init+0x128>)
 8000f08:	f002 fae4 	bl	80034d4 <HAL_GPIO_Init>

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	40010800 	.word	0x40010800

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>

08000f2e <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	5c8a      	ldrb	r2, [r1, r2]
 8000f42:	4413      	add	r3, r2
 8000f44:	3301      	adds	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f4c:	dd02      	ble.n	8000f54 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3b40      	subs	r3, #64	; 0x40
 8000f52:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	5cd3      	ldrb	r3, [r2, r3]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <hist_is_space_for_new+0x1a>
		return true;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e01e      	b.n	8000fbc <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	429a      	cmp	r2, r3
 8000f88:	db0c      	blt.n	8000fa4 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4413      	add	r3, r2
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	da0c      	bge.n	8000fba <hist_is_space_for_new+0x56>
			return true;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e00b      	b.n	8000fbc <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	da01      	bge.n	8000fba <hist_is_space_for_new+0x56>
			return true;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <hist_is_space_for_new+0x58>
	}
	return false;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b3e      	cmp	r3, #62	; 0x3e
 8000fd6:	dc61      	bgt.n	800109c <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000fd8:	e002      	b.n	8000fe0 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff ffa7 	bl	8000f2e <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f7ff ffbe 	bl	8000f64 <hist_is_space_for_new>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f5      	beq.n	8000fda <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	5cd3      	ldrb	r3, [r2, r3]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d105      	bne.n	8001006 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	b2d1      	uxtb	r1, r2
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	da0a      	bge.n	800102a <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	3301      	adds	r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	4618      	mov	r0, r3
 8001024:	f00a fada 	bl	800b5dc <memcpy>
 8001028:	e018      	b.n	800105c <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001032:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	3301      	adds	r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	4618      	mov	r0, r3
 8001044:	f00a faca 	bl	800b5dc <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	18d1      	adds	r1, r2, r3
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	461a      	mov	r2, r3
 8001058:	f00a fac0 	bl	800b5dc <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	b2d1      	uxtb	r1, r2
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	2b3f      	cmp	r3, #63	; 0x3f
 800107c:	dd05      	ble.n	800108a <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	2100      	movs	r1, #0
 8001092:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	649a      	str	r2, [r3, #72]	; 0x48
 800109a:	e000      	b.n	800109e <hist_save_line+0xd8>
		return;
 800109c:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 80010ba:	e010      	b.n	80010de <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010c8:	4413      	add	r3, r2
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 80010cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ce:	2b3f      	cmp	r3, #63	; 0x3f
 80010d0:	dd02      	ble.n	80010d8 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	3b40      	subs	r3, #64	; 0x40
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 80010d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010da:	3301      	adds	r3, #1
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1e8      	bne.n	80010bc <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d176      	bne.n	80011de <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010f6:	429a      	cmp	r2, r3
 80010f8:	f2c0 80d6 	blt.w	80012a8 <hist_restore_line+0x204>
			int header = pThis->begin;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8001106:	e010      	b.n	800112a <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001114:	4413      	add	r3, r2
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	2b3f      	cmp	r3, #63	; 0x3f
 800111c:	dd02      	ble.n	8001124 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	3b40      	subs	r3, #64	; 0x40
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	3301      	adds	r3, #1
 8001128:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <hist_restore_line+0xa2>
 8001136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	1e5a      	subs	r2, r3, #1
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001142:	429a      	cmp	r2, r3
 8001144:	d1e0      	bne.n	8001108 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80aa 	beq.w	80012a8 <hist_restore_line+0x204>
					pThis->cur++;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	4413      	add	r3, r2
 800116c:	2b3f      	cmp	r3, #63	; 0x3f
 800116e:	dc11      	bgt.n	8001194 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8001170:	2233      	movs	r2, #51	; 0x33
 8001172:	2100      	movs	r1, #0
 8001174:	68b8      	ldr	r0, [r7, #8]
 8001176:	f00a fa59 	bl	800b62c <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	3301      	adds	r3, #1
 8001180:	18d1      	adds	r1, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	4413      	add	r3, r2
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68b8      	ldr	r0, [r7, #8]
 800118e:	f00a fa25 	bl	800b5dc <memcpy>
 8001192:	e01f      	b.n	80011d4 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800119a:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 800119c:	2233      	movs	r2, #51	; 0x33
 800119e:	2100      	movs	r1, #0
 80011a0:	68b8      	ldr	r0, [r7, #8]
 80011a2:	f00a fa43 	bl	800b62c <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	3301      	adds	r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4619      	mov	r1, r3
 80011b2:	68b8      	ldr	r0, [r7, #8]
 80011b4:	f00a fa12 	bl	800b5dc <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	18d0      	adds	r0, r2, r3
 80011be:	68f9      	ldr	r1, [r7, #12]
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	4413      	add	r3, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	f00a fa04 	bl	800b5dc <memcpy>
				}
				return pThis->ring_buf[header];
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	e066      	b.n	80012ac <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	dd5e      	ble.n	80012a4 <hist_restore_line+0x200>
				pThis->cur--;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	61fb      	str	r3, [r7, #28]
			int j = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 80011fa:	e010      	b.n	800121e <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	4413      	add	r3, r2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4413      	add	r3, r2
 800120a:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	2b3f      	cmp	r3, #63	; 0x3f
 8001210:	dd02      	ble.n	8001218 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b40      	subs	r3, #64	; 0x40
 8001216:	61fb      	str	r3, [r7, #28]
				j++;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	3301      	adds	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <hist_restore_line+0x194>
 800122a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001234:	429a      	cmp	r2, r3
 8001236:	d1e1      	bne.n	80011fc <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	4413      	add	r3, r2
 8001246:	2b3f      	cmp	r3, #63	; 0x3f
 8001248:	dc0c      	bgt.n	8001264 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3301      	adds	r3, #1
 8001250:	18d1      	adds	r1, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68b8      	ldr	r0, [r7, #8]
 800125e:	f00a f9bd 	bl	800b5dc <memcpy>
 8001262:	e01a      	b.n	800129a <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800126a:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3301      	adds	r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4619      	mov	r1, r3
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f00a f9af 	bl	800b5dc <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	18d0      	adds	r0, r2, r3
 8001284:	68f9      	ldr	r1, [r7, #12]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	461a      	mov	r2, r3
 8001296:	f00a f9a1 	bl	800b5dc <memcpy>
			}
			return pThis->ring_buf[header];
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	e003      	b.n	80012ac <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e001      	b.n	80012ac <hist_restore_line+0x208>
		}
	}
	return -1;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3730      	adds	r7, #48	; 0x30
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
	int i = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
	int ind = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80012c8:	e002      	b.n	80012d0 <split+0x1c>
			ind++;
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	3301      	adds	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4413      	add	r3, r2
 80012d6:	3354      	adds	r3, #84	; 0x54
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d103      	bne.n	80012e6 <split+0x32>
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dbf1      	blt.n	80012ca <split+0x16>
		}
		if (!(ind < limit)) return i;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	db01      	blt.n	80012f2 <split+0x3e>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	e024      	b.n	800133c <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	1c58      	adds	r0, r3, #1
 80012fe:	6178      	str	r0, [r7, #20]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4403      	add	r3, r0
 8001306:	440a      	add	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2b04      	cmp	r3, #4
 800130e:	dd05      	ble.n	800131c <split+0x68>
			return -1;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	e012      	b.n	800133c <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	3301      	adds	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4413      	add	r3, r2
 8001322:	3354      	adds	r3, #84	; 0x54
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <split+0x7e>
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	429a      	cmp	r2, r3
 8001330:	dbf1      	blt.n	8001316 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	429a      	cmp	r2, r3
 8001338:	dbca      	blt.n	80012d0 <split+0x1c>
 800133a:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 800133c:	4618      	mov	r0, r3
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001358:	4610      	mov	r0, r2
 800135a:	4798      	blx	r3
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <terminal_backspace+0x1c>)
 8001374:	4798      	blx	r3
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	0800b6d4 	.word	0x0800b6d4

08001384 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <terminal_newline+0x1c>)
 8001394:	4798      	blx	r3
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	0800b6dc 	.word	0x0800b6dc

080013a4 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	2300      	movs	r3, #0
 80013b4:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d235      	bcs.n	800142e <u16bit_to_str+0x8a>
		while (nmb > 0) {
 80013c2:	e01a      	b.n	80013fa <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <u16bit_to_str+0x9c>)
 80013c8:	fba3 2301 	umull	r2, r3, r3, r1
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	1aca      	subs	r2, r1, r3
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	1c59      	adds	r1, r3, #1
 80013de:	6179      	str	r1, [r7, #20]
 80013e0:	3230      	adds	r2, #48	; 0x30
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	f107 0118 	add.w	r1, r7, #24
 80013e8:	440b      	add	r3, r1
 80013ea:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a13      	ldr	r2, [pc, #76]	; (8001440 <u16bit_to_str+0x9c>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e1      	bne.n	80013c4 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	e00f      	b.n	8001426 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	1e5a      	subs	r2, r3, #1
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	1c59      	adds	r1, r3, #1
 8001412:	6039      	str	r1, [r7, #0]
 8001414:	f107 0118 	add.w	r1, r7, #24
 8001418:	440a      	add	r2, r1
 800141a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800141e:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	3301      	adds	r3, #1
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	429a      	cmp	r2, r3
 800142c:	dbeb      	blt.n	8001406 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
	return buf;
 8001434:	683b      	ldr	r3, [r7, #0]
}
 8001436:	4618      	mov	r0, r3
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	cccccccd 	.word	0xcccccccd

08001444 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <terminal_move_cursor+0x94>)
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	4611      	mov	r1, r2
 8001468:	8019      	strh	r1, [r3, #0]
 800146a:	3302      	adds	r3, #2
 800146c:	0c12      	lsrs	r2, r2, #16
 800146e:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	dd0f      	ble.n	8001496 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	3302      	adds	r3, #2
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f7ff ff8f 	bl	80013a4 <u16bit_to_str>
 8001486:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4914      	ldr	r1, [pc, #80]	; (80014dc <terminal_move_cursor+0x98>)
 800148c:	461a      	mov	r2, r3
 800148e:	460b      	mov	r3, r1
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	8013      	strh	r3, [r2, #0]
 8001494:	e013      	b.n	80014be <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da18      	bge.n	80014ce <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	425b      	negs	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	3302      	adds	r3, #2
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f7ff ff7a 	bl	80013a4 <u16bit_to_str>
 80014b0:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	490a      	ldr	r1, [pc, #40]	; (80014e0 <terminal_move_cursor+0x9c>)
 80014b6:	461a      	mov	r2, r3
 80014b8:	460b      	mov	r3, r1
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014c4:	f107 020c 	add.w	r2, r7, #12
 80014c8:	4610      	mov	r0, r2
 80014ca:	4798      	blx	r3
 80014cc:	e000      	b.n	80014d0 <terminal_move_cursor+0x8c>
		return;
 80014ce:	bf00      	nop
}
 80014d0:	3720      	adds	r7, #32
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	0800b6e0 	.word	0x0800b6e0
 80014dc:	0800b6e4 	.word	0x0800b6e4
 80014e0:	0800b6e8 	.word	0x0800b6e8

080014e4 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	4a15      	ldr	r2, [pc, #84]	; (8001548 <terminal_reset_cursor+0x64>)
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	8019      	strh	r1, [r3, #0]
 80014f8:	3302      	adds	r3, #2
 80014fa:	0c12      	lsrs	r2, r2, #16
 80014fc:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	3302      	adds	r3, #2
 8001504:	4619      	mov	r1, r3
 8001506:	203a      	movs	r0, #58	; 0x3a
 8001508:	f7ff ff4c 	bl	80013a4 <u16bit_to_str>
 800150c:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <terminal_reset_cursor+0x68>)
 8001512:	6810      	ldr	r0, [r2, #0]
 8001514:	6018      	str	r0, [r3, #0]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3303      	adds	r3, #3
 800151a:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 800151c:	69f9      	ldr	r1, [r7, #28]
 800151e:	2005      	movs	r0, #5
 8001520:	f7ff ff40 	bl	80013a4 <u16bit_to_str>
 8001524:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4909      	ldr	r1, [pc, #36]	; (8001550 <terminal_reset_cursor+0x6c>)
 800152a:	461a      	mov	r2, r3
 800152c:	460b      	mov	r3, r1
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001538:	f107 020c 	add.w	r2, r7, #12
 800153c:	4610      	mov	r0, r2
 800153e:	4798      	blx	r3
}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	0800b6e0 	.word	0x0800b6e0
 800154c:	0800b6ec 	.word	0x0800b6ec
 8001550:	0800b6e4 	.word	0x0800b6e4

08001554 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001566:	4816      	ldr	r0, [pc, #88]	; (80015c0 <terminal_print_line+0x6c>)
 8001568:	4798      	blx	r3

	char nch [] = {0,0};
 800156a:	2300      	movs	r3, #0
 800156c:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e014      	b.n	800159e <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	4413      	add	r3, r2
 800157a:	3354      	adds	r3, #84	; 0x54
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8001580:	7c3b      	ldrb	r3, [r7, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <terminal_print_line+0x36>
			nch[0] = ' ';
 8001586:	2320      	movs	r3, #32
 8001588:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	4610      	mov	r0, r2
 8001596:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbe4      	blt.n	8001574 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7ff ff9a 	bl	80014e4 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff ff46 	bl	8001444 <terminal_move_cursor>
}
 80015b8:	bf00      	nop
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	0800b6f0 	.word	0x0800b6f0

080015c4 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3354      	adds	r3, #84	; 0x54
 80015d2:	2233      	movs	r2, #51	; 0x33
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00a f828 	bl	800b62c <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3304      	adds	r3, #4
 80015e0:	2240      	movs	r2, #64	; 0x40
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00a f821 	bl	800b62c <memset>
	pThis->ring_hist.begin = 0;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <microrl_init+0x78>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000

08001640 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	1d18      	adds	r0, r3, #4
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3354      	adds	r3, #84	; 0x54
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff fcfb 	bl	80010a4 <hist_restore_line>
 80016ae:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db1a      	blt.n	80016ec <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	3354      	adds	r3, #84	; 0x54
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ff04 	bl	80014e4 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e2:	461a      	mov	r2, r3
 80016e4:	2100      	movs	r1, #0
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff34 	bl	8001554 <terminal_print_line>
	}
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	2b5b      	cmp	r3, #91	; 0x5b
 8001704:	d104      	bne.n	8001710 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
		return 0;
 800170c:	2300      	movs	r3, #0
 800170e:	e07b      	b.n	8001808 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d14f      	bne.n	80017b8 <escape_process+0xc4>
		if (ch == 'A') {
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	2b41      	cmp	r3, #65	; 0x41
 800171c:	d105      	bne.n	800172a <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 800171e:	2100      	movs	r1, #0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ffb7 	bl	8001694 <hist_search>
#endif
			return 1;
 8001726:	2301      	movs	r3, #1
 8001728:	e06e      	b.n	8001808 <escape_process+0x114>
		} else if (ch == 'B') {
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	2b42      	cmp	r3, #66	; 0x42
 800172e:	d105      	bne.n	800173c <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8001730:	2101      	movs	r1, #1
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffae 	bl	8001694 <hist_search>
#endif
			return 1;
 8001738:	2301      	movs	r3, #1
 800173a:	e065      	b.n	8001808 <escape_process+0x114>
		} else if (ch == 'C') {
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	2b43      	cmp	r3, #67	; 0x43
 8001740:	d114      	bne.n	800176c <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	429a      	cmp	r2, r3
 8001750:	da0a      	bge.n	8001768 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8001752:	2101      	movs	r1, #1
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fe75 	bl	8001444 <terminal_move_cursor>
				pThis->cursor++;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001768:	2301      	movs	r3, #1
 800176a:	e04d      	b.n	8001808 <escape_process+0x114>
		} else if (ch == 'D') {
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	2b44      	cmp	r3, #68	; 0x44
 8001770:	d112      	bne.n	8001798 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001778:	2b00      	cmp	r3, #0
 800177a:	dd0b      	ble.n	8001794 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fe5f 	bl	8001444 <terminal_move_cursor>
				pThis->cursor--;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800178c:	1e5a      	subs	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001794:	2301      	movs	r3, #1
 8001796:	e037      	b.n	8001808 <escape_process+0x114>
		} else if (ch == '7') {
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	2b37      	cmp	r3, #55	; 0x37
 800179c:	d104      	bne.n	80017a8 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2202      	movs	r2, #2
 80017a2:	701a      	strb	r2, [r3, #0]
			return 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e02f      	b.n	8001808 <escape_process+0x114>
		} else if (ch == '8') {
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	2b38      	cmp	r3, #56	; 0x38
 80017ac:	d12b      	bne.n	8001806 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	701a      	strb	r2, [r3, #0]
			return 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e027      	b.n	8001808 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b7e      	cmp	r3, #126	; 0x7e
 80017bc:	d123      	bne.n	8001806 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d108      	bne.n	80017d8 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fe8c 	bl	80014e4 <terminal_reset_cursor>
			pThis->cursor = 0;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e017      	b.n	8001808 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d112      	bne.n	8001806 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fe27 	bl	8001444 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	2b32      	cmp	r3, #50	; 0x32
 8001828:	dc60      	bgt.n	80018ec <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001836:	4619      	mov	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	440b      	add	r3, r1
 800183c:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3354      	adds	r3, #84	; 0x54
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 8001848:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001856:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001858:	461a      	mov	r2, r3
 800185a:	f009 fecd 	bl	800b5f8 <memmove>
		for (i = 0; i < len; i++) {
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	e025      	b.n	80018b0 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	441a      	add	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	440b      	add	r3, r1
 8001874:	7811      	ldrb	r1, [r2, #0]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	460a      	mov	r2, r1
 800187c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	4413      	add	r3, r2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001892:	2b20      	cmp	r3, #32
 8001894:	d109      	bne.n	80018aa <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	4413      	add	r3, r2
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbd5      	blt.n	8001864 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	441a      	add	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	441a      	add	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <microrl_insert_text+0xde>
	}
	return false;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001904:	2b00      	cmp	r3, #0
 8001906:	dd31      	ble.n	800196c <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff fd2b 	bl	8001364 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800191a:	3b01      	subs	r3, #1
 800191c:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3354      	adds	r3, #84	; 0x54
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 8001928:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 800193a:	461a      	mov	r2, r3
 800193c:	f009 fe5c 	bl	800b5f8 <memmove>
		pThis->cursor--;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001946:	1e5a      	subs	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7fe fbec 	bl	8000160 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e019      	b.n	80019c6 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fbdf 	bl	8000160 <strlen>
 80019a2:	4602      	mov	r2, r0
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d20a      	bcs.n	80019c0 <common_len+0x4c>
			shortest = arr[i];
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f7fe fbd2 	bl	8000160 <strlen>
 80019bc:	4603      	mov	r3, r0
 80019be:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1de      	bne.n	8001992 <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e01f      	b.n	8001a1a <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e012      	b.n	8001a06 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	440b      	add	r3, r1
 80019f0:	6819      	ldr	r1, [r3, #0]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	440b      	add	r3, r1
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <common_len+0x8c>
				return i;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	e011      	b.n	8001a24 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	3301      	adds	r3, #1
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1e5      	bne.n	80019e0 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	dbdb      	blt.n	80019da <common_len+0x66>

	return i;
 8001a22:	697b      	ldr	r3, [r7, #20]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	b08c      	sub	sp, #48	; 0x30
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 809c 	beq.w	8001b78 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a46:	f107 020c 	add.w	r2, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fc31 	bl	80012b4 <split>
 8001a52:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a74:	4413      	add	r3, r2
 8001a76:	4a42      	ldr	r2, [pc, #264]	; (8001b80 <microrl_get_complite+0x154>)
 8001a78:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	f107 020c 	add.w	r2, r7, #12
 8001a86:	4611      	mov	r1, r2
 8001a88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a8a:	4798      	blx	r3
 8001a8c:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d071      	beq.n	8001b7a <microrl_get_complite+0x14e>
		int i = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d107      	bne.n	8001ab4 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fb59 	bl	8000160 <strlen>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	e026      	b.n	8001b02 <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001ab4:	6a38      	ldr	r0, [r7, #32]
 8001ab6:	f7ff ff5d 	bl	8001974 <common_len>
 8001aba:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fc61 	bl	8001384 <terminal_newline>
			while (compl_token [i] != NULL) {
 8001ac2:	e011      	b.n	8001ae8 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	6a39      	ldr	r1, [r7, #32]
 8001ad0:	440a      	add	r2, r1
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4798      	blx	r3
				pThis->print (" ");
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ade:	4829      	ldr	r0, [pc, #164]	; (8001b84 <microrl_get_complite+0x158>)
 8001ae0:	4798      	blx	r3
				i++;
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	6a3a      	ldr	r2, [r7, #32]
 8001aee:	4413      	add	r3, r2
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1e6      	bne.n	8001ac4 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fc44 	bl	8001384 <terminal_newline>
			print_prompt (pThis);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fc22 	bl	8001346 <print_prompt>
		}
		
		if (len) {
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d02b      	beq.n	8001b60 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	681c      	ldr	r4, [r3, #0]
 8001b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b16:	4413      	add	r3, r2
 8001b18:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fb1f 	bl	8000160 <strlen>
 8001b22:	4603      	mov	r3, r0
 8001b24:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001b26:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b32:	4413      	add	r3, r2
 8001b34:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fb11 	bl	8000160 <strlen>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001b42:	461a      	mov	r2, r3
 8001b44:	4629      	mov	r1, r5
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fe62 	bl	8001810 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d104      	bne.n	8001b60 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001b56:	2201      	movs	r2, #1
 8001b58:	490a      	ldr	r1, [pc, #40]	; (8001b84 <microrl_get_complite+0x158>)
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fe58 	bl	8001810 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fcbf 	bl	80014e4 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2100      	movs	r1, #0
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fcef 	bl	8001554 <terminal_print_line>
 8001b76:	e000      	b.n	8001b7a <microrl_get_complite+0x14e>
		return;
 8001b78:	bf00      	nop
	} 
}
 8001b7a:	3730      	adds	r7, #48	; 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b80:	0800b6f4 	.word	0x0800b6f4
 8001b84:	0800b6f8 	.word	0x0800b6f8

08001b88 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fbf7 	bl	8001384 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	dd0a      	ble.n	8001bb6 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	1d18      	adds	r0, r3, #4
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f7ff fa08 	bl	8000fc6 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbc:	f107 0208 	add.w	r2, r7, #8
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fb76 	bl	80012b4 <split>
 8001bc8:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d109      	bne.n	8001be6 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bd8:	4817      	ldr	r0, [pc, #92]	; (8001c38 <new_line_handler+0xb0>)
 8001bda:	4798      	blx	r3
		pThis->print (ENDL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be2:	4816      	ldr	r0, [pc, #88]	; (8001c3c <new_line_handler+0xb4>)
 8001be4:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	dd0c      	ble.n	8001c06 <new_line_handler+0x7e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	f107 0208 	add.w	r2, r7, #8
 8001c00:	4611      	mov	r1, r2
 8001c02:	69f8      	ldr	r0, [r7, #28]
 8001c04:	4798      	blx	r3
	print_prompt (pThis);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fb9d 	bl	8001346 <print_prompt>
	pThis->cmdlen = 0;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3354      	adds	r3, #84	; 0x54
 8001c20:	2233      	movs	r2, #51	; 0x33
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f009 fd01 	bl	800b62c <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001c30:	bf00      	nop
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	0800b6fc 	.word	0x0800b6fc
 8001c3c:	0800b6dc 	.word	0x0800b6dc

08001c40 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00d      	beq.n	8001c6e <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4619      	mov	r1, r3
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fd4b 	bl	80016f4 <escape_process>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 81e3 	beq.w	800202c <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001c6c:	e1de      	b.n	800202c <microrl_insert_char+0x3ec>
		switch (ch) {
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	2b7e      	cmp	r3, #126	; 0x7e
 8001c74:	f200 81af 	bhi.w	8001fd6 <microrl_insert_char+0x396>
 8001c78:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <microrl_insert_char+0x40>)
 8001c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7e:	bf00      	nop
 8001c80:	08001f13 	.word	0x08001f13
 8001c84:	08001f4b 	.word	0x08001f4b
 8001c88:	08001fc3 	.word	0x08001fc3
 8001c8c:	08001fd7 	.word	0x08001fd7
 8001c90:	08001eef 	.word	0x08001eef
 8001c94:	08001f23 	.word	0x08001f23
 8001c98:	08001fd7 	.word	0x08001fd7
 8001c9c:	08001f83 	.word	0x08001f83
 8001ca0:	08001ea5 	.word	0x08001ea5
 8001ca4:	08001e7d 	.word	0x08001e7d
 8001ca8:	08001ed7 	.word	0x08001ed7
 8001cac:	08001fd7 	.word	0x08001fd7
 8001cb0:	08001e7d 	.word	0x08001e7d
 8001cb4:	08001f79 	.word	0x08001f79
 8001cb8:	08001fd7 	.word	0x08001fd7
 8001cbc:	08001f6f 	.word	0x08001f6f
 8001cc0:	08001fd7 	.word	0x08001fd7
 8001cc4:	08001f9f 	.word	0x08001f9f
 8001cc8:	08001fd7 	.word	0x08001fd7
 8001ccc:	08001fd7 	.word	0x08001fd7
 8001cd0:	08001ebb 	.word	0x08001ebb
 8001cd4:	08001fd7 	.word	0x08001fd7
 8001cd8:	08001fd7 	.word	0x08001fd7
 8001cdc:	08001fd7 	.word	0x08001fd7
 8001ce0:	08001fd7 	.word	0x08001fd7
 8001ce4:	08001fd7 	.word	0x08001fd7
 8001ce8:	08001ead 	.word	0x08001ead
 8001cec:	08001fd7 	.word	0x08001fd7
 8001cf0:	08001fd7 	.word	0x08001fd7
 8001cf4:	08001fd7 	.word	0x08001fd7
 8001cf8:	08001fd7 	.word	0x08001fd7
 8001cfc:	08001fd7 	.word	0x08001fd7
 8001d00:	08001fd7 	.word	0x08001fd7
 8001d04:	08001fd7 	.word	0x08001fd7
 8001d08:	08001fd7 	.word	0x08001fd7
 8001d0c:	08001fd7 	.word	0x08001fd7
 8001d10:	08001fd7 	.word	0x08001fd7
 8001d14:	08001fd7 	.word	0x08001fd7
 8001d18:	08001fd7 	.word	0x08001fd7
 8001d1c:	08001fd7 	.word	0x08001fd7
 8001d20:	08001fd7 	.word	0x08001fd7
 8001d24:	08001fd7 	.word	0x08001fd7
 8001d28:	08001fd7 	.word	0x08001fd7
 8001d2c:	08001fd7 	.word	0x08001fd7
 8001d30:	08001fd7 	.word	0x08001fd7
 8001d34:	08001fd7 	.word	0x08001fd7
 8001d38:	08001fd7 	.word	0x08001fd7
 8001d3c:	08001fd7 	.word	0x08001fd7
 8001d40:	08001fd7 	.word	0x08001fd7
 8001d44:	08001fd7 	.word	0x08001fd7
 8001d48:	08001fd7 	.word	0x08001fd7
 8001d4c:	08001fd7 	.word	0x08001fd7
 8001d50:	08001fd7 	.word	0x08001fd7
 8001d54:	08001fd7 	.word	0x08001fd7
 8001d58:	08001fd7 	.word	0x08001fd7
 8001d5c:	08001fd7 	.word	0x08001fd7
 8001d60:	08001fd7 	.word	0x08001fd7
 8001d64:	08001fd7 	.word	0x08001fd7
 8001d68:	08001fd7 	.word	0x08001fd7
 8001d6c:	08001fd7 	.word	0x08001fd7
 8001d70:	08001fd7 	.word	0x08001fd7
 8001d74:	08001fd7 	.word	0x08001fd7
 8001d78:	08001fd7 	.word	0x08001fd7
 8001d7c:	08001fd7 	.word	0x08001fd7
 8001d80:	08001fd7 	.word	0x08001fd7
 8001d84:	08001fd7 	.word	0x08001fd7
 8001d88:	08001fd7 	.word	0x08001fd7
 8001d8c:	08001fd7 	.word	0x08001fd7
 8001d90:	08001fd7 	.word	0x08001fd7
 8001d94:	08001fd7 	.word	0x08001fd7
 8001d98:	08001fd7 	.word	0x08001fd7
 8001d9c:	08001fd7 	.word	0x08001fd7
 8001da0:	08001fd7 	.word	0x08001fd7
 8001da4:	08001fd7 	.word	0x08001fd7
 8001da8:	08001fd7 	.word	0x08001fd7
 8001dac:	08001fd7 	.word	0x08001fd7
 8001db0:	08001fd7 	.word	0x08001fd7
 8001db4:	08001fd7 	.word	0x08001fd7
 8001db8:	08001fd7 	.word	0x08001fd7
 8001dbc:	08001fd7 	.word	0x08001fd7
 8001dc0:	08001fd7 	.word	0x08001fd7
 8001dc4:	08001fd7 	.word	0x08001fd7
 8001dc8:	08001fd7 	.word	0x08001fd7
 8001dcc:	08001fd7 	.word	0x08001fd7
 8001dd0:	08001fd7 	.word	0x08001fd7
 8001dd4:	08001fd7 	.word	0x08001fd7
 8001dd8:	08001fd7 	.word	0x08001fd7
 8001ddc:	08001fd7 	.word	0x08001fd7
 8001de0:	08001fd7 	.word	0x08001fd7
 8001de4:	08001fd7 	.word	0x08001fd7
 8001de8:	08001fd7 	.word	0x08001fd7
 8001dec:	08001fd7 	.word	0x08001fd7
 8001df0:	08001fd7 	.word	0x08001fd7
 8001df4:	08001fd7 	.word	0x08001fd7
 8001df8:	08001fd7 	.word	0x08001fd7
 8001dfc:	08001fd7 	.word	0x08001fd7
 8001e00:	08001fd7 	.word	0x08001fd7
 8001e04:	08001fd7 	.word	0x08001fd7
 8001e08:	08001fd7 	.word	0x08001fd7
 8001e0c:	08001fd7 	.word	0x08001fd7
 8001e10:	08001fd7 	.word	0x08001fd7
 8001e14:	08001fd7 	.word	0x08001fd7
 8001e18:	08001fd7 	.word	0x08001fd7
 8001e1c:	08001fd7 	.word	0x08001fd7
 8001e20:	08001fd7 	.word	0x08001fd7
 8001e24:	08001fd7 	.word	0x08001fd7
 8001e28:	08001fd7 	.word	0x08001fd7
 8001e2c:	08001fd7 	.word	0x08001fd7
 8001e30:	08001fd7 	.word	0x08001fd7
 8001e34:	08001fd7 	.word	0x08001fd7
 8001e38:	08001fd7 	.word	0x08001fd7
 8001e3c:	08001fd7 	.word	0x08001fd7
 8001e40:	08001fd7 	.word	0x08001fd7
 8001e44:	08001fd7 	.word	0x08001fd7
 8001e48:	08001fd7 	.word	0x08001fd7
 8001e4c:	08001fd7 	.word	0x08001fd7
 8001e50:	08001fd7 	.word	0x08001fd7
 8001e54:	08001fd7 	.word	0x08001fd7
 8001e58:	08001fd7 	.word	0x08001fd7
 8001e5c:	08001fd7 	.word	0x08001fd7
 8001e60:	08001fd7 	.word	0x08001fd7
 8001e64:	08001fd7 	.word	0x08001fd7
 8001e68:	08001fd7 	.word	0x08001fd7
 8001e6c:	08001fd7 	.word	0x08001fd7
 8001e70:	08001fd7 	.word	0x08001fd7
 8001e74:	08001fd7 	.word	0x08001fd7
 8001e78:	08001f83 	.word	0x08001f83
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	789b      	ldrb	r3, [r3, #2]
 8001e80:	461a      	mov	r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b0d      	cmp	r3, #13
 8001e86:	d101      	bne.n	8001e8c <microrl_insert_char+0x24c>
 8001e88:	230a      	movs	r3, #10
 8001e8a:	e000      	b.n	8001e8e <microrl_insert_char+0x24e>
 8001e8c:	230d      	movs	r3, #13
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	f000 80c1 	beq.w	8002016 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fe73 	bl	8001b88 <new_line_handler>
				break;
 8001ea2:	e0c3      	b.n	800202c <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fdc1 	bl	8001a2c <microrl_get_complite>
			break;
 8001eaa:	e0bf      	b.n	800202c <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	705a      	strb	r2, [r3, #1]
			break;
 8001eb2:	e0bb      	b.n	800202c <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fd1e 	bl	80018f6 <microrl_backspace>
					while (pThis->cursor > 0) {
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dcf7      	bgt.n	8001eb4 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2100      	movs	r1, #0
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fb40 	bl	8001554 <terminal_print_line>
			break;
 8001ed4:	e0aa      	b.n	800202c <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001edc:	4855      	ldr	r0, [pc, #340]	; (8002034 <microrl_insert_char+0x3f4>)
 8001ede:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001eec:	e09e      	b.n	800202c <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4619      	mov	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff faa0 	bl	8001444 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001f10:	e08c      	b.n	800202c <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff fae6 	bl	80014e4 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001f20:	e084      	b.n	800202c <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	da73      	bge.n	800201a <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 8001f32:	2101      	movs	r1, #1
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fa85 	bl	8001444 <terminal_move_cursor>
				pThis->cursor++;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001f48:	e067      	b.n	800201a <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d064      	beq.n	800201e <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fa73 	bl	8001444 <terminal_move_cursor>
				pThis->cursor--;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001f6c:	e057      	b.n	800201e <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8001f6e:	2100      	movs	r1, #0
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fb8f 	bl	8001694 <hist_search>
			break;
 8001f76:	e059      	b.n	800202c <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8001f78:	2101      	movs	r1, #1
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fb8a 	bl	8001694 <hist_search>
			break;
 8001f80:	e054      	b.n	800202c <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fcb7 	bl	80018f6 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f94:	461a      	mov	r2, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fadc 	bl	8001554 <terminal_print_line>
			break;
 8001f9c:	e046      	b.n	800202c <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff f9f0 	bl	8001384 <terminal_newline>
				print_prompt (pThis);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff f9ce 	bl	8001346 <print_prompt>
				terminal_reset_cursor (pThis);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fa9a 	bl	80014e4 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2100      	movs	r1, #0
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff faca 	bl	8001554 <terminal_print_line>
			break;
 8001fc0:	e034      	b.n	800202c <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d02a      	beq.n	8002022 <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fd2:	4798      	blx	r3
			break;
 8001fd4:	e025      	b.n	8002022 <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d104      	bne.n	8001fe6 <microrl_insert_char+0x3a6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01f      	beq.n	8002026 <microrl_insert_char+0x3e6>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b1f      	cmp	r3, #31
 8001fea:	dd1c      	ble.n	8002026 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001fec:	463b      	mov	r3, r7
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fc0c 	bl	8001810 <microrl_insert_text>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d015      	beq.n	800202a <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002004:	1e59      	subs	r1, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800200c:	461a      	mov	r2, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff faa0 	bl	8001554 <terminal_print_line>
			break;
 8002014:	e009      	b.n	800202a <microrl_insert_char+0x3ea>
					break;
 8002016:	bf00      	nop
 8002018:	e008      	b.n	800202c <microrl_insert_char+0x3ec>
			break;
 800201a:	bf00      	nop
 800201c:	e006      	b.n	800202c <microrl_insert_char+0x3ec>
			break;
 800201e:	bf00      	nop
 8002020:	e004      	b.n	800202c <microrl_insert_char+0x3ec>
			break;
 8002022:	bf00      	nop
 8002024:	e002      	b.n	800202c <microrl_insert_char+0x3ec>
	}
 8002026:	bf00      	nop
 8002028:	e000      	b.n	800202c <microrl_insert_char+0x3ec>
			break;
 800202a:	bf00      	nop
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	0800b6f0 	.word	0x0800b6f0

08002038 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <microrl_print_char+0x20>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	79fa      	ldrb	r2, [r7, #7]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fdf8 	bl	8001c40 <microrl_insert_char>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000004 	.word	0x20000004

0800205c <print>:

void print (const char * str)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <print+0x70>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	f083 0301 	eor.w	r3, r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <print+0x1e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b1b      	cmp	r3, #27
 8002078:	d024      	beq.n	80020c4 <print+0x68>
		return;
	uint16_t len = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 800207e:	89fb      	ldrh	r3, [r7, #14]
 8002080:	3301      	adds	r3, #1
 8002082:	81fb      	strh	r3, [r7, #14]
 8002084:	89fb      	ldrh	r3, [r7, #14]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f6      	bne.n	800207e <print+0x22>
	uint32_t timeout = HAL_GetTick();
 8002090:	f001 f8e4 	bl	800325c <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8002096:	e006      	b.n	80020a6 <print+0x4a>
		if (HAL_GetTick() - timeout >= 5)
 8002098:	f001 f8e0 	bl	800325c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d807      	bhi.n	80020b6 <print+0x5a>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <print+0x74>)
 80020a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80020ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f1      	bne.n	8002098 <print+0x3c>
 80020b4:	e000      	b.n	80020b8 <print+0x5c>
			break;
 80020b6:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f008 fe8b 	bl	800add8 <CDC_Transmit_FS>
 80020c2:	e000      	b.n	80020c6 <print+0x6a>
		return;
 80020c4:	bf00      	nop
}
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000008 	.word	0x20000008
 80020d0:	200006dc 	.word	0x200006dc

080020d4 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	e010      	b.n	8002106 <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <find_color_by_name+0x44>)
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	79fa      	ldrb	r2, [r7, #7]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d101      	bne.n	8002100 <find_color_by_name+0x2c>
		{
			return i;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	e006      	b.n	800210e <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3301      	adds	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b10      	cmp	r3, #16
 800210a:	d9eb      	bls.n	80020e4 <find_color_by_name+0x10>
		}
	}
	return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	0800bb98 	.word	0x0800bb98

0800211c <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ffd2 	bl	80020d4 <find_color_by_name>
 8002130:	4602      	mov	r2, r0
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	4a08      	ldr	r2, [pc, #32]	; (8002160 <print_color+0x44>)
 800213e:	4413      	add	r3, r2
 8002140:	3301      	adds	r3, #1
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff8a 	bl	800205c <print>
	print(str);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff87 	bl	800205c <print>
	print(COLOR_NC);
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <print_color+0x48>)
 8002150:	f7ff ff84 	bl	800205c <print>
	return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	0800bb98 	.word	0x0800bb98
 8002164:	0800b714 	.word	0x0800b714

08002168 <str_length>:

int str_length(const char * str)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002174:	e002      	b.n	800217c <str_length+0x14>
		i++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3301      	adds	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
	while (str[i])
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f6      	bne.n	8002176 <str_length+0xe>
	return i;
 8002188:	68fb      	ldr	r3, [r7, #12]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
	print(_VER);
 800219e:	4862      	ldr	r0, [pc, #392]	; (8002328 <print_help+0x194>)
 80021a0:	f7ff ff5c 	bl	800205c <print>
	print(ENDL);
 80021a4:	4861      	ldr	r0, [pc, #388]	; (800232c <print_help+0x198>)
 80021a6:	f7ff ff59 	bl	800205c <print>
	print ("Use ");
 80021aa:	4861      	ldr	r0, [pc, #388]	; (8002330 <print_help+0x19c>)
 80021ac:	f7ff ff56 	bl	800205c <print>
	print_color("TAB", C_GREEN);
 80021b0:	2105      	movs	r1, #5
 80021b2:	4860      	ldr	r0, [pc, #384]	; (8002334 <print_help+0x1a0>)
 80021b4:	f7ff ffb2 	bl	800211c <print_color>
	print(" key for completion");
 80021b8:	485f      	ldr	r0, [pc, #380]	; (8002338 <print_help+0x1a4>)
 80021ba:	f7ff ff4f 	bl	800205c <print>
	print (ENDL);
 80021be:	485b      	ldr	r0, [pc, #364]	; (800232c <print_help+0x198>)
 80021c0:	f7ff ff4c 	bl	800205c <print>
	print ("Available commands:");
 80021c4:	485d      	ldr	r0, [pc, #372]	; (800233c <print_help+0x1a8>)
 80021c6:	f7ff ff49 	bl	800205c <print>
	for (int i = 0; i < microrl_actions_length; i++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e09e      	b.n	800230e <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 80021d0:	4a5b      	ldr	r2, [pc, #364]	; (8002340 <print_help+0x1ac>)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d11f      	bne.n	8002224 <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	4a55      	ldr	r2, [pc, #340]	; (8002340 <print_help+0x1ac>)
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d004      	beq.n	8002204 <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 80021fa:	210c      	movs	r1, #12
 80021fc:	4851      	ldr	r0, [pc, #324]	; (8002344 <print_help+0x1b0>)
 80021fe:	f7ff ff8d 	bl	800211c <print_color>
 8002202:	e003      	b.n	800220c <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 8002204:	210c      	movs	r1, #12
 8002206:	4850      	ldr	r0, [pc, #320]	; (8002348 <print_help+0x1b4>)
 8002208:	f7ff ff88 	bl	800211c <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	222c      	movs	r2, #44	; 0x2c
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	4a4a      	ldr	r2, [pc, #296]	; (8002340 <print_help+0x1ac>)
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	210b      	movs	r1, #11
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff7d 	bl	800211c <print_color>
 8002222:	e071      	b.n	8002308 <print_help+0x174>
		}
		else
		{
			print(ENDL);
 8002224:	4841      	ldr	r0, [pc, #260]	; (800232c <print_help+0x198>)
 8002226:	f7ff ff19 	bl	800205c <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 800222a:	f06f 0303 	mvn.w	r3, #3
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	e005      	b.n	800223e <print_help+0xaa>
				print(" ");
 8002232:	4846      	ldr	r0, [pc, #280]	; (800234c <print_help+0x1b8>)
 8002234:	f7ff ff12 	bl	800205c <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	3301      	adds	r3, #1
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4a40      	ldr	r2, [pc, #256]	; (8002340 <print_help+0x1ac>)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	429a      	cmp	r2, r3
 8002250:	dbef      	blt.n	8002232 <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	222c      	movs	r2, #44	; 0x2c
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	4a39      	ldr	r2, [pc, #228]	; (8002340 <print_help+0x1ac>)
 800225c:	4413      	add	r3, r2
 800225e:	1d1a      	adds	r2, r3, #4
 8002260:	4937      	ldr	r1, [pc, #220]	; (8002340 <print_help+0x1ac>)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	202c      	movs	r0, #44	; 0x2c
 8002266:	fb00 f303 	mul.w	r3, r0, r3
 800226a:	440b      	add	r3, r1
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4938      	ldr	r1, [pc, #224]	; (8002350 <print_help+0x1bc>)
 8002270:	5ccb      	ldrb	r3, [r1, r3]
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7ff ff51 	bl	800211c <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	e005      	b.n	800228c <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8002280:	4832      	ldr	r0, [pc, #200]	; (800234c <print_help+0x1b8>)
 8002282:	f7ff feeb 	bl	800205c <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3301      	adds	r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <print_help+0x1ac>)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800229a:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	222c      	movs	r2, #44	; 0x2c
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	4a26      	ldr	r2, [pc, #152]	; (8002340 <print_help+0x1ac>)
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff5b 	bl	8002168 <str_length>
 80022b2:	4603      	mov	r3, r0
 80022b4:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbe1      	blt.n	8002280 <print_help+0xec>
			switch (microrl_actions[i].level){
 80022bc:	4a20      	ldr	r2, [pc, #128]	; (8002340 <print_help+0x1ac>)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <print_help+0x140>
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d004      	beq.n	80022dc <print_help+0x148>
 80022d2:	e007      	b.n	80022e4 <print_help+0x150>
			case 0:
				print ("-");
 80022d4:	481f      	ldr	r0, [pc, #124]	; (8002354 <print_help+0x1c0>)
 80022d6:	f7ff fec1 	bl	800205c <print>
				break;
 80022da:	e007      	b.n	80022ec <print_help+0x158>
			case 1:
				print ("^");
 80022dc:	481e      	ldr	r0, [pc, #120]	; (8002358 <print_help+0x1c4>)
 80022de:	f7ff febd 	bl	800205c <print>
				break;
 80022e2:	e003      	b.n	80022ec <print_help+0x158>
			default:
				print ("#");
 80022e4:	481d      	ldr	r0, [pc, #116]	; (800235c <print_help+0x1c8>)
 80022e6:	f7ff feb9 	bl	800205c <print>
				break;
 80022ea:	bf00      	nop
			}
			print (" ");
 80022ec:	4817      	ldr	r0, [pc, #92]	; (800234c <print_help+0x1b8>)
 80022ee:	f7ff feb5 	bl	800205c <print>
			print (microrl_actions[i].help_msg);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	222c      	movs	r2, #44	; 0x2c
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	3308      	adds	r3, #8
 80022fc:	4a10      	ldr	r2, [pc, #64]	; (8002340 <print_help+0x1ac>)
 80022fe:	4413      	add	r3, r2
 8002300:	3305      	adds	r3, #5
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff feaa 	bl	800205c <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3301      	adds	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b11      	cmp	r3, #17
 8002312:	f67f af5d 	bls.w	80021d0 <print_help+0x3c>
		}
	}
	print(ENDL);
 8002316:	4805      	ldr	r0, [pc, #20]	; (800232c <print_help+0x198>)
 8002318:	f7ff fea0 	bl	800205c <print>
	return 0;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	bf00      	nop
 8002328:	0800b71c 	.word	0x0800b71c
 800232c:	0800b72c 	.word	0x0800b72c
 8002330:	0800b730 	.word	0x0800b730
 8002334:	0800b738 	.word	0x0800b738
 8002338:	0800b73c 	.word	0x0800b73c
 800233c:	0800b750 	.word	0x0800b750
 8002340:	0800b880 	.word	0x0800b880
 8002344:	0800b764 	.word	0x0800b764
 8002348:	0800b76c 	.word	0x0800b76c
 800234c:	0800b770 	.word	0x0800b770
 8002350:	0800bc54 	.word	0x0800bc54
 8002354:	0800b774 	.word	0x0800b774
 8002358:	0800b778 	.word	0x0800b778
 800235c:	0800b77c 	.word	0x0800b77c

08002360 <execute>:



int execute (int argc, const char * const * argv)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
	int (*func)   (int argc, const char * const * argv ) = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 8002376:	2300      	movs	r3, #0
 8002378:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e056      	b.n	800242e <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	e045      	b.n	8002412 <execute+0xb2>
		{
			tokens_found = false;
 8002386:	2300      	movs	r3, #0
 8002388:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 800238a:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <execute+0x180>)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d001      	beq.n	80023a6 <execute+0x46>
				synonym_level = current_level; // save the synonym level
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d003      	beq.n	80023b6 <execute+0x56>
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	db31      	blt.n	800241a <execute+0xba>
				break;
			if (current_level == i)
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d101      	bne.n	80023c2 <execute+0x62>
				last_main_synonym = n;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4942      	ldr	r1, [pc, #264]	; (80024e0 <execute+0x180>)
 80023d6:	440b      	add	r3, r1
 80023d8:	3304      	adds	r3, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f7fd feb5 	bl	800014c <strcmp>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d111      	bne.n	800240c <execute+0xac>
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d10d      	bne.n	800240c <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 80023f0:	2301      	movs	r3, #1
 80023f2:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	623a      	str	r2, [r7, #32]
 80023fa:	4a39      	ldr	r2, [pc, #228]	; (80024e0 <execute+0x180>)
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3328      	adds	r3, #40	; 0x28
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800240a:	e007      	b.n	800241c <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	3301      	adds	r3, #1
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b11      	cmp	r3, #17
 8002416:	d9b6      	bls.n	8002386 <execute+0x26>
 8002418:	e000      	b.n	800241c <execute+0xbc>
				break;
 800241a:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 800241c:	7efb      	ldrb	r3, [r7, #27]
 800241e:	f083 0301 	eor.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <execute+0xd8>
	for (int i = 0; i < argc; i++)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	429a      	cmp	r2, r3
 8002434:	dba4      	blt.n	8002380 <execute+0x20>
 8002436:	e000      	b.n	800243a <execute+0xda>
			break;
 8002438:	bf00      	nop
	}

	if (func != NULL)
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <execute+0xec>
	{
		return func(argc, argv); // function found
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	6839      	ldr	r1, [r7, #0]
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
 8002448:	4603      	mov	r3, r0
 800244a:	e045      	b.n	80024d8 <execute+0x178>
	} else if (tokens_found)
 800244c:	7efb      	ldrb	r3, [r7, #27]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d021      	beq.n	8002496 <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 8002452:	210a      	movs	r1, #10
 8002454:	4823      	ldr	r0, [pc, #140]	; (80024e4 <execute+0x184>)
 8002456:	f7ff fe61 	bl	800211c <print_color>
		print_color ((char*)argv[0], C_L_RED);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	210a      	movs	r1, #10
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fe5b 	bl	800211c <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 8002466:	210a      	movs	r1, #10
 8002468:	481f      	ldr	r0, [pc, #124]	; (80024e8 <execute+0x188>)
 800246a:	f7ff fe57 	bl	800211c <print_color>
		print(ENDL);
 800246e:	481f      	ldr	r0, [pc, #124]	; (80024ec <execute+0x18c>)
 8002470:	f7ff fdf4 	bl	800205c <print>
		print_color ("use '", C_NC);
 8002474:	2100      	movs	r1, #0
 8002476:	481e      	ldr	r0, [pc, #120]	; (80024f0 <execute+0x190>)
 8002478:	f7ff fe50 	bl	800211c <print_color>
		print_color ("?", C_GREEN);
 800247c:	2105      	movs	r1, #5
 800247e:	481d      	ldr	r0, [pc, #116]	; (80024f4 <execute+0x194>)
 8002480:	f7ff fe4c 	bl	800211c <print_color>
		print_color ("' for help", C_NC);
 8002484:	2100      	movs	r1, #0
 8002486:	481c      	ldr	r0, [pc, #112]	; (80024f8 <execute+0x198>)
 8002488:	f7ff fe48 	bl	800211c <print_color>
		print (ENDL);
 800248c:	4817      	ldr	r0, [pc, #92]	; (80024ec <execute+0x18c>)
 800248e:	f7ff fde5 	bl	800205c <print>
		return 1;
 8002492:	2301      	movs	r3, #1
 8002494:	e020      	b.n	80024d8 <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 8002496:	2109      	movs	r1, #9
 8002498:	4812      	ldr	r0, [pc, #72]	; (80024e4 <execute+0x184>)
 800249a:	f7ff fe3f 	bl	800211c <print_color>
		print_color ((char*)argv[0], C_RED);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2109      	movs	r1, #9
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fe39 	bl	800211c <print_color>
		print_color ("' not found", C_RED);
 80024aa:	2109      	movs	r1, #9
 80024ac:	4813      	ldr	r0, [pc, #76]	; (80024fc <execute+0x19c>)
 80024ae:	f7ff fe35 	bl	800211c <print_color>
		print(ENDL);
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <execute+0x18c>)
 80024b4:	f7ff fdd2 	bl	800205c <print>
		print_color ("use '", C_NC);
 80024b8:	2100      	movs	r1, #0
 80024ba:	480d      	ldr	r0, [pc, #52]	; (80024f0 <execute+0x190>)
 80024bc:	f7ff fe2e 	bl	800211c <print_color>
		print_color ("?", C_GREEN);
 80024c0:	2105      	movs	r1, #5
 80024c2:	480c      	ldr	r0, [pc, #48]	; (80024f4 <execute+0x194>)
 80024c4:	f7ff fe2a 	bl	800211c <print_color>
		print_color ("' for help", C_NC);
 80024c8:	2100      	movs	r1, #0
 80024ca:	480b      	ldr	r0, [pc, #44]	; (80024f8 <execute+0x198>)
 80024cc:	f7ff fe26 	bl	800211c <print_color>
		print (ENDL);
 80024d0:	4806      	ldr	r0, [pc, #24]	; (80024ec <execute+0x18c>)
 80024d2:	f7ff fdc3 	bl	800205c <print>
		return 1;
 80024d6:	2301      	movs	r3, #1

	}
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	0800b880 	.word	0x0800b880
 80024e4:	0800b780 	.word	0x0800b780
 80024e8:	0800b78c 	.word	0x0800b78c
 80024ec:	0800b72c 	.word	0x0800b72c
 80024f0:	0800b7ac 	.word	0x0800b7ac
 80024f4:	0800b7b4 	.word	0x0800b7b4
 80024f8:	0800b7b8 	.word	0x0800b7b8
 80024fc:	0800b7c4 	.word	0x0800b7c4

08002500 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	; 0x30
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	int j = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <complet+0x19c>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d11f      	bne.n	800255a <complet+0x5a>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 800251a:	2300      	movs	r3, #0
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
 800251e:	e018      	b.n	8002552 <complet+0x52>
			if (microrl_actions[i].level == 0)
 8002520:	4a5f      	ldr	r2, [pc, #380]	; (80026a0 <complet+0x1a0>)
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10c      	bne.n	800254c <complet+0x4c>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f202 	mul.w	r2, r1, r2
 8002540:	4957      	ldr	r1, [pc, #348]	; (80026a0 <complet+0x1a0>)
 8002542:	440a      	add	r2, r1
 8002544:	3204      	adds	r2, #4
 8002546:	4955      	ldr	r1, [pc, #340]	; (800269c <complet+0x19c>)
 8002548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	3301      	adds	r3, #1
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	2b11      	cmp	r3, #17
 8002556:	d9e3      	bls.n	8002520 <complet+0x20>
 8002558:	e095      	b.n	8002686 <complet+0x186>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002560:	3b01      	subs	r3, #1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8002574:	2300      	movs	r3, #0
 8002576:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e07c      	b.n	8002678 <complet+0x178>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e06b      	b.n	800265c <complet+0x15c>
			{
				tokens_found = false;
 8002584:	2300      	movs	r3, #0
 8002586:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8002588:	4a45      	ldr	r2, [pc, #276]	; (80026a0 <complet+0x1a0>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d001      	beq.n	80025a4 <complet+0xa4>
					synonym_level = current_level; // save the synonym level
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d003      	beq.n	80025b4 <complet+0xb4>
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	db57      	blt.n	8002664 <complet+0x164>
					break;
				if (current_level == i)
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d101      	bne.n	80025c0 <complet+0xc0>
					last_main_synonym = n;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d128      	bne.n	800261c <complet+0x11c>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	222c      	movs	r2, #44	; 0x2c
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	4a33      	ldr	r2, [pc, #204]	; (80026a0 <complet+0x1a0>)
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	6939      	ldr	r1, [r7, #16]
 80025da:	4618      	mov	r0, r3
 80025dc:	f009 f82e 	bl	800b63c <strstr>
 80025e0:	4602      	mov	r2, r0
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	492d      	ldr	r1, [pc, #180]	; (80026a0 <complet+0x1a0>)
 80025ec:	440b      	add	r3, r1
 80025ee:	3304      	adds	r3, #4
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d113      	bne.n	800261c <complet+0x11c>
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d10f      	bne.n	800261c <complet+0x11c>
										(i == synonym_level))
				{
					tokens_found = true;
 80025fc:	2301      	movs	r3, #1
 80025fe:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f202 	mul.w	r2, r1, r2
 800260e:	4924      	ldr	r1, [pc, #144]	; (80026a0 <complet+0x1a0>)
 8002610:	440a      	add	r2, r1
 8002612:	3204      	adds	r2, #4
 8002614:	4921      	ldr	r1, [pc, #132]	; (800269c <complet+0x19c>)
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800261a:	e01c      	b.n	8002656 <complet+0x156>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	4413      	add	r3, r2
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	491c      	ldr	r1, [pc, #112]	; (80026a0 <complet+0x1a0>)
 8002630:	440b      	add	r3, r1
 8002632:	3304      	adds	r3, #4
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f7fd fd88 	bl	800014c <strcmp>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <complet+0x156>
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	429a      	cmp	r2, r3
 8002648:	d105      	bne.n	8002656 <complet+0x156>
				{
					last_main_synonym++;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	3301      	adds	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002650:	2301      	movs	r3, #1
 8002652:	77fb      	strb	r3, [r7, #31]
					break;
 8002654:	e007      	b.n	8002666 <complet+0x166>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3301      	adds	r3, #1
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b11      	cmp	r3, #17
 8002660:	d990      	bls.n	8002584 <complet+0x84>
 8002662:	e000      	b.n	8002666 <complet+0x166>
					break;
 8002664:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8002666:	7ffb      	ldrb	r3, [r7, #31]
 8002668:	f083 0301 	eor.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d108      	bne.n	8002684 <complet+0x184>
		for (int i = 0; i < argc; i++)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	3301      	adds	r3, #1
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	f6ff af7e 	blt.w	800257e <complet+0x7e>
 8002682:	e000      	b.n	8002686 <complet+0x186>
				break;
 8002684:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <complet+0x19c>)
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2100      	movs	r1, #0
 800268c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <complet+0x19c>)
}
 8002692:	4618      	mov	r0, r3
 8002694:	3730      	adds	r7, #48	; 0x30
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200005c8 	.word	0x200005c8
 80026a0:	0800b880 	.word	0x0800b880

080026a4 <sigint>:
#endif


void sigint (void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <sigint+0x50>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
	show_clock = true;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <sigint+0x54>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]

	print (ENDL);
 80026b6:	4811      	ldr	r0, [pc, #68]	; (80026fc <sigint+0x58>)
 80026b8:	f7ff fcd0 	bl	800205c <print>
	print ("^C catched!");
 80026bc:	4810      	ldr	r0, [pc, #64]	; (8002700 <sigint+0x5c>)
 80026be:	f7ff fccd 	bl	800205c <print>
	int i = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 80026c6:	e009      	b.n	80026dc <sigint+0x38>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <sigint+0x60>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <sigint+0x58>)
 80026d4:	5cd3      	ldrb	r3, [r2, r3]
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7ff fab2 	bl	8001c40 <microrl_insert_char>
	while (ENTER[i])
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <sigint+0x58>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ef      	bne.n	80026c8 <sigint+0x24>
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200001bd 	.word	0x200001bd
 80026f8:	20000009 	.word	0x20000009
 80026fc:	0800b72c 	.word	0x0800b72c
 8002700:	0800b7d0 	.word	0x0800b7d0
 8002704:	20000004 	.word	0x20000004

08002708 <init_microrl>:

void init_microrl(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <init_microrl+0x38>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	490c      	ldr	r1, [pc, #48]	; (8002744 <init_microrl+0x3c>)
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe ff56 	bl	80015c4 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <init_microrl+0x38>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	490a      	ldr	r1, [pc, #40]	; (8002748 <init_microrl+0x40>)
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe ff9c 	bl	800165c <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <init_microrl+0x38>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4908      	ldr	r1, [pc, #32]	; (800274c <init_microrl+0x44>)
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe ff88 	bl	8001640 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <init_microrl+0x38>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4906      	ldr	r1, [pc, #24]	; (8002750 <init_microrl+0x48>)
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe ff9e 	bl	8001678 <microrl_set_sigint_callback>
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000004 	.word	0x20000004
 8002744:	0800205d 	.word	0x0800205d
 8002748:	08002361 	.word	0x08002361
 800274c:	08002501 	.word	0x08002501
 8002750:	080026a5 	.word	0x080026a5

08002754 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <clear_screen+0x20>)
 8002760:	f7ff fc7c 	bl	800205c <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002764:	4804      	ldr	r0, [pc, #16]	; (8002778 <clear_screen+0x24>)
 8002766:	f7ff fc79 	bl	800205c <print>
	return 0;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	0800b7dc 	.word	0x0800b7dc
 8002778:	0800b7e4 	.word	0x0800b7e4

0800277c <color_toggle>:

int color_toggle 	(int argc, const char * const * argv)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <color_toggle+0x30>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	f083 0301 	eor.w	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf14      	ite	ne
 8002794:	2301      	movne	r3, #1
 8002796:	2300      	moveq	r3, #0
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <color_toggle+0x30>)
 800279c:	701a      	strb	r2, [r3, #0]
	return 0;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000008 	.word	0x20000008

080027b0 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
	color_out = 1;
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <color_on+0x28>)
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 80027c0:	2105      	movs	r1, #5
 80027c2:	4806      	ldr	r0, [pc, #24]	; (80027dc <color_on+0x2c>)
 80027c4:	f7ff fcaa 	bl	800211c <print_color>
	print(ENDL);
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <color_on+0x30>)
 80027ca:	f7ff fc47 	bl	800205c <print>
	return 0;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000008 	.word	0x20000008
 80027dc:	0800b7e8 	.word	0x0800b7e8
 80027e0:	0800b72c 	.word	0x0800b72c

080027e4 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
	color_out = 0;
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <color_off+0x28>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 80027f4:	4806      	ldr	r0, [pc, #24]	; (8002810 <color_off+0x2c>)
 80027f6:	f7ff fc31 	bl	800205c <print>
	print(ENDL);
 80027fa:	4806      	ldr	r0, [pc, #24]	; (8002814 <color_off+0x30>)
 80027fc:	f7ff fc2e 	bl	800205c <print>
	return 0;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000008 	.word	0x20000008
 8002810:	0800b7fc 	.word	0x0800b7fc
 8002814:	0800b72c 	.word	0x0800b72c

08002818 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	if (color_out)
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <color_show+0x34>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 800282a:	2105      	movs	r1, #5
 800282c:	4808      	ldr	r0, [pc, #32]	; (8002850 <color_show+0x38>)
 800282e:	f7ff fc75 	bl	800211c <print_color>
 8002832:	e002      	b.n	800283a <color_show+0x22>
	else
		print ("Color output is OFF");
 8002834:	4807      	ldr	r0, [pc, #28]	; (8002854 <color_show+0x3c>)
 8002836:	f7ff fc11 	bl	800205c <print>
	print(ENDL);
 800283a:	4807      	ldr	r0, [pc, #28]	; (8002858 <color_show+0x40>)
 800283c:	f7ff fc0e 	bl	800205c <print>
	return 0;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000008 	.word	0x20000008
 8002850:	0800b7e8 	.word	0x0800b7e8
 8002854:	0800b7fc 	.word	0x0800b7fc
 8002858:	0800b72c 	.word	0x0800b72c

0800285c <vfd_text>:


int vfd_text (int argc, const char * const * argv)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
	show_clock = false;
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <vfd_text+0x40>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < argc; i++)
 800286c:	2301      	movs	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e00a      	b.n	8002888 <vfd_text+0x2c>
	{
		uint16_t temp = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	827b      	strh	r3, [r7, #18]
		char * pchar = (char*)argv[i];
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	4413      	add	r3, r2
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < argc; i++)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	dbf0      	blt.n	8002872 <vfd_text+0x16>
//		{
//			temp = get_char(*(pchar++));
//			xQueueSendToBack(qVFDHandle, &temp, 100);
//		}
	}
	return 0;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	20000009 	.word	0x20000009

080028a0 <leds_toggle>:


int leds_toggle		(int argc, const char * const * argv)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
	use_leds ^= 1;
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <leds_toggle+0x3c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	f083 0301 	eor.w	r3, r3, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <leds_toggle+0x3c>)
 80028c0:	701a      	strb	r2, [r3, #0]
	print_color("Done", C_GREEN);
 80028c2:	2105      	movs	r1, #5
 80028c4:	4806      	ldr	r0, [pc, #24]	; (80028e0 <leds_toggle+0x40>)
 80028c6:	f7ff fc29 	bl	800211c <print_color>
	print(ENDL);
 80028ca:	4806      	ldr	r0, [pc, #24]	; (80028e4 <leds_toggle+0x44>)
 80028cc:	f7ff fbc6 	bl	800205c <print>
	return 0;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200001be 	.word	0x200001be
 80028e0:	0800b810 	.word	0x0800b810
 80028e4:	0800b72c 	.word	0x0800b72c

080028e8 <set_td>:



int set_td		(int argc, const char * const * argv)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
	if (argc == 3 && str_length(argv[2]) == 6)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d140      	bne.n	800297a <set_td+0x92>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	3308      	adds	r3, #8
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fc32 	bl	8002168 <str_length>
 8002904:	4603      	mov	r3, r0
 8002906:	2b06      	cmp	r3, #6
 8002908:	d137      	bne.n	800297a <set_td+0x92>
	{
		uint8_t arr [3];
		for (int i = 0; i < 3; i++)
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e021      	b.n	8002954 <set_td+0x6c>
		{
			arr[2-i] = (argv[2][i*2+1]-'0')+((argv[2][i*2]-'0')<<4);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	3308      	adds	r3, #8
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	3301      	adds	r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	781a      	ldrb	r2, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	3308      	adds	r3, #8
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68f9      	ldr	r1, [r7, #12]
 8002928:	0049      	lsls	r1, r1, #1
 800292a:	440b      	add	r3, r1
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	3b30      	subs	r3, #48	; 0x30
 8002930:	b2db      	uxtb	r3, r3
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	b2db      	uxtb	r3, r3
 8002936:	4413      	add	r3, r2
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f1c3 0302 	rsb	r3, r3, #2
 8002940:	3a30      	subs	r2, #48	; 0x30
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f107 0110 	add.w	r1, r7, #16
 8002948:	440b      	add	r3, r1
 800294a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (int i = 0; i < 3; i++)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3301      	adds	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b02      	cmp	r3, #2
 8002958:	ddda      	ble.n	8002910 <set_td+0x28>
		}
		d3231_set(arr, argv[0][0] == 'd');
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b64      	cmp	r3, #100	; 0x64
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2da      	uxtb	r2, r3
 800296a:	f107 0308 	add.w	r3, r7, #8
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fc73 	bl	800025c <d3231_set>
		return 0;
 8002976:	2300      	movs	r3, #0
 8002978:	e007      	b.n	800298a <set_td+0xa2>
	}
	print_color("wrong format", C_RED);
 800297a:	2109      	movs	r1, #9
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <set_td+0xac>)
 800297e:	f7ff fbcd 	bl	800211c <print_color>
	print(ENDL);
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <set_td+0xb0>)
 8002984:	f7ff fb6a 	bl	800205c <print>
	return 0;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	0800b818 	.word	0x0800b818
 8002998:	0800b72c 	.word	0x0800b72c

0800299c <get_td>:

int get_td		(int argc, const char * const * argv)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	bool date = argv[0][0] == 'd';
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b64      	cmp	r3, #100	; 0x64
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	77fb      	strb	r3, [r7, #31]
	char str[9];
	uint8_t * d3231 = d3231_get_all();
 80029b6:	f7fd fc19 	bl	80001ec <d3231_get_all>
 80029ba:	61b8      	str	r0, [r7, #24]
	uint8_t offset = date*4;
 80029bc:	7ffb      	ldrb	r3, [r7, #31]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	75fb      	strb	r3, [r7, #23]
	str[8] = '\0';
 80029c2:	2300      	movs	r3, #0
 80029c4:	753b      	strb	r3, [r7, #20]
	str[7] = (d3231[offset + 0]&0xF) + '0';
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3330      	adds	r3, #48	; 0x30
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	74fb      	strb	r3, [r7, #19]
	str[6] = ((d3231[offset + 0]>>4)&0xF) + '0';
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4413      	add	r3, r2
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	3330      	adds	r3, #48	; 0x30
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	74bb      	strb	r3, [r7, #18]
	str[4] = (d3231[offset + 1]&0xF) + '0';
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	3301      	adds	r3, #1
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3330      	adds	r3, #48	; 0x30
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	743b      	strb	r3, [r7, #16]
	str[3] = ((d3231[offset + 1]>>4)&0xF) + '0';
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	3301      	adds	r3, #1
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4413      	add	r3, r2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3330      	adds	r3, #48	; 0x30
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	73fb      	strb	r3, [r7, #15]
	str[1] = (d3231[offset + 2]&0xF) + '0';
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	3302      	adds	r3, #2
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3330      	adds	r3, #48	; 0x30
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	737b      	strb	r3, [r7, #13]
	str[0] = ((d3231[offset + 2]>>4)&0xF) + '0';
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	3302      	adds	r3, #2
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3330      	adds	r3, #48	; 0x30
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	733b      	strb	r3, [r7, #12]
	str[5] = str[2] = date?'-':':';
 8002a40:	7ffb      	ldrb	r3, [r7, #31]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <get_td+0xae>
 8002a46:	232d      	movs	r3, #45	; 0x2d
 8002a48:	e000      	b.n	8002a4c <get_td+0xb0>
 8002a4a:	233a      	movs	r3, #58	; 0x3a
 8002a4c:	73bb      	strb	r3, [r7, #14]
 8002a4e:	7bbb      	ldrb	r3, [r7, #14]
 8002a50:	747b      	strb	r3, [r7, #17]
	print_color(str, C_L_BLUE);
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	2104      	movs	r1, #4
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fb5f 	bl	800211c <print_color>
	print(ENDL);
 8002a5e:	4804      	ldr	r0, [pc, #16]	; (8002a70 <get_td+0xd4>)
 8002a60:	f7ff fafc 	bl	800205c <print>
	return 0;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	0800b72c 	.word	0x0800b72c

08002a74 <get_temp>:

int get_temp		(int argc, const char * const * argv)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
	uint8_t * d3231 = d3231_get_temp();
 8002a7e:	f7fd fb9d 	bl	80001bc <d3231_get_temp>
 8002a82:	61b8      	str	r0, [r7, #24]

	bool negative = d3231[0]&(1<<7);
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
	uint16_t temp = d3231[0]&(~(1<<7));
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t dec   = d3231[1]>>6;
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	75bb      	strb	r3, [r7, #22]

	dec *= 25; // calculate decimal part
 8002aac:	7dbb      	ldrb	r3, [r7, #22]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	0092      	lsls	r2, r2, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	0091      	lsls	r1, r2, #2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	460b      	mov	r3, r1
 8002abc:	4413      	add	r3, r2
 8002abe:	75bb      	strb	r3, [r7, #22]
	temp *= 1000;
 8002ac0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	0152      	lsls	r2, r2, #5
 8002ac6:	1ad2      	subs	r2, r2, r3
 8002ac8:	0092      	lsls	r2, r2, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	84fb      	strh	r3, [r7, #38]	; 0x26
	temp += dec;
 8002ad0:	7dbb      	ldrb	r3, [r7, #22]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ad6:	4413      	add	r3, r2
 8002ad8:	84fb      	strh	r3, [r7, #38]	; 0x26


	char str[8];
	str[7] = '\0';
 8002ada:	2300      	movs	r3, #0
 8002adc:	74fb      	strb	r3, [r7, #19]
	for (int i = 6; i >= 0; i--)
 8002ade:	2306      	movs	r3, #6
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	e01c      	b.n	8002b1e <get_temp+0xaa>
	{
		str[i] = (temp % 10) + '0';
 8002ae4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ae6:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <get_temp+0x124>)
 8002ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8002aec:	08d9      	lsrs	r1, r3, #3
 8002aee:	460b      	mov	r3, r1
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	3330      	adds	r3, #48	; 0x30
 8002afe:	b2d9      	uxtb	r1, r3
 8002b00:	f107 020c 	add.w	r2, r7, #12
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	4413      	add	r3, r2
 8002b08:	460a      	mov	r2, r1
 8002b0a:	701a      	strb	r2, [r3, #0]
		temp /= 10;
 8002b0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b0e:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <get_temp+0x124>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 6; i >= 0; i--)
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	dadf      	bge.n	8002ae4 <get_temp+0x70>
	}
	str[4] = '.';
 8002b24:	232e      	movs	r3, #46	; 0x2e
 8002b26:	743b      	strb	r3, [r7, #16]
	for (int i = 0; i < 7; i++)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	e020      	b.n	8002b70 <get_temp+0xfc>
	{
		if (str[i] != '0')
 8002b2e:	f107 020c 	add.w	r2, r7, #12
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b30      	cmp	r3, #48	; 0x30
 8002b3a:	d010      	beq.n	8002b5e <get_temp+0xea>
		{
			if (i > 0)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	dd1a      	ble.n	8002b78 <get_temp+0x104>
				str[i-1] = negative?'-':'+';
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <get_temp+0xd8>
 8002b48:	222d      	movs	r2, #45	; 0x2d
 8002b4a:	e000      	b.n	8002b4e <get_temp+0xda>
 8002b4c:	222b      	movs	r2, #43	; 0x2b
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002b56:	440b      	add	r3, r1
 8002b58:	f803 2c1c 	strb.w	r2, [r3, #-28]
			break;
 8002b5c:	e00c      	b.n	8002b78 <get_temp+0x104>
		}
		str[i] = ' ';
 8002b5e:	f107 020c 	add.w	r2, r7, #12
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	2220      	movs	r2, #32
 8002b68:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 7; i++)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	dddb      	ble.n	8002b2e <get_temp+0xba>
 8002b76:	e000      	b.n	8002b7a <get_temp+0x106>
			break;
 8002b78:	bf00      	nop
	}
	print_color(str, C_GREEN);
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	2105      	movs	r1, #5
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff facb 	bl	800211c <print_color>
	print(ENDL);
 8002b86:	4805      	ldr	r0, [pc, #20]	; (8002b9c <get_temp+0x128>)
 8002b88:	f7ff fa68 	bl	800205c <print>
	return 0;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3728      	adds	r7, #40	; 0x28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	cccccccd 	.word	0xcccccccd
 8002b9c:	0800b72c 	.word	0x0800b72c

08002ba0 <clock>:

int clock		(int argc, const char * const * argv)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
	show_clock = true;
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <clock+0x1c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
	return 0;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	20000009 	.word	0x20000009

08002bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_MspInit+0x5c>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_MspInit+0x5c>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6193      	str	r3, [r2, #24]
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_MspInit+0x5c>)
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_MspInit+0x5c>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <HAL_MspInit+0x5c>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be8:	61d3      	str	r3, [r2, #28]
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_MspInit+0x5c>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_MspInit+0x60>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_MspInit+0x60>)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40010000 	.word	0x40010000

08002c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_I2C_MspInit+0x70>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d123      	bne.n	8002c8c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_I2C_MspInit+0x74>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <HAL_I2C_MspInit+0x74>)
 8002c4a:	f043 0308 	orr.w	r3, r3, #8
 8002c4e:	6193      	str	r3, [r2, #24]
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_I2C_MspInit+0x74>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c5c:	23c0      	movs	r3, #192	; 0xc0
 8002c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c60:	2312      	movs	r3, #18
 8002c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c64:	2303      	movs	r3, #3
 8002c66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	480b      	ldr	r0, [pc, #44]	; (8002c9c <HAL_I2C_MspInit+0x78>)
 8002c70:	f000 fc30 	bl	80034d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_I2C_MspInit+0x74>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <HAL_I2C_MspInit+0x74>)
 8002c7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c7e:	61d3      	str	r3, [r2, #28]
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_I2C_MspInit+0x74>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c8c:	bf00      	nop
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40005400 	.word	0x40005400
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40010c00 	.word	0x40010c00

08002ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0310 	add.w	r3, r7, #16
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_SPI_MspInit+0x8c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d131      	bne.n	8002d24 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_SPI_MspInit+0x90>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <HAL_SPI_MspInit+0x90>)
 8002cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cca:	61d3      	str	r3, [r2, #28]
 8002ccc:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <HAL_SPI_MspInit+0x90>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <HAL_SPI_MspInit+0x90>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <HAL_SPI_MspInit+0x90>)
 8002cde:	f043 0308 	orr.w	r3, r3, #8
 8002ce2:	6193      	str	r3, [r2, #24]
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_SPI_MspInit+0x90>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002cf0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	4619      	mov	r1, r3
 8002d04:	480b      	ldr	r0, [pc, #44]	; (8002d34 <HAL_SPI_MspInit+0x94>)
 8002d06:	f000 fbe5 	bl	80034d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4805      	ldr	r0, [pc, #20]	; (8002d34 <HAL_SPI_MspInit+0x94>)
 8002d20:	f000 fbd8 	bl	80034d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d24:	bf00      	nop
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40003800 	.word	0x40003800
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40010c00 	.word	0x40010c00

08002d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <NMI_Handler+0x4>

08002d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <HardFault_Handler+0x4>

08002d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <MemManage_Handler+0x4>

08002d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4e:	e7fe      	b.n	8002d4e <BusFault_Handler+0x4>

08002d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <UsageFault_Handler+0x4>

08002d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d7e:	f000 fa5b 	bl	8003238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002d8e:	f001 fe9e 	bl	8004ace <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20001370 	.word	0x20001370

08002d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	2b2f      	cmp	r3, #47	; 0x2f
 8002db6:	d908      	bls.n	8002dca <get_char+0x22>
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b39      	cmp	r3, #57	; 0x39
 8002dbc:	d805      	bhi.n	8002dca <get_char+0x22>
		return vfd_digits[input - '0'];
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	3b30      	subs	r3, #48	; 0x30
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <get_char+0xc4>)
 8002dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dc8:	e04a      	b.n	8002e60 <get_char+0xb8>
	if (0 <= input && input <= 9)
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	d804      	bhi.n	8002dda <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <get_char+0xc4>)
 8002dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dd8:	e042      	b.n	8002e60 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	e00e      	b.n	8002dfe <get_char+0x56>
		if (vfd_special_char[i] == input)
 8002de0:	4a23      	ldr	r2, [pc, #140]	; (8002e70 <get_char+0xc8>)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	79fa      	ldrb	r2, [r7, #7]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d104      	bne.n	8002df8 <get_char+0x50>
			return vfd_special[i];
 8002dee:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <get_char+0xcc>)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002df6:	e033      	b.n	8002e60 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b15      	cmp	r3, #21
 8002e02:	d9ed      	bls.n	8002de0 <get_char+0x38>
	if ('a' <= input && input <= 'z')
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	2b60      	cmp	r3, #96	; 0x60
 8002e08:	d908      	bls.n	8002e1c <get_char+0x74>
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	2b7a      	cmp	r3, #122	; 0x7a
 8002e0e:	d805      	bhi.n	8002e1c <get_char+0x74>
		return vfd_alpha[input - 'a'];
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	3b61      	subs	r3, #97	; 0x61
 8002e14:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <get_char+0xd0>)
 8002e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e1a:	e021      	b.n	8002e60 <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	2b40      	cmp	r3, #64	; 0x40
 8002e20:	d908      	bls.n	8002e34 <get_char+0x8c>
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2b5a      	cmp	r3, #90	; 0x5a
 8002e26:	d805      	bhi.n	8002e34 <get_char+0x8c>
		return vfd_alpha[input - 'A'];
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	3b41      	subs	r3, #65	; 0x41
 8002e2c:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <get_char+0xd0>)
 8002e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e32:	e015      	b.n	8002e60 <get_char+0xb8>
	if (192 <= input && input <= 223)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2bbf      	cmp	r3, #191	; 0xbf
 8002e38:	d908      	bls.n	8002e4c <get_char+0xa4>
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	2bdf      	cmp	r3, #223	; 0xdf
 8002e3e:	d805      	bhi.n	8002e4c <get_char+0xa4>
		return vfd_alpha_ru[input - 192];
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	3bc0      	subs	r3, #192	; 0xc0
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <get_char+0xd4>)
 8002e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e4a:	e009      	b.n	8002e60 <get_char+0xb8>
	if (224 <= input && input <= 255)
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	2bdf      	cmp	r3, #223	; 0xdf
 8002e50:	d905      	bls.n	8002e5e <get_char+0xb6>
		return vfd_alpha_ru[input - 224];
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	3be0      	subs	r3, #224	; 0xe0
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <get_char+0xd4>)
 8002e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e5c:	e000      	b.n	8002e60 <get_char+0xb8>
	return 0;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	0800bc70 	.word	0x0800bc70
 8002e70:	0800bd24 	.word	0x0800bd24
 8002e74:	0800bcf8 	.word	0x0800bcf8
 8002e78:	0800bc84 	.word	0x0800bc84
 8002e7c:	0800bcb8 	.word	0x0800bcb8

08002e80 <str2vfd>:

void str2vfd(char * str)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 8002e88:	230a      	movs	r3, #10
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e028      	b.n	8002ee0 <str2vfd+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 8002e8e:	493e      	ldr	r1, [pc, #248]	; (8002f88 <str2vfd+0x108>)
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	b2d8      	uxtb	r0, r3
 8002ea2:	4939      	ldr	r1, [pc, #228]	; (8002f88 <str2vfd+0x108>)
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	440b      	add	r3, r1
 8002eae:	4602      	mov	r2, r0
 8002eb0:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 8002eb2:	4935      	ldr	r1, [pc, #212]	; (8002f88 <str2vfd+0x108>)
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ec6:	b2d8      	uxtb	r0, r3
 8002ec8:	492f      	ldr	r1, [pc, #188]	; (8002f88 <str2vfd+0x108>)
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	dcd3      	bgt.n	8002e8e <str2vfd+0xe>
	}
	uint8_t i = 10;
 8002ee6:	230a      	movs	r3, #10
 8002ee8:	72fb      	strb	r3, [r7, #11]
	while (*str)
 8002eea:	e042      	b.n	8002f72 <str2vfd+0xf2>
	{
		 buf = get_char(*(str++));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff57 	bl	8002da8 <get_char>
 8002efa:	4603      	mov	r3, r0
 8002efc:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 8002efe:	7afa      	ldrb	r2, [r7, #11]
 8002f00:	4921      	ldr	r1, [pc, #132]	; (8002f88 <str2vfd+0x108>)
 8002f02:	4613      	mov	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	440b      	add	r3, r1
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	b25a      	sxtb	r2, r3
 8002f0e:	893b      	ldrh	r3, [r7, #8]
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	b25b      	sxtb	r3, r3
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	b25b      	sxtb	r3, r3
 8002f1c:	7afa      	ldrb	r2, [r7, #11]
 8002f1e:	b2d8      	uxtb	r0, r3
 8002f20:	4919      	ldr	r1, [pc, #100]	; (8002f88 <str2vfd+0x108>)
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	440b      	add	r3, r1
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 8002f2e:	7afa      	ldrb	r2, [r7, #11]
 8002f30:	4915      	ldr	r1, [pc, #84]	; (8002f88 <str2vfd+0x108>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	b25a      	sxtb	r2, r3
 8002f40:	893b      	ldrh	r3, [r7, #8]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	b25b      	sxtb	r3, r3
 8002f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	7afa      	ldrb	r2, [r7, #11]
 8002f54:	b2d8      	uxtb	r0, r3
 8002f56:	490c      	ldr	r1, [pc, #48]	; (8002f88 <str2vfd+0x108>)
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	440b      	add	r3, r1
 8002f60:	3301      	adds	r3, #1
 8002f62:	4602      	mov	r2, r0
 8002f64:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 8002f66:	7afb      	ldrb	r3, [r7, #11]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	72fb      	strb	r3, [r7, #11]
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <str2vfd+0xfc>
	while (*str)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1b8      	bne.n	8002eec <str2vfd+0x6c>
			 break;
	}
}
 8002f7a:	e000      	b.n	8002f7e <str2vfd+0xfe>
			 break;
 8002f7c:	bf00      	nop
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200005a4 	.word	0x200005a4

08002f8c <symbols_vfd>:

void symbols_vfd(uint32_t symbols)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(vfd_symbols)/sizeof(vfd_symbols[0]); i++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	e07a      	b.n	8003090 <symbols_vfd+0x104>
	{
		if (symbols & (1<<i))
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d036      	beq.n	800301a <symbols_vfd+0x8e>
		{
			// set symbol
			for (int b = 0; b < 3; b++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	e02f      	b.n	8003012 <symbols_vfd+0x86>
			  vfd.arr2[vfd_symbols[i][0]][b] |= ((1<<vfd_symbols[i][1])>>(b<<3))&0xFF;
 8002fb2:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <symbols_vfd+0x118>)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4a3a      	ldr	r2, [pc, #232]	; (80030a8 <symbols_vfd+0x11c>)
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	440b      	add	r3, r1
 8002fc4:	441a      	add	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b25a      	sxtb	r2, r3
 8002fce:	4935      	ldr	r1, [pc, #212]	; (80030a4 <symbols_vfd+0x118>)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	440b      	add	r3, r1
 8002fd6:	785b      	ldrb	r3, [r3, #1]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	2301      	movs	r3, #1
 8002fdc:	fa03 f101 	lsl.w	r1, r3, r1
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	fa41 f303 	asr.w	r3, r1, r3
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	4313      	orrs	r3, r2
 8002fec:	b258      	sxtb	r0, r3
 8002fee:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <symbols_vfd+0x118>)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	b2c0      	uxtb	r0, r0
 8002ffa:	4a2b      	ldr	r2, [pc, #172]	; (80030a8 <symbols_vfd+0x11c>)
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	440b      	add	r3, r1
 8003002:	441a      	add	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	4602      	mov	r2, r0
 800300a:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	3301      	adds	r3, #1
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b02      	cmp	r3, #2
 8003016:	ddcc      	ble.n	8002fb2 <symbols_vfd+0x26>
 8003018:	e037      	b.n	800308a <symbols_vfd+0xfe>
		}
		else
		{
			// reset symbol
			for (int b = 0; b < 3; b++)
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e031      	b.n	8003084 <symbols_vfd+0xf8>
			  vfd.arr2[vfd_symbols[i][0]][b] &= ~(((1<<vfd_symbols[i][1])>>(b<<3))&0xFF);
 8003020:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <symbols_vfd+0x118>)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003028:	4619      	mov	r1, r3
 800302a:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <symbols_vfd+0x11c>)
 800302c:	460b      	mov	r3, r1
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	440b      	add	r3, r1
 8003032:	441a      	add	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b25a      	sxtb	r2, r3
 800303c:	4919      	ldr	r1, [pc, #100]	; (80030a4 <symbols_vfd+0x118>)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	440b      	add	r3, r1
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	4619      	mov	r1, r3
 8003048:	2301      	movs	r3, #1
 800304a:	fa03 f101 	lsl.w	r1, r3, r1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	fa41 f303 	asr.w	r3, r1, r3
 8003056:	b25b      	sxtb	r3, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	b25b      	sxtb	r3, r3
 800305c:	4013      	ands	r3, r2
 800305e:	b258      	sxtb	r0, r3
 8003060:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <symbols_vfd+0x118>)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003068:	4619      	mov	r1, r3
 800306a:	b2c0      	uxtb	r0, r0
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <symbols_vfd+0x11c>)
 800306e:	460b      	mov	r3, r1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	440b      	add	r3, r1
 8003074:	441a      	add	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	4602      	mov	r2, r0
 800307c:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b02      	cmp	r3, #2
 8003088:	ddca      	ble.n	8003020 <symbols_vfd+0x94>
	for (int i = 0; i < sizeof(vfd_symbols)/sizeof(vfd_symbols[0]); i++)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	3301      	adds	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b18      	cmp	r3, #24
 8003094:	d981      	bls.n	8002f9a <symbols_vfd+0xe>
		}
	}
}
 8003096:	bf00      	nop
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	0800bd3c 	.word	0x0800bd3c
 80030a8:	200005a4 	.word	0x200005a4

080030ac <clr_vfd>:

void clr_vfd(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	e007      	b.n	80030c8 <clr_vfd+0x1c>
		  vfd.arr1[a] = 0;
 80030b8:	4a08      	ldr	r2, [pc, #32]	; (80030dc <clr_vfd+0x30>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3301      	adds	r3, #1
 80030c6:	607b      	str	r3, [r7, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d9f4      	bls.n	80030b8 <clr_vfd+0xc>
}
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	200005a4 	.word	0x200005a4

080030e0 <save_vfd>:

uint8_t backup[11*3];

void save_vfd(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	e00b      	b.n	8003104 <save_vfd+0x24>
		backup[i] = vfd.arr1[i];
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <save_vfd+0x38>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	7819      	ldrb	r1, [r3, #0]
 80030f4:	4a09      	ldr	r2, [pc, #36]	; (800311c <save_vfd+0x3c>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	460a      	mov	r2, r1
 80030fc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3301      	adds	r3, #1
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b20      	cmp	r3, #32
 8003108:	d9f0      	bls.n	80030ec <save_vfd+0xc>
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	200005a4 	.word	0x200005a4
 800311c:	200006b4 	.word	0x200006b4

08003120 <restore_vfd>:

void restore_vfd(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	e00b      	b.n	8003144 <restore_vfd+0x24>
		vfd.arr1[i] = backup[i];
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <restore_vfd+0x38>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	7819      	ldrb	r1, [r3, #0]
 8003134:	4a09      	ldr	r2, [pc, #36]	; (800315c <restore_vfd+0x3c>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	460a      	mov	r2, r1
 800313c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3301      	adds	r3, #1
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b20      	cmp	r3, #32
 8003148:	d9f0      	bls.n	800312c <restore_vfd+0xc>
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	200006b4 	.word	0x200006b4
 800315c:	200005a4 	.word	0x200005a4

08003160 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003160:	480c      	ldr	r0, [pc, #48]	; (8003194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003162:	490d      	ldr	r1, [pc, #52]	; (8003198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003164:	4a0d      	ldr	r2, [pc, #52]	; (800319c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003168:	e002      	b.n	8003170 <LoopCopyDataInit>

0800316a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800316a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800316c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800316e:	3304      	adds	r3, #4

08003170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003174:	d3f9      	bcc.n	800316a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003178:	4c0a      	ldr	r4, [pc, #40]	; (80031a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800317a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800317c:	e001      	b.n	8003182 <LoopFillZerobss>

0800317e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800317e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003180:	3204      	adds	r2, #4

08003182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003184:	d3fb      	bcc.n	800317e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003186:	f7ff fe09 	bl	8002d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800318a:	f008 fa03 	bl	800b594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800318e:	f7fd fd11 	bl	8000bb4 <main>
  bx lr
 8003192:	4770      	bx	lr
  ldr r0, =_sdata
 8003194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003198:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 800319c:	0800bd78 	.word	0x0800bd78
  ldr r2, =_sbss
 80031a0:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80031a4:	2000165c 	.word	0x2000165c

080031a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031a8:	e7fe      	b.n	80031a8 <ADC1_2_IRQHandler>
	...

080031ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_Init+0x28>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <HAL_Init+0x28>)
 80031b6:	f043 0310 	orr.w	r3, r3, #16
 80031ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031bc:	2003      	movs	r0, #3
 80031be:	f000 f947 	bl	8003450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031c2:	200f      	movs	r0, #15
 80031c4:	f000 f808 	bl	80031d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c8:	f7ff fcfa 	bl	8002bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40022000 	.word	0x40022000

080031d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_InitTick+0x54>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_InitTick+0x58>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4619      	mov	r1, r3
 80031ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80031f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f95f 	bl	80034ba <HAL_SYSTICK_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e00e      	b.n	8003224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b0f      	cmp	r3, #15
 800320a:	d80a      	bhi.n	8003222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800320c:	2200      	movs	r2, #0
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f000 f927 	bl	8003466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003218:	4a06      	ldr	r2, [pc, #24]	; (8003234 <HAL_InitTick+0x5c>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000000c 	.word	0x2000000c
 8003230:	20000014 	.word	0x20000014
 8003234:	20000010 	.word	0x20000010

08003238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_IncTick+0x1c>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_IncTick+0x20>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4413      	add	r3, r2
 8003248:	4a03      	ldr	r2, [pc, #12]	; (8003258 <HAL_IncTick+0x20>)
 800324a:	6013      	str	r3, [r2, #0]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	20000014 	.word	0x20000014
 8003258:	200006d8 	.word	0x200006d8

0800325c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTick;
 8003260:	4b02      	ldr	r3, [pc, #8]	; (800326c <HAL_GetTick+0x10>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	200006d8 	.word	0x200006d8

08003270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff fff0 	bl	800325c <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d005      	beq.n	8003296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_Delay+0x44>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003296:	bf00      	nop
 8003298:	f7ff ffe0 	bl	800325c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d8f7      	bhi.n	8003298 <HAL_Delay+0x28>
  {
  }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000014 	.word	0x20000014

080032b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4906      	ldr	r1, [pc, #24]	; (8003350 <__NVIC_EnableIRQ+0x34>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	e000e100 	.word	0xe000e100

08003354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	db0a      	blt.n	800337e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	490c      	ldr	r1, [pc, #48]	; (80033a0 <__NVIC_SetPriority+0x4c>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	0112      	lsls	r2, r2, #4
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	440b      	add	r3, r1
 8003378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800337c:	e00a      	b.n	8003394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	4908      	ldr	r1, [pc, #32]	; (80033a4 <__NVIC_SetPriority+0x50>)
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	3b04      	subs	r3, #4
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	440b      	add	r3, r1
 8003392:	761a      	strb	r2, [r3, #24]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000e100 	.word	0xe000e100
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f1c3 0307 	rsb	r3, r3, #7
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	bf28      	it	cs
 80033c6:	2304      	movcs	r3, #4
 80033c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d902      	bls.n	80033d8 <NVIC_EncodePriority+0x30>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3b03      	subs	r3, #3
 80033d6:	e000      	b.n	80033da <NVIC_EncodePriority+0x32>
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43da      	mvns	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	401a      	ands	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f0:	f04f 31ff 	mov.w	r1, #4294967295
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43d9      	mvns	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	4313      	orrs	r3, r2
         );
}
 8003402:	4618      	mov	r0, r3
 8003404:	3724      	adds	r7, #36	; 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800341c:	d301      	bcc.n	8003422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341e:	2301      	movs	r3, #1
 8003420:	e00f      	b.n	8003442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <SysTick_Config+0x40>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342a:	210f      	movs	r1, #15
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f7ff ff90 	bl	8003354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <SysTick_Config+0x40>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <SysTick_Config+0x40>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff2d 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003478:	f7ff ff42 	bl	8003300 <__NVIC_GetPriorityGrouping>
 800347c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff ff90 	bl	80033a8 <NVIC_EncodePriority>
 8003488:	4602      	mov	r2, r0
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff5f 	bl	8003354 <__NVIC_SetPriority>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff35 	bl	800331c <__NVIC_EnableIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ffa2 	bl	800340c <SysTick_Config>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b08b      	sub	sp, #44	; 0x2c
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034e2:	2300      	movs	r3, #0
 80034e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e6:	e169      	b.n	80037bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034e8:	2201      	movs	r2, #1
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	429a      	cmp	r2, r3
 8003502:	f040 8158 	bne.w	80037b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4a9a      	ldr	r2, [pc, #616]	; (8003774 <HAL_GPIO_Init+0x2a0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d05e      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
 8003510:	4a98      	ldr	r2, [pc, #608]	; (8003774 <HAL_GPIO_Init+0x2a0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d875      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 8003516:	4a98      	ldr	r2, [pc, #608]	; (8003778 <HAL_GPIO_Init+0x2a4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d058      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
 800351c:	4a96      	ldr	r2, [pc, #600]	; (8003778 <HAL_GPIO_Init+0x2a4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d86f      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 8003522:	4a96      	ldr	r2, [pc, #600]	; (800377c <HAL_GPIO_Init+0x2a8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d052      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
 8003528:	4a94      	ldr	r2, [pc, #592]	; (800377c <HAL_GPIO_Init+0x2a8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d869      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 800352e:	4a94      	ldr	r2, [pc, #592]	; (8003780 <HAL_GPIO_Init+0x2ac>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d04c      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
 8003534:	4a92      	ldr	r2, [pc, #584]	; (8003780 <HAL_GPIO_Init+0x2ac>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d863      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 800353a:	4a92      	ldr	r2, [pc, #584]	; (8003784 <HAL_GPIO_Init+0x2b0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d046      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
 8003540:	4a90      	ldr	r2, [pc, #576]	; (8003784 <HAL_GPIO_Init+0x2b0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d85d      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 8003546:	2b12      	cmp	r3, #18
 8003548:	d82a      	bhi.n	80035a0 <HAL_GPIO_Init+0xcc>
 800354a:	2b12      	cmp	r3, #18
 800354c:	d859      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 800354e:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <HAL_GPIO_Init+0x80>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	080035cf 	.word	0x080035cf
 8003558:	080035a9 	.word	0x080035a9
 800355c:	080035bb 	.word	0x080035bb
 8003560:	080035fd 	.word	0x080035fd
 8003564:	08003603 	.word	0x08003603
 8003568:	08003603 	.word	0x08003603
 800356c:	08003603 	.word	0x08003603
 8003570:	08003603 	.word	0x08003603
 8003574:	08003603 	.word	0x08003603
 8003578:	08003603 	.word	0x08003603
 800357c:	08003603 	.word	0x08003603
 8003580:	08003603 	.word	0x08003603
 8003584:	08003603 	.word	0x08003603
 8003588:	08003603 	.word	0x08003603
 800358c:	08003603 	.word	0x08003603
 8003590:	08003603 	.word	0x08003603
 8003594:	08003603 	.word	0x08003603
 8003598:	080035b1 	.word	0x080035b1
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	4a79      	ldr	r2, [pc, #484]	; (8003788 <HAL_GPIO_Init+0x2b4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035a6:	e02c      	b.n	8003602 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	623b      	str	r3, [r7, #32]
          break;
 80035ae:	e029      	b.n	8003604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	3304      	adds	r3, #4
 80035b6:	623b      	str	r3, [r7, #32]
          break;
 80035b8:	e024      	b.n	8003604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	3308      	adds	r3, #8
 80035c0:	623b      	str	r3, [r7, #32]
          break;
 80035c2:	e01f      	b.n	8003604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	330c      	adds	r3, #12
 80035ca:	623b      	str	r3, [r7, #32]
          break;
 80035cc:	e01a      	b.n	8003604 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035d6:	2304      	movs	r3, #4
 80035d8:	623b      	str	r3, [r7, #32]
          break;
 80035da:	e013      	b.n	8003604 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035e4:	2308      	movs	r3, #8
 80035e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	611a      	str	r2, [r3, #16]
          break;
 80035ee:	e009      	b.n	8003604 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035f0:	2308      	movs	r3, #8
 80035f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	615a      	str	r2, [r3, #20]
          break;
 80035fa:	e003      	b.n	8003604 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035fc:	2300      	movs	r3, #0
 80035fe:	623b      	str	r3, [r7, #32]
          break;
 8003600:	e000      	b.n	8003604 <HAL_GPIO_Init+0x130>
          break;
 8003602:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2bff      	cmp	r3, #255	; 0xff
 8003608:	d801      	bhi.n	800360e <HAL_GPIO_Init+0x13a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	e001      	b.n	8003612 <HAL_GPIO_Init+0x13e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2bff      	cmp	r3, #255	; 0xff
 8003618:	d802      	bhi.n	8003620 <HAL_GPIO_Init+0x14c>
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	e002      	b.n	8003626 <HAL_GPIO_Init+0x152>
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	3b08      	subs	r3, #8
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	210f      	movs	r1, #15
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	401a      	ands	r2, r3
 8003638:	6a39      	ldr	r1, [r7, #32]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	431a      	orrs	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80b1 	beq.w	80037b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003654:	4b4d      	ldr	r3, [pc, #308]	; (800378c <HAL_GPIO_Init+0x2b8>)
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	4a4c      	ldr	r2, [pc, #304]	; (800378c <HAL_GPIO_Init+0x2b8>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6193      	str	r3, [r2, #24]
 8003660:	4b4a      	ldr	r3, [pc, #296]	; (800378c <HAL_GPIO_Init+0x2b8>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800366c:	4a48      	ldr	r2, [pc, #288]	; (8003790 <HAL_GPIO_Init+0x2bc>)
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	3302      	adds	r3, #2
 8003674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003678:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	220f      	movs	r2, #15
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a40      	ldr	r2, [pc, #256]	; (8003794 <HAL_GPIO_Init+0x2c0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_GPIO_Init+0x1ec>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3f      	ldr	r2, [pc, #252]	; (8003798 <HAL_GPIO_Init+0x2c4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00d      	beq.n	80036bc <HAL_GPIO_Init+0x1e8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3e      	ldr	r2, [pc, #248]	; (800379c <HAL_GPIO_Init+0x2c8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d007      	beq.n	80036b8 <HAL_GPIO_Init+0x1e4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a3d      	ldr	r2, [pc, #244]	; (80037a0 <HAL_GPIO_Init+0x2cc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_GPIO_Init+0x1e0>
 80036b0:	2303      	movs	r3, #3
 80036b2:	e006      	b.n	80036c2 <HAL_GPIO_Init+0x1ee>
 80036b4:	2304      	movs	r3, #4
 80036b6:	e004      	b.n	80036c2 <HAL_GPIO_Init+0x1ee>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e002      	b.n	80036c2 <HAL_GPIO_Init+0x1ee>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_GPIO_Init+0x1ee>
 80036c0:	2300      	movs	r3, #0
 80036c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c4:	f002 0203 	and.w	r2, r2, #3
 80036c8:	0092      	lsls	r2, r2, #2
 80036ca:	4093      	lsls	r3, r2
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036d2:	492f      	ldr	r1, [pc, #188]	; (8003790 <HAL_GPIO_Init+0x2bc>)
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	3302      	adds	r3, #2
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d006      	beq.n	80036fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036ec:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	492c      	ldr	r1, [pc, #176]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036fa:	4b2a      	ldr	r3, [pc, #168]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	43db      	mvns	r3, r3
 8003702:	4928      	ldr	r1, [pc, #160]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003704:	4013      	ands	r3, r2
 8003706:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d006      	beq.n	8003722 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003714:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	4922      	ldr	r1, [pc, #136]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
 8003720:	e006      	b.n	8003730 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	43db      	mvns	r3, r3
 800372a:	491e      	ldr	r1, [pc, #120]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 800372c:	4013      	ands	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	4918      	ldr	r1, [pc, #96]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]
 8003748:	e006      	b.n	8003758 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	43db      	mvns	r3, r3
 8003752:	4914      	ldr	r1, [pc, #80]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003754:	4013      	ands	r3, r2
 8003756:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d021      	beq.n	80037a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	490e      	ldr	r1, [pc, #56]	; (80037a4 <HAL_GPIO_Init+0x2d0>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	4313      	orrs	r3, r2
 800376e:	60cb      	str	r3, [r1, #12]
 8003770:	e021      	b.n	80037b6 <HAL_GPIO_Init+0x2e2>
 8003772:	bf00      	nop
 8003774:	10320000 	.word	0x10320000
 8003778:	10310000 	.word	0x10310000
 800377c:	10220000 	.word	0x10220000
 8003780:	10210000 	.word	0x10210000
 8003784:	10120000 	.word	0x10120000
 8003788:	10110000 	.word	0x10110000
 800378c:	40021000 	.word	0x40021000
 8003790:	40010000 	.word	0x40010000
 8003794:	40010800 	.word	0x40010800
 8003798:	40010c00 	.word	0x40010c00
 800379c:	40011000 	.word	0x40011000
 80037a0:	40011400 	.word	0x40011400
 80037a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_GPIO_Init+0x304>)
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	4909      	ldr	r1, [pc, #36]	; (80037d8 <HAL_GPIO_Init+0x304>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	3301      	adds	r3, #1
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f47f ae8e 	bne.w	80034e8 <HAL_GPIO_Init+0x14>
  }
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	372c      	adds	r7, #44	; 0x2c
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	40010400 	.word	0x40010400

080037dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	e001      	b.n	80037fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	807b      	strh	r3, [r7, #2]
 8003816:	4613      	mov	r3, r2
 8003818:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800381a:	787b      	ldrb	r3, [r7, #1]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003820:	887a      	ldrh	r2, [r7, #2]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003826:	e003      	b.n	8003830 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003828:	887b      	ldrh	r3, [r7, #2]
 800382a:	041a      	lsls	r2, r3, #16
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	611a      	str	r2, [r3, #16]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	460b      	mov	r3, r1
 8003844:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800384c:	887a      	ldrh	r2, [r7, #2]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4013      	ands	r3, r2
 8003852:	041a      	lsls	r2, r3, #16
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	43d9      	mvns	r1, r3
 8003858:	887b      	ldrh	r3, [r7, #2]
 800385a:	400b      	ands	r3, r1
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	611a      	str	r2, [r3, #16]
}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e12b      	b.n	8003ad6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff f9c6 	bl	8002c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	; 0x24
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038d0:	f003 f868 	bl	80069a4 <HAL_RCC_GetPCLK1Freq>
 80038d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4a81      	ldr	r2, [pc, #516]	; (8003ae0 <HAL_I2C_Init+0x274>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d807      	bhi.n	80038f0 <HAL_I2C_Init+0x84>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a80      	ldr	r2, [pc, #512]	; (8003ae4 <HAL_I2C_Init+0x278>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bf94      	ite	ls
 80038e8:	2301      	movls	r3, #1
 80038ea:	2300      	movhi	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e006      	b.n	80038fe <HAL_I2C_Init+0x92>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a7d      	ldr	r2, [pc, #500]	; (8003ae8 <HAL_I2C_Init+0x27c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bf94      	ite	ls
 80038f8:	2301      	movls	r3, #1
 80038fa:	2300      	movhi	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e0e7      	b.n	8003ad6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a78      	ldr	r2, [pc, #480]	; (8003aec <HAL_I2C_Init+0x280>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	0c9b      	lsrs	r3, r3, #18
 8003910:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a6a      	ldr	r2, [pc, #424]	; (8003ae0 <HAL_I2C_Init+0x274>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d802      	bhi.n	8003940 <HAL_I2C_Init+0xd4>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	3301      	adds	r3, #1
 800393e:	e009      	b.n	8003954 <HAL_I2C_Init+0xe8>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	4a69      	ldr	r2, [pc, #420]	; (8003af0 <HAL_I2C_Init+0x284>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	3301      	adds	r3, #1
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	430b      	orrs	r3, r1
 800395a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003966:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	495c      	ldr	r1, [pc, #368]	; (8003ae0 <HAL_I2C_Init+0x274>)
 8003970:	428b      	cmp	r3, r1
 8003972:	d819      	bhi.n	80039a8 <HAL_I2C_Init+0x13c>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1e59      	subs	r1, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003982:	1c59      	adds	r1, r3, #1
 8003984:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003988:	400b      	ands	r3, r1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_I2C_Init+0x138>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1e59      	subs	r1, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fbb1 f3f3 	udiv	r3, r1, r3
 800399c:	3301      	adds	r3, #1
 800399e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a2:	e051      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 80039a4:	2304      	movs	r3, #4
 80039a6:	e04f      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d111      	bne.n	80039d4 <HAL_I2C_Init+0x168>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e58      	subs	r0, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	e012      	b.n	80039fa <HAL_I2C_Init+0x18e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	0099      	lsls	r1, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Init+0x196>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e022      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10e      	bne.n	8003a28 <HAL_I2C_Init+0x1bc>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e58      	subs	r0, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	440b      	add	r3, r1
 8003a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a26:	e00f      	b.n	8003a48 <HAL_I2C_Init+0x1dc>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	0099      	lsls	r1, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	6809      	ldr	r1, [r1, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6911      	ldr	r1, [r2, #16]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68d2      	ldr	r2, [r2, #12]
 8003a82:	4311      	orrs	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	000186a0 	.word	0x000186a0
 8003ae4:	001e847f 	.word	0x001e847f
 8003ae8:	003d08ff 	.word	0x003d08ff
 8003aec:	431bde83 	.word	0x431bde83
 8003af0:	10624dd3 	.word	0x10624dd3

08003af4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	4608      	mov	r0, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	461a      	mov	r2, r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	817b      	strh	r3, [r7, #10]
 8003b06:	460b      	mov	r3, r1
 8003b08:	813b      	strh	r3, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b0e:	f7ff fba5 	bl	800325c <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	f040 80d9 	bne.w	8003cd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	2319      	movs	r3, #25
 8003b28:	2201      	movs	r2, #1
 8003b2a:	496d      	ldr	r1, [pc, #436]	; (8003ce0 <HAL_I2C_Mem_Write+0x1ec>)
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fcc1 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e0cc      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_I2C_Mem_Write+0x56>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0c5      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d007      	beq.n	8003b70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2221      	movs	r2, #33	; 0x21
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2240      	movs	r2, #64	; 0x40
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a3a      	ldr	r2, [r7, #32]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a4d      	ldr	r2, [pc, #308]	; (8003ce4 <HAL_I2C_Mem_Write+0x1f0>)
 8003bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bb2:	88f8      	ldrh	r0, [r7, #6]
 8003bb4:	893a      	ldrh	r2, [r7, #8]
 8003bb6:	8979      	ldrh	r1, [r7, #10]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 faf8 	bl	80041b8 <I2C_RequestMemoryWrite>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d052      	beq.n	8003c74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e081      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fd42 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d107      	bne.n	8003bfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06b      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d11b      	bne.n	8003c74 <HAL_I2C_Mem_Write+0x180>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1aa      	bne.n	8003bd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fd2e 	bl	80046e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d107      	bne.n	8003ca4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e016      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	00100002 	.word	0x00100002
 8003ce4:	ffff0000 	.word	0xffff0000

08003ce8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	; 0x30
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	817b      	strh	r3, [r7, #10]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	813b      	strh	r3, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d06:	f7ff faa9 	bl	800325c <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	f040 8244 	bne.w	80041a2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2319      	movs	r3, #25
 8003d20:	2201      	movs	r2, #1
 8003d22:	4982      	ldr	r1, [pc, #520]	; (8003f2c <HAL_I2C_Mem_Read+0x244>)
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fbc5 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
 8003d32:	e237      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Mem_Read+0x5a>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e230      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4bc>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d007      	beq.n	8003d68 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2222      	movs	r2, #34	; 0x22
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2240      	movs	r2, #64	; 0x40
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a62      	ldr	r2, [pc, #392]	; (8003f30 <HAL_I2C_Mem_Read+0x248>)
 8003da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003daa:	88f8      	ldrh	r0, [r7, #6]
 8003dac:	893a      	ldrh	r2, [r7, #8]
 8003dae:	8979      	ldrh	r1, [r7, #10]
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	4603      	mov	r3, r0
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fa92 	bl	80042e4 <I2C_RequestMemoryRead>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e1ec      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d113      	bne.n	8003dfa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e1c0      	b.n	800417c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d11e      	bne.n	8003e40 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e12:	b672      	cpsid	i
}
 8003e14:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e3c:	b662      	cpsie	i
}
 8003e3e:	e035      	b.n	8003eac <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d11e      	bne.n	8003e86 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e58:	b672      	cpsid	i
}
 8003e5a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e82:	b662      	cpsie	i
}
 8003e84:	e012      	b.n	8003eac <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e94:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003eac:	e166      	b.n	800417c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	f200 811f 	bhi.w	80040f6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d123      	bne.n	8003f08 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fc4d 	bl	8004764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e167      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f06:	e139      	b.n	800417c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d152      	bne.n	8003fb6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	2200      	movs	r2, #0
 8003f18:	4906      	ldr	r1, [pc, #24]	; (8003f34 <HAL_I2C_Mem_Read+0x24c>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 faca 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e13c      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4bc>
 8003f2a:	bf00      	nop
 8003f2c:	00100002 	.word	0x00100002
 8003f30:	ffff0000 	.word	0xffff0000
 8003f34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f38:	b672      	cpsid	i
}
 8003f3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f7e:	b662      	cpsie	i
}
 8003f80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fb4:	e0e2      	b.n	800417c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	497b      	ldr	r1, [pc, #492]	; (80041ac <HAL_I2C_Mem_Read+0x4c4>)
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fa77 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0e9      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fe0:	b672      	cpsid	i
}
 8003fe2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004016:	4b66      	ldr	r3, [pc, #408]	; (80041b0 <HAL_I2C_Mem_Read+0x4c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	08db      	lsrs	r3, r3, #3
 800401c:	4a65      	ldr	r2, [pc, #404]	; (80041b4 <HAL_I2C_Mem_Read+0x4cc>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	0a1a      	lsrs	r2, r3, #8
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	00da      	lsls	r2, r3, #3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	3b01      	subs	r3, #1
 8004034:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d118      	bne.n	800406e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f043 0220 	orr.w	r2, r3, #32
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800405e:	b662      	cpsie	i
}
 8004060:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e09a      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b04      	cmp	r3, #4
 800407a:	d1d9      	bne.n	8004030 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040be:	b662      	cpsie	i
}
 80040c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f4:	e042      	b.n	800417c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fb32 	bl	8004764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e04c      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b04      	cmp	r3, #4
 8004148:	d118      	bne.n	800417c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	f47f ae94 	bne.w	8003eae <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e000      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3728      	adds	r7, #40	; 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	00010004 	.word	0x00010004
 80041b0:	2000000c 	.word	0x2000000c
 80041b4:	14f8b589 	.word	0x14f8b589

080041b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	461a      	mov	r2, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	817b      	strh	r3, [r7, #10]
 80041ca:	460b      	mov	r3, r1
 80041cc:	813b      	strh	r3, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f960 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004208:	d103      	bne.n	8004212 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e05f      	b.n	80042d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004216:	897b      	ldrh	r3, [r7, #10]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	6a3a      	ldr	r2, [r7, #32]
 800422a:	492d      	ldr	r1, [pc, #180]	; (80042e0 <I2C_RequestMemoryWrite+0x128>)
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f998 	bl	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e04c      	b.n	80042d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004254:	6a39      	ldr	r1, [r7, #32]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fa02 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00d      	beq.n	800427e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b04      	cmp	r3, #4
 8004268:	d107      	bne.n	800427a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e02b      	b.n	80042d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004284:	893b      	ldrh	r3, [r7, #8]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]
 800428e:	e021      	b.n	80042d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004290:	893b      	ldrh	r3, [r7, #8]
 8004292:	0a1b      	lsrs	r3, r3, #8
 8004294:	b29b      	uxth	r3, r3
 8004296:	b2da      	uxtb	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800429e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a0:	6a39      	ldr	r1, [r7, #32]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f9dc 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d107      	bne.n	80042c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e005      	b.n	80042d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ca:	893b      	ldrh	r3, [r7, #8]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	00010002 	.word	0x00010002

080042e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	4608      	mov	r0, r1
 80042ee:	4611      	mov	r1, r2
 80042f0:	461a      	mov	r2, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	817b      	strh	r3, [r7, #10]
 80042f6:	460b      	mov	r3, r1
 80042f8:	813b      	strh	r3, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800430c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800431c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	2200      	movs	r2, #0
 8004326:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f8c2 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004344:	d103      	bne.n	800434e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e0aa      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004352:	897b      	ldrh	r3, [r7, #10]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	4952      	ldr	r1, [pc, #328]	; (80044b0 <I2C_RequestMemoryRead+0x1cc>)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f8fa 	bl	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e097      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004390:	6a39      	ldr	r1, [r7, #32]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f964 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d107      	bne.n	80043b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e076      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d105      	bne.n	80043cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043c0:	893b      	ldrh	r3, [r7, #8]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	611a      	str	r2, [r3, #16]
 80043ca:	e021      	b.n	8004410 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043cc:	893b      	ldrh	r3, [r7, #8]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	6a39      	ldr	r1, [r7, #32]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f93e 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d107      	bne.n	8004402 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e050      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004406:	893b      	ldrh	r3, [r7, #8]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	6a39      	ldr	r1, [r7, #32]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f923 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00d      	beq.n	800443c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2b04      	cmp	r3, #4
 8004426:	d107      	bne.n	8004438 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e035      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800444a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2200      	movs	r2, #0
 8004454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f82b 	bl	80044b4 <I2C_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004472:	d103      	bne.n	800447c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e013      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004480:	897b      	ldrh	r3, [r7, #10]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	4906      	ldr	r1, [pc, #24]	; (80044b0 <I2C_RequestMemoryRead+0x1cc>)
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f863 	bl	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	00010002 	.word	0x00010002

080044b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c4:	e025      	b.n	8004512 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d021      	beq.n	8004512 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ce:	f7fe fec5 	bl	800325c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d302      	bcc.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d116      	bne.n	8004512 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e023      	b.n	800455a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d10d      	bne.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x84>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	43da      	mvns	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4013      	ands	r3, r2
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	bf0c      	ite	eq
 800452e:	2301      	moveq	r3, #1
 8004530:	2300      	movne	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	e00c      	b.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	43da      	mvns	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4013      	ands	r3, r2
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	429a      	cmp	r2, r3
 8004556:	d0b6      	beq.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004570:	e051      	b.n	8004616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	d123      	bne.n	80045ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004590:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800459a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0204 	orr.w	r2, r3, #4
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e046      	b.n	8004658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d021      	beq.n	8004616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d2:	f7fe fe43 	bl	800325c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d302      	bcc.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d116      	bne.n	8004616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e020      	b.n	8004658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d10c      	bne.n	800463a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	43da      	mvns	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	e00b      	b.n	8004652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	43da      	mvns	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4013      	ands	r3, r2
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d18d      	bne.n	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800466c:	e02d      	b.n	80046ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f8ce 	bl	8004810 <I2C_IsAcknowledgeFailed>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e02d      	b.n	80046da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d021      	beq.n	80046ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7fe fde9 	bl	800325c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d116      	bne.n	80046ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f043 0220 	orr.w	r2, r3, #32
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e007      	b.n	80046da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d4:	2b80      	cmp	r3, #128	; 0x80
 80046d6:	d1ca      	bne.n	800466e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046ee:	e02d      	b.n	800474c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f88d 	bl	8004810 <I2C_IsAcknowledgeFailed>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e02d      	b.n	800475c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d021      	beq.n	800474c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004708:	f7fe fda8 	bl	800325c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	429a      	cmp	r2, r3
 8004716:	d302      	bcc.n	800471e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d116      	bne.n	800474c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	f043 0220 	orr.w	r2, r3, #32
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e007      	b.n	800475c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d1ca      	bne.n	80046f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004770:	e042      	b.n	80047f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b10      	cmp	r3, #16
 800477e:	d119      	bne.n	80047b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0210 	mvn.w	r2, #16
 8004788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e029      	b.n	8004808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7fe fd52 	bl	800325c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d116      	bne.n	80047f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e007      	b.n	8004808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d1b5      	bne.n	8004772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004826:	d11b      	bne.n	8004860 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004830:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800486c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800486e:	b08b      	sub	sp, #44	; 0x2c
 8004870:	af06      	add	r7, sp, #24
 8004872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e0fd      	b.n	8004a7a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f006 fbd4 	bl	800b040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2203      	movs	r2, #3
 800489c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f002 fbf1 	bl	800708c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	687e      	ldr	r6, [r7, #4]
 80048b2:	466d      	mov	r5, sp
 80048b4:	f106 0410 	add.w	r4, r6, #16
 80048b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	1d33      	adds	r3, r6, #4
 80048c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048c4:	6838      	ldr	r0, [r7, #0]
 80048c6:	f002 fbbb 	bl	8007040 <USB_CoreInit>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0ce      	b.n	8004a7a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f002 fbec 	bl	80070c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	73fb      	strb	r3, [r7, #15]
 80048ec:	e04c      	b.n	8004988 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	440b      	add	r3, r1
 80048fe:	3301      	adds	r3, #1
 8004900:	2201      	movs	r2, #1
 8004902:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	440b      	add	r3, r1
 8004914:	7bfa      	ldrb	r2, [r7, #15]
 8004916:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004918:	7bfa      	ldrb	r2, [r7, #15]
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	b298      	uxth	r0, r3
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	440b      	add	r3, r1
 800492a:	3336      	adds	r3, #54	; 0x36
 800492c:	4602      	mov	r2, r0
 800492e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	440b      	add	r3, r1
 8004940:	3303      	adds	r3, #3
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	440b      	add	r3, r1
 8004954:	3338      	adds	r3, #56	; 0x38
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800495a:	7bfa      	ldrb	r2, [r7, #15]
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	440b      	add	r3, r1
 8004968:	333c      	adds	r3, #60	; 0x3c
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800496e:	7bfa      	ldrb	r2, [r7, #15]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	440b      	add	r3, r1
 800497c:	3340      	adds	r3, #64	; 0x40
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	3301      	adds	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
 8004988:	7bfa      	ldrb	r2, [r7, #15]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	429a      	cmp	r2, r3
 8004990:	d3ad      	bcc.n	80048ee <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004992:	2300      	movs	r3, #0
 8004994:	73fb      	strb	r3, [r7, #15]
 8004996:	e044      	b.n	8004a22 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004998:	7bfa      	ldrb	r2, [r7, #15]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	440b      	add	r3, r1
 80049a6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049ae:	7bfa      	ldrb	r2, [r7, #15]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	440b      	add	r3, r1
 80049bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049c0:	7bfa      	ldrb	r2, [r7, #15]
 80049c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049c4:	7bfa      	ldrb	r2, [r7, #15]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	440b      	add	r3, r1
 80049d2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049da:	7bfa      	ldrb	r2, [r7, #15]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	440b      	add	r3, r1
 80049e8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049f0:	7bfa      	ldrb	r2, [r7, #15]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	440b      	add	r3, r1
 80049fe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a06:	7bfa      	ldrb	r2, [r7, #15]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	440b      	add	r3, r1
 8004a14:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
 8004a22:	7bfa      	ldrb	r2, [r7, #15]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d3b5      	bcc.n	8004998 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	687e      	ldr	r6, [r7, #4]
 8004a34:	466d      	mov	r5, sp
 8004a36:	f106 0410 	add.w	r4, r6, #16
 8004a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	602b      	str	r3, [r5, #0]
 8004a42:	1d33      	adds	r3, r6, #4
 8004a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a46:	6838      	ldr	r0, [r7, #0]
 8004a48:	f002 fb46 	bl	80070d8 <USB_DevInit>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e00d      	b.n	8004a7a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f004 fcb7 	bl	80093e6 <USB_DevDisconnect>

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_PCD_Start+0x16>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e016      	b.n	8004ac6 <HAL_PCD_Start+0x44>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f002 fadb 	bl	8007060 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004aaa:	2101      	movs	r1, #1
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f006 fd3a 	bl	800b526 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f004 fc8b 	bl	80093d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b088      	sub	sp, #32
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f004 fc8d 	bl	80093fa <USB_ReadInterrupts>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aea:	d102      	bne.n	8004af2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fb61 	bl	80051b4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f004 fc7f 	bl	80093fa <USB_ReadInterrupts>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d112      	bne.n	8004b2e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1a:	b292      	uxth	r2, r2
 8004b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f006 fb08 	bl	800b136 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b26:	2100      	movs	r1, #0
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f925 	bl	8004d78 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f004 fc61 	bl	80093fa <USB_ReadInterrupts>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b42:	d10b      	bne.n	8004b5c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b56:	b292      	uxth	r2, r2
 8004b58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f004 fc4a 	bl	80093fa <USB_ReadInterrupts>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b70:	d10b      	bne.n	8004b8a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b84:	b292      	uxth	r2, r2
 8004b86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f004 fc33 	bl	80093fa <USB_ReadInterrupts>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9e:	d126      	bne.n	8004bee <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0204 	bic.w	r2, r2, #4
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0208 	bic.w	r2, r2, #8
 8004bca:	b292      	uxth	r2, r2
 8004bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f006 fae9 	bl	800b1a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004be8:	b292      	uxth	r2, r2
 8004bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f004 fc01 	bl	80093fa <USB_ReadInterrupts>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c02:	f040 8084 	bne.w	8004d0e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004c06:	2300      	movs	r3, #0
 8004c08:	77fb      	strb	r3, [r7, #31]
 8004c0a:	e011      	b.n	8004c30 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	7ffb      	ldrb	r3, [r7, #31]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	441a      	add	r2, r3
 8004c18:	7ffb      	ldrb	r3, [r7, #31]
 8004c1a:	8812      	ldrh	r2, [r2, #0]
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	f107 0120 	add.w	r1, r7, #32
 8004c24:	440b      	add	r3, r1
 8004c26:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004c2a:	7ffb      	ldrb	r3, [r7, #31]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	7ffb      	ldrb	r3, [r7, #31]
 8004c32:	2b07      	cmp	r3, #7
 8004c34:	d9ea      	bls.n	8004c0c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	b292      	uxth	r2, r2
 8004c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0201 	bic.w	r2, r2, #1
 8004c60:	b292      	uxth	r2, r2
 8004c62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004c66:	bf00      	nop
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f6      	beq.n	8004c68 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004c92:	2300      	movs	r3, #0
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e010      	b.n	8004cba <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004c98:	7ffb      	ldrb	r3, [r7, #31]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	7ffa      	ldrb	r2, [r7, #31]
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	440a      	add	r2, r1
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	f107 0120 	add.w	r1, r7, #32
 8004cac:	440b      	add	r3, r1
 8004cae:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004cb2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004cb4:	7ffb      	ldrb	r3, [r7, #31]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	77fb      	strb	r3, [r7, #31]
 8004cba:	7ffb      	ldrb	r3, [r7, #31]
 8004cbc:	2b07      	cmp	r3, #7
 8004cbe:	d9eb      	bls.n	8004c98 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0208 	orr.w	r2, r2, #8
 8004cd2:	b292      	uxth	r2, r2
 8004cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cea:	b292      	uxth	r2, r2
 8004cec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0204 	orr.w	r2, r2, #4
 8004d02:	b292      	uxth	r2, r2
 8004d04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f006 fa33 	bl	800b174 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f004 fb71 	bl	80093fa <USB_ReadInterrupts>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d22:	d10e      	bne.n	8004d42 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d36:	b292      	uxth	r2, r2
 8004d38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f006 f9ec 	bl	800b11a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f004 fb57 	bl	80093fa <USB_ReadInterrupts>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d56:	d10b      	bne.n	8004d70 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d6a:	b292      	uxth	r2, r2
 8004d6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004d70:	bf00      	nop
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_PCD_SetAddress+0x1a>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e013      	b.n	8004dba <HAL_PCD_SetAddress+0x42>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f004 fafe 	bl	80093ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	4608      	mov	r0, r1
 8004dcc:	4611      	mov	r1, r2
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	70fb      	strb	r3, [r7, #3]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	803b      	strh	r3, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	da0e      	bge.n	8004e06 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	705a      	strb	r2, [r3, #1]
 8004e04:	e00e      	b.n	8004e24 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	f003 0207 	and.w	r2, r3, #7
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e30:	883a      	ldrh	r2, [r7, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	78ba      	ldrb	r2, [r7, #2]
 8004e3a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d004      	beq.n	8004e4e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e4e:	78bb      	ldrb	r3, [r7, #2]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d102      	bne.n	8004e5a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_PCD_EP_Open+0xa6>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e00e      	b.n	8004e86 <HAL_PCD_EP_Open+0xc4>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68f9      	ldr	r1, [r7, #12]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f002 f94e 	bl	8007118 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004e84:	7afb      	ldrb	r3, [r7, #11]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da0e      	bge.n	8004ec0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	705a      	strb	r2, [r3, #1]
 8004ebe:	e00e      	b.n	8004ede <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	f003 0207 	and.w	r2, r3, #7
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_PCD_EP_Close+0x6a>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e00e      	b.n	8004f16 <HAL_PCD_EP_Close+0x88>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68f9      	ldr	r1, [r7, #12]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f002 fc70 	bl	80077ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	607a      	str	r2, [r7, #4]
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	f003 0207 	and.w	r2, r3, #7
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2200      	movs	r2, #0
 8004f56:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f5e:	7afb      	ldrb	r3, [r7, #11]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f6a:	7afb      	ldrb	r3, [r7, #11]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6979      	ldr	r1, [r7, #20]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f002 fe22 	bl	8007bc4 <USB_EPStartXfer>
 8004f80:	e005      	b.n	8004f8e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6979      	ldr	r1, [r7, #20]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f002 fe1b 	bl	8007bc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	f003 0207 	and.w	r2, r3, #7
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	440b      	add	r3, r1
 8004fb6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004fba:	681b      	ldr	r3, [r3, #0]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b086      	sub	sp, #24
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fd6:	7afb      	ldrb	r3, [r7, #11]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2200      	movs	r2, #0
 800500a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2201      	movs	r2, #1
 8005010:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005012:	7afb      	ldrb	r3, [r7, #11]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	b2da      	uxtb	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800501e:	7afb      	ldrb	r3, [r7, #11]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6979      	ldr	r1, [r7, #20]
 800502e:	4618      	mov	r0, r3
 8005030:	f002 fdc8 	bl	8007bc4 <USB_EPStartXfer>
 8005034:	e005      	b.n	8005042 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6979      	ldr	r1, [r7, #20]
 800503c:	4618      	mov	r0, r3
 800503e:	f002 fdc1 	bl	8007bc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	f003 0207 	and.w	r2, r3, #7
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	d901      	bls.n	800506a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e04c      	b.n	8005104 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800506a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800506e:	2b00      	cmp	r3, #0
 8005070:	da0e      	bge.n	8005090 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4413      	add	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	705a      	strb	r2, [r3, #1]
 800508e:	e00c      	b.n	80050aa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_PCD_EP_SetStall+0x7e>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e01c      	b.n	8005104 <HAL_PCD_EP_SetStall+0xb8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68f9      	ldr	r1, [r7, #12]
 80050d8:	4618      	mov	r0, r3
 80050da:	f004 f86a 	bl	80091b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d108      	bne.n	80050fa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f004 f98f 	bl	8009418 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	f003 020f 	and.w	r2, r3, #15
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	429a      	cmp	r2, r3
 8005124:	d901      	bls.n	800512a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e040      	b.n	80051ac <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800512a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800512e:	2b00      	cmp	r3, #0
 8005130:	da0e      	bge.n	8005150 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	705a      	strb	r2, [r3, #1]
 800514e:	e00e      	b.n	800516e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	f003 0207 	and.w	r2, r3, #7
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	b2da      	uxtb	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_PCD_EP_ClrStall+0x82>
 800518a:	2302      	movs	r3, #2
 800518c:	e00e      	b.n	80051ac <HAL_PCD_EP_ClrStall+0xa0>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	4618      	mov	r0, r3
 800519e:	f004 f858 	bl	8009252 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08e      	sub	sp, #56	; 0x38
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051bc:	e2ec      	b.n	8005798 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051c6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80051c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80051d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f040 8161 	bne.w	80054a0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80051de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d152      	bne.n	800528e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f8:	81fb      	strh	r3, [r7, #14]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	89fb      	ldrh	r3, [r7, #14]
 8005200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005208:	b29b      	uxth	r3, r3
 800520a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3328      	adds	r3, #40	; 0x28
 8005210:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800521a:	b29b      	uxth	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	3302      	adds	r3, #2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	441a      	add	r2, r3
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800524c:	2100      	movs	r1, #0
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f005 ff49 	bl	800b0e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 829b 	beq.w	8005798 <PCD_EP_ISR_Handler+0x5e4>
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f040 8296 	bne.w	8005798 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005278:	b2da      	uxtb	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	b292      	uxth	r2, r2
 8005280:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800528c:	e284      	b.n	8005798 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800529e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d034      	beq.n	8005312 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4413      	add	r3, r2
 80052bc:	3306      	adds	r3, #6
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f004 f8e6 	bl	80094b8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052f8:	4013      	ands	r3, r2
 80052fa:	823b      	strh	r3, [r7, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	8a3a      	ldrh	r2, [r7, #16]
 8005302:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005306:	b292      	uxth	r2, r2
 8005308:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f005 febe 	bl	800b08c <HAL_PCD_SetupStageCallback>
 8005310:	e242      	b.n	8005798 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005312:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005316:	2b00      	cmp	r3, #0
 8005318:	f280 823e 	bge.w	8005798 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29a      	uxth	r2, r3
 8005324:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005328:	4013      	ands	r3, r2
 800532a:	83bb      	strh	r3, [r7, #28]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	8bba      	ldrh	r2, [r7, #28]
 8005332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005336:	b292      	uxth	r2, r2
 8005338:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005342:	b29b      	uxth	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4413      	add	r3, r2
 800534e:	3306      	adds	r3, #6
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d019      	beq.n	80053a2 <PCD_EP_ISR_Handler+0x1ee>
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d015      	beq.n	80053a2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	6959      	ldr	r1, [r3, #20]
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005386:	b29b      	uxth	r3, r3
 8005388:	f004 f896 	bl	80094b8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	441a      	add	r2, r3
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800539a:	2100      	movs	r1, #0
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f005 fe87 	bl	800b0b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f040 81f2 	bne.w	8005798 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	4413      	add	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d112      	bne.n	8005402 <PCD_EP_ISR_Handler+0x24e>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	e02f      	b.n	8005462 <PCD_EP_ISR_Handler+0x2ae>
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b3e      	cmp	r3, #62	; 0x3e
 8005408:	d813      	bhi.n	8005432 <PCD_EP_ISR_Handler+0x27e>
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	633b      	str	r3, [r7, #48]	; 0x30
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <PCD_EP_ISR_Handler+0x270>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	3301      	adds	r3, #1
 8005422:	633b      	str	r3, [r7, #48]	; 0x30
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	b29b      	uxth	r3, r3
 8005428:	029b      	lsls	r3, r3, #10
 800542a:	b29a      	uxth	r2, r3
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	801a      	strh	r2, [r3, #0]
 8005430:	e017      	b.n	8005462 <PCD_EP_ISR_Handler+0x2ae>
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	633b      	str	r3, [r7, #48]	; 0x30
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <PCD_EP_ISR_Handler+0x298>
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	3b01      	subs	r3, #1
 800544a:	633b      	str	r3, [r7, #48]	; 0x30
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	b29b      	uxth	r3, r3
 8005450:	029b      	lsls	r3, r3, #10
 8005452:	b29b      	uxth	r3, r3
 8005454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545c:	b29a      	uxth	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800546e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005472:	827b      	strh	r3, [r7, #18]
 8005474:	8a7b      	ldrh	r3, [r7, #18]
 8005476:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800547a:	827b      	strh	r3, [r7, #18]
 800547c:	8a7b      	ldrh	r3, [r7, #18]
 800547e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005482:	827b      	strh	r3, [r7, #18]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	8a7b      	ldrh	r3, [r7, #18]
 800548a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549a:	b29b      	uxth	r3, r3
 800549c:	8013      	strh	r3, [r2, #0]
 800549e:	e17b      	b.n	8005798 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80054b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f280 80ea 	bge.w	8005690 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80054d2:	4013      	ands	r3, r2
 80054d4:	853b      	strh	r3, [r7, #40]	; 0x28
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80054e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054ea:	b292      	uxth	r2, r2
 80054ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	7b1b      	ldrb	r3, [r3, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d122      	bne.n	8005552 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005514:	b29b      	uxth	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	4413      	add	r3, r2
 8005520:	3306      	adds	r3, #6
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005534:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005536:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8087 	beq.w	800564c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	6959      	ldr	r1, [r3, #20]
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	88da      	ldrh	r2, [r3, #6]
 800554a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800554c:	f003 ffb4 	bl	80094b8 <USB_ReadPMA>
 8005550:	e07c      	b.n	800564c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	78db      	ldrb	r3, [r3, #3]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d108      	bne.n	800556c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800555a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800555c:	461a      	mov	r2, r3
 800555e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f927 	bl	80057b4 <HAL_PCD_EP_DB_Receive>
 8005566:	4603      	mov	r3, r0
 8005568:	86fb      	strh	r3, [r7, #54]	; 0x36
 800556a:	e06f      	b.n	800564c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	847b      	strh	r3, [r7, #34]	; 0x22
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d021      	beq.n	800560a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	3302      	adds	r3, #2
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ee:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80055f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d02a      	beq.n	800564c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	6959      	ldr	r1, [r3, #20]
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	891a      	ldrh	r2, [r3, #8]
 8005602:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005604:	f003 ff58 	bl	80094b8 <USB_ReadPMA>
 8005608:	e020      	b.n	800564c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005612:	b29b      	uxth	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	3306      	adds	r3, #6
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005632:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005634:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	6959      	ldr	r1, [r3, #20]
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	895a      	ldrh	r2, [r3, #10]
 8005646:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005648:	f003 ff36 	bl	80094b8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005652:	441a      	add	r2, r3
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	695a      	ldr	r2, [r3, #20]
 800565c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800565e:	441a      	add	r2, r3
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <PCD_EP_ISR_Handler+0x4c2>
 800566c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	429a      	cmp	r2, r3
 8005674:	d206      	bcs.n	8005684 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f005 fd17 	bl	800b0b0 <HAL_PCD_DataOutStageCallback>
 8005682:	e005      	b.n	8005690 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800568a:	4618      	mov	r0, r3
 800568c:	f002 fa9a 	bl	8007bc4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005690:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b00      	cmp	r3, #0
 8005698:	d07e      	beq.n	8005798 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800569a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	4413      	add	r3, r2
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80056c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c8:	843b      	strh	r3, [r7, #32]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	8c3b      	ldrh	r3, [r7, #32]
 80056da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	78db      	ldrb	r3, [r3, #3]
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d00c      	beq.n	8005708 <PCD_EP_ISR_Handler+0x554>
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	78db      	ldrb	r3, [r3, #3]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d146      	bne.n	800578c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80056fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005704:	2b00      	cmp	r3, #0
 8005706:	d141      	bne.n	800578c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005710:	b29b      	uxth	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	4413      	add	r3, r2
 800571c:	3302      	adds	r3, #2
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005730:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	8bfb      	ldrh	r3, [r7, #30]
 8005738:	429a      	cmp	r2, r3
 800573a:	d906      	bls.n	800574a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	699a      	ldr	r2, [r3, #24]
 8005740:	8bfb      	ldrh	r3, [r7, #30]
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	619a      	str	r2, [r3, #24]
 8005748:	e002      	b.n	8005750 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	2200      	movs	r2, #0
 800574e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d106      	bne.n	8005766 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f005 fcc1 	bl	800b0e6 <HAL_PCD_DataInStageCallback>
 8005764:	e018      	b.n	8005798 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	695a      	ldr	r2, [r3, #20]
 800576a:	8bfb      	ldrh	r3, [r7, #30]
 800576c:	441a      	add	r2, r3
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	8bfb      	ldrh	r3, [r7, #30]
 8005778:	441a      	add	r2, r3
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005784:	4618      	mov	r0, r3
 8005786:	f002 fa1d 	bl	8007bc4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800578a:	e005      	b.n	8005798 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800578c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800578e:	461a      	mov	r2, r3
 8005790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f91b 	bl	80059ce <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	b21b      	sxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f6ff ad0a 	blt.w	80051be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3738      	adds	r7, #56	; 0x38
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	4613      	mov	r3, r2
 80057c0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d07e      	beq.n	80058ca <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4413      	add	r3, r2
 80057e0:	3302      	adds	r3, #2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057f4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	8b7b      	ldrh	r3, [r7, #26]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d306      	bcc.n	800580e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	699a      	ldr	r2, [r3, #24]
 8005804:	8b7b      	ldrh	r3, [r7, #26]
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	619a      	str	r2, [r3, #24]
 800580c:	e002      	b.n	8005814 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2200      	movs	r2, #0
 8005812:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d123      	bne.n	8005864 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	833b      	strh	r3, [r7, #24]
 8005838:	8b3b      	ldrh	r3, [r7, #24]
 800583a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800583e:	833b      	strh	r3, [r7, #24]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	441a      	add	r2, r3
 800584e:	8b3b      	ldrh	r3, [r7, #24]
 8005850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005860:	b29b      	uxth	r3, r3
 8005862:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01f      	beq.n	80058ae <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005888:	82fb      	strh	r3, [r7, #22]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	441a      	add	r2, r3
 8005898:	8afb      	ldrh	r3, [r7, #22]
 800589a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80058ae:	8b7b      	ldrh	r3, [r7, #26]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8087 	beq.w	80059c4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6959      	ldr	r1, [r3, #20]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	891a      	ldrh	r2, [r3, #8]
 80058c2:	8b7b      	ldrh	r3, [r7, #26]
 80058c4:	f003 fdf8 	bl	80094b8 <USB_ReadPMA>
 80058c8:	e07c      	b.n	80059c4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4413      	add	r3, r2
 80058de:	3306      	adds	r3, #6
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	699a      	ldr	r2, [r3, #24]
 80058f8:	8b7b      	ldrh	r3, [r7, #26]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d306      	bcc.n	800590c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	8b7b      	ldrh	r3, [r7, #26]
 8005904:	1ad2      	subs	r2, r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	619a      	str	r2, [r3, #24]
 800590a:	e002      	b.n	8005912 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d123      	bne.n	8005962 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005934:	83fb      	strh	r3, [r7, #30]
 8005936:	8bfb      	ldrh	r3, [r7, #30]
 8005938:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800593c:	83fb      	strh	r3, [r7, #30]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	8bfb      	ldrh	r3, [r7, #30]
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d11f      	bne.n	80059ac <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	83bb      	strh	r3, [r7, #28]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	8bbb      	ldrh	r3, [r7, #28]
 8005998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059ac:	8b7b      	ldrh	r3, [r7, #26]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6959      	ldr	r1, [r3, #20]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	895a      	ldrh	r2, [r3, #10]
 80059be:	8b7b      	ldrh	r3, [r7, #26]
 80059c0:	f003 fd7a 	bl	80094b8 <USB_ReadPMA>
    }
  }

  return count;
 80059c4:	8b7b      	ldrh	r3, [r7, #26]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b0a2      	sub	sp, #136	; 0x88
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	4613      	mov	r3, r2
 80059da:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 81c7 	beq.w	8005d76 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	3302      	adds	r3, #2
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d907      	bls.n	8005a30 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a28:	1ad2      	subs	r2, r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	619a      	str	r2, [r3, #24]
 8005a2e:	e002      	b.n	8005a36 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2200      	movs	r2, #0
 8005a34:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f040 80b9 	bne.w	8005bb2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d126      	bne.n	8005a96 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	4413      	add	r3, r2
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	011a      	lsls	r2, r3, #4
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	4413      	add	r3, r2
 8005a6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	e01a      	b.n	8005acc <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d116      	bne.n	8005acc <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	4413      	add	r3, r2
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	011a      	lsls	r2, r3, #4
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	4413      	add	r3, r2
 8005ac0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	2200      	movs	r2, #0
 8005aca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	623b      	str	r3, [r7, #32]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d126      	bne.n	8005b28 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4413      	add	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	011a      	lsls	r2, r3, #4
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	4413      	add	r3, r2
 8005afc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	e017      	b.n	8005b58 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d113      	bne.n	8005b58 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	4413      	add	r3, r2
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	011a      	lsls	r2, r3, #4
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b50:	61fb      	str	r3, [r7, #28]
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2200      	movs	r2, #0
 8005b56:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f005 fac1 	bl	800b0e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 82d4 	beq.w	8006118 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	827b      	strh	r3, [r7, #18]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	8a7b      	ldrh	r3, [r7, #18]
 8005b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8013      	strh	r3, [r2, #0]
 8005bb0:	e2b2      	b.n	8006118 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d021      	beq.n	8005c00 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	441a      	add	r2, r3
 8005be8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	f040 8286 	bne.w	8006118 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	695a      	ldr	r2, [r3, #20]
 8005c10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c14:	441a      	add	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c22:	441a      	add	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d309      	bcc.n	8005c48 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	6a1a      	ldr	r2, [r3, #32]
 8005c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c40:	1ad2      	subs	r2, r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	621a      	str	r2, [r3, #32]
 8005c46:	e015      	b.n	8005c74 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d107      	bne.n	8005c60 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005c50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c54:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c5e:	e009      	b.n	8005c74 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2200      	movs	r2, #0
 8005c72:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d155      	bne.n	8005d28 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	4413      	add	r3, r2
 8005c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	011a      	lsls	r2, r3, #4
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d112      	bne.n	8005cd0 <HAL_PCD_EP_DB_Transmit+0x302>
 8005caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	e047      	b.n	8005d60 <HAL_PCD_EP_DB_Transmit+0x392>
 8005cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cd4:	d811      	bhi.n	8005cfa <HAL_PCD_EP_DB_Transmit+0x32c>
 8005cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd8:	085b      	lsrs	r3, r3, #1
 8005cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <HAL_PCD_EP_DB_Transmit+0x31e>
 8005ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce8:	3301      	adds	r3, #1
 8005cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	029b      	lsls	r3, r3, #10
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e032      	b.n	8005d60 <HAL_PCD_EP_DB_Transmit+0x392>
 8005cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <HAL_PCD_EP_DB_Transmit+0x342>
 8005d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	029b      	lsls	r3, r3, #10
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	e01b      	b.n	8005d60 <HAL_PCD_EP_DB_Transmit+0x392>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d117      	bne.n	8005d60 <HAL_PCD_EP_DB_Transmit+0x392>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	643b      	str	r3, [r7, #64]	; 0x40
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d44:	4413      	add	r3, r2
 8005d46:	643b      	str	r3, [r7, #64]	; 0x40
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	011a      	lsls	r2, r3, #4
 8005d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d50:	4413      	add	r3, r2
 8005d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6959      	ldr	r1, [r3, #20]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	891a      	ldrh	r2, [r3, #8]
 8005d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f003 fb5d 	bl	800942e <USB_WritePMA>
 8005d74:	e1d0      	b.n	8006118 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	3306      	adds	r3, #6
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d307      	bcc.n	8005dbe <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	619a      	str	r2, [r3, #24]
 8005dbc:	e002      	b.n	8005dc4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f040 80c4 	bne.w	8005f56 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d126      	bne.n	8005e24 <HAL_PCD_EP_DB_Transmit+0x456>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dea:	4413      	add	r3, r2
 8005dec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e20:	801a      	strh	r2, [r3, #0]
 8005e22:	e01a      	b.n	8005e5a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d116      	bne.n	8005e5a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	677b      	str	r3, [r7, #116]	; 0x74
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e40:	4413      	add	r3, r2
 8005e42:	677b      	str	r3, [r7, #116]	; 0x74
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	011a      	lsls	r2, r3, #4
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e52:	673b      	str	r3, [r7, #112]	; 0x70
 8005e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e56:	2200      	movs	r2, #0
 8005e58:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	785b      	ldrb	r3, [r3, #1]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d12f      	bne.n	8005ec8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e80:	4413      	add	r3, r2
 8005e82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	011a      	lsls	r2, r3, #4
 8005e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e90:	4413      	add	r3, r2
 8005e92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ec4:	801a      	strh	r2, [r3, #0]
 8005ec6:	e017      	b.n	8005ef8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d113      	bne.n	8005ef8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ede:	4413      	add	r3, r2
 8005ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	011a      	lsls	r2, r3, #4
 8005ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eea:	4413      	add	r3, r2
 8005eec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ef0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ef2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	4619      	mov	r1, r3
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f005 f8f1 	bl	800b0e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 8104 	bne.w	8006118 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	441a      	add	r2, r3
 8005f3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	8013      	strh	r3, [r2, #0]
 8005f54:	e0e0      	b.n	8006118 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d121      	bne.n	8005fa4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	441a      	add	r2, r3
 8005f8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	f040 80b4 	bne.w	8006118 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	695a      	ldr	r2, [r3, #20]
 8005fb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005fb8:	441a      	add	r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	69da      	ldr	r2, [r3, #28]
 8005fc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005fc6:	441a      	add	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	6a1a      	ldr	r2, [r3, #32]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d309      	bcc.n	8005fec <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6a1a      	ldr	r2, [r3, #32]
 8005fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe4:	1ad2      	subs	r2, r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	621a      	str	r2, [r3, #32]
 8005fea:	e015      	b.n	8006018 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d107      	bne.n	8006004 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005ff4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ff8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006002:	e009      	b.n	8006018 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2200      	movs	r2, #0
 800600e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	667b      	str	r3, [r7, #100]	; 0x64
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d155      	bne.n	80060d2 <HAL_PCD_EP_DB_Transmit+0x704>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006034:	b29b      	uxth	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800603a:	4413      	add	r3, r2
 800603c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	011a      	lsls	r2, r3, #4
 8006044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006046:	4413      	add	r3, r2
 8006048:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800604c:	65bb      	str	r3, [r7, #88]	; 0x58
 800604e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006050:	2b00      	cmp	r3, #0
 8006052:	d112      	bne.n	800607a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800605e:	b29a      	uxth	r2, r3
 8006060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006062:	801a      	strh	r2, [r3, #0]
 8006064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006072:	b29a      	uxth	r2, r3
 8006074:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	e044      	b.n	8006104 <HAL_PCD_EP_DB_Transmit+0x736>
 800607a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800607c:	2b3e      	cmp	r3, #62	; 0x3e
 800607e:	d811      	bhi.n	80060a4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	657b      	str	r3, [r7, #84]	; 0x54
 8006086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006092:	3301      	adds	r3, #1
 8006094:	657b      	str	r3, [r7, #84]	; 0x54
 8006096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006098:	b29b      	uxth	r3, r3
 800609a:	029b      	lsls	r3, r3, #10
 800609c:	b29a      	uxth	r2, r3
 800609e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e02f      	b.n	8006104 <HAL_PCD_EP_DB_Transmit+0x736>
 80060a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	657b      	str	r3, [r7, #84]	; 0x54
 80060aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <HAL_PCD_EP_DB_Transmit+0x6ec>
 80060b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b6:	3b01      	subs	r3, #1
 80060b8:	657b      	str	r3, [r7, #84]	; 0x54
 80060ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060bc:	b29b      	uxth	r3, r3
 80060be:	029b      	lsls	r3, r3, #10
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	e018      	b.n	8006104 <HAL_PCD_EP_DB_Transmit+0x736>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d114      	bne.n	8006104 <HAL_PCD_EP_DB_Transmit+0x736>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060e8:	4413      	add	r3, r2
 80060ea:	667b      	str	r3, [r7, #100]	; 0x64
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	011a      	lsls	r2, r3, #4
 80060f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060f4:	4413      	add	r3, r2
 80060f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060fa:	663b      	str	r3, [r7, #96]	; 0x60
 80060fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fe:	b29a      	uxth	r2, r3
 8006100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006102:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6959      	ldr	r1, [r3, #20]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	895a      	ldrh	r2, [r3, #10]
 8006110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006112:	b29b      	uxth	r3, r3
 8006114:	f003 f98b 	bl	800942e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006132:	823b      	strh	r3, [r7, #16]
 8006134:	8a3b      	ldrh	r3, [r7, #16]
 8006136:	f083 0310 	eor.w	r3, r3, #16
 800613a:	823b      	strh	r3, [r7, #16]
 800613c:	8a3b      	ldrh	r3, [r7, #16]
 800613e:	f083 0320 	eor.w	r3, r3, #32
 8006142:	823b      	strh	r3, [r7, #16]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	441a      	add	r2, r3
 8006152:	8a3b      	ldrh	r3, [r7, #16]
 8006154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006164:	b29b      	uxth	r3, r3
 8006166:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3788      	adds	r7, #136	; 0x88
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006172:	b480      	push	{r7}
 8006174:	b087      	sub	sp, #28
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	607b      	str	r3, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	817b      	strh	r3, [r7, #10]
 8006180:	4613      	mov	r3, r2
 8006182:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006184:	897b      	ldrh	r3, [r7, #10]
 8006186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00b      	beq.n	80061a8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006190:	897b      	ldrh	r3, [r7, #10]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e009      	b.n	80061bc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061a8:	897a      	ldrh	r2, [r7, #10]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80061bc:	893b      	ldrh	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d107      	bne.n	80061d2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2200      	movs	r2, #0
 80061c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	80da      	strh	r2, [r3, #6]
 80061d0:	e00b      	b.n	80061ea <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2201      	movs	r2, #1
 80061d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	0c1b      	lsrs	r3, r3, #16
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr
	...

080061f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e26c      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 8087 	beq.w	8006326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006218:	4b92      	ldr	r3, [pc, #584]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b04      	cmp	r3, #4
 8006222:	d00c      	beq.n	800623e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006224:	4b8f      	ldr	r3, [pc, #572]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f003 030c 	and.w	r3, r3, #12
 800622c:	2b08      	cmp	r3, #8
 800622e:	d112      	bne.n	8006256 <HAL_RCC_OscConfig+0x5e>
 8006230:	4b8c      	ldr	r3, [pc, #560]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d10b      	bne.n	8006256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623e:	4b89      	ldr	r3, [pc, #548]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d06c      	beq.n	8006324 <HAL_RCC_OscConfig+0x12c>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d168      	bne.n	8006324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e246      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800625e:	d106      	bne.n	800626e <HAL_RCC_OscConfig+0x76>
 8006260:	4b80      	ldr	r3, [pc, #512]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a7f      	ldr	r2, [pc, #508]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	e02e      	b.n	80062cc <HAL_RCC_OscConfig+0xd4>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10c      	bne.n	8006290 <HAL_RCC_OscConfig+0x98>
 8006276:	4b7b      	ldr	r3, [pc, #492]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a7a      	ldr	r2, [pc, #488]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 800627c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	4b78      	ldr	r3, [pc, #480]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a77      	ldr	r2, [pc, #476]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	e01d      	b.n	80062cc <HAL_RCC_OscConfig+0xd4>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006298:	d10c      	bne.n	80062b4 <HAL_RCC_OscConfig+0xbc>
 800629a:	4b72      	ldr	r3, [pc, #456]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a71      	ldr	r2, [pc, #452]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80062a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	4b6f      	ldr	r3, [pc, #444]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a6e      	ldr	r2, [pc, #440]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80062ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e00b      	b.n	80062cc <HAL_RCC_OscConfig+0xd4>
 80062b4:	4b6b      	ldr	r3, [pc, #428]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a6a      	ldr	r2, [pc, #424]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80062ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	4b68      	ldr	r3, [pc, #416]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a67      	ldr	r2, [pc, #412]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80062c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d013      	beq.n	80062fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d4:	f7fc ffc2 	bl	800325c <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fc ffbe 	bl	800325c <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e1fa      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ee:	4b5d      	ldr	r3, [pc, #372]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0xe4>
 80062fa:	e014      	b.n	8006326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fc:	f7fc ffae 	bl	800325c <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006304:	f7fc ffaa 	bl	800325c <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b64      	cmp	r3, #100	; 0x64
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e1e6      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006316:	4b53      	ldr	r3, [pc, #332]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0x10c>
 8006322:	e000      	b.n	8006326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d063      	beq.n	80063fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006332:	4b4c      	ldr	r3, [pc, #304]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800633e:	4b49      	ldr	r3, [pc, #292]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f003 030c 	and.w	r3, r3, #12
 8006346:	2b08      	cmp	r3, #8
 8006348:	d11c      	bne.n	8006384 <HAL_RCC_OscConfig+0x18c>
 800634a:	4b46      	ldr	r3, [pc, #280]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d116      	bne.n	8006384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006356:	4b43      	ldr	r3, [pc, #268]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_RCC_OscConfig+0x176>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d001      	beq.n	800636e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e1ba      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636e:	4b3d      	ldr	r3, [pc, #244]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4939      	ldr	r1, [pc, #228]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006382:	e03a      	b.n	80063fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d020      	beq.n	80063ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800638c:	4b36      	ldr	r3, [pc, #216]	; (8006468 <HAL_RCC_OscConfig+0x270>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006392:	f7fc ff63 	bl	800325c <HAL_GetTick>
 8006396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800639a:	f7fc ff5f 	bl	800325c <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e19b      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ac:	4b2d      	ldr	r3, [pc, #180]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b8:	4b2a      	ldr	r3, [pc, #168]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	4927      	ldr	r1, [pc, #156]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	600b      	str	r3, [r1, #0]
 80063cc:	e015      	b.n	80063fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ce:	4b26      	ldr	r3, [pc, #152]	; (8006468 <HAL_RCC_OscConfig+0x270>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7fc ff42 	bl	800325c <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063dc:	f7fc ff3e 	bl	800325c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e17a      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ee:	4b1d      	ldr	r3, [pc, #116]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d03a      	beq.n	800647c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d019      	beq.n	8006442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800640e:	4b17      	ldr	r3, [pc, #92]	; (800646c <HAL_RCC_OscConfig+0x274>)
 8006410:	2201      	movs	r2, #1
 8006412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006414:	f7fc ff22 	bl	800325c <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800641c:	f7fc ff1e 	bl	800325c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e15a      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800642e:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <HAL_RCC_OscConfig+0x26c>)
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800643a:	2001      	movs	r0, #1
 800643c:	f000 fac6 	bl	80069cc <RCC_Delay>
 8006440:	e01c      	b.n	800647c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006442:	4b0a      	ldr	r3, [pc, #40]	; (800646c <HAL_RCC_OscConfig+0x274>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006448:	f7fc ff08 	bl	800325c <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800644e:	e00f      	b.n	8006470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006450:	f7fc ff04 	bl	800325c <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d908      	bls.n	8006470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e140      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
 8006462:	bf00      	nop
 8006464:	40021000 	.word	0x40021000
 8006468:	42420000 	.word	0x42420000
 800646c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006470:	4b9e      	ldr	r3, [pc, #632]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1e9      	bne.n	8006450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80a6 	beq.w	80065d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800648a:	2300      	movs	r3, #0
 800648c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800648e:	4b97      	ldr	r3, [pc, #604]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10d      	bne.n	80064b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800649a:	4b94      	ldr	r3, [pc, #592]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	4a93      	ldr	r2, [pc, #588]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 80064a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a4:	61d3      	str	r3, [r2, #28]
 80064a6:	4b91      	ldr	r3, [pc, #580]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ae:	60bb      	str	r3, [r7, #8]
 80064b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064b2:	2301      	movs	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b6:	4b8e      	ldr	r3, [pc, #568]	; (80066f0 <HAL_RCC_OscConfig+0x4f8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d118      	bne.n	80064f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064c2:	4b8b      	ldr	r3, [pc, #556]	; (80066f0 <HAL_RCC_OscConfig+0x4f8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a8a      	ldr	r2, [pc, #552]	; (80066f0 <HAL_RCC_OscConfig+0x4f8>)
 80064c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ce:	f7fc fec5 	bl	800325c <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d6:	f7fc fec1 	bl	800325c <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b64      	cmp	r3, #100	; 0x64
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e0fd      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e8:	4b81      	ldr	r3, [pc, #516]	; (80066f0 <HAL_RCC_OscConfig+0x4f8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d106      	bne.n	800650a <HAL_RCC_OscConfig+0x312>
 80064fc:	4b7b      	ldr	r3, [pc, #492]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	4a7a      	ldr	r2, [pc, #488]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	6213      	str	r3, [r2, #32]
 8006508:	e02d      	b.n	8006566 <HAL_RCC_OscConfig+0x36e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10c      	bne.n	800652c <HAL_RCC_OscConfig+0x334>
 8006512:	4b76      	ldr	r3, [pc, #472]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	4a75      	ldr	r2, [pc, #468]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	6213      	str	r3, [r2, #32]
 800651e:	4b73      	ldr	r3, [pc, #460]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	4a72      	ldr	r2, [pc, #456]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006524:	f023 0304 	bic.w	r3, r3, #4
 8006528:	6213      	str	r3, [r2, #32]
 800652a:	e01c      	b.n	8006566 <HAL_RCC_OscConfig+0x36e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b05      	cmp	r3, #5
 8006532:	d10c      	bne.n	800654e <HAL_RCC_OscConfig+0x356>
 8006534:	4b6d      	ldr	r3, [pc, #436]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	4a6c      	ldr	r2, [pc, #432]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 800653a:	f043 0304 	orr.w	r3, r3, #4
 800653e:	6213      	str	r3, [r2, #32]
 8006540:	4b6a      	ldr	r3, [pc, #424]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	4a69      	ldr	r2, [pc, #420]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006546:	f043 0301 	orr.w	r3, r3, #1
 800654a:	6213      	str	r3, [r2, #32]
 800654c:	e00b      	b.n	8006566 <HAL_RCC_OscConfig+0x36e>
 800654e:	4b67      	ldr	r3, [pc, #412]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	4a66      	ldr	r2, [pc, #408]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006554:	f023 0301 	bic.w	r3, r3, #1
 8006558:	6213      	str	r3, [r2, #32]
 800655a:	4b64      	ldr	r3, [pc, #400]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	4a63      	ldr	r2, [pc, #396]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006560:	f023 0304 	bic.w	r3, r3, #4
 8006564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d015      	beq.n	800659a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800656e:	f7fc fe75 	bl	800325c <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006574:	e00a      	b.n	800658c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006576:	f7fc fe71 	bl	800325c <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	f241 3288 	movw	r2, #5000	; 0x1388
 8006584:	4293      	cmp	r3, r2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e0ab      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800658c:	4b57      	ldr	r3, [pc, #348]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0ee      	beq.n	8006576 <HAL_RCC_OscConfig+0x37e>
 8006598:	e014      	b.n	80065c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800659a:	f7fc fe5f 	bl	800325c <HAL_GetTick>
 800659e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065a0:	e00a      	b.n	80065b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a2:	f7fc fe5b 	bl	800325c <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e095      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065b8:	4b4c      	ldr	r3, [pc, #304]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1ee      	bne.n	80065a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d105      	bne.n	80065d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ca:	4b48      	ldr	r3, [pc, #288]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	4a47      	ldr	r2, [pc, #284]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 80065d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8081 	beq.w	80066e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065e0:	4b42      	ldr	r3, [pc, #264]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f003 030c 	and.w	r3, r3, #12
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d061      	beq.n	80066b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d146      	bne.n	8006682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f4:	4b3f      	ldr	r3, [pc, #252]	; (80066f4 <HAL_RCC_OscConfig+0x4fc>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fa:	f7fc fe2f 	bl	800325c <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006602:	f7fc fe2b 	bl	800325c <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e067      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006614:	4b35      	ldr	r3, [pc, #212]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1f0      	bne.n	8006602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006628:	d108      	bne.n	800663c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800662a:	4b30      	ldr	r3, [pc, #192]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	492d      	ldr	r1, [pc, #180]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006638:	4313      	orrs	r3, r2
 800663a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800663c:	4b2b      	ldr	r3, [pc, #172]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a19      	ldr	r1, [r3, #32]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	430b      	orrs	r3, r1
 800664e:	4927      	ldr	r1, [pc, #156]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006650:	4313      	orrs	r3, r2
 8006652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006654:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <HAL_RCC_OscConfig+0x4fc>)
 8006656:	2201      	movs	r2, #1
 8006658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800665a:	f7fc fdff 	bl	800325c <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006662:	f7fc fdfb 	bl	800325c <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e037      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006674:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0f0      	beq.n	8006662 <HAL_RCC_OscConfig+0x46a>
 8006680:	e02f      	b.n	80066e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <HAL_RCC_OscConfig+0x4fc>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006688:	f7fc fde8 	bl	800325c <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006690:	f7fc fde4 	bl	800325c <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e020      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066a2:	4b12      	ldr	r3, [pc, #72]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f0      	bne.n	8006690 <HAL_RCC_OscConfig+0x498>
 80066ae:	e018      	b.n	80066e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e013      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <HAL_RCC_OscConfig+0x4f4>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d106      	bne.n	80066de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066da:	429a      	cmp	r2, r3
 80066dc:	d001      	beq.n	80066e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40021000 	.word	0x40021000
 80066f0:	40007000 	.word	0x40007000
 80066f4:	42420060 	.word	0x42420060

080066f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0d0      	b.n	80068ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800670c:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <HAL_RCC_ClockConfig+0x1c0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d910      	bls.n	800673c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671a:	4b67      	ldr	r3, [pc, #412]	; (80068b8 <HAL_RCC_ClockConfig+0x1c0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f023 0207 	bic.w	r2, r3, #7
 8006722:	4965      	ldr	r1, [pc, #404]	; (80068b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	4313      	orrs	r3, r2
 8006728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800672a:	4b63      	ldr	r3, [pc, #396]	; (80068b8 <HAL_RCC_ClockConfig+0x1c0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d001      	beq.n	800673c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0b8      	b.n	80068ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d020      	beq.n	800678a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006754:	4b59      	ldr	r3, [pc, #356]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	4a58      	ldr	r2, [pc, #352]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 800675a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800675e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800676c:	4b53      	ldr	r3, [pc, #332]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	4a52      	ldr	r2, [pc, #328]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006772:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006778:	4b50      	ldr	r3, [pc, #320]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	494d      	ldr	r1, [pc, #308]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006786:	4313      	orrs	r3, r2
 8006788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d040      	beq.n	8006818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d107      	bne.n	80067ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679e:	4b47      	ldr	r3, [pc, #284]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d115      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e07f      	b.n	80068ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d107      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b6:	4b41      	ldr	r3, [pc, #260]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e073      	b.n	80068ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c6:	4b3d      	ldr	r3, [pc, #244]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e06b      	b.n	80068ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067d6:	4b39      	ldr	r3, [pc, #228]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f023 0203 	bic.w	r2, r3, #3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	4936      	ldr	r1, [pc, #216]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e8:	f7fc fd38 	bl	800325c <HAL_GetTick>
 80067ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ee:	e00a      	b.n	8006806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067f0:	f7fc fd34 	bl	800325c <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fe:	4293      	cmp	r3, r2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e053      	b.n	80068ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006806:	4b2d      	ldr	r3, [pc, #180]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f003 020c 	and.w	r2, r3, #12
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	429a      	cmp	r2, r3
 8006816:	d1eb      	bne.n	80067f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006818:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <HAL_RCC_ClockConfig+0x1c0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d210      	bcs.n	8006848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f023 0207 	bic.w	r2, r3, #7
 800682e:	4922      	ldr	r1, [pc, #136]	; (80068b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	4313      	orrs	r3, r2
 8006834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006836:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	d001      	beq.n	8006848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e032      	b.n	80068ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d008      	beq.n	8006866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006854:	4b19      	ldr	r3, [pc, #100]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	4916      	ldr	r1, [pc, #88]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006862:	4313      	orrs	r3, r2
 8006864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006872:	4b12      	ldr	r3, [pc, #72]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	490e      	ldr	r1, [pc, #56]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006882:	4313      	orrs	r3, r2
 8006884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006886:	f000 f821 	bl	80068cc <HAL_RCC_GetSysClockFreq>
 800688a:	4602      	mov	r2, r0
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	091b      	lsrs	r3, r3, #4
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	490a      	ldr	r1, [pc, #40]	; (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006898:	5ccb      	ldrb	r3, [r1, r3]
 800689a:	fa22 f303 	lsr.w	r3, r2, r3
 800689e:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <HAL_RCC_ClockConfig+0x1cc>)
 80068a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80068a2:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <HAL_RCC_ClockConfig+0x1d0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fc fc96 	bl	80031d8 <HAL_InitTick>

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40022000 	.word	0x40022000
 80068bc:	40021000 	.word	0x40021000
 80068c0:	0800bc58 	.word	0x0800bc58
 80068c4:	2000000c 	.word	0x2000000c
 80068c8:	20000010 	.word	0x20000010

080068cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068cc:	b490      	push	{r4, r7}
 80068ce:	b08a      	sub	sp, #40	; 0x28
 80068d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80068d2:	4b2a      	ldr	r3, [pc, #168]	; (800697c <HAL_RCC_GetSysClockFreq+0xb0>)
 80068d4:	1d3c      	adds	r4, r7, #4
 80068d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80068dc:	f240 2301 	movw	r3, #513	; 0x201
 80068e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	2300      	movs	r3, #0
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	2300      	movs	r3, #0
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068f6:	4b22      	ldr	r3, [pc, #136]	; (8006980 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	2b04      	cmp	r3, #4
 8006904:	d002      	beq.n	800690c <HAL_RCC_GetSysClockFreq+0x40>
 8006906:	2b08      	cmp	r3, #8
 8006908:	d003      	beq.n	8006912 <HAL_RCC_GetSysClockFreq+0x46>
 800690a:	e02d      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800690c:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800690e:	623b      	str	r3, [r7, #32]
      break;
 8006910:	e02d      	b.n	800696e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	0c9b      	lsrs	r3, r3, #18
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800691e:	4413      	add	r3, r2
 8006920:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006924:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d013      	beq.n	8006958 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006930:	4b13      	ldr	r3, [pc, #76]	; (8006980 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	0c5b      	lsrs	r3, r3, #17
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800693e:	4413      	add	r3, r2
 8006940:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006944:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	4a0e      	ldr	r2, [pc, #56]	; (8006984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800694a:	fb02 f203 	mul.w	r2, r2, r3
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
 8006956:	e004      	b.n	8006962 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	4a0b      	ldr	r2, [pc, #44]	; (8006988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800695c:	fb02 f303 	mul.w	r3, r2, r3
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	623b      	str	r3, [r7, #32]
      break;
 8006966:	e002      	b.n	800696e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006968:	4b08      	ldr	r3, [pc, #32]	; (800698c <HAL_RCC_GetSysClockFreq+0xc0>)
 800696a:	623b      	str	r3, [r7, #32]
      break;
 800696c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800696e:	6a3b      	ldr	r3, [r7, #32]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3728      	adds	r7, #40	; 0x28
 8006974:	46bd      	mov	sp, r7
 8006976:	bc90      	pop	{r4, r7}
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	0800b828 	.word	0x0800b828
 8006980:	40021000 	.word	0x40021000
 8006984:	00f42400 	.word	0x00f42400
 8006988:	003d0900 	.word	0x003d0900
 800698c:	007a1200 	.word	0x007a1200

08006990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006994:	4b02      	ldr	r3, [pc, #8]	; (80069a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006996:	681b      	ldr	r3, [r3, #0]
}
 8006998:	4618      	mov	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr
 80069a0:	2000000c 	.word	0x2000000c

080069a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069a8:	f7ff fff2 	bl	8006990 <HAL_RCC_GetHCLKFreq>
 80069ac:	4602      	mov	r2, r0
 80069ae:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	0a1b      	lsrs	r3, r3, #8
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	4903      	ldr	r1, [pc, #12]	; (80069c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ba:	5ccb      	ldrb	r3, [r1, r3]
 80069bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40021000 	.word	0x40021000
 80069c8:	0800bc68 	.word	0x0800bc68

080069cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069d4:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <RCC_Delay+0x34>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a0a      	ldr	r2, [pc, #40]	; (8006a04 <RCC_Delay+0x38>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	0a5b      	lsrs	r3, r3, #9
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	fb02 f303 	mul.w	r3, r2, r3
 80069e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069e8:	bf00      	nop
  }
  while (Delay --);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	1e5a      	subs	r2, r3, #1
 80069ee:	60fa      	str	r2, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f9      	bne.n	80069e8 <RCC_Delay+0x1c>
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr
 8006a00:	2000000c 	.word	0x2000000c
 8006a04:	10624dd3 	.word	0x10624dd3

08006a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	613b      	str	r3, [r7, #16]
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d07d      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006a24:	2300      	movs	r3, #0
 8006a26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a28:	4b4f      	ldr	r3, [pc, #316]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10d      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a34:	4b4c      	ldr	r3, [pc, #304]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	4a4b      	ldr	r2, [pc, #300]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	61d3      	str	r3, [r2, #28]
 8006a40:	4b49      	ldr	r3, [pc, #292]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a50:	4b46      	ldr	r3, [pc, #280]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d118      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a5c:	4b43      	ldr	r3, [pc, #268]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a42      	ldr	r2, [pc, #264]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a68:	f7fc fbf8 	bl	800325c <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6e:	e008      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a70:	f7fc fbf4 	bl	800325c <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b64      	cmp	r3, #100	; 0x64
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e06d      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a82:	4b3a      	ldr	r3, [pc, #232]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a8e:	4b36      	ldr	r3, [pc, #216]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d02e      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d027      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006aac:	4b2e      	ldr	r3, [pc, #184]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ab6:	4b2e      	ldr	r3, [pc, #184]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006abc:	4b2c      	ldr	r3, [pc, #176]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ac2:	4a29      	ldr	r2, [pc, #164]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d014      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad2:	f7fc fbc3 	bl	800325c <HAL_GetTick>
 8006ad6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad8:	e00a      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ada:	f7fc fbbf 	bl	800325c <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e036      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af0:	4b1d      	ldr	r3, [pc, #116]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0ee      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006afc:	4b1a      	ldr	r3, [pc, #104]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	4917      	ldr	r1, [pc, #92]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d105      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b14:	4b14      	ldr	r3, [pc, #80]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d008      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	490b      	ldr	r1, [pc, #44]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d008      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b4a:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	4904      	ldr	r1, [pc, #16]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	40007000 	.word	0x40007000
 8006b70:	42420440 	.word	0x42420440

08006b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e076      	b.n	8006c74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d108      	bne.n	8006ba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b96:	d009      	beq.n	8006bac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	61da      	str	r2, [r3, #28]
 8006b9e:	e005      	b.n	8006bac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fc f86a 	bl	8002ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c30:	ea42 0103 	orr.w	r1, r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	0c1a      	lsrs	r2, r3, #16
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f002 0204 	and.w	r2, r2, #4
 8006c52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	69da      	ldr	r2, [r3, #28]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_SPI_Transmit+0x22>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e126      	b.n	8006eec <HAL_SPI_Transmit+0x270>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ca6:	f7fc fad9 	bl	800325c <HAL_GetTick>
 8006caa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d002      	beq.n	8006cc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cc0:	e10b      	b.n	8006eda <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <HAL_SPI_Transmit+0x52>
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cd2:	e102      	b.n	8006eda <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	88fa      	ldrh	r2, [r7, #6]
 8006cec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1a:	d10f      	bne.n	8006d3c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d007      	beq.n	8006d5a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d62:	d14b      	bne.n	8006dfc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_SPI_Transmit+0xf6>
 8006d6c:	8afb      	ldrh	r3, [r7, #22]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d13e      	bne.n	8006df0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	881a      	ldrh	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	1c9a      	adds	r2, r3, #2
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d96:	e02b      	b.n	8006df0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d112      	bne.n	8006dcc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	881a      	ldrh	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	1c9a      	adds	r2, r3, #2
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dca:	e011      	b.n	8006df0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dcc:	f7fc fa46 	bl	800325c <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d803      	bhi.n	8006de4 <HAL_SPI_Transmit+0x168>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de2:	d102      	bne.n	8006dea <HAL_SPI_Transmit+0x16e>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d102      	bne.n	8006df0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dee:	e074      	b.n	8006eda <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1ce      	bne.n	8006d98 <HAL_SPI_Transmit+0x11c>
 8006dfa:	e04c      	b.n	8006e96 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <HAL_SPI_Transmit+0x18e>
 8006e04:	8afb      	ldrh	r3, [r7, #22]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d140      	bne.n	8006e8c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	330c      	adds	r3, #12
 8006e14:	7812      	ldrb	r2, [r2, #0]
 8006e16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e30:	e02c      	b.n	8006e8c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d113      	bne.n	8006e68 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e66:	e011      	b.n	8006e8c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e68:	f7fc f9f8 	bl	800325c <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d803      	bhi.n	8006e80 <HAL_SPI_Transmit+0x204>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d102      	bne.n	8006e86 <HAL_SPI_Transmit+0x20a>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d102      	bne.n	8006e8c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e8a:	e026      	b.n	8006eda <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1cd      	bne.n	8006e32 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f8b2 	bl	8007004 <SPI_EndRxTxTransaction>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e000      	b.n	8006eda <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ed8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f04:	f7fc f9aa 	bl	800325c <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	1a9b      	subs	r3, r3, r2
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	4413      	add	r3, r2
 8006f12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f14:	f7fc f9a2 	bl	800325c <HAL_GetTick>
 8006f18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f1a:	4b39      	ldr	r3, [pc, #228]	; (8007000 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	015b      	lsls	r3, r3, #5
 8006f20:	0d1b      	lsrs	r3, r3, #20
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	fb02 f303 	mul.w	r3, r2, r3
 8006f28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f2a:	e054      	b.n	8006fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f32:	d050      	beq.n	8006fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f34:	f7fc f992 	bl	800325c <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d902      	bls.n	8006f4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d13d      	bne.n	8006fc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f62:	d111      	bne.n	8006f88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6c:	d004      	beq.n	8006f78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f76:	d107      	bne.n	8006f88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f90:	d10f      	bne.n	8006fb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e017      	b.n	8006ff6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	bf0c      	ite	eq
 8006fe6:	2301      	moveq	r3, #1
 8006fe8:	2300      	movne	r3, #0
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d19b      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	2000000c 	.word	0x2000000c

08007004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af02      	add	r7, sp, #8
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2200      	movs	r2, #0
 8007018:	2180      	movs	r1, #128	; 0x80
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff ff6a 	bl	8006ef4 <SPI_WaitFlagStateUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	f043 0220 	orr.w	r2, r3, #32
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e000      	b.n	8007038 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007040:	b084      	sub	sp, #16
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	f107 0014 	add.w	r0, r7, #20
 800704e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	bc80      	pop	{r7}
 800705c:	b004      	add	sp, #16
 800705e:	4770      	bx	lr

08007060 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007070:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007074:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	b29a      	uxth	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007094:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007098:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	43db      	mvns	r3, r3
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	4013      	ands	r3, r2
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr

080070c0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070d8:	b084      	sub	sp, #16
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	f107 0014 	add.w	r0, r7, #20
 80070e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	b004      	add	sp, #16
 8007116:	4770      	bx	lr

08007118 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007118:	b480      	push	{r7}
 800711a:	b09b      	sub	sp, #108	; 0x6c
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800713a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	78db      	ldrb	r3, [r3, #3]
 8007146:	2b03      	cmp	r3, #3
 8007148:	d81f      	bhi.n	800718a <USB_ActivateEndpoint+0x72>
 800714a:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <USB_ActivateEndpoint+0x38>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007161 	.word	0x08007161
 8007154:	0800717d 	.word	0x0800717d
 8007158:	08007193 	.word	0x08007193
 800715c:	0800716f 	.word	0x0800716f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007160:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007168:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800716c:	e012      	b.n	8007194 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800716e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007172:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007176:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800717a:	e00b      	b.n	8007194 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800717c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007184:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007188:	e004      	b.n	8007194 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007190:	e000      	b.n	8007194 <USB_ActivateEndpoint+0x7c>
      break;
 8007192:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	441a      	add	r2, r3
 800719e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80071a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	441a      	add	r2, r3
 80071e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80071e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	7b1b      	ldrb	r3, [r3, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 8149 	bne.w	8007498 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8084 	beq.w	8007318 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	4413      	add	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	011a      	lsls	r2, r3, #4
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	88db      	ldrh	r3, [r3, #6]
 8007238:	085b      	lsrs	r3, r3, #1
 800723a:	b29b      	uxth	r3, r3
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	81fb      	strh	r3, [r7, #14]
 8007252:	89fb      	ldrh	r3, [r7, #14]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01b      	beq.n	8007294 <USB_ActivateEndpoint+0x17c>
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007272:	81bb      	strh	r3, [r7, #12]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	441a      	add	r2, r3
 800727e:	89bb      	ldrh	r3, [r7, #12]
 8007280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800728c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007290:	b29b      	uxth	r3, r3
 8007292:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	78db      	ldrb	r3, [r3, #3]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d020      	beq.n	80072de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b2:	813b      	strh	r3, [r7, #8]
 80072b4:	893b      	ldrh	r3, [r7, #8]
 80072b6:	f083 0320 	eor.w	r3, r3, #32
 80072ba:	813b      	strh	r3, [r7, #8]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	441a      	add	r2, r3
 80072c6:	893b      	ldrh	r3, [r7, #8]
 80072c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d8:	b29b      	uxth	r3, r3
 80072da:	8013      	strh	r3, [r2, #0]
 80072dc:	e27f      	b.n	80077de <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f4:	817b      	strh	r3, [r7, #10]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	441a      	add	r2, r3
 8007300:	897b      	ldrh	r3, [r7, #10]
 8007302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007312:	b29b      	uxth	r3, r3
 8007314:	8013      	strh	r3, [r2, #0]
 8007316:	e262      	b.n	80077de <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007322:	b29b      	uxth	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	4413      	add	r3, r2
 800732a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	011a      	lsls	r2, r3, #4
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	4413      	add	r3, r2
 8007336:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	88db      	ldrh	r3, [r3, #6]
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	b29b      	uxth	r3, r3
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007356:	b29b      	uxth	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	4413      	add	r3, r2
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	011a      	lsls	r2, r3, #4
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	4413      	add	r3, r2
 800736a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800736e:	623b      	str	r3, [r7, #32]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d112      	bne.n	800739e <USB_ActivateEndpoint+0x286>
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007382:	b29a      	uxth	r2, r3
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007396:	b29a      	uxth	r2, r3
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	e02f      	b.n	80073fe <USB_ActivateEndpoint+0x2e6>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b3e      	cmp	r3, #62	; 0x3e
 80073a4:	d813      	bhi.n	80073ce <USB_ActivateEndpoint+0x2b6>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	663b      	str	r3, [r7, #96]	; 0x60
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <USB_ActivateEndpoint+0x2a8>
 80073ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073bc:	3301      	adds	r3, #1
 80073be:	663b      	str	r3, [r7, #96]	; 0x60
 80073c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	029b      	lsls	r3, r3, #10
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	801a      	strh	r2, [r3, #0]
 80073cc:	e017      	b.n	80073fe <USB_ActivateEndpoint+0x2e6>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	663b      	str	r3, [r7, #96]	; 0x60
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d102      	bne.n	80073e8 <USB_ActivateEndpoint+0x2d0>
 80073e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073e4:	3b01      	subs	r3, #1
 80073e6:	663b      	str	r3, [r7, #96]	; 0x60
 80073e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	029b      	lsls	r3, r3, #10
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	83fb      	strh	r3, [r7, #30]
 800740c:	8bfb      	ldrh	r3, [r7, #30]
 800740e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01b      	beq.n	800744e <USB_ActivateEndpoint+0x336>
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742c:	83bb      	strh	r3, [r7, #28]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	441a      	add	r2, r3
 8007438:	8bbb      	ldrh	r3, [r7, #28]
 800743a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744a:	b29b      	uxth	r3, r3
 800744c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007464:	837b      	strh	r3, [r7, #26]
 8007466:	8b7b      	ldrh	r3, [r7, #26]
 8007468:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800746c:	837b      	strh	r3, [r7, #26]
 800746e:	8b7b      	ldrh	r3, [r7, #26]
 8007470:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007474:	837b      	strh	r3, [r7, #26]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	441a      	add	r2, r3
 8007480:	8b7b      	ldrh	r3, [r7, #26]
 8007482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800748a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800748e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007492:	b29b      	uxth	r3, r3
 8007494:	8013      	strh	r3, [r2, #0]
 8007496:	e1a2      	b.n	80077de <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	441a      	add	r2, r3
 80074bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80074c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074de:	b29b      	uxth	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074e4:	4413      	add	r3, r2
 80074e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	011a      	lsls	r2, r3, #4
 80074ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f6:	657b      	str	r3, [r7, #84]	; 0x54
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	891b      	ldrh	r3, [r3, #8]
 80074fc:	085b      	lsrs	r3, r3, #1
 80074fe:	b29b      	uxth	r3, r3
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007506:	801a      	strh	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	653b      	str	r3, [r7, #80]	; 0x50
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007512:	b29b      	uxth	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007518:	4413      	add	r3, r2
 800751a:	653b      	str	r3, [r7, #80]	; 0x50
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	011a      	lsls	r2, r3, #4
 8007522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007524:	4413      	add	r3, r2
 8007526:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800752a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	895b      	ldrh	r3, [r3, #10]
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	b29b      	uxth	r3, r3
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 8091 	bne.w	8007668 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007554:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01b      	beq.n	8007596 <USB_ActivateEndpoint+0x47e>
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007574:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	441a      	add	r2, r3
 8007580:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800758e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007592:	b29b      	uxth	r3, r3
 8007594:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	873b      	strh	r3, [r7, #56]	; 0x38
 80075a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01b      	beq.n	80075e6 <USB_ActivateEndpoint+0x4ce>
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	441a      	add	r2, r3
 80075d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80075d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80075fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007600:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007604:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007606:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007608:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800760c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	441a      	add	r2, r3
 8007618:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800761a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800761e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762a:	b29b      	uxth	r3, r3
 800762c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007644:	867b      	strh	r3, [r7, #50]	; 0x32
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	441a      	add	r2, r3
 8007650:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800765a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800765e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007662:	b29b      	uxth	r3, r3
 8007664:	8013      	strh	r3, [r2, #0]
 8007666:	e0ba      	b.n	80077de <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007678:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800767c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01d      	beq.n	80076c0 <USB_ActivateEndpoint+0x5a8>
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	b29b      	uxth	r3, r3
 8007692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	441a      	add	r2, r3
 80076a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80076ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076bc:	b29b      	uxth	r3, r3
 80076be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80076d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01d      	beq.n	8007718 <USB_ActivateEndpoint+0x600>
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	441a      	add	r2, r3
 8007700:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800770c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007710:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007714:	b29b      	uxth	r3, r3
 8007716:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	78db      	ldrb	r3, [r3, #3]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d024      	beq.n	800776a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007736:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800773a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800773e:	f083 0320 	eor.w	r3, r3, #32
 8007742:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	441a      	add	r2, r3
 8007750:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800775c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007764:	b29b      	uxth	r3, r3
 8007766:	8013      	strh	r3, [r2, #0]
 8007768:	e01d      	b.n	80077a6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007780:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	441a      	add	r2, r3
 800778e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800779a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800779e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	441a      	add	r2, r3
 80077c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80077ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077da:	b29b      	uxth	r3, r3
 80077dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80077de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	376c      	adds	r7, #108	; 0x6c
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr

080077ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b08d      	sub	sp, #52	; 0x34
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	7b1b      	ldrb	r3, [r3, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f040 808e 	bne.w	800791c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d044      	beq.n	8007892 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	81bb      	strh	r3, [r7, #12]
 8007816:	89bb      	ldrh	r3, [r7, #12]
 8007818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01b      	beq.n	8007858 <USB_DeactivateEndpoint+0x6c>
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007836:	817b      	strh	r3, [r7, #10]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	441a      	add	r2, r3
 8007842:	897b      	ldrh	r3, [r7, #10]
 8007844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800784c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007850:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007854:	b29b      	uxth	r3, r3
 8007856:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800786e:	813b      	strh	r3, [r7, #8]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	441a      	add	r2, r3
 800787a:	893b      	ldrh	r3, [r7, #8]
 800787c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788c:	b29b      	uxth	r3, r3
 800788e:	8013      	strh	r3, [r2, #0]
 8007890:	e192      	b.n	8007bb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	827b      	strh	r3, [r7, #18]
 80078a0:	8a7b      	ldrh	r3, [r7, #18]
 80078a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01b      	beq.n	80078e2 <USB_DeactivateEndpoint+0xf6>
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c0:	823b      	strh	r3, [r7, #16]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	441a      	add	r2, r3
 80078cc:	8a3b      	ldrh	r3, [r7, #16]
 80078ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078de:	b29b      	uxth	r3, r3
 80078e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f8:	81fb      	strh	r3, [r7, #14]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	441a      	add	r2, r3
 8007904:	89fb      	ldrh	r3, [r7, #14]
 8007906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]
 800791a:	e14d      	b.n	8007bb8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f040 80a5 	bne.w	8007a70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	843b      	strh	r3, [r7, #32]
 8007934:	8c3b      	ldrh	r3, [r7, #32]
 8007936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d01b      	beq.n	8007976 <USB_DeactivateEndpoint+0x18a>
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007954:	83fb      	strh	r3, [r7, #30]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	441a      	add	r2, r3
 8007960:	8bfb      	ldrh	r3, [r7, #30]
 8007962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800796a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800796e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007972:	b29b      	uxth	r3, r3
 8007974:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	83bb      	strh	r3, [r7, #28]
 8007984:	8bbb      	ldrh	r3, [r7, #28]
 8007986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01b      	beq.n	80079c6 <USB_DeactivateEndpoint+0x1da>
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a4:	837b      	strh	r3, [r7, #26]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	441a      	add	r2, r3
 80079b0:	8b7b      	ldrh	r3, [r7, #26]
 80079b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079dc:	833b      	strh	r3, [r7, #24]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	8b3b      	ldrh	r3, [r7, #24]
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a14:	82fb      	strh	r3, [r7, #22]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	441a      	add	r2, r3
 8007a20:	8afb      	ldrh	r3, [r7, #22]
 8007a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a4c:	82bb      	strh	r3, [r7, #20]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	441a      	add	r2, r3
 8007a58:	8abb      	ldrh	r3, [r7, #20]
 8007a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	8013      	strh	r3, [r2, #0]
 8007a6e:	e0a3      	b.n	8007bb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007a7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01b      	beq.n	8007ac0 <USB_DeactivateEndpoint+0x2d4>
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	441a      	add	r2, r3
 8007aaa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007ace:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01b      	beq.n	8007b10 <USB_DeactivateEndpoint+0x324>
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	853b      	strh	r3, [r7, #40]	; 0x28
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	441a      	add	r2, r3
 8007afa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	441a      	add	r2, r3
 8007b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b96:	847b      	strh	r3, [r7, #34]	; 0x22
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3734      	adds	r7, #52	; 0x34
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b0cc      	sub	sp, #304	; 0x130
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	1d3b      	adds	r3, r7, #4
 8007bcc:	6018      	str	r0, [r3, #0]
 8007bce:	463b      	mov	r3, r7
 8007bd0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bd2:	463b      	mov	r3, r7
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	785b      	ldrb	r3, [r3, #1]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	f040 872e 	bne.w	8008a3a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007bde:	463b      	mov	r3, r7
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	463b      	mov	r3, r7
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d905      	bls.n	8007bfa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007bee:	463b      	mov	r3, r7
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007bf8:	e004      	b.n	8007c04 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c04:	463b      	mov	r3, r7
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	7b1b      	ldrb	r3, [r3, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d134      	bne.n	8007c78 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007c0e:	463b      	mov	r3, r7
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6959      	ldr	r1, [r3, #20]
 8007c14:	463b      	mov	r3, r7
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	88da      	ldrh	r2, [r3, #6]
 8007c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	1d38      	adds	r0, r7, #4
 8007c22:	6800      	ldr	r0, [r0, #0]
 8007c24:	f001 fc03 	bl	800942e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c28:	f107 0310 	add.w	r3, r7, #16
 8007c2c:	1d3a      	adds	r2, r7, #4
 8007c2e:	6812      	ldr	r2, [r2, #0]
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	1d3b      	adds	r3, r7, #4
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	f107 0310 	add.w	r3, r7, #16
 8007c42:	f107 0210 	add.w	r2, r7, #16
 8007c46:	6812      	ldr	r2, [r2, #0]
 8007c48:	440a      	add	r2, r1
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	011a      	lsls	r2, r3, #4
 8007c54:	f107 0310 	add.w	r3, r7, #16
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007c60:	f107 030c 	add.w	r3, r7, #12
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	f107 030c 	add.w	r3, r7, #12
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	f000 beac 	b.w	80089d0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007c78:	463b      	mov	r3, r7
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	78db      	ldrb	r3, [r3, #3]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	f040 838c 	bne.w	800839c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007c84:	463b      	mov	r3, r7
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	463b      	mov	r3, r7
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	f240 8330 	bls.w	80082f6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007c96:	1d3b      	adds	r3, r7, #4
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	463b      	mov	r3, r7
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007cb4:	1d3b      	adds	r3, r7, #4
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	463b      	mov	r3, r7
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007cda:	463b      	mov	r3, r7
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6a1a      	ldr	r2, [r3, #32]
 8007ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ce4:	1ad2      	subs	r2, r2, r3
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007cec:	1d3b      	adds	r3, r7, #4
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 819e 	beq.w	8008044 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d0c:	1d3a      	adds	r2, r7, #4
 8007d0e:	6812      	ldr	r2, [r2, #0]
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	463b      	mov	r3, r7
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d17a      	bne.n	8007e12 <USB_EPStartXfer+0x24e>
 8007d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d20:	1d3a      	adds	r2, r7, #4
 8007d22:	6812      	ldr	r2, [r2, #0]
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	1d3b      	adds	r3, r7, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	4619      	mov	r1, r3
 8007d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007d3a:	6812      	ldr	r2, [r2, #0]
 8007d3c:	440a      	add	r2, r1
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	463b      	mov	r3, r7
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	011a      	lsls	r2, r3, #4
 8007d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d11a      	bne.n	8007d98 <USB_EPStartXfer+0x1d4>
 8007d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	801a      	strh	r2, [r3, #0]
 8007d96:	e062      	b.n	8007e5e <USB_EPStartXfer+0x29a>
 8007d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d9e:	d819      	bhi.n	8007dd4 <USB_EPStartXfer+0x210>
 8007da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <USB_EPStartXfer+0x1fc>
 8007db6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dba:	3301      	adds	r3, #1
 8007dbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007dc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	029b      	lsls	r3, r3, #10
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	e044      	b.n	8007e5e <USB_EPStartXfer+0x29a>
 8007dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd8:	095b      	lsrs	r3, r3, #5
 8007dda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de2:	f003 031f 	and.w	r3, r3, #31
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d104      	bne.n	8007df4 <USB_EPStartXfer+0x230>
 8007dea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dee:	3b01      	subs	r3, #1
 8007df0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007df4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	029b      	lsls	r3, r3, #10
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	801a      	strh	r2, [r3, #0]
 8007e10:	e025      	b.n	8007e5e <USB_EPStartXfer+0x29a>
 8007e12:	463b      	mov	r3, r7
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d120      	bne.n	8007e5e <USB_EPStartXfer+0x29a>
 8007e1c:	1d3b      	adds	r3, r7, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4619      	mov	r1, r3
 8007e28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	440a      	add	r2, r1
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	463b      	mov	r3, r7
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	011a      	lsls	r2, r3, #4
 8007e3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4413      	add	r3, r2
 8007e46:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e5e:	463b      	mov	r3, r7
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	895b      	ldrh	r3, [r3, #10]
 8007e64:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e68:	463b      	mov	r3, r7
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6959      	ldr	r1, [r3, #20]
 8007e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e78:	1d38      	adds	r0, r7, #4
 8007e7a:	6800      	ldr	r0, [r0, #0]
 8007e7c:	f001 fad7 	bl	800942e <USB_WritePMA>
            ep->xfer_buff += len;
 8007e80:	463b      	mov	r3, r7
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695a      	ldr	r2, [r3, #20]
 8007e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8a:	441a      	add	r2, r3
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007e92:	463b      	mov	r3, r7
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6a1a      	ldr	r2, [r3, #32]
 8007e98:	463b      	mov	r3, r7
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d909      	bls.n	8007eb6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6a1a      	ldr	r2, [r3, #32]
 8007ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eac:	1ad2      	subs	r2, r2, r3
 8007eae:	463b      	mov	r3, r7
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	621a      	str	r2, [r3, #32]
 8007eb4:	e008      	b.n	8007ec8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ec8:	463b      	mov	r3, r7
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	785b      	ldrb	r3, [r3, #1]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d17a      	bne.n	8007fc8 <USB_EPStartXfer+0x404>
 8007ed2:	f107 0318 	add.w	r3, r7, #24
 8007ed6:	1d3a      	adds	r2, r7, #4
 8007ed8:	6812      	ldr	r2, [r2, #0]
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	1d3b      	adds	r3, r7, #4
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	f107 0318 	add.w	r3, r7, #24
 8007eec:	f107 0218 	add.w	r2, r7, #24
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	440a      	add	r2, r1
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	011a      	lsls	r2, r3, #4
 8007efe:	f107 0318 	add.w	r3, r7, #24
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4413      	add	r3, r2
 8007f06:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007f0a:	f107 0314 	add.w	r3, r7, #20
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11a      	bne.n	8007f4e <USB_EPStartXfer+0x38a>
 8007f18:	f107 0314 	add.w	r3, r7, #20
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	f107 0314 	add.w	r3, r7, #20
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	801a      	strh	r2, [r3, #0]
 8007f30:	f107 0314 	add.w	r3, r7, #20
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	f107 0314 	add.w	r3, r7, #20
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	801a      	strh	r2, [r3, #0]
 8007f4c:	e067      	b.n	800801e <USB_EPStartXfer+0x45a>
 8007f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f52:	2b3e      	cmp	r3, #62	; 0x3e
 8007f54:	d819      	bhi.n	8007f8a <USB_EPStartXfer+0x3c6>
 8007f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5a:	085b      	lsrs	r3, r3, #1
 8007f5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d004      	beq.n	8007f76 <USB_EPStartXfer+0x3b2>
 8007f6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007f70:	3301      	adds	r3, #1
 8007f72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007f76:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	029b      	lsls	r3, r3, #10
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	f107 0314 	add.w	r3, r7, #20
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	801a      	strh	r2, [r3, #0]
 8007f88:	e049      	b.n	800801e <USB_EPStartXfer+0x45a>
 8007f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8e:	095b      	lsrs	r3, r3, #5
 8007f90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f98:	f003 031f 	and.w	r3, r3, #31
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d104      	bne.n	8007faa <USB_EPStartXfer+0x3e6>
 8007fa0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007faa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	029b      	lsls	r3, r3, #10
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	f107 0314 	add.w	r3, r7, #20
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	e02a      	b.n	800801e <USB_EPStartXfer+0x45a>
 8007fc8:	463b      	mov	r3, r7
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d125      	bne.n	800801e <USB_EPStartXfer+0x45a>
 8007fd2:	f107 0320 	add.w	r3, r7, #32
 8007fd6:	1d3a      	adds	r2, r7, #4
 8007fd8:	6812      	ldr	r2, [r2, #0]
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	1d3b      	adds	r3, r7, #4
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	f107 0320 	add.w	r3, r7, #32
 8007fec:	f107 0220 	add.w	r2, r7, #32
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	011a      	lsls	r2, r3, #4
 8007ffe:	f107 0320 	add.w	r3, r7, #32
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4413      	add	r3, r2
 8008006:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800800a:	f107 031c 	add.w	r3, r7, #28
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008014:	b29a      	uxth	r2, r3
 8008016:	f107 031c 	add.w	r3, r7, #28
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800801e:	463b      	mov	r3, r7
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	891b      	ldrh	r3, [r3, #8]
 8008024:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008028:	463b      	mov	r3, r7
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6959      	ldr	r1, [r3, #20]
 800802e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008032:	b29b      	uxth	r3, r3
 8008034:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008038:	1d38      	adds	r0, r7, #4
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	f001 f9f7 	bl	800942e <USB_WritePMA>
 8008040:	f000 bcc6 	b.w	80089d0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008044:	463b      	mov	r3, r7
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	785b      	ldrb	r3, [r3, #1]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d164      	bne.n	8008118 <USB_EPStartXfer+0x554>
 800804e:	1d3b      	adds	r3, r7, #4
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	64bb      	str	r3, [r7, #72]	; 0x48
 8008054:	1d3b      	adds	r3, r7, #4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800805c:	b29b      	uxth	r3, r3
 800805e:	461a      	mov	r2, r3
 8008060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008062:	4413      	add	r3, r2
 8008064:	64bb      	str	r3, [r7, #72]	; 0x48
 8008066:	463b      	mov	r3, r7
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	011a      	lsls	r2, r3, #4
 800806e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008070:	4413      	add	r3, r2
 8008072:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008076:	647b      	str	r3, [r7, #68]	; 0x44
 8008078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800807c:	2b00      	cmp	r3, #0
 800807e:	d112      	bne.n	80080a6 <USB_EPStartXfer+0x4e2>
 8008080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800808a:	b29a      	uxth	r2, r3
 800808c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800808e:	801a      	strh	r2, [r3, #0]
 8008090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b29b      	uxth	r3, r3
 8008096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800809a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800809e:	b29a      	uxth	r2, r3
 80080a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a2:	801a      	strh	r2, [r3, #0]
 80080a4:	e057      	b.n	8008156 <USB_EPStartXfer+0x592>
 80080a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080aa:	2b3e      	cmp	r3, #62	; 0x3e
 80080ac:	d817      	bhi.n	80080de <USB_EPStartXfer+0x51a>
 80080ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b2:	085b      	lsrs	r3, r3, #1
 80080b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80080b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d004      	beq.n	80080ce <USB_EPStartXfer+0x50a>
 80080c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080c8:	3301      	adds	r3, #1
 80080ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80080ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	029b      	lsls	r3, r3, #10
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	e03b      	b.n	8008156 <USB_EPStartXfer+0x592>
 80080de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e2:	095b      	lsrs	r3, r3, #5
 80080e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80080e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ec:	f003 031f 	and.w	r3, r3, #31
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d104      	bne.n	80080fe <USB_EPStartXfer+0x53a>
 80080f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080f8:	3b01      	subs	r3, #1
 80080fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80080fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008102:	b29b      	uxth	r3, r3
 8008104:	029b      	lsls	r3, r3, #10
 8008106:	b29b      	uxth	r3, r3
 8008108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800810c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008110:	b29a      	uxth	r2, r3
 8008112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	e01e      	b.n	8008156 <USB_EPStartXfer+0x592>
 8008118:	463b      	mov	r3, r7
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d119      	bne.n	8008156 <USB_EPStartXfer+0x592>
 8008122:	1d3b      	adds	r3, r7, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	653b      	str	r3, [r7, #80]	; 0x50
 8008128:	1d3b      	adds	r3, r7, #4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008130:	b29b      	uxth	r3, r3
 8008132:	461a      	mov	r2, r3
 8008134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008136:	4413      	add	r3, r2
 8008138:	653b      	str	r3, [r7, #80]	; 0x50
 800813a:	463b      	mov	r3, r7
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	011a      	lsls	r2, r3, #4
 8008142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008144:	4413      	add	r3, r2
 8008146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800814a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800814c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008150:	b29a      	uxth	r2, r3
 8008152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008154:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008156:	463b      	mov	r3, r7
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	891b      	ldrh	r3, [r3, #8]
 800815c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008160:	463b      	mov	r3, r7
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6959      	ldr	r1, [r3, #20]
 8008166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800816a:	b29b      	uxth	r3, r3
 800816c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008170:	1d38      	adds	r0, r7, #4
 8008172:	6800      	ldr	r0, [r0, #0]
 8008174:	f001 f95b 	bl	800942e <USB_WritePMA>
            ep->xfer_buff += len;
 8008178:	463b      	mov	r3, r7
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695a      	ldr	r2, [r3, #20]
 800817e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008182:	441a      	add	r2, r3
 8008184:	463b      	mov	r3, r7
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800818a:	463b      	mov	r3, r7
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6a1a      	ldr	r2, [r3, #32]
 8008190:	463b      	mov	r3, r7
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	429a      	cmp	r2, r3
 8008198:	d909      	bls.n	80081ae <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800819a:	463b      	mov	r3, r7
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6a1a      	ldr	r2, [r3, #32]
 80081a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a4:	1ad2      	subs	r2, r2, r3
 80081a6:	463b      	mov	r3, r7
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	621a      	str	r2, [r3, #32]
 80081ac:	e008      	b.n	80081c0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80081ae:	463b      	mov	r3, r7
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80081b8:	463b      	mov	r3, r7
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2200      	movs	r2, #0
 80081be:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081c0:	1d3b      	adds	r3, r7, #4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	643b      	str	r3, [r7, #64]	; 0x40
 80081c6:	463b      	mov	r3, r7
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d164      	bne.n	800829a <USB_EPStartXfer+0x6d6>
 80081d0:	1d3b      	adds	r3, r7, #4
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80081d6:	1d3b      	adds	r3, r7, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081de:	b29b      	uxth	r3, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	4413      	add	r3, r2
 80081e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80081e8:	463b      	mov	r3, r7
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	011a      	lsls	r2, r3, #4
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	4413      	add	r3, r2
 80081f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
 80081fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d112      	bne.n	8008228 <USB_EPStartXfer+0x664>
 8008202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800820c:	b29a      	uxth	r2, r3
 800820e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	b29b      	uxth	r3, r3
 8008218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800821c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008220:	b29a      	uxth	r2, r3
 8008222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008224:	801a      	strh	r2, [r3, #0]
 8008226:	e054      	b.n	80082d2 <USB_EPStartXfer+0x70e>
 8008228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800822c:	2b3e      	cmp	r3, #62	; 0x3e
 800822e:	d817      	bhi.n	8008260 <USB_EPStartXfer+0x69c>
 8008230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800823a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <USB_EPStartXfer+0x68c>
 8008246:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800824a:	3301      	adds	r3, #1
 800824c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008250:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008254:	b29b      	uxth	r3, r3
 8008256:	029b      	lsls	r3, r3, #10
 8008258:	b29a      	uxth	r2, r3
 800825a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825c:	801a      	strh	r2, [r3, #0]
 800825e:	e038      	b.n	80082d2 <USB_EPStartXfer+0x70e>
 8008260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800826a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	2b00      	cmp	r3, #0
 8008274:	d104      	bne.n	8008280 <USB_EPStartXfer+0x6bc>
 8008276:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800827a:	3b01      	subs	r3, #1
 800827c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008280:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008284:	b29b      	uxth	r3, r3
 8008286:	029b      	lsls	r3, r3, #10
 8008288:	b29b      	uxth	r3, r3
 800828a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008292:	b29a      	uxth	r2, r3
 8008294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	e01b      	b.n	80082d2 <USB_EPStartXfer+0x70e>
 800829a:	463b      	mov	r3, r7
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d116      	bne.n	80082d2 <USB_EPStartXfer+0x70e>
 80082a4:	1d3b      	adds	r3, r7, #4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	461a      	mov	r2, r3
 80082b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b2:	4413      	add	r3, r2
 80082b4:	643b      	str	r3, [r7, #64]	; 0x40
 80082b6:	463b      	mov	r3, r7
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	011a      	lsls	r2, r3, #4
 80082be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c0:	4413      	add	r3, r2
 80082c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80082d2:	463b      	mov	r3, r7
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	895b      	ldrh	r3, [r3, #10]
 80082d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082dc:	463b      	mov	r3, r7
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6959      	ldr	r1, [r3, #20]
 80082e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80082ec:	1d38      	adds	r0, r7, #4
 80082ee:	6800      	ldr	r0, [r0, #0]
 80082f0:	f001 f89d 	bl	800942e <USB_WritePMA>
 80082f4:	e36c      	b.n	80089d0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80082f6:	463b      	mov	r3, r7
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008300:	1d3b      	adds	r3, r7, #4
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	463b      	mov	r3, r7
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800831e:	1d3b      	adds	r3, r7, #4
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	463b      	mov	r3, r7
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	441a      	add	r2, r3
 800832c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800833c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008340:	b29b      	uxth	r3, r3
 8008342:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008344:	1d3b      	adds	r3, r7, #4
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	65fb      	str	r3, [r7, #92]	; 0x5c
 800834a:	1d3b      	adds	r3, r7, #4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008352:	b29b      	uxth	r3, r3
 8008354:	461a      	mov	r2, r3
 8008356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008358:	4413      	add	r3, r2
 800835a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800835c:	463b      	mov	r3, r7
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	011a      	lsls	r2, r3, #4
 8008364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008366:	4413      	add	r3, r2
 8008368:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800836c:	65bb      	str	r3, [r7, #88]	; 0x58
 800836e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008372:	b29a      	uxth	r2, r3
 8008374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008376:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008378:	463b      	mov	r3, r7
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	891b      	ldrh	r3, [r3, #8]
 800837e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008382:	463b      	mov	r3, r7
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6959      	ldr	r1, [r3, #20]
 8008388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838c:	b29b      	uxth	r3, r3
 800838e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008392:	1d38      	adds	r0, r7, #4
 8008394:	6800      	ldr	r0, [r0, #0]
 8008396:	f001 f84a 	bl	800942e <USB_WritePMA>
 800839a:	e319      	b.n	80089d0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800839c:	1d3b      	adds	r3, r7, #4
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	463b      	mov	r3, r7
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80083ba:	1d3b      	adds	r3, r7, #4
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	463b      	mov	r3, r7
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	441a      	add	r2, r3
 80083c8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80083cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80083d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083dc:	b29b      	uxth	r3, r3
 80083de:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80083e0:	463b      	mov	r3, r7
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6a1a      	ldr	r2, [r3, #32]
 80083e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ea:	1ad2      	subs	r2, r2, r3
 80083ec:	463b      	mov	r3, r7
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80083f2:	1d3b      	adds	r3, r7, #4
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	463b      	mov	r3, r7
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 8162 	beq.w	80086d2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800840e:	1d3b      	adds	r3, r7, #4
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008416:	463b      	mov	r3, r7
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d164      	bne.n	80084ea <USB_EPStartXfer+0x926>
 8008420:	1d3b      	adds	r3, r7, #4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	67bb      	str	r3, [r7, #120]	; 0x78
 8008426:	1d3b      	adds	r3, r7, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800842e:	b29b      	uxth	r3, r3
 8008430:	461a      	mov	r2, r3
 8008432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008434:	4413      	add	r3, r2
 8008436:	67bb      	str	r3, [r7, #120]	; 0x78
 8008438:	463b      	mov	r3, r7
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	011a      	lsls	r2, r3, #4
 8008440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008442:	4413      	add	r3, r2
 8008444:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008448:	677b      	str	r3, [r7, #116]	; 0x74
 800844a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d112      	bne.n	8008478 <USB_EPStartXfer+0x8b4>
 8008452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29b      	uxth	r3, r3
 8008458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800845c:	b29a      	uxth	r2, r3
 800845e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008460:	801a      	strh	r2, [r3, #0]
 8008462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	b29b      	uxth	r3, r3
 8008468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800846c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008470:	b29a      	uxth	r2, r3
 8008472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	e057      	b.n	8008528 <USB_EPStartXfer+0x964>
 8008478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800847c:	2b3e      	cmp	r3, #62	; 0x3e
 800847e:	d817      	bhi.n	80084b0 <USB_EPStartXfer+0x8ec>
 8008480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008484:	085b      	lsrs	r3, r3, #1
 8008486:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800848a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <USB_EPStartXfer+0x8dc>
 8008496:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800849a:	3301      	adds	r3, #1
 800849c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80084a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	029b      	lsls	r3, r3, #10
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ac:	801a      	strh	r2, [r3, #0]
 80084ae:	e03b      	b.n	8008528 <USB_EPStartXfer+0x964>
 80084b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b4:	095b      	lsrs	r3, r3, #5
 80084b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80084ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <USB_EPStartXfer+0x90c>
 80084c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80084ca:	3b01      	subs	r3, #1
 80084cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80084d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	029b      	lsls	r3, r3, #10
 80084d8:	b29b      	uxth	r3, r3
 80084da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e6:	801a      	strh	r2, [r3, #0]
 80084e8:	e01e      	b.n	8008528 <USB_EPStartXfer+0x964>
 80084ea:	463b      	mov	r3, r7
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d119      	bne.n	8008528 <USB_EPStartXfer+0x964>
 80084f4:	1d3b      	adds	r3, r7, #4
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	461a      	mov	r2, r3
 8008500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008504:	4413      	add	r3, r2
 8008506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800850a:	463b      	mov	r3, r7
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	011a      	lsls	r2, r3, #4
 8008512:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008516:	4413      	add	r3, r2
 8008518:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800851c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800851e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008522:	b29a      	uxth	r2, r3
 8008524:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008526:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008528:	463b      	mov	r3, r7
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	895b      	ldrh	r3, [r3, #10]
 800852e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008532:	463b      	mov	r3, r7
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6959      	ldr	r1, [r3, #20]
 8008538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853c:	b29b      	uxth	r3, r3
 800853e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008542:	1d38      	adds	r0, r7, #4
 8008544:	6800      	ldr	r0, [r0, #0]
 8008546:	f000 ff72 	bl	800942e <USB_WritePMA>
          ep->xfer_buff += len;
 800854a:	463b      	mov	r3, r7
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	695a      	ldr	r2, [r3, #20]
 8008550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008554:	441a      	add	r2, r3
 8008556:	463b      	mov	r3, r7
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800855c:	463b      	mov	r3, r7
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6a1a      	ldr	r2, [r3, #32]
 8008562:	463b      	mov	r3, r7
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	429a      	cmp	r2, r3
 800856a:	d909      	bls.n	8008580 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800856c:	463b      	mov	r3, r7
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6a1a      	ldr	r2, [r3, #32]
 8008572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008576:	1ad2      	subs	r2, r2, r3
 8008578:	463b      	mov	r3, r7
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	621a      	str	r2, [r3, #32]
 800857e:	e008      	b.n	8008592 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008580:	463b      	mov	r3, r7
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800858a:	463b      	mov	r3, r7
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2200      	movs	r2, #0
 8008590:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 821a 	beq.w	80089d0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800859c:	463b      	mov	r3, r7
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	785b      	ldrb	r3, [r3, #1]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d164      	bne.n	8008670 <USB_EPStartXfer+0xaac>
 80085a6:	1d3b      	adds	r3, r7, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80085ac:	1d3b      	adds	r3, r7, #4
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	461a      	mov	r2, r3
 80085b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085ba:	4413      	add	r3, r2
 80085bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80085be:	463b      	mov	r3, r7
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	011a      	lsls	r2, r3, #4
 80085c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085c8:	4413      	add	r3, r2
 80085ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085ce:	667b      	str	r3, [r7, #100]	; 0x64
 80085d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d112      	bne.n	80085fe <USB_EPStartXfer+0xa3a>
 80085d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085e6:	801a      	strh	r2, [r3, #0]
 80085e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085fa:	801a      	strh	r2, [r3, #0]
 80085fc:	e057      	b.n	80086ae <USB_EPStartXfer+0xaea>
 80085fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008602:	2b3e      	cmp	r3, #62	; 0x3e
 8008604:	d817      	bhi.n	8008636 <USB_EPStartXfer+0xa72>
 8008606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800860a:	085b      	lsrs	r3, r3, #1
 800860c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d004      	beq.n	8008626 <USB_EPStartXfer+0xa62>
 800861c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008620:	3301      	adds	r3, #1
 8008622:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800862a:	b29b      	uxth	r3, r3
 800862c:	029b      	lsls	r3, r3, #10
 800862e:	b29a      	uxth	r2, r3
 8008630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008632:	801a      	strh	r2, [r3, #0]
 8008634:	e03b      	b.n	80086ae <USB_EPStartXfer+0xaea>
 8008636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800863a:	095b      	lsrs	r3, r3, #5
 800863c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008644:	f003 031f 	and.w	r3, r3, #31
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <USB_EPStartXfer+0xa92>
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008650:	3b01      	subs	r3, #1
 8008652:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800865a:	b29b      	uxth	r3, r3
 800865c:	029b      	lsls	r3, r3, #10
 800865e:	b29b      	uxth	r3, r3
 8008660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008668:	b29a      	uxth	r2, r3
 800866a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800866c:	801a      	strh	r2, [r3, #0]
 800866e:	e01e      	b.n	80086ae <USB_EPStartXfer+0xaea>
 8008670:	463b      	mov	r3, r7
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d119      	bne.n	80086ae <USB_EPStartXfer+0xaea>
 800867a:	1d3b      	adds	r3, r7, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	673b      	str	r3, [r7, #112]	; 0x70
 8008680:	1d3b      	adds	r3, r7, #4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008688:	b29b      	uxth	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800868e:	4413      	add	r3, r2
 8008690:	673b      	str	r3, [r7, #112]	; 0x70
 8008692:	463b      	mov	r3, r7
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	011a      	lsls	r2, r3, #4
 800869a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800869c:	4413      	add	r3, r2
 800869e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086ae:	463b      	mov	r3, r7
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	891b      	ldrh	r3, [r3, #8]
 80086b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086b8:	463b      	mov	r3, r7
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6959      	ldr	r1, [r3, #20]
 80086be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80086c8:	1d38      	adds	r0, r7, #4
 80086ca:	6800      	ldr	r0, [r0, #0]
 80086cc:	f000 feaf 	bl	800942e <USB_WritePMA>
 80086d0:	e17e      	b.n	80089d0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086d2:	463b      	mov	r3, r7
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d16f      	bne.n	80087bc <USB_EPStartXfer+0xbf8>
 80086dc:	1d3b      	adds	r3, r7, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086e4:	1d3b      	adds	r3, r7, #4
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	461a      	mov	r2, r3
 80086f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086f4:	4413      	add	r3, r2
 80086f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086fa:	463b      	mov	r3, r7
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	011a      	lsls	r2, r3, #4
 8008702:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008706:	4413      	add	r3, r2
 8008708:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800870c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008714:	2b00      	cmp	r3, #0
 8008716:	d116      	bne.n	8008746 <USB_EPStartXfer+0xb82>
 8008718:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008724:	b29a      	uxth	r2, r3
 8008726:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	b29b      	uxth	r3, r3
 8008734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800873c:	b29a      	uxth	r2, r3
 800873e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008742:	801a      	strh	r2, [r3, #0]
 8008744:	e05f      	b.n	8008806 <USB_EPStartXfer+0xc42>
 8008746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800874a:	2b3e      	cmp	r3, #62	; 0x3e
 800874c:	d818      	bhi.n	8008780 <USB_EPStartXfer+0xbbc>
 800874e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008752:	085b      	lsrs	r3, r3, #1
 8008754:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <USB_EPStartXfer+0xbaa>
 8008764:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008768:	3301      	adds	r3, #1
 800876a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800876e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008772:	b29b      	uxth	r3, r3
 8008774:	029b      	lsls	r3, r3, #10
 8008776:	b29a      	uxth	r2, r3
 8008778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800877c:	801a      	strh	r2, [r3, #0]
 800877e:	e042      	b.n	8008806 <USB_EPStartXfer+0xc42>
 8008780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008784:	095b      	lsrs	r3, r3, #5
 8008786:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800878a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878e:	f003 031f 	and.w	r3, r3, #31
 8008792:	2b00      	cmp	r3, #0
 8008794:	d104      	bne.n	80087a0 <USB_EPStartXfer+0xbdc>
 8008796:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800879a:	3b01      	subs	r3, #1
 800879c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80087a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	029b      	lsls	r3, r3, #10
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087b8:	801a      	strh	r2, [r3, #0]
 80087ba:	e024      	b.n	8008806 <USB_EPStartXfer+0xc42>
 80087bc:	463b      	mov	r3, r7
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	785b      	ldrb	r3, [r3, #1]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d11f      	bne.n	8008806 <USB_EPStartXfer+0xc42>
 80087c6:	1d3b      	adds	r3, r7, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80087ce:	1d3b      	adds	r3, r7, #4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	461a      	mov	r2, r3
 80087da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087de:	4413      	add	r3, r2
 80087e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80087e4:	463b      	mov	r3, r7
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	011a      	lsls	r2, r3, #4
 80087ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087f0:	4413      	add	r3, r2
 80087f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fe:	b29a      	uxth	r2, r3
 8008800:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008804:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008806:	463b      	mov	r3, r7
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	891b      	ldrh	r3, [r3, #8]
 800880c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008810:	463b      	mov	r3, r7
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6959      	ldr	r1, [r3, #20]
 8008816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800881a:	b29b      	uxth	r3, r3
 800881c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008820:	1d38      	adds	r0, r7, #4
 8008822:	6800      	ldr	r0, [r0, #0]
 8008824:	f000 fe03 	bl	800942e <USB_WritePMA>
          ep->xfer_buff += len;
 8008828:	463b      	mov	r3, r7
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	695a      	ldr	r2, [r3, #20]
 800882e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008832:	441a      	add	r2, r3
 8008834:	463b      	mov	r3, r7
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800883a:	463b      	mov	r3, r7
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6a1a      	ldr	r2, [r3, #32]
 8008840:	463b      	mov	r3, r7
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	429a      	cmp	r2, r3
 8008848:	d909      	bls.n	800885e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800884a:	463b      	mov	r3, r7
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6a1a      	ldr	r2, [r3, #32]
 8008850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008854:	1ad2      	subs	r2, r2, r3
 8008856:	463b      	mov	r3, r7
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	621a      	str	r2, [r3, #32]
 800885c:	e008      	b.n	8008870 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800885e:	463b      	mov	r3, r7
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008868:	463b      	mov	r3, r7
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2200      	movs	r2, #0
 800886e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 80ab 	beq.w	80089d0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800887a:	1d3b      	adds	r3, r7, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008882:	463b      	mov	r3, r7
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	785b      	ldrb	r3, [r3, #1]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d16f      	bne.n	800896c <USB_EPStartXfer+0xda8>
 800888c:	1d3b      	adds	r3, r7, #4
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008894:	1d3b      	adds	r3, r7, #4
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800889c:	b29b      	uxth	r3, r3
 800889e:	461a      	mov	r2, r3
 80088a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088a4:	4413      	add	r3, r2
 80088a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088aa:	463b      	mov	r3, r7
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	011a      	lsls	r2, r3, #4
 80088b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088b6:	4413      	add	r3, r2
 80088b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d116      	bne.n	80088f6 <USB_EPStartXfer+0xd32>
 80088c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088da:	801a      	strh	r2, [r3, #0]
 80088dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088f2:	801a      	strh	r2, [r3, #0]
 80088f4:	e05b      	b.n	80089ae <USB_EPStartXfer+0xdea>
 80088f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fa:	2b3e      	cmp	r3, #62	; 0x3e
 80088fc:	d818      	bhi.n	8008930 <USB_EPStartXfer+0xd6c>
 80088fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008902:	085b      	lsrs	r3, r3, #1
 8008904:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d004      	beq.n	800891e <USB_EPStartXfer+0xd5a>
 8008914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008918:	3301      	adds	r3, #1
 800891a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800891e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008922:	b29b      	uxth	r3, r3
 8008924:	029b      	lsls	r3, r3, #10
 8008926:	b29a      	uxth	r2, r3
 8008928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800892c:	801a      	strh	r2, [r3, #0]
 800892e:	e03e      	b.n	80089ae <USB_EPStartXfer+0xdea>
 8008930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008934:	095b      	lsrs	r3, r3, #5
 8008936:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800893a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893e:	f003 031f 	and.w	r3, r3, #31
 8008942:	2b00      	cmp	r3, #0
 8008944:	d104      	bne.n	8008950 <USB_EPStartXfer+0xd8c>
 8008946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800894a:	3b01      	subs	r3, #1
 800894c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008954:	b29b      	uxth	r3, r3
 8008956:	029b      	lsls	r3, r3, #10
 8008958:	b29b      	uxth	r3, r3
 800895a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008962:	b29a      	uxth	r2, r3
 8008964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008968:	801a      	strh	r2, [r3, #0]
 800896a:	e020      	b.n	80089ae <USB_EPStartXfer+0xdea>
 800896c:	463b      	mov	r3, r7
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	785b      	ldrb	r3, [r3, #1]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d11b      	bne.n	80089ae <USB_EPStartXfer+0xdea>
 8008976:	1d3b      	adds	r3, r7, #4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800897e:	b29b      	uxth	r3, r3
 8008980:	461a      	mov	r2, r3
 8008982:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008986:	4413      	add	r3, r2
 8008988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800898c:	463b      	mov	r3, r7
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	011a      	lsls	r2, r3, #4
 8008994:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008998:	4413      	add	r3, r2
 800899a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800899e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089ae:	463b      	mov	r3, r7
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	895b      	ldrh	r3, [r3, #10]
 80089b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089b8:	463b      	mov	r3, r7
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6959      	ldr	r1, [r3, #20]
 80089be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089c8:	1d38      	adds	r0, r7, #4
 80089ca:	6800      	ldr	r0, [r0, #0]
 80089cc:	f000 fd2f 	bl	800942e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80089d0:	1d3b      	adds	r3, r7, #4
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	463b      	mov	r3, r7
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f107 020a 	add.w	r2, r7, #10
 80089e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ee:	8013      	strh	r3, [r2, #0]
 80089f0:	f107 030a 	add.w	r3, r7, #10
 80089f4:	f107 020a 	add.w	r2, r7, #10
 80089f8:	8812      	ldrh	r2, [r2, #0]
 80089fa:	f082 0210 	eor.w	r2, r2, #16
 80089fe:	801a      	strh	r2, [r3, #0]
 8008a00:	f107 030a 	add.w	r3, r7, #10
 8008a04:	f107 020a 	add.w	r2, r7, #10
 8008a08:	8812      	ldrh	r2, [r2, #0]
 8008a0a:	f082 0220 	eor.w	r2, r2, #32
 8008a0e:	801a      	strh	r2, [r3, #0]
 8008a10:	1d3b      	adds	r3, r7, #4
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	463b      	mov	r3, r7
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	441a      	add	r2, r3
 8008a1e:	f107 030a 	add.w	r3, r7, #10
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	8013      	strh	r3, [r2, #0]
 8008a38:	e3b5      	b.n	80091a6 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	7b1b      	ldrb	r3, [r3, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f040 8090 	bne.w	8008b66 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008a46:	463b      	mov	r3, r7
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	699a      	ldr	r2, [r3, #24]
 8008a4c:	463b      	mov	r3, r7
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d90e      	bls.n	8008a74 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8008a56:	463b      	mov	r3, r7
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008a60:	463b      	mov	r3, r7
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6a:	1ad2      	subs	r2, r2, r3
 8008a6c:	463b      	mov	r3, r7
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	619a      	str	r2, [r3, #24]
 8008a72:	e008      	b.n	8008a86 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008a74:	463b      	mov	r3, r7
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008a7e:	463b      	mov	r3, r7
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2200      	movs	r2, #0
 8008a84:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008a86:	1d3b      	adds	r3, r7, #4
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a8e:	1d3b      	adds	r3, r7, #4
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	461a      	mov	r2, r3
 8008a9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	011a      	lsls	r2, r3, #4
 8008aac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d116      	bne.n	8008af0 <USB_EPStartXfer+0xf2c>
 8008ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ac6:	881b      	ldrh	r3, [r3, #0]
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ad4:	801a      	strh	r2, [r3, #0]
 8008ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008aec:	801a      	strh	r2, [r3, #0]
 8008aee:	e32c      	b.n	800914a <USB_EPStartXfer+0x1586>
 8008af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af4:	2b3e      	cmp	r3, #62	; 0x3e
 8008af6:	d818      	bhi.n	8008b2a <USB_EPStartXfer+0xf66>
 8008af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afc:	085b      	lsrs	r3, r3, #1
 8008afe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d004      	beq.n	8008b18 <USB_EPStartXfer+0xf54>
 8008b0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b12:	3301      	adds	r3, #1
 8008b14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008b18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	029b      	lsls	r3, r3, #10
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e30f      	b.n	800914a <USB_EPStartXfer+0x1586>
 8008b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b2e:	095b      	lsrs	r3, r3, #5
 8008b30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b38:	f003 031f 	and.w	r3, r3, #31
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d104      	bne.n	8008b4a <USB_EPStartXfer+0xf86>
 8008b40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b44:	3b01      	subs	r3, #1
 8008b46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008b4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	029b      	lsls	r3, r3, #10
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b62:	801a      	strh	r2, [r3, #0]
 8008b64:	e2f1      	b.n	800914a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008b66:	463b      	mov	r3, r7
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	78db      	ldrb	r3, [r3, #3]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	f040 818f 	bne.w	8008e90 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008b72:	463b      	mov	r3, r7
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	785b      	ldrb	r3, [r3, #1]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d175      	bne.n	8008c68 <USB_EPStartXfer+0x10a4>
 8008b7c:	1d3b      	adds	r3, r7, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b84:	1d3b      	adds	r3, r7, #4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b94:	4413      	add	r3, r2
 8008b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b9a:	463b      	mov	r3, r7
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	011a      	lsls	r2, r3, #4
 8008ba2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d116      	bne.n	8008be8 <USB_EPStartXfer+0x1024>
 8008bba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bcc:	801a      	strh	r2, [r3, #0]
 8008bce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008be4:	801a      	strh	r2, [r3, #0]
 8008be6:	e065      	b.n	8008cb4 <USB_EPStartXfer+0x10f0>
 8008be8:	463b      	mov	r3, r7
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b3e      	cmp	r3, #62	; 0x3e
 8008bf0:	d81a      	bhi.n	8008c28 <USB_EPStartXfer+0x1064>
 8008bf2:	463b      	mov	r3, r7
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	085b      	lsrs	r3, r3, #1
 8008bfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008bfe:	463b      	mov	r3, r7
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <USB_EPStartXfer+0x1052>
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c10:	3301      	adds	r3, #1
 8008c12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	029b      	lsls	r3, r3, #10
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c24:	801a      	strh	r2, [r3, #0]
 8008c26:	e045      	b.n	8008cb4 <USB_EPStartXfer+0x10f0>
 8008c28:	463b      	mov	r3, r7
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	095b      	lsrs	r3, r3, #5
 8008c30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008c34:	463b      	mov	r3, r7
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	f003 031f 	and.w	r3, r3, #31
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <USB_EPStartXfer+0x1088>
 8008c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c46:	3b01      	subs	r3, #1
 8008c48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	029b      	lsls	r3, r3, #10
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	e025      	b.n	8008cb4 <USB_EPStartXfer+0x10f0>
 8008c68:	463b      	mov	r3, r7
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d120      	bne.n	8008cb4 <USB_EPStartXfer+0x10f0>
 8008c72:	1d3b      	adds	r3, r7, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c7a:	1d3b      	adds	r3, r7, #4
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	461a      	mov	r2, r3
 8008c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c90:	463b      	mov	r3, r7
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	011a      	lsls	r2, r3, #4
 8008c98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ca2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008cb2:	801a      	strh	r2, [r3, #0]
 8008cb4:	1d3b      	adds	r3, r7, #4
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cbc:	463b      	mov	r3, r7
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	785b      	ldrb	r3, [r3, #1]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d175      	bne.n	8008db2 <USB_EPStartXfer+0x11ee>
 8008cc6:	1d3b      	adds	r3, r7, #4
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008cce:	1d3b      	adds	r3, r7, #4
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cde:	4413      	add	r3, r2
 8008ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008ce4:	463b      	mov	r3, r7
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	011a      	lsls	r2, r3, #4
 8008cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d116      	bne.n	8008d32 <USB_EPStartXfer+0x116e>
 8008d04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d16:	801a      	strh	r2, [r3, #0]
 8008d18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d2e:	801a      	strh	r2, [r3, #0]
 8008d30:	e061      	b.n	8008df6 <USB_EPStartXfer+0x1232>
 8008d32:	463b      	mov	r3, r7
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	2b3e      	cmp	r3, #62	; 0x3e
 8008d3a:	d81a      	bhi.n	8008d72 <USB_EPStartXfer+0x11ae>
 8008d3c:	463b      	mov	r3, r7
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d48:	463b      	mov	r3, r7
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <USB_EPStartXfer+0x119c>
 8008d56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	029b      	lsls	r3, r3, #10
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d6e:	801a      	strh	r2, [r3, #0]
 8008d70:	e041      	b.n	8008df6 <USB_EPStartXfer+0x1232>
 8008d72:	463b      	mov	r3, r7
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	095b      	lsrs	r3, r3, #5
 8008d7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d7e:	463b      	mov	r3, r7
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	f003 031f 	and.w	r3, r3, #31
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d104      	bne.n	8008d96 <USB_EPStartXfer+0x11d2>
 8008d8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d90:	3b01      	subs	r3, #1
 8008d92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	029b      	lsls	r3, r3, #10
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008dae:	801a      	strh	r2, [r3, #0]
 8008db0:	e021      	b.n	8008df6 <USB_EPStartXfer+0x1232>
 8008db2:	463b      	mov	r3, r7
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d11c      	bne.n	8008df6 <USB_EPStartXfer+0x1232>
 8008dbc:	1d3b      	adds	r3, r7, #4
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008dcc:	4413      	add	r3, r2
 8008dce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	011a      	lsls	r2, r3, #4
 8008dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008dde:	4413      	add	r3, r2
 8008de0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008de8:	463b      	mov	r3, r7
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008df4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008df6:	463b      	mov	r3, r7
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 81a4 	beq.w	800914a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008e02:	1d3b      	adds	r3, r7, #4
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	463b      	mov	r3, r7
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008e16:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <USB_EPStartXfer+0x126a>
 8008e22:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10d      	bne.n	8008e4a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008e2e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f040 8187 	bne.w	800914a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008e3c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f040 8180 	bne.w	800914a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008e4a:	1d3b      	adds	r3, r7, #4
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	463b      	mov	r3, r7
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e64:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008e68:	1d3b      	adds	r3, r7, #4
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	441a      	add	r2, r3
 8008e76:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	8013      	strh	r3, [r2, #0]
 8008e8e:	e15c      	b.n	800914a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008e90:	463b      	mov	r3, r7
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	78db      	ldrb	r3, [r3, #3]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	f040 8155 	bne.w	8009146 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008e9c:	463b      	mov	r3, r7
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	699a      	ldr	r2, [r3, #24]
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d90e      	bls.n	8008eca <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008eac:	463b      	mov	r3, r7
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699a      	ldr	r2, [r3, #24]
 8008ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ec0:	1ad2      	subs	r2, r2, r3
 8008ec2:	463b      	mov	r3, r7
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	619a      	str	r2, [r3, #24]
 8008ec8:	e008      	b.n	8008edc <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8008eca:	463b      	mov	r3, r7
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008edc:	463b      	mov	r3, r7
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d16f      	bne.n	8008fc6 <USB_EPStartXfer+0x1402>
 8008ee6:	1d3b      	adds	r3, r7, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008eee:	1d3b      	adds	r3, r7, #4
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008efe:	4413      	add	r3, r2
 8008f00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f04:	463b      	mov	r3, r7
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	011a      	lsls	r2, r3, #4
 8008f0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f10:	4413      	add	r3, r2
 8008f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d116      	bne.n	8008f50 <USB_EPStartXfer+0x138c>
 8008f22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f4c:	801a      	strh	r2, [r3, #0]
 8008f4e:	e05f      	b.n	8009010 <USB_EPStartXfer+0x144c>
 8008f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f54:	2b3e      	cmp	r3, #62	; 0x3e
 8008f56:	d818      	bhi.n	8008f8a <USB_EPStartXfer+0x13c6>
 8008f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5c:	085b      	lsrs	r3, r3, #1
 8008f5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d004      	beq.n	8008f78 <USB_EPStartXfer+0x13b4>
 8008f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f72:	3301      	adds	r3, #1
 8008f74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	029b      	lsls	r3, r3, #10
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f86:	801a      	strh	r2, [r3, #0]
 8008f88:	e042      	b.n	8009010 <USB_EPStartXfer+0x144c>
 8008f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f8e:	095b      	lsrs	r3, r3, #5
 8008f90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f98:	f003 031f 	and.w	r3, r3, #31
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d104      	bne.n	8008faa <USB_EPStartXfer+0x13e6>
 8008fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	029b      	lsls	r3, r3, #10
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fc2:	801a      	strh	r2, [r3, #0]
 8008fc4:	e024      	b.n	8009010 <USB_EPStartXfer+0x144c>
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d11f      	bne.n	8009010 <USB_EPStartXfer+0x144c>
 8008fd0:	1d3b      	adds	r3, r7, #4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008fd8:	1d3b      	adds	r3, r7, #4
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe8:	4413      	add	r3, r2
 8008fea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008fee:	463b      	mov	r3, r7
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	011a      	lsls	r2, r3, #4
 8008ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009000:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009008:	b29a      	uxth	r2, r3
 800900a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800900e:	801a      	strh	r2, [r3, #0]
 8009010:	1d3b      	adds	r3, r7, #4
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009018:	463b      	mov	r3, r7
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d16f      	bne.n	8009102 <USB_EPStartXfer+0x153e>
 8009022:	1d3b      	adds	r3, r7, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800902a:	1d3b      	adds	r3, r7, #4
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009032:	b29b      	uxth	r3, r3
 8009034:	461a      	mov	r2, r3
 8009036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800903a:	4413      	add	r3, r2
 800903c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009040:	463b      	mov	r3, r7
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	011a      	lsls	r2, r3, #4
 8009048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800904c:	4413      	add	r3, r2
 800904e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d116      	bne.n	800908c <USB_EPStartXfer+0x14c8>
 800905e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	b29b      	uxth	r3, r3
 8009066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800906a:	b29a      	uxth	r2, r3
 800906c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009070:	801a      	strh	r2, [r3, #0]
 8009072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009082:	b29a      	uxth	r2, r3
 8009084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009088:	801a      	strh	r2, [r3, #0]
 800908a:	e05e      	b.n	800914a <USB_EPStartXfer+0x1586>
 800908c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009090:	2b3e      	cmp	r3, #62	; 0x3e
 8009092:	d818      	bhi.n	80090c6 <USB_EPStartXfer+0x1502>
 8009094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009098:	085b      	lsrs	r3, r3, #1
 800909a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800909e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d004      	beq.n	80090b4 <USB_EPStartXfer+0x14f0>
 80090aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090ae:	3301      	adds	r3, #1
 80090b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	029b      	lsls	r3, r3, #10
 80090bc:	b29a      	uxth	r2, r3
 80090be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090c2:	801a      	strh	r2, [r3, #0]
 80090c4:	e041      	b.n	800914a <USB_EPStartXfer+0x1586>
 80090c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d4:	f003 031f 	and.w	r3, r3, #31
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d104      	bne.n	80090e6 <USB_EPStartXfer+0x1522>
 80090dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090e0:	3b01      	subs	r3, #1
 80090e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	029b      	lsls	r3, r3, #10
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	e023      	b.n	800914a <USB_EPStartXfer+0x1586>
 8009102:	463b      	mov	r3, r7
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	785b      	ldrb	r3, [r3, #1]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d11e      	bne.n	800914a <USB_EPStartXfer+0x1586>
 800910c:	1d3b      	adds	r3, r7, #4
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009114:	b29b      	uxth	r3, r3
 8009116:	461a      	mov	r2, r3
 8009118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800911c:	4413      	add	r3, r2
 800911e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009122:	463b      	mov	r3, r7
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	011a      	lsls	r2, r3, #4
 800912a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800912e:	4413      	add	r3, r2
 8009130:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800913c:	b29a      	uxth	r2, r3
 800913e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	e001      	b.n	800914a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e02e      	b.n	80091a8 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800914a:	1d3b      	adds	r3, r7, #4
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	463b      	mov	r3, r7
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	b29b      	uxth	r3, r3
 800915c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009164:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009168:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800916c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009170:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009174:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009178:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800917c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009180:	1d3b      	adds	r3, r7, #4
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	463b      	mov	r3, r7
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	441a      	add	r2, r3
 800918e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800919a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800919e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	785b      	ldrb	r3, [r3, #1]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d020      	beq.n	8009206 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091da:	81bb      	strh	r3, [r7, #12]
 80091dc:	89bb      	ldrh	r3, [r7, #12]
 80091de:	f083 0310 	eor.w	r3, r3, #16
 80091e2:	81bb      	strh	r3, [r7, #12]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	441a      	add	r2, r3
 80091ee:	89bb      	ldrh	r3, [r7, #12]
 80091f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009200:	b29b      	uxth	r3, r3
 8009202:	8013      	strh	r3, [r2, #0]
 8009204:	e01f      	b.n	8009246 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	b29b      	uxth	r3, r3
 8009214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800921c:	81fb      	strh	r3, [r7, #14]
 800921e:	89fb      	ldrh	r3, [r7, #14]
 8009220:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009224:	81fb      	strh	r3, [r7, #14]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	441a      	add	r2, r3
 8009230:	89fb      	ldrh	r3, [r7, #14]
 8009232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800923a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800923e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009242:	b29b      	uxth	r3, r3
 8009244:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	bc80      	pop	{r7}
 8009250:	4770      	bx	lr

08009252 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009252:	b480      	push	{r7}
 8009254:	b087      	sub	sp, #28
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	7b1b      	ldrb	r3, [r3, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f040 809d 	bne.w	80093a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	785b      	ldrb	r3, [r3, #1]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d04c      	beq.n	8009308 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	823b      	strh	r3, [r7, #16]
 800927c:	8a3b      	ldrh	r3, [r7, #16]
 800927e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009282:	2b00      	cmp	r3, #0
 8009284:	d01b      	beq.n	80092be <USB_EPClearStall+0x6c>
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b29b      	uxth	r3, r3
 8009294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800929c:	81fb      	strh	r3, [r7, #14]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	441a      	add	r2, r3
 80092a8:	89fb      	ldrh	r3, [r7, #14]
 80092aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	78db      	ldrb	r3, [r3, #3]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d06c      	beq.n	80093a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092dc:	81bb      	strh	r3, [r7, #12]
 80092de:	89bb      	ldrh	r3, [r7, #12]
 80092e0:	f083 0320 	eor.w	r3, r3, #32
 80092e4:	81bb      	strh	r3, [r7, #12]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	441a      	add	r2, r3
 80092f0:	89bb      	ldrh	r3, [r7, #12]
 80092f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009302:	b29b      	uxth	r3, r3
 8009304:	8013      	strh	r3, [r2, #0]
 8009306:	e04b      	b.n	80093a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	82fb      	strh	r3, [r7, #22]
 8009316:	8afb      	ldrh	r3, [r7, #22]
 8009318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01b      	beq.n	8009358 <USB_EPClearStall+0x106>
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29b      	uxth	r3, r3
 800932e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009336:	82bb      	strh	r3, [r7, #20]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	441a      	add	r2, r3
 8009342:	8abb      	ldrh	r3, [r7, #20]
 8009344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009354:	b29b      	uxth	r3, r3
 8009356:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800936a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936e:	827b      	strh	r3, [r7, #18]
 8009370:	8a7b      	ldrh	r3, [r7, #18]
 8009372:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009376:	827b      	strh	r3, [r7, #18]
 8009378:	8a7b      	ldrh	r3, [r7, #18]
 800937a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800937e:	827b      	strh	r3, [r7, #18]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	441a      	add	r2, r3
 800938a:	8a7b      	ldrh	r3, [r7, #18]
 800938c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800939c:	b29b      	uxth	r3, r3
 800939e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bc80      	pop	{r7}
 80093aa:	4770      	bx	lr

080093ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d103      	bne.n	80093c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2280      	movs	r2, #128	; 0x80
 80093c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bc80      	pop	{r7}
 80093d0:	4770      	bx	lr

080093d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bc80      	pop	{r7}
 80093e4:	4770      	bx	lr

080093e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr

080093fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009408:	b29b      	uxth	r3, r3
 800940a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800940c:	68fb      	ldr	r3, [r7, #12]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr

08009418 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	bc80      	pop	{r7}
 800942c:	4770      	bx	lr

0800942e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800942e:	b480      	push	{r7}
 8009430:	b08d      	sub	sp, #52	; 0x34
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	60b9      	str	r1, [r7, #8]
 8009438:	4611      	mov	r1, r2
 800943a:	461a      	mov	r2, r3
 800943c:	460b      	mov	r3, r1
 800943e:	80fb      	strh	r3, [r7, #6]
 8009440:	4613      	mov	r3, r2
 8009442:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009444:	88bb      	ldrh	r3, [r7, #4]
 8009446:	3301      	adds	r3, #1
 8009448:	085b      	lsrs	r3, r3, #1
 800944a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009454:	88fb      	ldrh	r3, [r7, #6]
 8009456:	005a      	lsls	r2, r3, #1
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009460:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009466:	e01e      	b.n	80094a6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	3301      	adds	r3, #1
 8009472:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	b29b      	uxth	r3, r3
 800947a:	021b      	lsls	r3, r3, #8
 800947c:	b29b      	uxth	r3, r3
 800947e:	461a      	mov	r2, r3
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	4313      	orrs	r3, r2
 8009484:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	b29a      	uxth	r2, r3
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	3302      	adds	r3, #2
 8009492:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	3302      	adds	r3, #2
 8009498:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	3301      	adds	r3, #1
 800949e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	3b01      	subs	r3, #1
 80094a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1dd      	bne.n	8009468 <USB_WritePMA+0x3a>
  }
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	3734      	adds	r7, #52	; 0x34
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr

080094b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b08b      	sub	sp, #44	; 0x2c
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	4611      	mov	r1, r2
 80094c4:	461a      	mov	r2, r3
 80094c6:	460b      	mov	r3, r1
 80094c8:	80fb      	strh	r3, [r7, #6]
 80094ca:	4613      	mov	r3, r2
 80094cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80094ce:	88bb      	ldrh	r3, [r7, #4]
 80094d0:	085b      	lsrs	r3, r3, #1
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80094de:	88fb      	ldrh	r3, [r7, #6]
 80094e0:	005a      	lsls	r2, r3, #1
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094ea:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24
 80094f0:	e01b      	b.n	800952a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	3302      	adds	r3, #2
 80094fe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	b2da      	uxtb	r2, r3
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	3301      	adds	r3, #1
 800950c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	0a1b      	lsrs	r3, r3, #8
 8009512:	b2da      	uxtb	r2, r3
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	3301      	adds	r3, #1
 800951c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	3302      	adds	r3, #2
 8009522:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	3b01      	subs	r3, #1
 8009528:	627b      	str	r3, [r7, #36]	; 0x24
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e0      	bne.n	80094f2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009530:	88bb      	ldrh	r3, [r7, #4]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	b29b      	uxth	r3, r3
 8009538:	2b00      	cmp	r3, #0
 800953a:	d007      	beq.n	800954c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	b29b      	uxth	r3, r3
 8009542:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	b2da      	uxtb	r2, r3
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	701a      	strb	r2, [r3, #0]
  }
}
 800954c:	bf00      	nop
 800954e:	372c      	adds	r7, #44	; 0x2c
 8009550:	46bd      	mov	sp, r7
 8009552:	bc80      	pop	{r7}
 8009554:	4770      	bx	lr

08009556 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	7c1b      	ldrb	r3, [r3, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d115      	bne.n	800959a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800956e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009572:	2202      	movs	r2, #2
 8009574:	2181      	movs	r1, #129	; 0x81
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 fe99 	bl	800b2ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009586:	2202      	movs	r2, #2
 8009588:	2101      	movs	r1, #1
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 fe8f 	bl	800b2ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009598:	e012      	b.n	80095c0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800959a:	2340      	movs	r3, #64	; 0x40
 800959c:	2202      	movs	r2, #2
 800959e:	2181      	movs	r1, #129	; 0x81
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 fe84 	bl	800b2ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80095ac:	2340      	movs	r3, #64	; 0x40
 80095ae:	2202      	movs	r2, #2
 80095b0:	2101      	movs	r1, #1
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 fe7b 	bl	800b2ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095c0:	2308      	movs	r3, #8
 80095c2:	2203      	movs	r2, #3
 80095c4:	2182      	movs	r1, #130	; 0x82
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f001 fe71 	bl	800b2ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80095d2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80095d6:	f001 ff91 	bl	800b4fc <USBD_static_malloc>
 80095da:	4602      	mov	r2, r0
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d102      	bne.n	80095f2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80095ec:	2301      	movs	r3, #1
 80095ee:	73fb      	strb	r3, [r7, #15]
 80095f0:	e026      	b.n	8009640 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2200      	movs	r2, #0
 8009608:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2200      	movs	r2, #0
 8009610:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	7c1b      	ldrb	r3, [r3, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d109      	bne.n	8009630 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009626:	2101      	movs	r1, #1
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f001 ff31 	bl	800b490 <USBD_LL_PrepareReceive>
 800962e:	e007      	b.n	8009640 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009636:	2340      	movs	r3, #64	; 0x40
 8009638:	2101      	movs	r1, #1
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 ff28 	bl	800b490 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800965a:	2181      	movs	r1, #129	; 0x81
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f001 fe4c 	bl	800b2fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009668:	2101      	movs	r1, #1
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f001 fe45 	bl	800b2fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009678:	2182      	movs	r1, #130	; 0x82
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 fe3d 	bl	800b2fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00e      	beq.n	80096ae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a0:	4618      	mov	r0, r3
 80096a2:	f001 ff37 	bl	800b514 <USBD_static_free>
    pdev->pClassData = NULL;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d039      	beq.n	8009756 <USBD_CDC_Setup+0x9e>
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d17f      	bne.n	80097e6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	88db      	ldrh	r3, [r3, #6]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d029      	beq.n	8009742 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	b25b      	sxtb	r3, r3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	da11      	bge.n	800971c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009704:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	88d2      	ldrh	r2, [r2, #6]
 800970a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800970c:	6939      	ldr	r1, [r7, #16]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	88db      	ldrh	r3, [r3, #6]
 8009712:	461a      	mov	r2, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f001 fa0a 	bl	800ab2e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800971a:	e06b      	b.n	80097f4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	785a      	ldrb	r2, [r3, #1]
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	88db      	ldrh	r3, [r3, #6]
 800972a:	b2da      	uxtb	r2, r3
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009732:	6939      	ldr	r1, [r7, #16]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	88db      	ldrh	r3, [r3, #6]
 8009738:	461a      	mov	r2, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f001 fa25 	bl	800ab8a <USBD_CtlPrepareRx>
      break;
 8009740:	e058      	b.n	80097f4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	7850      	ldrb	r0, [r2, #1]
 800974e:	2200      	movs	r2, #0
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	4798      	blx	r3
      break;
 8009754:	e04e      	b.n	80097f4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	785b      	ldrb	r3, [r3, #1]
 800975a:	2b0b      	cmp	r3, #11
 800975c:	d02e      	beq.n	80097bc <USBD_CDC_Setup+0x104>
 800975e:	2b0b      	cmp	r3, #11
 8009760:	dc38      	bgt.n	80097d4 <USBD_CDC_Setup+0x11c>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <USBD_CDC_Setup+0xb4>
 8009766:	2b0a      	cmp	r3, #10
 8009768:	d014      	beq.n	8009794 <USBD_CDC_Setup+0xdc>
 800976a:	e033      	b.n	80097d4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009772:	2b03      	cmp	r3, #3
 8009774:	d107      	bne.n	8009786 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009776:	f107 030c 	add.w	r3, r7, #12
 800977a:	2202      	movs	r2, #2
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f001 f9d5 	bl	800ab2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009784:	e02e      	b.n	80097e4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 f966 	bl	800aa5a <USBD_CtlError>
            ret = USBD_FAIL;
 800978e:	2302      	movs	r3, #2
 8009790:	75fb      	strb	r3, [r7, #23]
          break;
 8009792:	e027      	b.n	80097e4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800979a:	2b03      	cmp	r3, #3
 800979c:	d107      	bne.n	80097ae <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800979e:	f107 030f 	add.w	r3, r7, #15
 80097a2:	2201      	movs	r2, #1
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 f9c1 	bl	800ab2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097ac:	e01a      	b.n	80097e4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f001 f952 	bl	800aa5a <USBD_CtlError>
            ret = USBD_FAIL;
 80097b6:	2302      	movs	r3, #2
 80097b8:	75fb      	strb	r3, [r7, #23]
          break;
 80097ba:	e013      	b.n	80097e4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d00d      	beq.n	80097e2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f001 f946 	bl	800aa5a <USBD_CtlError>
            ret = USBD_FAIL;
 80097ce:	2302      	movs	r3, #2
 80097d0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80097d2:	e006      	b.n	80097e2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f001 f93f 	bl	800aa5a <USBD_CtlError>
          ret = USBD_FAIL;
 80097dc:	2302      	movs	r3, #2
 80097de:	75fb      	strb	r3, [r7, #23]
          break;
 80097e0:	e000      	b.n	80097e4 <USBD_CDC_Setup+0x12c>
          break;
 80097e2:	bf00      	nop
      }
      break;
 80097e4:	e006      	b.n	80097f4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f001 f936 	bl	800aa5a <USBD_CtlError>
      ret = USBD_FAIL;
 80097ee:	2302      	movs	r3, #2
 80097f0:	75fb      	strb	r3, [r7, #23]
      break;
 80097f2:	bf00      	nop
  }

  return ret;
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	460b      	mov	r3, r1
 8009808:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009810:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009818:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009820:	2b00      	cmp	r3, #0
 8009822:	d03a      	beq.n	800989a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009824:	78fa      	ldrb	r2, [r7, #3]
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	440b      	add	r3, r1
 8009832:	331c      	adds	r3, #28
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d029      	beq.n	800988e <USBD_CDC_DataIn+0x90>
 800983a:	78fa      	ldrb	r2, [r7, #3]
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	440b      	add	r3, r1
 8009848:	331c      	adds	r3, #28
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	78f9      	ldrb	r1, [r7, #3]
 800984e:	68b8      	ldr	r0, [r7, #8]
 8009850:	460b      	mov	r3, r1
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	4403      	add	r3, r0
 800985a:	3338      	adds	r3, #56	; 0x38
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009862:	fb03 f301 	mul.w	r3, r3, r1
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d110      	bne.n	800988e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	4613      	mov	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	331c      	adds	r3, #28
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009880:	78f9      	ldrb	r1, [r7, #3]
 8009882:	2300      	movs	r3, #0
 8009884:	2200      	movs	r2, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 fddf 	bl	800b44a <USBD_LL_Transmit>
 800988c:	e003      	b.n	8009896 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	e000      	b.n	800989c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800989a:	2302      	movs	r3, #2
  }
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80098b8:	78fb      	ldrb	r3, [r7, #3]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f001 fe0a 	bl	800b4d6 <USBD_LL_GetRxDataSize>
 80098c2:	4602      	mov	r2, r0
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00d      	beq.n	80098f0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80098e8:	4611      	mov	r1, r2
 80098ea:	4798      	blx	r3

    return USBD_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	e000      	b.n	80098f2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80098f0:	2302      	movs	r3, #2
  }
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009908:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009910:	2b00      	cmp	r3, #0
 8009912:	d015      	beq.n	8009940 <USBD_CDC_EP0_RxReady+0x46>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800991a:	2bff      	cmp	r3, #255	; 0xff
 800991c:	d010      	beq.n	8009940 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800992c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009934:	b292      	uxth	r2, r2
 8009936:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	22ff      	movs	r2, #255	; 0xff
 800993c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2243      	movs	r2, #67	; 0x43
 8009958:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800995a:	4b03      	ldr	r3, [pc, #12]	; (8009968 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800995c:	4618      	mov	r0, r3
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	bc80      	pop	{r7}
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	200000a0 	.word	0x200000a0

0800996c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2243      	movs	r2, #67	; 0x43
 8009978:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800997a:	4b03      	ldr	r3, [pc, #12]	; (8009988 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800997c:	4618      	mov	r0, r3
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	bc80      	pop	{r7}
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	2000005c 	.word	0x2000005c

0800998c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2243      	movs	r2, #67	; 0x43
 8009998:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800999a:	4b03      	ldr	r3, [pc, #12]	; (80099a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bc80      	pop	{r7}
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	200000e4 	.word	0x200000e4

080099ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	220a      	movs	r2, #10
 80099b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80099ba:	4b03      	ldr	r3, [pc, #12]	; (80099c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bc80      	pop	{r7}
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	20000018 	.word	0x20000018

080099cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80099d6:	2302      	movs	r3, #2
 80099d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bc80      	pop	{r7}
 80099f6:	4770      	bx	lr

080099f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b087      	sub	sp, #28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	4613      	mov	r3, r2
 8009a04:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a16:	88fa      	ldrh	r2, [r7, #6]
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	371c      	adds	r7, #28
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bc80      	pop	{r7}
 8009a28:	4770      	bx	lr

08009a2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b085      	sub	sp, #20
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bc80      	pop	{r7}
 8009a4e:	4770      	bx	lr

08009a50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d01c      	beq.n	8009aa4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d115      	bne.n	8009aa0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	2181      	movs	r1, #129	; 0x81
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f001 fcd7 	bl	800b44a <USBD_LL_Transmit>

      return USBD_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	e002      	b.n	8009aa6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e000      	b.n	8009aa6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009aa4:	2302      	movs	r3, #2
  }
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d017      	beq.n	8009af8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	7c1b      	ldrb	r3, [r3, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d109      	bne.n	8009ae4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ada:	2101      	movs	r1, #1
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 fcd7 	bl	800b490 <USBD_LL_PrepareReceive>
 8009ae2:	e007      	b.n	8009af4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009aea:	2340      	movs	r3, #64	; 0x40
 8009aec:	2101      	movs	r1, #1
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f001 fcce 	bl	800b490 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	e000      	b.n	8009afa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009af8:	2302      	movs	r3, #2
  }
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b084      	sub	sp, #16
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009b16:	2302      	movs	r3, #2
 8009b18:	e01a      	b.n	8009b50 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d003      	beq.n	8009b2c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	79fa      	ldrb	r2, [r7, #7]
 8009b46:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f001 fb3b 	bl	800b1c4 <USBD_LL_Init>

  return USBD_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d006      	beq.n	8009b7a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
 8009b78:	e001      	b.n	8009b7e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bc80      	pop	{r7}
 8009b88:	4770      	bx	lr

08009b8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fb70 	bl	800b278 <USBD_LL_Start>

  return USBD_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b083      	sub	sp, #12
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bc80      	pop	{r7}
 8009bb4:	4770      	bx	lr

08009bb6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00c      	beq.n	8009bea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	78fa      	ldrb	r2, [r7, #3]
 8009bda:	4611      	mov	r1, r2
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	4798      	blx	r3
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	4798      	blx	r3

  return USBD_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 fed8 	bl	800a9e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c40:	461a      	mov	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009c4e:	f003 031f 	and.w	r3, r3, #31
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d016      	beq.n	8009c84 <USBD_LL_SetupStage+0x6a>
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d81c      	bhi.n	8009c94 <USBD_LL_SetupStage+0x7a>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <USBD_LL_SetupStage+0x4a>
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d008      	beq.n	8009c74 <USBD_LL_SetupStage+0x5a>
 8009c62:	e017      	b.n	8009c94 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f9cb 	bl	800a008 <USBD_StdDevReq>
      break;
 8009c72:	e01a      	b.n	8009caa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fa2d 	bl	800a0dc <USBD_StdItfReq>
      break;
 8009c82:	e012      	b.n	8009caa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fa6d 	bl	800a16c <USBD_StdEPReq>
      break;
 8009c92:	e00a      	b.n	8009caa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009c9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f001 fb48 	bl	800b338 <USBD_LL_StallEP>
      break;
 8009ca8:	bf00      	nop
  }

  return USBD_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009cc2:	7afb      	ldrb	r3, [r7, #11]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d14b      	bne.n	8009d60 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009cce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d134      	bne.n	8009d44 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d919      	bls.n	8009d1a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	68da      	ldr	r2, [r3, #12]
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	1ad2      	subs	r2, r2, r3
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	68da      	ldr	r2, [r3, #12]
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d203      	bcs.n	8009d08 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	e002      	b.n	8009d0e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	461a      	mov	r2, r3
 8009d10:	6879      	ldr	r1, [r7, #4]
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 ff57 	bl	800abc6 <USBD_CtlContinueRx>
 8009d18:	e038      	b.n	8009d8c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00a      	beq.n	8009d3c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d105      	bne.n	8009d3c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 ff54 	bl	800abea <USBD_CtlSendStatus>
 8009d42:	e023      	b.n	8009d8c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d4a:	2b05      	cmp	r3, #5
 8009d4c:	d11e      	bne.n	8009d8c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009d56:	2100      	movs	r1, #0
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f001 faed 	bl	800b338 <USBD_LL_StallEP>
 8009d5e:	e015      	b.n	8009d8c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00d      	beq.n	8009d88 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d108      	bne.n	8009d88 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	7afa      	ldrb	r2, [r7, #11]
 8009d80:	4611      	mov	r1, r2
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	4798      	blx	r3
 8009d86:	e001      	b.n	8009d8c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	e000      	b.n	8009d8e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b086      	sub	sp, #24
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	60f8      	str	r0, [r7, #12]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	607a      	str	r2, [r7, #4]
 8009da2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d17f      	bne.n	8009eaa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3314      	adds	r3, #20
 8009dae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d15c      	bne.n	8009e74 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	68da      	ldr	r2, [r3, #12]
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d915      	bls.n	8009df2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	68da      	ldr	r2, [r3, #12]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	1ad2      	subs	r2, r2, r3
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	461a      	mov	r2, r3
 8009ddc:	6879      	ldr	r1, [r7, #4]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 fec1 	bl	800ab66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009de4:	2300      	movs	r3, #0
 8009de6:	2200      	movs	r2, #0
 8009de8:	2100      	movs	r1, #0
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f001 fb50 	bl	800b490 <USBD_LL_PrepareReceive>
 8009df0:	e04e      	b.n	8009e90 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	697a      	ldr	r2, [r7, #20]
 8009df8:	6912      	ldr	r2, [r2, #16]
 8009dfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dfe:	fb02 f201 	mul.w	r2, r2, r1
 8009e02:	1a9b      	subs	r3, r3, r2
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d11c      	bne.n	8009e42 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d316      	bcc.n	8009e42 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	689a      	ldr	r2, [r3, #8]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d20f      	bcs.n	8009e42 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e22:	2200      	movs	r2, #0
 8009e24:	2100      	movs	r1, #0
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 fe9d 	bl	800ab66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e34:	2300      	movs	r3, #0
 8009e36:	2200      	movs	r2, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f001 fb28 	bl	800b490 <USBD_LL_PrepareReceive>
 8009e40:	e026      	b.n	8009e90 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	d105      	bne.n	8009e64 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009e64:	2180      	movs	r1, #128	; 0x80
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f001 fa66 	bl	800b338 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 fecf 	bl	800ac10 <USBD_CtlReceiveStatus>
 8009e72:	e00d      	b.n	8009e90 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e7a:	2b04      	cmp	r3, #4
 8009e7c:	d004      	beq.n	8009e88 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d103      	bne.n	8009e90 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009e88:	2180      	movs	r1, #128	; 0x80
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f001 fa54 	bl	800b338 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d11d      	bne.n	8009ed6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f7ff fe81 	bl	8009ba2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ea8:	e015      	b.n	8009ed6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00d      	beq.n	8009ed2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d108      	bne.n	8009ed2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	7afa      	ldrb	r2, [r7, #11]
 8009eca:	4611      	mov	r1, r2
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	4798      	blx	r3
 8009ed0:	e001      	b.n	8009ed6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e000      	b.n	8009ed8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ee8:	2340      	movs	r3, #64	; 0x40
 8009eea:	2200      	movs	r2, #0
 8009eec:	2100      	movs	r1, #0
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f001 f9dd 	bl	800b2ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2240      	movs	r2, #64	; 0x40
 8009f00:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f04:	2340      	movs	r3, #64	; 0x40
 8009f06:	2200      	movs	r2, #0
 8009f08:	2180      	movs	r1, #128	; 0x80
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f001 f9cf 	bl	800b2ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2240      	movs	r2, #64	; 0x40
 8009f1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d009      	beq.n	8009f58 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	6852      	ldr	r2, [r2, #4]
 8009f50:	b2d2      	uxtb	r2, r2
 8009f52:	4611      	mov	r1, r2
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	4798      	blx	r3
  }

  return USBD_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	78fa      	ldrb	r2, [r7, #3]
 8009f72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bc80      	pop	{r7}
 8009f7e:	4770      	bx	lr

08009f80 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2204      	movs	r2, #4
 8009f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bc80      	pop	{r7}
 8009fa6:	4770      	bx	lr

08009fa8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	d105      	bne.n	8009fc6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bc80      	pop	{r7}
 8009fd0:	4770      	bx	lr

08009fd2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d10b      	bne.n	8009ffc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a01e:	2b40      	cmp	r3, #64	; 0x40
 800a020:	d005      	beq.n	800a02e <USBD_StdDevReq+0x26>
 800a022:	2b40      	cmp	r3, #64	; 0x40
 800a024:	d84f      	bhi.n	800a0c6 <USBD_StdDevReq+0xbe>
 800a026:	2b00      	cmp	r3, #0
 800a028:	d009      	beq.n	800a03e <USBD_StdDevReq+0x36>
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d14b      	bne.n	800a0c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	4798      	blx	r3
      break;
 800a03c:	e048      	b.n	800a0d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	785b      	ldrb	r3, [r3, #1]
 800a042:	2b09      	cmp	r3, #9
 800a044:	d839      	bhi.n	800a0ba <USBD_StdDevReq+0xb2>
 800a046:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <USBD_StdDevReq+0x44>)
 800a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04c:	0800a09d 	.word	0x0800a09d
 800a050:	0800a0b1 	.word	0x0800a0b1
 800a054:	0800a0bb 	.word	0x0800a0bb
 800a058:	0800a0a7 	.word	0x0800a0a7
 800a05c:	0800a0bb 	.word	0x0800a0bb
 800a060:	0800a07f 	.word	0x0800a07f
 800a064:	0800a075 	.word	0x0800a075
 800a068:	0800a0bb 	.word	0x0800a0bb
 800a06c:	0800a093 	.word	0x0800a093
 800a070:	0800a089 	.word	0x0800a089
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f9dc 	bl	800a434 <USBD_GetDescriptor>
          break;
 800a07c:	e022      	b.n	800a0c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fb3f 	bl	800a704 <USBD_SetAddress>
          break;
 800a086:	e01d      	b.n	800a0c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fb7e 	bl	800a78c <USBD_SetConfig>
          break;
 800a090:	e018      	b.n	800a0c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fc07 	bl	800a8a8 <USBD_GetConfig>
          break;
 800a09a:	e013      	b.n	800a0c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fc37 	bl	800a912 <USBD_GetStatus>
          break;
 800a0a4:	e00e      	b.n	800a0c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fc65 	bl	800a978 <USBD_SetFeature>
          break;
 800a0ae:	e009      	b.n	800a0c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fc74 	bl	800a9a0 <USBD_ClrFeature>
          break;
 800a0b8:	e004      	b.n	800a0c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fccc 	bl	800aa5a <USBD_CtlError>
          break;
 800a0c2:	bf00      	nop
      }
      break;
 800a0c4:	e004      	b.n	800a0d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fcc6 	bl	800aa5a <USBD_CtlError>
      break;
 800a0ce:	bf00      	nop
  }

  return ret;
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop

0800a0dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0f2:	2b40      	cmp	r3, #64	; 0x40
 800a0f4:	d005      	beq.n	800a102 <USBD_StdItfReq+0x26>
 800a0f6:	2b40      	cmp	r3, #64	; 0x40
 800a0f8:	d82e      	bhi.n	800a158 <USBD_StdItfReq+0x7c>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <USBD_StdItfReq+0x26>
 800a0fe:	2b20      	cmp	r3, #32
 800a100:	d12a      	bne.n	800a158 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a108:	3b01      	subs	r3, #1
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d81d      	bhi.n	800a14a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	889b      	ldrh	r3, [r3, #4]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b01      	cmp	r3, #1
 800a116:	d813      	bhi.n	800a140 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	4798      	blx	r3
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	88db      	ldrh	r3, [r3, #6]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d110      	bne.n	800a154 <USBD_StdItfReq+0x78>
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10d      	bne.n	800a154 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fd56 	bl	800abea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a13e:	e009      	b.n	800a154 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fc89 	bl	800aa5a <USBD_CtlError>
          break;
 800a148:	e004      	b.n	800a154 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fc84 	bl	800aa5a <USBD_CtlError>
          break;
 800a152:	e000      	b.n	800a156 <USBD_StdItfReq+0x7a>
          break;
 800a154:	bf00      	nop
      }
      break;
 800a156:	e004      	b.n	800a162 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fc7d 	bl	800aa5a <USBD_CtlError>
      break;
 800a160:	bf00      	nop
  }

  return USBD_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	889b      	ldrh	r3, [r3, #4]
 800a17e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a188:	2b40      	cmp	r3, #64	; 0x40
 800a18a:	d007      	beq.n	800a19c <USBD_StdEPReq+0x30>
 800a18c:	2b40      	cmp	r3, #64	; 0x40
 800a18e:	f200 8146 	bhi.w	800a41e <USBD_StdEPReq+0x2b2>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <USBD_StdEPReq+0x40>
 800a196:	2b20      	cmp	r3, #32
 800a198:	f040 8141 	bne.w	800a41e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	4798      	blx	r3
      break;
 800a1aa:	e13d      	b.n	800a428 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1b4:	2b20      	cmp	r3, #32
 800a1b6:	d10a      	bne.n	800a1ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	e12d      	b.n	800a42a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	785b      	ldrb	r3, [r3, #1]
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d007      	beq.n	800a1e6 <USBD_StdEPReq+0x7a>
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	f300 811b 	bgt.w	800a412 <USBD_StdEPReq+0x2a6>
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d072      	beq.n	800a2c6 <USBD_StdEPReq+0x15a>
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d03a      	beq.n	800a25a <USBD_StdEPReq+0xee>
 800a1e4:	e115      	b.n	800a412 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d002      	beq.n	800a1f6 <USBD_StdEPReq+0x8a>
 800a1f0:	2b03      	cmp	r3, #3
 800a1f2:	d015      	beq.n	800a220 <USBD_StdEPReq+0xb4>
 800a1f4:	e02b      	b.n	800a24e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00c      	beq.n	800a216 <USBD_StdEPReq+0xaa>
 800a1fc:	7bbb      	ldrb	r3, [r7, #14]
 800a1fe:	2b80      	cmp	r3, #128	; 0x80
 800a200:	d009      	beq.n	800a216 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a202:	7bbb      	ldrb	r3, [r7, #14]
 800a204:	4619      	mov	r1, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f001 f896 	bl	800b338 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a20c:	2180      	movs	r1, #128	; 0x80
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 f892 	bl	800b338 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a214:	e020      	b.n	800a258 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fc1e 	bl	800aa5a <USBD_CtlError>
              break;
 800a21e:	e01b      	b.n	800a258 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	885b      	ldrh	r3, [r3, #2]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10e      	bne.n	800a246 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a228:	7bbb      	ldrb	r3, [r7, #14]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00b      	beq.n	800a246 <USBD_StdEPReq+0xda>
 800a22e:	7bbb      	ldrb	r3, [r7, #14]
 800a230:	2b80      	cmp	r3, #128	; 0x80
 800a232:	d008      	beq.n	800a246 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	88db      	ldrh	r3, [r3, #6]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d104      	bne.n	800a246 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a23c:	7bbb      	ldrb	r3, [r7, #14]
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 f879 	bl	800b338 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fccf 	bl	800abea <USBD_CtlSendStatus>

              break;
 800a24c:	e004      	b.n	800a258 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fc02 	bl	800aa5a <USBD_CtlError>
              break;
 800a256:	bf00      	nop
          }
          break;
 800a258:	e0e0      	b.n	800a41c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a260:	2b02      	cmp	r3, #2
 800a262:	d002      	beq.n	800a26a <USBD_StdEPReq+0xfe>
 800a264:	2b03      	cmp	r3, #3
 800a266:	d015      	beq.n	800a294 <USBD_StdEPReq+0x128>
 800a268:	e026      	b.n	800a2b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00c      	beq.n	800a28a <USBD_StdEPReq+0x11e>
 800a270:	7bbb      	ldrb	r3, [r7, #14]
 800a272:	2b80      	cmp	r3, #128	; 0x80
 800a274:	d009      	beq.n	800a28a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a276:	7bbb      	ldrb	r3, [r7, #14]
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f001 f85c 	bl	800b338 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a280:	2180      	movs	r1, #128	; 0x80
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 f858 	bl	800b338 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a288:	e01c      	b.n	800a2c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fbe4 	bl	800aa5a <USBD_CtlError>
              break;
 800a292:	e017      	b.n	800a2c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	885b      	ldrh	r3, [r3, #2]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d112      	bne.n	800a2c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a29c:	7bbb      	ldrb	r3, [r7, #14]
 800a29e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d004      	beq.n	800a2b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a2a6:	7bbb      	ldrb	r3, [r7, #14]
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f001 f863 	bl	800b376 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fc9a 	bl	800abea <USBD_CtlSendStatus>
              }
              break;
 800a2b6:	e004      	b.n	800a2c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fbcd 	bl	800aa5a <USBD_CtlError>
              break;
 800a2c0:	e000      	b.n	800a2c4 <USBD_StdEPReq+0x158>
              break;
 800a2c2:	bf00      	nop
          }
          break;
 800a2c4:	e0aa      	b.n	800a41c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d002      	beq.n	800a2d6 <USBD_StdEPReq+0x16a>
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d032      	beq.n	800a33a <USBD_StdEPReq+0x1ce>
 800a2d4:	e097      	b.n	800a406 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2d6:	7bbb      	ldrb	r3, [r7, #14]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d007      	beq.n	800a2ec <USBD_StdEPReq+0x180>
 800a2dc:	7bbb      	ldrb	r3, [r7, #14]
 800a2de:	2b80      	cmp	r3, #128	; 0x80
 800a2e0:	d004      	beq.n	800a2ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fbb8 	bl	800aa5a <USBD_CtlError>
                break;
 800a2ea:	e091      	b.n	800a410 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	da0b      	bge.n	800a30c <USBD_StdEPReq+0x1a0>
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
 800a2f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4413      	add	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	3310      	adds	r3, #16
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	4413      	add	r3, r2
 800a308:	3304      	adds	r3, #4
 800a30a:	e00b      	b.n	800a324 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	4413      	add	r3, r2
 800a322:	3304      	adds	r3, #4
 800a324:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2202      	movs	r2, #2
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fbfb 	bl	800ab2e <USBD_CtlSendData>
              break;
 800a338:	e06a      	b.n	800a410 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a33a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	da11      	bge.n	800a366 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	f003 020f 	and.w	r2, r3, #15
 800a348:	6879      	ldr	r1, [r7, #4]
 800a34a:	4613      	mov	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	440b      	add	r3, r1
 800a354:	3318      	adds	r3, #24
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d117      	bne.n	800a38c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fb7b 	bl	800aa5a <USBD_CtlError>
                  break;
 800a364:	e054      	b.n	800a410 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	f003 020f 	and.w	r2, r3, #15
 800a36c:	6879      	ldr	r1, [r7, #4]
 800a36e:	4613      	mov	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4413      	add	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	440b      	add	r3, r1
 800a378:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d104      	bne.n	800a38c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fb68 	bl	800aa5a <USBD_CtlError>
                  break;
 800a38a:	e041      	b.n	800a410 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a38c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a390:	2b00      	cmp	r3, #0
 800a392:	da0b      	bge.n	800a3ac <USBD_StdEPReq+0x240>
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a39a:	4613      	mov	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	3310      	adds	r3, #16
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	e00b      	b.n	800a3c4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a3ac:	7bbb      	ldrb	r3, [r7, #14]
 800a3ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <USBD_StdEPReq+0x266>
 800a3cc:	7bbb      	ldrb	r3, [r7, #14]
 800a3ce:	2b80      	cmp	r3, #128	; 0x80
 800a3d0:	d103      	bne.n	800a3da <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	e00e      	b.n	800a3f8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a3da:	7bbb      	ldrb	r3, [r7, #14]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 ffe8 	bl	800b3b4 <USBD_LL_IsStallEP>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	e002      	b.n	800a3f8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fb95 	bl	800ab2e <USBD_CtlSendData>
              break;
 800a404:	e004      	b.n	800a410 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fb26 	bl	800aa5a <USBD_CtlError>
              break;
 800a40e:	bf00      	nop
          }
          break;
 800a410:	e004      	b.n	800a41c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fb20 	bl	800aa5a <USBD_CtlError>
          break;
 800a41a:	bf00      	nop
      }
      break;
 800a41c:	e004      	b.n	800a428 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fb1a 	bl	800aa5a <USBD_CtlError>
      break;
 800a426:	bf00      	nop
  }

  return ret;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
	...

0800a434 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a43e:	2300      	movs	r3, #0
 800a440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	885b      	ldrh	r3, [r3, #2]
 800a44e:	0a1b      	lsrs	r3, r3, #8
 800a450:	b29b      	uxth	r3, r3
 800a452:	3b01      	subs	r3, #1
 800a454:	2b06      	cmp	r3, #6
 800a456:	f200 8128 	bhi.w	800a6aa <USBD_GetDescriptor+0x276>
 800a45a:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <USBD_GetDescriptor+0x2c>)
 800a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a460:	0800a47d 	.word	0x0800a47d
 800a464:	0800a495 	.word	0x0800a495
 800a468:	0800a4d5 	.word	0x0800a4d5
 800a46c:	0800a6ab 	.word	0x0800a6ab
 800a470:	0800a6ab 	.word	0x0800a6ab
 800a474:	0800a64b 	.word	0x0800a64b
 800a478:	0800a677 	.word	0x0800a677
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	7c12      	ldrb	r2, [r2, #16]
 800a488:	f107 0108 	add.w	r1, r7, #8
 800a48c:	4610      	mov	r0, r2
 800a48e:	4798      	blx	r3
 800a490:	60f8      	str	r0, [r7, #12]
      break;
 800a492:	e112      	b.n	800a6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	7c1b      	ldrb	r3, [r3, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10d      	bne.n	800a4b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a4:	f107 0208 	add.w	r2, r7, #8
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	4798      	blx	r3
 800a4ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a4b6:	e100      	b.n	800a6ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c0:	f107 0208 	add.w	r2, r7, #8
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	4798      	blx	r3
 800a4c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	701a      	strb	r2, [r3, #0]
      break;
 800a4d2:	e0f2      	b.n	800a6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	885b      	ldrh	r3, [r3, #2]
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b05      	cmp	r3, #5
 800a4dc:	f200 80ac 	bhi.w	800a638 <USBD_GetDescriptor+0x204>
 800a4e0:	a201      	add	r2, pc, #4	; (adr r2, 800a4e8 <USBD_GetDescriptor+0xb4>)
 800a4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e6:	bf00      	nop
 800a4e8:	0800a501 	.word	0x0800a501
 800a4ec:	0800a535 	.word	0x0800a535
 800a4f0:	0800a569 	.word	0x0800a569
 800a4f4:	0800a59d 	.word	0x0800a59d
 800a4f8:	0800a5d1 	.word	0x0800a5d1
 800a4fc:	0800a605 	.word	0x0800a605
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7c12      	ldrb	r2, [r2, #16]
 800a518:	f107 0108 	add.w	r1, r7, #8
 800a51c:	4610      	mov	r0, r2
 800a51e:	4798      	blx	r3
 800a520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a522:	e091      	b.n	800a648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa97 	bl	800aa5a <USBD_CtlError>
            err++;
 800a52c:	7afb      	ldrb	r3, [r7, #11]
 800a52e:	3301      	adds	r3, #1
 800a530:	72fb      	strb	r3, [r7, #11]
          break;
 800a532:	e089      	b.n	800a648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00b      	beq.n	800a558 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	7c12      	ldrb	r2, [r2, #16]
 800a54c:	f107 0108 	add.w	r1, r7, #8
 800a550:	4610      	mov	r0, r2
 800a552:	4798      	blx	r3
 800a554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a556:	e077      	b.n	800a648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fa7d 	bl	800aa5a <USBD_CtlError>
            err++;
 800a560:	7afb      	ldrb	r3, [r7, #11]
 800a562:	3301      	adds	r3, #1
 800a564:	72fb      	strb	r3, [r7, #11]
          break;
 800a566:	e06f      	b.n	800a648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00b      	beq.n	800a58c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	7c12      	ldrb	r2, [r2, #16]
 800a580:	f107 0108 	add.w	r1, r7, #8
 800a584:	4610      	mov	r0, r2
 800a586:	4798      	blx	r3
 800a588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a58a:	e05d      	b.n	800a648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fa63 	bl	800aa5a <USBD_CtlError>
            err++;
 800a594:	7afb      	ldrb	r3, [r7, #11]
 800a596:	3301      	adds	r3, #1
 800a598:	72fb      	strb	r3, [r7, #11]
          break;
 800a59a:	e055      	b.n	800a648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00b      	beq.n	800a5c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	7c12      	ldrb	r2, [r2, #16]
 800a5b4:	f107 0108 	add.w	r1, r7, #8
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	4798      	blx	r3
 800a5bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5be:	e043      	b.n	800a648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5c0:	6839      	ldr	r1, [r7, #0]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fa49 	bl	800aa5a <USBD_CtlError>
            err++;
 800a5c8:	7afb      	ldrb	r3, [r7, #11]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a5ce:	e03b      	b.n	800a648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5e2:	695b      	ldr	r3, [r3, #20]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	7c12      	ldrb	r2, [r2, #16]
 800a5e8:	f107 0108 	add.w	r1, r7, #8
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	4798      	blx	r3
 800a5f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5f2:	e029      	b.n	800a648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fa2f 	bl	800aa5a <USBD_CtlError>
            err++;
 800a5fc:	7afb      	ldrb	r3, [r7, #11]
 800a5fe:	3301      	adds	r3, #1
 800a600:	72fb      	strb	r3, [r7, #11]
          break;
 800a602:	e021      	b.n	800a648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00b      	beq.n	800a628 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	7c12      	ldrb	r2, [r2, #16]
 800a61c:	f107 0108 	add.w	r1, r7, #8
 800a620:	4610      	mov	r0, r2
 800a622:	4798      	blx	r3
 800a624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a626:	e00f      	b.n	800a648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a628:	6839      	ldr	r1, [r7, #0]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fa15 	bl	800aa5a <USBD_CtlError>
            err++;
 800a630:	7afb      	ldrb	r3, [r7, #11]
 800a632:	3301      	adds	r3, #1
 800a634:	72fb      	strb	r3, [r7, #11]
          break;
 800a636:	e007      	b.n	800a648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fa0d 	bl	800aa5a <USBD_CtlError>
          err++;
 800a640:	7afb      	ldrb	r3, [r7, #11]
 800a642:	3301      	adds	r3, #1
 800a644:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a646:	e038      	b.n	800a6ba <USBD_GetDescriptor+0x286>
 800a648:	e037      	b.n	800a6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	7c1b      	ldrb	r3, [r3, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d109      	bne.n	800a666 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65a:	f107 0208 	add.w	r2, r7, #8
 800a65e:	4610      	mov	r0, r2
 800a660:	4798      	blx	r3
 800a662:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a664:	e029      	b.n	800a6ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f9f6 	bl	800aa5a <USBD_CtlError>
        err++;
 800a66e:	7afb      	ldrb	r3, [r7, #11]
 800a670:	3301      	adds	r3, #1
 800a672:	72fb      	strb	r3, [r7, #11]
      break;
 800a674:	e021      	b.n	800a6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	7c1b      	ldrb	r3, [r3, #16]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10d      	bne.n	800a69a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a686:	f107 0208 	add.w	r2, r7, #8
 800a68a:	4610      	mov	r0, r2
 800a68c:	4798      	blx	r3
 800a68e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	3301      	adds	r3, #1
 800a694:	2207      	movs	r2, #7
 800a696:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a698:	e00f      	b.n	800a6ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f9dc 	bl	800aa5a <USBD_CtlError>
        err++;
 800a6a2:	7afb      	ldrb	r3, [r7, #11]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a6a8:	e007      	b.n	800a6ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f9d4 	bl	800aa5a <USBD_CtlError>
      err++;
 800a6b2:	7afb      	ldrb	r3, [r7, #11]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a6b8:	bf00      	nop
  }

  if (err != 0U)
 800a6ba:	7afb      	ldrb	r3, [r7, #11]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d11c      	bne.n	800a6fa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a6c0:	893b      	ldrh	r3, [r7, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d011      	beq.n	800a6ea <USBD_GetDescriptor+0x2b6>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	88db      	ldrh	r3, [r3, #6]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00d      	beq.n	800a6ea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	88da      	ldrh	r2, [r3, #6]
 800a6d2:	893b      	ldrh	r3, [r7, #8]
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	bf28      	it	cs
 800a6d8:	4613      	movcs	r3, r2
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6de:	893b      	ldrh	r3, [r7, #8]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	68f9      	ldr	r1, [r7, #12]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fa22 	bl	800ab2e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	88db      	ldrh	r3, [r3, #6]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d104      	bne.n	800a6fc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fa79 	bl	800abea <USBD_CtlSendStatus>
 800a6f8:	e000      	b.n	800a6fc <USBD_GetDescriptor+0x2c8>
    return;
 800a6fa:	bf00      	nop
    }
  }
}
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop

0800a704 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	889b      	ldrh	r3, [r3, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d130      	bne.n	800a778 <USBD_SetAddress+0x74>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	88db      	ldrh	r3, [r3, #6]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d12c      	bne.n	800a778 <USBD_SetAddress+0x74>
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	885b      	ldrh	r3, [r3, #2]
 800a722:	2b7f      	cmp	r3, #127	; 0x7f
 800a724:	d828      	bhi.n	800a778 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	885b      	ldrh	r3, [r3, #2]
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a730:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a738:	2b03      	cmp	r3, #3
 800a73a:	d104      	bne.n	800a746 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f98b 	bl	800aa5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a744:	e01d      	b.n	800a782 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	7bfa      	ldrb	r2, [r7, #15]
 800a74a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	4619      	mov	r1, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fe5a 	bl	800b40c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 fa46 	bl	800abea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d004      	beq.n	800a76e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2202      	movs	r2, #2
 800a768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a76c:	e009      	b.n	800a782 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a776:	e004      	b.n	800a782 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f96d 	bl	800aa5a <USBD_CtlError>
  }
}
 800a780:	bf00      	nop
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
	...

0800a78c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	885b      	ldrh	r3, [r3, #2]
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	4b41      	ldr	r3, [pc, #260]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a79e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7a0:	4b40      	ldr	r3, [pc, #256]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d904      	bls.n	800a7b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f955 	bl	800aa5a <USBD_CtlError>
 800a7b0:	e075      	b.n	800a89e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d002      	beq.n	800a7c2 <USBD_SetConfig+0x36>
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d023      	beq.n	800a808 <USBD_SetConfig+0x7c>
 800a7c0:	e062      	b.n	800a888 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a7c2:	4b38      	ldr	r3, [pc, #224]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d01a      	beq.n	800a800 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a7ca:	4b36      	ldr	r3, [pc, #216]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2203      	movs	r2, #3
 800a7d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a7dc:	4b31      	ldr	r3, [pc, #196]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff f9e7 	bl	8009bb6 <USBD_SetClassConfig>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d104      	bne.n	800a7f8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f932 	bl	800aa5a <USBD_CtlError>
            return;
 800a7f6:	e052      	b.n	800a89e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f9f6 	bl	800abea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a7fe:	e04e      	b.n	800a89e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f9f2 	bl	800abea <USBD_CtlSendStatus>
        break;
 800a806:	e04a      	b.n	800a89e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a808:	4b26      	ldr	r3, [pc, #152]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d112      	bne.n	800a836 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2202      	movs	r2, #2
 800a814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a818:	4b22      	ldr	r3, [pc, #136]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	461a      	mov	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a822:	4b20      	ldr	r3, [pc, #128]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff f9e3 	bl	8009bf4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f9db 	bl	800abea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a834:	e033      	b.n	800a89e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a836:	4b1b      	ldr	r3, [pc, #108]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	429a      	cmp	r2, r3
 800a842:	d01d      	beq.n	800a880 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff f9d1 	bl	8009bf4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a852:	4b14      	ldr	r3, [pc, #80]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a85c:	4b11      	ldr	r3, [pc, #68]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7ff f9a7 	bl	8009bb6 <USBD_SetClassConfig>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d104      	bne.n	800a878 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f8f2 	bl	800aa5a <USBD_CtlError>
            return;
 800a876:	e012      	b.n	800a89e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f9b6 	bl	800abea <USBD_CtlSendStatus>
        break;
 800a87e:	e00e      	b.n	800a89e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f9b2 	bl	800abea <USBD_CtlSendStatus>
        break;
 800a886:	e00a      	b.n	800a89e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f8e5 	bl	800aa5a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a890:	4b04      	ldr	r3, [pc, #16]	; (800a8a4 <USBD_SetConfig+0x118>)
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	4619      	mov	r1, r3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff f9ac 	bl	8009bf4 <USBD_ClrClassConfig>
        break;
 800a89c:	bf00      	nop
    }
  }
}
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	200001bf 	.word	0x200001bf

0800a8a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	88db      	ldrh	r3, [r3, #6]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d004      	beq.n	800a8c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f8cc 	bl	800aa5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a8c2:	e022      	b.n	800a90a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	dc02      	bgt.n	800a8d4 <USBD_GetConfig+0x2c>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	dc03      	bgt.n	800a8da <USBD_GetConfig+0x32>
 800a8d2:	e015      	b.n	800a900 <USBD_GetConfig+0x58>
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d00b      	beq.n	800a8f0 <USBD_GetConfig+0x48>
 800a8d8:	e012      	b.n	800a900 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f920 	bl	800ab2e <USBD_CtlSendData>
        break;
 800a8ee:	e00c      	b.n	800a90a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f918 	bl	800ab2e <USBD_CtlSendData>
        break;
 800a8fe:	e004      	b.n	800a90a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f8a9 	bl	800aa5a <USBD_CtlError>
        break;
 800a908:	bf00      	nop
}
 800a90a:	bf00      	nop
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a922:	3b01      	subs	r3, #1
 800a924:	2b02      	cmp	r3, #2
 800a926:	d81e      	bhi.n	800a966 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	88db      	ldrh	r3, [r3, #6]
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d004      	beq.n	800a93a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f891 	bl	800aa5a <USBD_CtlError>
        break;
 800a938:	e01a      	b.n	800a970 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a946:	2b00      	cmp	r3, #0
 800a948:	d005      	beq.n	800a956 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f043 0202 	orr.w	r2, r3, #2
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	330c      	adds	r3, #12
 800a95a:	2202      	movs	r2, #2
 800a95c:	4619      	mov	r1, r3
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f8e5 	bl	800ab2e <USBD_CtlSendData>
      break;
 800a964:	e004      	b.n	800a970 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f876 	bl	800aa5a <USBD_CtlError>
      break;
 800a96e:	bf00      	nop
  }
}
 800a970:	bf00      	nop
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	885b      	ldrh	r3, [r3, #2]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d106      	bne.n	800a998 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f929 	bl	800abea <USBD_CtlSendStatus>
  }
}
 800a998:	bf00      	nop
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d80b      	bhi.n	800a9ce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	885b      	ldrh	r3, [r3, #2]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d10c      	bne.n	800a9d8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f90f 	bl	800abea <USBD_CtlSendStatus>
      }
      break;
 800a9cc:	e004      	b.n	800a9d8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f842 	bl	800aa5a <USBD_CtlError>
      break;
 800a9d6:	e000      	b.n	800a9da <USBD_ClrFeature+0x3a>
      break;
 800a9d8:	bf00      	nop
  }
}
 800a9da:	bf00      	nop
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781a      	ldrb	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	785a      	ldrb	r2, [r3, #1]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	3302      	adds	r3, #2
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	3303      	adds	r3, #3
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	021b      	lsls	r3, r3, #8
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	4413      	add	r3, r2
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	3305      	adds	r3, #5
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	021b      	lsls	r3, r3, #8
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	4413      	add	r3, r2
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	3306      	adds	r3, #6
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	3307      	adds	r3, #7
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	021b      	lsls	r3, r3, #8
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	4413      	add	r3, r2
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	80da      	strh	r2, [r3, #6]

}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bc80      	pop	{r7}
 800aa58:	4770      	bx	lr

0800aa5a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aa64:	2180      	movs	r1, #128	; 0x80
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fc66 	bl	800b338 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fc62 	bl	800b338 <USBD_LL_StallEP>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d032      	beq.n	800aaf8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f000 f834 	bl	800ab00 <USBD_GetLen>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	75fa      	strb	r2, [r7, #23]
 800aaac:	461a      	mov	r2, r3
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	4413      	add	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	7812      	ldrb	r2, [r2, #0]
 800aab6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	75fa      	strb	r2, [r7, #23]
 800aabe:	461a      	mov	r2, r3
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	4413      	add	r3, r2
 800aac4:	2203      	movs	r2, #3
 800aac6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800aac8:	e012      	b.n	800aaf0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	60fa      	str	r2, [r7, #12]
 800aad0:	7dfa      	ldrb	r2, [r7, #23]
 800aad2:	1c51      	adds	r1, r2, #1
 800aad4:	75f9      	strb	r1, [r7, #23]
 800aad6:	4611      	mov	r1, r2
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	440a      	add	r2, r1
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	1c5a      	adds	r2, r3, #1
 800aae4:	75fa      	strb	r2, [r7, #23]
 800aae6:	461a      	mov	r2, r3
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	4413      	add	r3, r2
 800aaec:	2200      	movs	r2, #0
 800aaee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e8      	bne.n	800aaca <USBD_GetString+0x4e>
    }
  }
}
 800aaf8:	bf00      	nop
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ab0c:	e005      	b.n	800ab1a <USBD_GetLen+0x1a>
  {
    len++;
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
 800ab10:	3301      	adds	r3, #1
 800ab12:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3301      	adds	r3, #1
 800ab18:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1f5      	bne.n	800ab0e <USBD_GetLen+0xe>
  }

  return len;
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bc80      	pop	{r7}
 800ab2c:	4770      	bx	lr

0800ab2e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	60f8      	str	r0, [r7, #12]
 800ab36:	60b9      	str	r1, [r7, #8]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ab44:	88fa      	ldrh	r2, [r7, #6]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ab4a:	88fa      	ldrh	r2, [r7, #6]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab50:	88fb      	ldrh	r3, [r7, #6]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	2100      	movs	r1, #0
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f000 fc77 	bl	800b44a <USBD_LL_Transmit>

  return USBD_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	4613      	mov	r3, r2
 800ab72:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab74:	88fb      	ldrh	r3, [r7, #6]
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	2100      	movs	r1, #0
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f000 fc65 	bl	800b44a <USBD_LL_Transmit>

  return USBD_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	4613      	mov	r3, r2
 800ab96:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2203      	movs	r2, #3
 800ab9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aba0:	88fa      	ldrh	r2, [r7, #6]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aba8:	88fa      	ldrh	r2, [r7, #6]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abb0:	88fb      	ldrh	r3, [r7, #6]
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	2100      	movs	r1, #0
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 fc6a 	bl	800b490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	4613      	mov	r3, r2
 800abd2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abd4:	88fb      	ldrh	r3, [r7, #6]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	2100      	movs	r1, #0
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 fc58 	bl	800b490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b082      	sub	sp, #8
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2204      	movs	r2, #4
 800abf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800abfa:	2300      	movs	r3, #0
 800abfc:	2200      	movs	r2, #0
 800abfe:	2100      	movs	r1, #0
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 fc22 	bl	800b44a <USBD_LL_Transmit>

  return USBD_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2205      	movs	r2, #5
 800ac1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac20:	2300      	movs	r3, #0
 800ac22:	2200      	movs	r2, #0
 800ac24:	2100      	movs	r1, #0
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fc32 	bl	800b490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	4912      	ldr	r1, [pc, #72]	; (800ac88 <MX_USB_DEVICE_Init+0x50>)
 800ac40:	4812      	ldr	r0, [pc, #72]	; (800ac8c <MX_USB_DEVICE_Init+0x54>)
 800ac42:	f7fe ff5e 	bl	8009b02 <USBD_Init>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d001      	beq.n	800ac50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac4c:	f7f6 f96a 	bl	8000f24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac50:	490f      	ldr	r1, [pc, #60]	; (800ac90 <MX_USB_DEVICE_Init+0x58>)
 800ac52:	480e      	ldr	r0, [pc, #56]	; (800ac8c <MX_USB_DEVICE_Init+0x54>)
 800ac54:	f7fe ff80 	bl	8009b58 <USBD_RegisterClass>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac5e:	f7f6 f961 	bl	8000f24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ac62:	490c      	ldr	r1, [pc, #48]	; (800ac94 <MX_USB_DEVICE_Init+0x5c>)
 800ac64:	4809      	ldr	r0, [pc, #36]	; (800ac8c <MX_USB_DEVICE_Init+0x54>)
 800ac66:	f7fe feb1 	bl	80099cc <USBD_CDC_RegisterInterface>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ac70:	f7f6 f958 	bl	8000f24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ac74:	4805      	ldr	r0, [pc, #20]	; (800ac8c <MX_USB_DEVICE_Init+0x54>)
 800ac76:	f7fe ff88 	bl	8009b8a <USBD_Start>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ac80:	f7f6 f950 	bl	8000f24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ac84:	bf00      	nop
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20000138 	.word	0x20000138
 800ac8c:	200006dc 	.word	0x200006dc
 800ac90:	20000024 	.word	0x20000024
 800ac94:	20000128 	.word	0x20000128

0800ac98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	4905      	ldr	r1, [pc, #20]	; (800acb4 <CDC_Init_FS+0x1c>)
 800aca0:	4805      	ldr	r0, [pc, #20]	; (800acb8 <CDC_Init_FS+0x20>)
 800aca2:	f7fe fea9 	bl	80099f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aca6:	4905      	ldr	r1, [pc, #20]	; (800acbc <CDC_Init_FS+0x24>)
 800aca8:	4803      	ldr	r0, [pc, #12]	; (800acb8 <CDC_Init_FS+0x20>)
 800acaa:	f7fe febe 	bl	8009a2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800acae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	20000d88 	.word	0x20000d88
 800acb8:	200006dc 	.word	0x200006dc
 800acbc:	200009a0 	.word	0x200009a0

0800acc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800acc0:	b480      	push	{r7}
 800acc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800acc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	46bd      	mov	sp, r7
 800acca:	bc80      	pop	{r7}
 800accc:	4770      	bx	lr
	...

0800acd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	4603      	mov	r3, r0
 800acd8:	6039      	str	r1, [r7, #0]
 800acda:	71fb      	strb	r3, [r7, #7]
 800acdc:	4613      	mov	r3, r2
 800acde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	2b23      	cmp	r3, #35	; 0x23
 800ace4:	d84a      	bhi.n	800ad7c <CDC_Control_FS+0xac>
 800ace6:	a201      	add	r2, pc, #4	; (adr r2, 800acec <CDC_Control_FS+0x1c>)
 800ace8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acec:	0800ad7d 	.word	0x0800ad7d
 800acf0:	0800ad7d 	.word	0x0800ad7d
 800acf4:	0800ad7d 	.word	0x0800ad7d
 800acf8:	0800ad7d 	.word	0x0800ad7d
 800acfc:	0800ad7d 	.word	0x0800ad7d
 800ad00:	0800ad7d 	.word	0x0800ad7d
 800ad04:	0800ad7d 	.word	0x0800ad7d
 800ad08:	0800ad7d 	.word	0x0800ad7d
 800ad0c:	0800ad7d 	.word	0x0800ad7d
 800ad10:	0800ad7d 	.word	0x0800ad7d
 800ad14:	0800ad7d 	.word	0x0800ad7d
 800ad18:	0800ad7d 	.word	0x0800ad7d
 800ad1c:	0800ad7d 	.word	0x0800ad7d
 800ad20:	0800ad7d 	.word	0x0800ad7d
 800ad24:	0800ad7d 	.word	0x0800ad7d
 800ad28:	0800ad7d 	.word	0x0800ad7d
 800ad2c:	0800ad7d 	.word	0x0800ad7d
 800ad30:	0800ad7d 	.word	0x0800ad7d
 800ad34:	0800ad7d 	.word	0x0800ad7d
 800ad38:	0800ad7d 	.word	0x0800ad7d
 800ad3c:	0800ad7d 	.word	0x0800ad7d
 800ad40:	0800ad7d 	.word	0x0800ad7d
 800ad44:	0800ad7d 	.word	0x0800ad7d
 800ad48:	0800ad7d 	.word	0x0800ad7d
 800ad4c:	0800ad7d 	.word	0x0800ad7d
 800ad50:	0800ad7d 	.word	0x0800ad7d
 800ad54:	0800ad7d 	.word	0x0800ad7d
 800ad58:	0800ad7d 	.word	0x0800ad7d
 800ad5c:	0800ad7d 	.word	0x0800ad7d
 800ad60:	0800ad7d 	.word	0x0800ad7d
 800ad64:	0800ad7d 	.word	0x0800ad7d
 800ad68:	0800ad7d 	.word	0x0800ad7d
 800ad6c:	0800ad7d 	.word	0x0800ad7d
 800ad70:	0800ad7d 	.word	0x0800ad7d
 800ad74:	0800ad7d 	.word	0x0800ad7d
 800ad78:	0800ad7d 	.word	0x0800ad7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad7c:	bf00      	nop
  }

  return (USBD_OK);
 800ad7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bc80      	pop	{r7}
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop

0800ad8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < (*Len); i++)
 800ad96:	2300      	movs	r3, #0
 800ad98:	60fb      	str	r3, [r7, #12]
 800ad9a:	e009      	b.n	800adb0 <CDC_Receive_FS+0x24>
	  fifo_push(Buf[i]);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	4413      	add	r3, r2
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f5 fa75 	bl	8000294 <fifo_push>
  for (int i = 0; i < (*Len); i++)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	3301      	adds	r3, #1
 800adae:	60fb      	str	r3, [r7, #12]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d8f0      	bhi.n	800ad9c <CDC_Receive_FS+0x10>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	4805      	ldr	r0, [pc, #20]	; (800add4 <CDC_Receive_FS+0x48>)
 800adbe:	f7fe fe34 	bl	8009a2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800adc2:	4804      	ldr	r0, [pc, #16]	; (800add4 <CDC_Receive_FS+0x48>)
 800adc4:	f7fe fe73 	bl	8009aae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800adc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	200006dc 	.word	0x200006dc

0800add8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	460b      	mov	r3, r1
 800ade2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ade8:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <CDC_Transmit_FS+0x48>)
 800adea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e00b      	b.n	800ae16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800adfe:	887b      	ldrh	r3, [r7, #2]
 800ae00:	461a      	mov	r2, r3
 800ae02:	6879      	ldr	r1, [r7, #4]
 800ae04:	4806      	ldr	r0, [pc, #24]	; (800ae20 <CDC_Transmit_FS+0x48>)
 800ae06:	f7fe fdf7 	bl	80099f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae0a:	4805      	ldr	r0, [pc, #20]	; (800ae20 <CDC_Transmit_FS+0x48>)
 800ae0c:	f7fe fe20 	bl	8009a50 <USBD_CDC_TransmitPacket>
 800ae10:	4603      	mov	r3, r0
 800ae12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	200006dc 	.word	0x200006dc

0800ae24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	6039      	str	r1, [r7, #0]
 800ae2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	2212      	movs	r2, #18
 800ae34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ae36:	4b03      	ldr	r3, [pc, #12]	; (800ae44 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bc80      	pop	{r7}
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	20000154 	.word	0x20000154

0800ae48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	4603      	mov	r3, r0
 800ae50:	6039      	str	r1, [r7, #0]
 800ae52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2204      	movs	r2, #4
 800ae58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae5a:	4b03      	ldr	r3, [pc, #12]	; (800ae68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bc80      	pop	{r7}
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	20000168 	.word	0x20000168

0800ae6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae78:	79fb      	ldrb	r3, [r7, #7]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d105      	bne.n	800ae8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	4907      	ldr	r1, [pc, #28]	; (800aea0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ae82:	4808      	ldr	r0, [pc, #32]	; (800aea4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ae84:	f7ff fdfa 	bl	800aa7c <USBD_GetString>
 800ae88:	e004      	b.n	800ae94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	4904      	ldr	r1, [pc, #16]	; (800aea0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ae8e:	4805      	ldr	r0, [pc, #20]	; (800aea4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ae90:	f7ff fdf4 	bl	800aa7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae94:	4b02      	ldr	r3, [pc, #8]	; (800aea0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20001170 	.word	0x20001170
 800aea4:	0800b838 	.word	0x0800b838

0800aea8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	6039      	str	r1, [r7, #0]
 800aeb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	4904      	ldr	r1, [pc, #16]	; (800aec8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aeb8:	4804      	ldr	r0, [pc, #16]	; (800aecc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aeba:	f7ff fddf 	bl	800aa7c <USBD_GetString>
  return USBD_StrDesc;
 800aebe:	4b02      	ldr	r3, [pc, #8]	; (800aec8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	20001170 	.word	0x20001170
 800aecc:	0800b850 	.word	0x0800b850

0800aed0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	6039      	str	r1, [r7, #0]
 800aeda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	221a      	movs	r2, #26
 800aee0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aee2:	f000 f843 	bl	800af6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aee6:	4b02      	ldr	r3, [pc, #8]	; (800aef0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	2000016c 	.word	0x2000016c

0800aef4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	6039      	str	r1, [r7, #0]
 800aefe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af00:	79fb      	ldrb	r3, [r7, #7]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d105      	bne.n	800af12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	4907      	ldr	r1, [pc, #28]	; (800af28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af0a:	4808      	ldr	r0, [pc, #32]	; (800af2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800af0c:	f7ff fdb6 	bl	800aa7c <USBD_GetString>
 800af10:	e004      	b.n	800af1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	4904      	ldr	r1, [pc, #16]	; (800af28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800af16:	4805      	ldr	r0, [pc, #20]	; (800af2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800af18:	f7ff fdb0 	bl	800aa7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800af1c:	4b02      	ldr	r3, [pc, #8]	; (800af28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	20001170 	.word	0x20001170
 800af2c:	0800b864 	.word	0x0800b864

0800af30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	6039      	str	r1, [r7, #0]
 800af3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af3c:	79fb      	ldrb	r3, [r7, #7]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d105      	bne.n	800af4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	4907      	ldr	r1, [pc, #28]	; (800af64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af46:	4808      	ldr	r0, [pc, #32]	; (800af68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af48:	f7ff fd98 	bl	800aa7c <USBD_GetString>
 800af4c:	e004      	b.n	800af58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	4904      	ldr	r1, [pc, #16]	; (800af64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af52:	4805      	ldr	r0, [pc, #20]	; (800af68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af54:	f7ff fd92 	bl	800aa7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800af58:	4b02      	ldr	r3, [pc, #8]	; (800af64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20001170 	.word	0x20001170
 800af68:	0800b870 	.word	0x0800b870

0800af6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af72:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <Get_SerialNum+0x44>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af78:	4b0e      	ldr	r3, [pc, #56]	; (800afb4 <Get_SerialNum+0x48>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800af7e:	4b0e      	ldr	r3, [pc, #56]	; (800afb8 <Get_SerialNum+0x4c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4413      	add	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d009      	beq.n	800afa6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800af92:	2208      	movs	r2, #8
 800af94:	4909      	ldr	r1, [pc, #36]	; (800afbc <Get_SerialNum+0x50>)
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 f814 	bl	800afc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800af9c:	2204      	movs	r2, #4
 800af9e:	4908      	ldr	r1, [pc, #32]	; (800afc0 <Get_SerialNum+0x54>)
 800afa0:	68b8      	ldr	r0, [r7, #8]
 800afa2:	f000 f80f 	bl	800afc4 <IntToUnicode>
  }
}
 800afa6:	bf00      	nop
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	1ffff7e8 	.word	0x1ffff7e8
 800afb4:	1ffff7ec 	.word	0x1ffff7ec
 800afb8:	1ffff7f0 	.word	0x1ffff7f0
 800afbc:	2000016e 	.word	0x2000016e
 800afc0:	2000017e 	.word	0x2000017e

0800afc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b087      	sub	sp, #28
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	4613      	mov	r3, r2
 800afd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800afd6:	2300      	movs	r3, #0
 800afd8:	75fb      	strb	r3, [r7, #23]
 800afda:	e027      	b.n	800b02c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	0f1b      	lsrs	r3, r3, #28
 800afe0:	2b09      	cmp	r3, #9
 800afe2:	d80b      	bhi.n	800affc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	0f1b      	lsrs	r3, r3, #28
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	4619      	mov	r1, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	440b      	add	r3, r1
 800aff4:	3230      	adds	r2, #48	; 0x30
 800aff6:	b2d2      	uxtb	r2, r2
 800aff8:	701a      	strb	r2, [r3, #0]
 800affa:	e00a      	b.n	800b012 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	0f1b      	lsrs	r3, r3, #28
 800b000:	b2da      	uxtb	r2, r3
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	005b      	lsls	r3, r3, #1
 800b006:	4619      	mov	r1, r3
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	440b      	add	r3, r1
 800b00c:	3237      	adds	r2, #55	; 0x37
 800b00e:	b2d2      	uxtb	r2, r2
 800b010:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	011b      	lsls	r3, r3, #4
 800b016:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b018:	7dfb      	ldrb	r3, [r7, #23]
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	3301      	adds	r3, #1
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	4413      	add	r3, r2
 800b022:	2200      	movs	r2, #0
 800b024:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	3301      	adds	r3, #1
 800b02a:	75fb      	strb	r3, [r7, #23]
 800b02c:	7dfa      	ldrb	r2, [r7, #23]
 800b02e:	79fb      	ldrb	r3, [r7, #7]
 800b030:	429a      	cmp	r2, r3
 800b032:	d3d3      	bcc.n	800afdc <IntToUnicode+0x18>
  }
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bc80      	pop	{r7}
 800b03e:	4770      	bx	lr

0800b040 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a0d      	ldr	r2, [pc, #52]	; (800b084 <HAL_PCD_MspInit+0x44>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d113      	bne.n	800b07a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b052:	4b0d      	ldr	r3, [pc, #52]	; (800b088 <HAL_PCD_MspInit+0x48>)
 800b054:	69db      	ldr	r3, [r3, #28]
 800b056:	4a0c      	ldr	r2, [pc, #48]	; (800b088 <HAL_PCD_MspInit+0x48>)
 800b058:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b05c:	61d3      	str	r3, [r2, #28]
 800b05e:	4b0a      	ldr	r3, [pc, #40]	; (800b088 <HAL_PCD_MspInit+0x48>)
 800b060:	69db      	ldr	r3, [r3, #28]
 800b062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b06a:	2200      	movs	r2, #0
 800b06c:	2100      	movs	r1, #0
 800b06e:	2014      	movs	r0, #20
 800b070:	f7f8 f9f9 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b074:	2014      	movs	r0, #20
 800b076:	f7f8 fa12 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b07a:	bf00      	nop
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	40005c00 	.word	0x40005c00
 800b088:	40021000 	.word	0x40021000

0800b08c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	f7fe fdb9 	bl	8009c1a <USBD_LL_SetupStage>
}
 800b0a8:	bf00      	nop
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b0c2:	78fa      	ldrb	r2, [r7, #3]
 800b0c4:	6879      	ldr	r1, [r7, #4]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	00db      	lsls	r3, r3, #3
 800b0ce:	440b      	add	r3, r1
 800b0d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	78fb      	ldrb	r3, [r7, #3]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	f7fe fdeb 	bl	8009cb4 <USBD_LL_DataOutStage>
}
 800b0de:	bf00      	nop
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b0f8:	78fa      	ldrb	r2, [r7, #3]
 800b0fa:	6879      	ldr	r1, [r7, #4]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	00db      	lsls	r3, r3, #3
 800b104:	440b      	add	r3, r1
 800b106:	333c      	adds	r3, #60	; 0x3c
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	78fb      	ldrb	r3, [r7, #3]
 800b10c:	4619      	mov	r1, r3
 800b10e:	f7fe fe42 	bl	8009d96 <USBD_LL_DataInStage>
}
 800b112:	bf00      	nop
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b082      	sub	sp, #8
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fe ff52 	bl	8009fd2 <USBD_LL_SOF>
}
 800b12e:	bf00      	nop
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b13e:	2301      	movs	r3, #1
 800b140:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	2b02      	cmp	r3, #2
 800b148:	d001      	beq.n	800b14e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b14a:	f7f5 feeb 	bl	8000f24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b154:	7bfa      	ldrb	r2, [r7, #15]
 800b156:	4611      	mov	r1, r2
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fe ff02 	bl	8009f62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe febb 	bl	8009ee0 <USBD_LL_Reset>
}
 800b16a:	bf00      	nop
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b182:	4618      	mov	r0, r3
 800b184:	f7fe fefc 	bl	8009f80 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b190:	4b04      	ldr	r3, [pc, #16]	; (800b1a4 <HAL_PCD_SuspendCallback+0x30>)
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	4a03      	ldr	r2, [pc, #12]	; (800b1a4 <HAL_PCD_SuspendCallback+0x30>)
 800b196:	f043 0306 	orr.w	r3, r3, #6
 800b19a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b19c:	bf00      	nop
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	e000ed00 	.word	0xe000ed00

0800b1a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fe fef6 	bl	8009fa8 <USBD_LL_Resume>
}
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b1cc:	4a28      	ldr	r2, [pc, #160]	; (800b270 <USBD_LL_Init+0xac>)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a26      	ldr	r2, [pc, #152]	; (800b270 <USBD_LL_Init+0xac>)
 800b1d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b1dc:	4b24      	ldr	r3, [pc, #144]	; (800b270 <USBD_LL_Init+0xac>)
 800b1de:	4a25      	ldr	r2, [pc, #148]	; (800b274 <USBD_LL_Init+0xb0>)
 800b1e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b1e2:	4b23      	ldr	r3, [pc, #140]	; (800b270 <USBD_LL_Init+0xac>)
 800b1e4:	2208      	movs	r2, #8
 800b1e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b1e8:	4b21      	ldr	r3, [pc, #132]	; (800b270 <USBD_LL_Init+0xac>)
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b1ee:	4b20      	ldr	r3, [pc, #128]	; (800b270 <USBD_LL_Init+0xac>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b1f4:	4b1e      	ldr	r3, [pc, #120]	; (800b270 <USBD_LL_Init+0xac>)
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b1fa:	4b1d      	ldr	r3, [pc, #116]	; (800b270 <USBD_LL_Init+0xac>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b200:	481b      	ldr	r0, [pc, #108]	; (800b270 <USBD_LL_Init+0xac>)
 800b202:	f7f9 fb33 	bl	800486c <HAL_PCD_Init>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d001      	beq.n	800b210 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b20c:	f7f5 fe8a 	bl	8000f24 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b216:	2318      	movs	r3, #24
 800b218:	2200      	movs	r2, #0
 800b21a:	2100      	movs	r1, #0
 800b21c:	f7fa ffa9 	bl	8006172 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b226:	2358      	movs	r3, #88	; 0x58
 800b228:	2200      	movs	r2, #0
 800b22a:	2180      	movs	r1, #128	; 0x80
 800b22c:	f7fa ffa1 	bl	8006172 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b236:	23c0      	movs	r3, #192	; 0xc0
 800b238:	2200      	movs	r2, #0
 800b23a:	2181      	movs	r1, #129	; 0x81
 800b23c:	f7fa ff99 	bl	8006172 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b246:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b24a:	2200      	movs	r2, #0
 800b24c:	2101      	movs	r1, #1
 800b24e:	f7fa ff90 	bl	8006172 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b25c:	2200      	movs	r2, #0
 800b25e:	2182      	movs	r1, #130	; 0x82
 800b260:	f7fa ff87 	bl	8006172 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	20001370 	.word	0x20001370
 800b274:	40005c00 	.word	0x40005c00

0800b278 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b28e:	4618      	mov	r0, r3
 800b290:	f7f9 fbf7 	bl	8004a82 <HAL_PCD_Start>
 800b294:	4603      	mov	r3, r0
 800b296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b298:	7bfb      	ldrb	r3, [r7, #15]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 f94e 	bl	800b53c <USBD_Get_USB_Status>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b084      	sub	sp, #16
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	4608      	mov	r0, r1
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	4603      	mov	r3, r0
 800b2be:	70fb      	strb	r3, [r7, #3]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	70bb      	strb	r3, [r7, #2]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2d6:	78bb      	ldrb	r3, [r7, #2]
 800b2d8:	883a      	ldrh	r2, [r7, #0]
 800b2da:	78f9      	ldrb	r1, [r7, #3]
 800b2dc:	f7f9 fd71 	bl	8004dc2 <HAL_PCD_EP_Open>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 f928 	bl	800b53c <USBD_Get_USB_Status>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b084      	sub	sp, #16
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	460b      	mov	r3, r1
 800b304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b314:	78fa      	ldrb	r2, [r7, #3]
 800b316:	4611      	mov	r1, r2
 800b318:	4618      	mov	r0, r3
 800b31a:	f7f9 fdb8 	bl	8004e8e <HAL_PCD_EP_Close>
 800b31e:	4603      	mov	r3, r0
 800b320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b322:	7bfb      	ldrb	r3, [r7, #15]
 800b324:	4618      	mov	r0, r3
 800b326:	f000 f909 	bl	800b53c <USBD_Get_USB_Status>
 800b32a:	4603      	mov	r3, r0
 800b32c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b32e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b352:	78fa      	ldrb	r2, [r7, #3]
 800b354:	4611      	mov	r1, r2
 800b356:	4618      	mov	r0, r3
 800b358:	f7f9 fe78 	bl	800504c <HAL_PCD_EP_SetStall>
 800b35c:	4603      	mov	r3, r0
 800b35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b360:	7bfb      	ldrb	r3, [r7, #15]
 800b362:	4618      	mov	r0, r3
 800b364:	f000 f8ea 	bl	800b53c <USBD_Get_USB_Status>
 800b368:	4603      	mov	r3, r0
 800b36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b084      	sub	sp, #16
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	460b      	mov	r3, r1
 800b380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b390:	78fa      	ldrb	r2, [r7, #3]
 800b392:	4611      	mov	r1, r2
 800b394:	4618      	mov	r0, r3
 800b396:	f7f9 feb9 	bl	800510c <HAL_PCD_EP_ClrStall>
 800b39a:	4603      	mov	r3, r0
 800b39c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 f8cb 	bl	800b53c <USBD_Get_USB_Status>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b3c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	da0c      	bge.n	800b3ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b3d0:	78fb      	ldrb	r3, [r7, #3]
 800b3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3d6:	68f9      	ldr	r1, [r7, #12]
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	4613      	mov	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	440b      	add	r3, r1
 800b3e4:	3302      	adds	r3, #2
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	e00b      	b.n	800b402 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b3ea:	78fb      	ldrb	r3, [r7, #3]
 800b3ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3f0:	68f9      	ldr	r1, [r7, #12]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	00db      	lsls	r3, r3, #3
 800b3fa:	440b      	add	r3, r1
 800b3fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b400:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b402:	4618      	mov	r0, r3
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	bc80      	pop	{r7}
 800b40a:	4770      	bx	lr

0800b40c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b426:	78fa      	ldrb	r2, [r7, #3]
 800b428:	4611      	mov	r1, r2
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7f9 fca4 	bl	8004d78 <HAL_PCD_SetAddress>
 800b430:	4603      	mov	r3, r0
 800b432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	4618      	mov	r0, r3
 800b438:	f000 f880 	bl	800b53c <USBD_Get_USB_Status>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b440:	7bbb      	ldrb	r3, [r7, #14]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b086      	sub	sp, #24
 800b44e:	af00      	add	r7, sp, #0
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	461a      	mov	r2, r3
 800b456:	460b      	mov	r3, r1
 800b458:	72fb      	strb	r3, [r7, #11]
 800b45a:	4613      	mov	r3, r2
 800b45c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b46c:	893b      	ldrh	r3, [r7, #8]
 800b46e:	7af9      	ldrb	r1, [r7, #11]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	f7f9 fda8 	bl	8004fc6 <HAL_PCD_EP_Transmit>
 800b476:	4603      	mov	r3, r0
 800b478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 f85d 	bl	800b53c <USBD_Get_USB_Status>
 800b482:	4603      	mov	r3, r0
 800b484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b486:	7dbb      	ldrb	r3, [r7, #22]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	461a      	mov	r2, r3
 800b49c:	460b      	mov	r3, r1
 800b49e:	72fb      	strb	r3, [r7, #11]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b4b2:	893b      	ldrh	r3, [r7, #8]
 800b4b4:	7af9      	ldrb	r1, [r7, #11]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	f7f9 fd31 	bl	8004f1e <HAL_PCD_EP_Receive>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 f83a 	bl	800b53c <USBD_Get_USB_Status>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3718      	adds	r7, #24
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	460b      	mov	r3, r1
 800b4e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4e8:	78fa      	ldrb	r2, [r7, #3]
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7f9 fd53 	bl	8004f98 <HAL_PCD_EP_GetRxCount>
 800b4f2:	4603      	mov	r3, r0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b504:	4b02      	ldr	r3, [pc, #8]	; (800b510 <USBD_static_malloc+0x14>)
}
 800b506:	4618      	mov	r0, r3
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bc80      	pop	{r7}
 800b50e:	4770      	bx	lr
 800b510:	200001c0 	.word	0x200001c0

0800b514 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]

}
 800b51c:	bf00      	nop
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	bc80      	pop	{r7}
 800b524:	4770      	bx	lr

0800b526 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b526:	b480      	push	{r7}
 800b528:	b083      	sub	sp, #12
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b532:	bf00      	nop
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	bc80      	pop	{r7}
 800b53a:	4770      	bx	lr

0800b53c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	4603      	mov	r3, r0
 800b544:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	2b03      	cmp	r3, #3
 800b54e:	d817      	bhi.n	800b580 <USBD_Get_USB_Status+0x44>
 800b550:	a201      	add	r2, pc, #4	; (adr r2, 800b558 <USBD_Get_USB_Status+0x1c>)
 800b552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b556:	bf00      	nop
 800b558:	0800b569 	.word	0x0800b569
 800b55c:	0800b56f 	.word	0x0800b56f
 800b560:	0800b575 	.word	0x0800b575
 800b564:	0800b57b 	.word	0x0800b57b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b568:	2300      	movs	r3, #0
 800b56a:	73fb      	strb	r3, [r7, #15]
    break;
 800b56c:	e00b      	b.n	800b586 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b56e:	2302      	movs	r3, #2
 800b570:	73fb      	strb	r3, [r7, #15]
    break;
 800b572:	e008      	b.n	800b586 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b574:	2301      	movs	r3, #1
 800b576:	73fb      	strb	r3, [r7, #15]
    break;
 800b578:	e005      	b.n	800b586 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b57a:	2302      	movs	r3, #2
 800b57c:	73fb      	strb	r3, [r7, #15]
    break;
 800b57e:	e002      	b.n	800b586 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b580:	2302      	movs	r3, #2
 800b582:	73fb      	strb	r3, [r7, #15]
    break;
 800b584:	bf00      	nop
  }
  return usb_status;
 800b586:	7bfb      	ldrb	r3, [r7, #15]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bc80      	pop	{r7}
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop

0800b594 <__libc_init_array>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	2600      	movs	r6, #0
 800b598:	4d0c      	ldr	r5, [pc, #48]	; (800b5cc <__libc_init_array+0x38>)
 800b59a:	4c0d      	ldr	r4, [pc, #52]	; (800b5d0 <__libc_init_array+0x3c>)
 800b59c:	1b64      	subs	r4, r4, r5
 800b59e:	10a4      	asrs	r4, r4, #2
 800b5a0:	42a6      	cmp	r6, r4
 800b5a2:	d109      	bne.n	800b5b8 <__libc_init_array+0x24>
 800b5a4:	f000 f862 	bl	800b66c <_init>
 800b5a8:	2600      	movs	r6, #0
 800b5aa:	4d0a      	ldr	r5, [pc, #40]	; (800b5d4 <__libc_init_array+0x40>)
 800b5ac:	4c0a      	ldr	r4, [pc, #40]	; (800b5d8 <__libc_init_array+0x44>)
 800b5ae:	1b64      	subs	r4, r4, r5
 800b5b0:	10a4      	asrs	r4, r4, #2
 800b5b2:	42a6      	cmp	r6, r4
 800b5b4:	d105      	bne.n	800b5c2 <__libc_init_array+0x2e>
 800b5b6:	bd70      	pop	{r4, r5, r6, pc}
 800b5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5bc:	4798      	blx	r3
 800b5be:	3601      	adds	r6, #1
 800b5c0:	e7ee      	b.n	800b5a0 <__libc_init_array+0xc>
 800b5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c6:	4798      	blx	r3
 800b5c8:	3601      	adds	r6, #1
 800b5ca:	e7f2      	b.n	800b5b2 <__libc_init_array+0x1e>
 800b5cc:	0800bd70 	.word	0x0800bd70
 800b5d0:	0800bd70 	.word	0x0800bd70
 800b5d4:	0800bd70 	.word	0x0800bd70
 800b5d8:	0800bd74 	.word	0x0800bd74

0800b5dc <memcpy>:
 800b5dc:	440a      	add	r2, r1
 800b5de:	4291      	cmp	r1, r2
 800b5e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5e4:	d100      	bne.n	800b5e8 <memcpy+0xc>
 800b5e6:	4770      	bx	lr
 800b5e8:	b510      	push	{r4, lr}
 800b5ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ee:	4291      	cmp	r1, r2
 800b5f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5f4:	d1f9      	bne.n	800b5ea <memcpy+0xe>
 800b5f6:	bd10      	pop	{r4, pc}

0800b5f8 <memmove>:
 800b5f8:	4288      	cmp	r0, r1
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	eb01 0402 	add.w	r4, r1, r2
 800b600:	d902      	bls.n	800b608 <memmove+0x10>
 800b602:	4284      	cmp	r4, r0
 800b604:	4623      	mov	r3, r4
 800b606:	d807      	bhi.n	800b618 <memmove+0x20>
 800b608:	1e43      	subs	r3, r0, #1
 800b60a:	42a1      	cmp	r1, r4
 800b60c:	d008      	beq.n	800b620 <memmove+0x28>
 800b60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b612:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b616:	e7f8      	b.n	800b60a <memmove+0x12>
 800b618:	4601      	mov	r1, r0
 800b61a:	4402      	add	r2, r0
 800b61c:	428a      	cmp	r2, r1
 800b61e:	d100      	bne.n	800b622 <memmove+0x2a>
 800b620:	bd10      	pop	{r4, pc}
 800b622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b62a:	e7f7      	b.n	800b61c <memmove+0x24>

0800b62c <memset>:
 800b62c:	4603      	mov	r3, r0
 800b62e:	4402      	add	r2, r0
 800b630:	4293      	cmp	r3, r2
 800b632:	d100      	bne.n	800b636 <memset+0xa>
 800b634:	4770      	bx	lr
 800b636:	f803 1b01 	strb.w	r1, [r3], #1
 800b63a:	e7f9      	b.n	800b630 <memset+0x4>

0800b63c <strstr>:
 800b63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b63e:	780c      	ldrb	r4, [r1, #0]
 800b640:	b164      	cbz	r4, 800b65c <strstr+0x20>
 800b642:	4603      	mov	r3, r0
 800b644:	781a      	ldrb	r2, [r3, #0]
 800b646:	4618      	mov	r0, r3
 800b648:	1c5e      	adds	r6, r3, #1
 800b64a:	b90a      	cbnz	r2, 800b650 <strstr+0x14>
 800b64c:	4610      	mov	r0, r2
 800b64e:	e005      	b.n	800b65c <strstr+0x20>
 800b650:	4294      	cmp	r4, r2
 800b652:	d108      	bne.n	800b666 <strstr+0x2a>
 800b654:	460d      	mov	r5, r1
 800b656:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800b65a:	b902      	cbnz	r2, 800b65e <strstr+0x22>
 800b65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b65e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800b662:	4297      	cmp	r7, r2
 800b664:	d0f7      	beq.n	800b656 <strstr+0x1a>
 800b666:	4633      	mov	r3, r6
 800b668:	e7ec      	b.n	800b644 <strstr+0x8>
	...

0800b66c <_init>:
 800b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66e:	bf00      	nop
 800b670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b672:	bc08      	pop	{r3}
 800b674:	469e      	mov	lr, r3
 800b676:	4770      	bx	lr

0800b678 <_fini>:
 800b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67a:	bf00      	nop
 800b67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b67e:	bc08      	pop	{r3}
 800b680:	469e      	mov	lr, r3
 800b682:	4770      	bx	lr
