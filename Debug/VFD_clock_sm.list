
VFD_clock_sm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b738  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800b844  0800b844  0001b844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf68  0800bf68  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf68  0800bf68  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf68  0800bf68  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf68  0800bf68  0001bf68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf6c  0800bf6c  0001bf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800bf70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000159c  20000188  0800c0f8  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001724  0800c0f8  00021724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae15  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dfc  00000000  00000000  0003afc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0003edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  0003ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b526  00000000  00000000  00040fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177ba  00000000  00000000  0005c506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a732  00000000  00000000  00073cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe3f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004810  00000000  00000000  000fe448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b82c 	.word	0x0800b82c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	0800b82c 	.word	0x0800b82c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <d3231_init>:
uint8_t d3231_mem[19];

I2C_HandleTypeDef * hi2c;

void d3231_init(I2C_HandleTypeDef * hi2ci)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	hi2c = hi2ci;
 8000178:	4a03      	ldr	r2, [pc, #12]	; (8000188 <d3231_init+0x18>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	6013      	str	r3, [r2, #0]
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000400 	.word	0x20000400

0800018c <d3231_get_time>:

uint8_t * d3231_get_time(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(hi2c, D3231_ADDRESS, 0, 1, d3231_mem, 3, 10);
 8000192:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <d3231_get_time+0x28>)
 8000194:	6818      	ldr	r0, [r3, #0]
 8000196:	230a      	movs	r3, #10
 8000198:	9302      	str	r3, [sp, #8]
 800019a:	2303      	movs	r3, #3
 800019c:	9301      	str	r3, [sp, #4]
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <d3231_get_time+0x2c>)
 80001a0:	9300      	str	r3, [sp, #0]
 80001a2:	2301      	movs	r3, #1
 80001a4:	2200      	movs	r2, #0
 80001a6:	21d0      	movs	r1, #208	; 0xd0
 80001a8:	f003 fe7e 	bl	8003ea8 <HAL_I2C_Mem_Read>
	return d3231_mem;
 80001ac:	4b02      	ldr	r3, [pc, #8]	; (80001b8 <d3231_get_time+0x2c>)
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000400 	.word	0x20000400
 80001b8:	200003ec 	.word	0x200003ec

080001bc <d3231_get_temp>:

uint8_t * d3231_get_temp(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(hi2c, D3231_ADDRESS, 0x11, 1, d3231_mem+0x11, 2, 10);
 80001c2:	4b08      	ldr	r3, [pc, #32]	; (80001e4 <d3231_get_temp+0x28>)
 80001c4:	6818      	ldr	r0, [r3, #0]
 80001c6:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <d3231_get_temp+0x2c>)
 80001c8:	220a      	movs	r2, #10
 80001ca:	9202      	str	r2, [sp, #8]
 80001cc:	2202      	movs	r2, #2
 80001ce:	9201      	str	r2, [sp, #4]
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2301      	movs	r3, #1
 80001d4:	2211      	movs	r2, #17
 80001d6:	21d0      	movs	r1, #208	; 0xd0
 80001d8:	f003 fe66 	bl	8003ea8 <HAL_I2C_Mem_Read>
	return d3231_mem+0x11;
 80001dc:	4b02      	ldr	r3, [pc, #8]	; (80001e8 <d3231_get_temp+0x2c>)
}
 80001de:	4618      	mov	r0, r3
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000400 	.word	0x20000400
 80001e8:	200003fd 	.word	0x200003fd

080001ec <d3231_get_all>:

uint8_t * d3231_get_all(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(hi2c, D3231_ADDRESS, 0, 1, d3231_mem, 19, 100);
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <d3231_get_all+0x28>)
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	2364      	movs	r3, #100	; 0x64
 80001f8:	9302      	str	r3, [sp, #8]
 80001fa:	2313      	movs	r3, #19
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <d3231_get_all+0x2c>)
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2301      	movs	r3, #1
 8000204:	2200      	movs	r2, #0
 8000206:	21d0      	movs	r1, #208	; 0xd0
 8000208:	f003 fe4e 	bl	8003ea8 <HAL_I2C_Mem_Read>
	return d3231_mem;
 800020c:	4b02      	ldr	r3, [pc, #8]	; (8000218 <d3231_get_all+0x2c>)
}
 800020e:	4618      	mov	r0, r3
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000400 	.word	0x20000400
 8000218:	200003ec 	.word	0x200003ec

0800021c <d3231_get_A2M2>:

uint8_t d3231_get_A2M2(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	return d3231_get_all()[0xB];
 8000220:	f7ff ffe4 	bl	80001ec <d3231_get_all>
 8000224:	4603      	mov	r3, r0
 8000226:	7adb      	ldrb	r3, [r3, #11]
}
 8000228:	4618      	mov	r0, r3
 800022a:	bd80      	pop	{r7, pc}

0800022c <d3231_set_A2M2>:

void d3231_set_A2M2(uint8_t data)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af04      	add	r7, sp, #16
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c, D3231_ADDRESS, 0xB, 1, &data, 1, 100);
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <d3231_set_A2M2+0x2c>)
 8000238:	6818      	ldr	r0, [r3, #0]
 800023a:	2364      	movs	r3, #100	; 0x64
 800023c:	9302      	str	r3, [sp, #8]
 800023e:	2301      	movs	r3, #1
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2301      	movs	r3, #1
 8000248:	220b      	movs	r2, #11
 800024a:	21d0      	movs	r1, #208	; 0xd0
 800024c:	f003 fd32 	bl	8003cb4 <HAL_I2C_Mem_Write>
}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000400 	.word	0x20000400

0800025c <d3231_set>:

void d3231_set(uint8_t * arr, bool date)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af04      	add	r7, sp, #16
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	460b      	mov	r3, r1
 8000266:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(hi2c, D3231_ADDRESS, date<<2, 1, arr, 3, 100);
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <d3231_set+0x34>)
 800026a:	6818      	ldr	r0, [r3, #0]
 800026c:	78fb      	ldrb	r3, [r7, #3]
 800026e:	b29b      	uxth	r3, r3
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	b29a      	uxth	r2, r3
 8000274:	2364      	movs	r3, #100	; 0x64
 8000276:	9302      	str	r3, [sp, #8]
 8000278:	2303      	movs	r3, #3
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2301      	movs	r3, #1
 8000282:	21d0      	movs	r1, #208	; 0xd0
 8000284:	f003 fd16 	bl	8003cb4 <HAL_I2C_Mem_Write>
}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000400 	.word	0x20000400

08000294 <fifo_push>:
buff_t fifo_buffer[BUFF_SIZE];
uint32_t head_index = 0;
uint32_t tail_index = 0;

bool fifo_push(buff_t data)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	if (fifo_length() >= BUFF_SIZE - 1)
 800029e:	f000 f859 	bl	8000354 <fifo_length>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2bfe      	cmp	r3, #254	; 0xfe
 80002a6:	d901      	bls.n	80002ac <fifo_push+0x18>
		return 1; // too much data!
 80002a8:	2301      	movs	r3, #1
 80002aa:	e012      	b.n	80002d2 <fifo_push+0x3e>
	if (++tail_index == BUFF_SIZE)
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <fifo_push+0x48>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3301      	adds	r3, #1
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <fifo_push+0x48>)
 80002b4:	6013      	str	r3, [r2, #0]
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <fifo_push+0x48>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002be:	d102      	bne.n	80002c6 <fifo_push+0x32>
		tail_index = 0;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <fifo_push+0x48>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
	fifo_buffer[tail_index] = data;
 80002c6:	4b05      	ldr	r3, [pc, #20]	; (80002dc <fifo_push+0x48>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4905      	ldr	r1, [pc, #20]	; (80002e0 <fifo_push+0x4c>)
 80002cc:	79fa      	ldrb	r2, [r7, #7]
 80002ce:	54ca      	strb	r2, [r1, r3]
	return 0;
 80002d0:	2300      	movs	r3, #0
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200001a8 	.word	0x200001a8
 80002e0:	20000404 	.word	0x20000404

080002e4 <fifo_pop>:

buff_t fifo_pop(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	if (fifo_is_empty())
 80002e8:	f000 f820 	bl	800032c <fifo_is_empty>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d004      	beq.n	80002fc <fifo_pop+0x18>
		return fifo_buffer[head_index]; // buffer is empty, return the last value
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <fifo_pop+0x40>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <fifo_pop+0x44>)
 80002f8:	5cd3      	ldrb	r3, [r2, r3]
 80002fa:	e010      	b.n	800031e <fifo_pop+0x3a>
	if (++head_index == BUFF_SIZE)
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <fifo_pop+0x40>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	4a08      	ldr	r2, [pc, #32]	; (8000324 <fifo_pop+0x40>)
 8000304:	6013      	str	r3, [r2, #0]
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <fifo_pop+0x40>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800030e:	d102      	bne.n	8000316 <fifo_pop+0x32>
		head_index = 0;
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <fifo_pop+0x40>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
	return fifo_buffer[head_index];
 8000316:	4b03      	ldr	r3, [pc, #12]	; (8000324 <fifo_pop+0x40>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a03      	ldr	r2, [pc, #12]	; (8000328 <fifo_pop+0x44>)
 800031c:	5cd3      	ldrb	r3, [r2, r3]
}
 800031e:	4618      	mov	r0, r3
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200001a4 	.word	0x200001a4
 8000328:	20000404 	.word	0x20000404

0800032c <fifo_is_empty>:

bool fifo_is_empty(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	return head_index == tail_index;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <fifo_is_empty+0x20>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <fifo_is_empty+0x24>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	429a      	cmp	r2, r3
 800033a:	bf0c      	ite	eq
 800033c:	2301      	moveq	r3, #1
 800033e:	2300      	movne	r3, #0
 8000340:	b2db      	uxtb	r3, r3
}
 8000342:	4618      	mov	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	200001a4 	.word	0x200001a4
 8000350:	200001a8 	.word	0x200001a8

08000354 <fifo_length>:

uint32_t fifo_length(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	if (tail_index >= head_index)
 8000358:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <fifo_length+0x34>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <fifo_length+0x38>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	429a      	cmp	r2, r3
 8000362:	d305      	bcc.n	8000370 <fifo_length+0x1c>
		return tail_index - head_index;
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <fifo_length+0x34>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <fifo_length+0x38>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	e006      	b.n	800037e <fifo_length+0x2a>
	else
		return tail_index + BUFF_SIZE - head_index;
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <fifo_length+0x34>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <fifo_length+0x38>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	1ad3      	subs	r3, r2, r3
 800037a:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
 800037e:	4618      	mov	r0, r3
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	200001a8 	.word	0x200001a8
 800038c:	200001a4 	.word	0x200001a4

08000390 <vfd_update>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vfd_update(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	uint8_t data = 0b11000000; // command 3, set address to 0
 8000396:	23c0      	movs	r3, #192	; 0xc0
 8000398:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <vfd_update+0x48>)
 80003a2:	f003 fb12 	bl	80039ca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003a6:	1df9      	adds	r1, r7, #7
 80003a8:	f04f 33ff 	mov.w	r3, #4294967295
 80003ac:	2201      	movs	r2, #1
 80003ae:	480b      	ldr	r0, [pc, #44]	; (80003dc <vfd_update+0x4c>)
 80003b0:	f006 fd44 	bl	8006e3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80003b4:	f04f 33ff 	mov.w	r3, #4294967295
 80003b8:	2221      	movs	r2, #33	; 0x21
 80003ba:	4909      	ldr	r1, [pc, #36]	; (80003e0 <vfd_update+0x50>)
 80003bc:	4807      	ldr	r0, [pc, #28]	; (80003dc <vfd_update+0x4c>)
 80003be:	f006 fd3d 	bl	8006e3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c8:	4803      	ldr	r0, [pc, #12]	; (80003d8 <vfd_update+0x48>)
 80003ca:	f003 fafe 	bl	80039ca <HAL_GPIO_WritePin>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010c00 	.word	0x40010c00
 80003dc:	20000504 	.word	0x20000504
 80003e0:	20000634 	.word	0x20000634

080003e4 <do_microrl>:

void do_microrl(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
	while (!fifo_is_empty())
 80003ea:	e007      	b.n	80003fc <do_microrl+0x18>
	{
		uint8_t buf = fifo_pop();
 80003ec:	f7ff ff7a 	bl	80002e4 <fifo_pop>
 80003f0:	4603      	mov	r3, r0
 80003f2:	71fb      	strb	r3, [r7, #7]
		microrl_print_char(buf);
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fed2 	bl	80021a0 <microrl_print_char>
	while (!fifo_is_empty())
 80003fc:	f7ff ff96 	bl	800032c <fifo_is_empty>
 8000400:	4603      	mov	r3, r0
 8000402:	f083 0301 	eor.w	r3, r3, #1
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1ef      	bne.n	80003ec <do_microrl+0x8>
	}
}
 800040c:	bf00      	nop
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <do_vfd_init>:

void do_vfd_init(void)
{
 8000418:	b5b0      	push	{r4, r5, r7, lr}
 800041a:	b098      	sub	sp, #96	; 0x60
 800041c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1); // put CS high
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000424:	48c0      	ldr	r0, [pc, #768]	; (8000728 <do_vfd_init+0x310>)
 8000426:	f003 fad0 	bl	80039ca <HAL_GPIO_WritePin>

	HAL_Delay(300);
 800042a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800042e:	f002 ffff 	bl	8003430 <HAL_Delay>
	HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000432:	2201      	movs	r2, #1
 8000434:	2120      	movs	r1, #32
 8000436:	48bc      	ldr	r0, [pc, #752]	; (8000728 <do_vfd_init+0x310>)
 8000438:	f003 fac7 	bl	80039ca <HAL_GPIO_WritePin>

	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800043c:	2300      	movs	r3, #0
 800043e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000440:	e007      	b.n	8000452 <do_vfd_init+0x3a>
		vfd.arr1[i] = 0xFF;
 8000442:	4aba      	ldr	r2, [pc, #744]	; (800072c <do_vfd_init+0x314>)
 8000444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000446:	4413      	add	r3, r2
 8000448:	22ff      	movs	r2, #255	; 0xff
 800044a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800044c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800044e:	3301      	adds	r3, #1
 8000450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000454:	2b20      	cmp	r3, #32
 8000456:	d9f4      	bls.n	8000442 <do_vfd_init+0x2a>
	}
	uint8_t data;

	data = 0b01000001; // command 2, write to LED port
 8000458:	2341      	movs	r3, #65	; 0x41
 800045a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000464:	48b0      	ldr	r0, [pc, #704]	; (8000728 <do_vfd_init+0x310>)
 8000466:	f003 fab0 	bl	80039ca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800046a:	f107 0137 	add.w	r1, r7, #55	; 0x37
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
 8000472:	2201      	movs	r2, #1
 8000474:	48ae      	ldr	r0, [pc, #696]	; (8000730 <do_vfd_init+0x318>)
 8000476:	f006 fce1 	bl	8006e3c <HAL_SPI_Transmit>
	HAL_Delay(10);
 800047a:	200a      	movs	r0, #10
 800047c:	f002 ffd8 	bl	8003430 <HAL_Delay>

	data = 0b1111; // disable LEDs
 8000480:	230f      	movs	r3, #15
 8000482:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000486:	f107 0137 	add.w	r1, r7, #55	; 0x37
 800048a:	f04f 33ff 	mov.w	r3, #4294967295
 800048e:	2201      	movs	r2, #1
 8000490:	48a7      	ldr	r0, [pc, #668]	; (8000730 <do_vfd_init+0x318>)
 8000492:	f006 fcd3 	bl	8006e3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	48a2      	ldr	r0, [pc, #648]	; (8000728 <do_vfd_init+0x310>)
 800049e:	f003 fa94 	bl	80039ca <HAL_GPIO_WritePin>

	data = 0b01000000; // command 2, write to Display port
 80004a2:	2340      	movs	r3, #64	; 0x40
 80004a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ae:	489e      	ldr	r0, [pc, #632]	; (8000728 <do_vfd_init+0x310>)
 80004b0:	f003 fa8b 	bl	80039ca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004b4:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80004b8:	f04f 33ff 	mov.w	r3, #4294967295
 80004bc:	2201      	movs	r2, #1
 80004be:	489c      	ldr	r0, [pc, #624]	; (8000730 <do_vfd_init+0x318>)
 80004c0:	f006 fcbc 	bl	8006e3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ca:	4897      	ldr	r0, [pc, #604]	; (8000728 <do_vfd_init+0x310>)
 80004cc:	f003 fa7d 	bl	80039ca <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80004d0:	200a      	movs	r0, #10
 80004d2:	f002 ffad 	bl	8003430 <HAL_Delay>
	vfd_update();
 80004d6:	f7ff ff5b 	bl	8000390 <vfd_update>
	HAL_Delay(10);
 80004da:	200a      	movs	r0, #10
 80004dc:	f002 ffa8 	bl	8003430 <HAL_Delay>
	// init display, 11 digits 17 segments
	data = 0b00000111; // command 1, 11 digits 17 segments
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ec:	488e      	ldr	r0, [pc, #568]	; (8000728 <do_vfd_init+0x310>)
 80004ee:	f003 fa6c 	bl	80039ca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004f2:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
 80004fa:	2201      	movs	r2, #1
 80004fc:	488c      	ldr	r0, [pc, #560]	; (8000730 <do_vfd_init+0x318>)
 80004fe:	f006 fc9d 	bl	8006e3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000508:	4887      	ldr	r0, [pc, #540]	; (8000728 <do_vfd_init+0x310>)
 800050a:	f003 fa5e 	bl	80039ca <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800050e:	200a      	movs	r0, #10
 8000510:	f002 ff8e 	bl	8003430 <HAL_Delay>

	for (uint8_t i = 0; i <= 0b111; i++) {
 8000514:	2300      	movs	r3, #0
 8000516:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800051a:	e02f      	b.n	800057c <do_vfd_init+0x164>
		data = 0b10000000; // command 4
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		data |= 1 << 3; // enable/disable display
 8000522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	b2db      	uxtb	r3, r3
 800052c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		data |= i; // set brightness
 8000530:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000534:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000538:	4313      	orrs	r3, r2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000546:	4878      	ldr	r0, [pc, #480]	; (8000728 <do_vfd_init+0x310>)
 8000548:	f003 fa3f 	bl	80039ca <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800054c:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8000550:	f04f 33ff 	mov.w	r3, #4294967295
 8000554:	2201      	movs	r2, #1
 8000556:	4876      	ldr	r0, [pc, #472]	; (8000730 <do_vfd_init+0x318>)
 8000558:	f006 fc70 	bl	8006e3c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4871      	ldr	r0, [pc, #452]	; (8000728 <do_vfd_init+0x310>)
 8000564:	f003 fa31 	bl	80039ca <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000568:	20fa      	movs	r0, #250	; 0xfa
 800056a:	f002 ff61 	bl	8003430 <HAL_Delay>
		do_microrl();
 800056e:	f7ff ff39 	bl	80003e4 <do_microrl>
	for (uint8_t i = 0; i <= 0b111; i++) {
 8000572:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000576:	3301      	adds	r3, #1
 8000578:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800057c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000580:	2b07      	cmp	r3, #7
 8000582:	d9cb      	bls.n	800051c <do_vfd_init+0x104>
	}

	for (int i = 0; i < 11; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
 8000588:	e01c      	b.n	80005c4 <do_vfd_init+0x1ac>
		for (int b = 0; b < 3; b++) // erasing from right to left
 800058a:	2300      	movs	r3, #0
 800058c:	653b      	str	r3, [r7, #80]	; 0x50
 800058e:	e00c      	b.n	80005aa <do_vfd_init+0x192>
		{
			vfd.arr2[i][b] = 0;
 8000590:	4966      	ldr	r1, [pc, #408]	; (800072c <do_vfd_init+0x314>)
 8000592:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000594:	4613      	mov	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	4413      	add	r3, r2
 800059a:	18ca      	adds	r2, r1, r3
 800059c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800059e:	4413      	add	r3, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++) // erasing from right to left
 80005a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005a6:	3301      	adds	r3, #1
 80005a8:	653b      	str	r3, [r7, #80]	; 0x50
 80005aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	ddef      	ble.n	8000590 <do_vfd_init+0x178>
		}
		vfd_update();
 80005b0:	f7ff feee 	bl	8000390 <vfd_update>
		HAL_Delay(150);
 80005b4:	2096      	movs	r0, #150	; 0x96
 80005b6:	f002 ff3b 	bl	8003430 <HAL_Delay>
		do_microrl();
 80005ba:	f7ff ff13 	bl	80003e4 <do_microrl>
	for (int i = 0; i < 11; i++) {
 80005be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005c0:	3301      	adds	r3, #1
 80005c2:	657b      	str	r3, [r7, #84]	; 0x54
 80005c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005c6:	2b0a      	cmp	r3, #10
 80005c8:	dddf      	ble.n	800058a <do_vfd_init+0x172>
	}
	HAL_Delay(500);
 80005ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ce:	f002 ff2f 	bl	8003430 <HAL_Delay>
	do_microrl();
 80005d2:	f7ff ff07 	bl	80003e4 <do_microrl>

	//erase everything... just in case
	clr_vfd();
 80005d6:	f002 fe49 	bl	800326c <clr_vfd>

	// fill everything
	for (int j = 1; j < 15; j++) {
 80005da:	2301      	movs	r3, #1
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005de:	e03b      	b.n	8000658 <do_vfd_init+0x240>
		uint32_t temp = 1 << j;
 80005e0:	2201      	movs	r2, #1
 80005e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
		for (int i = 1; i < 11; i++) {
 80005ea:	2301      	movs	r3, #1
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80005ee:	e026      	b.n	800063e <do_vfd_init+0x226>
			for (int b = 0; b < 3; b++) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
 80005f4:	e01d      	b.n	8000632 <do_vfd_init+0x21a>
				vfd.arr2[i][b] |= (temp >> (b << 3)) & 0xFF;
 80005f6:	494d      	ldr	r1, [pc, #308]	; (800072c <do_vfd_init+0x314>)
 80005f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80005fa:	4613      	mov	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4413      	add	r3, r2
 8000600:	18ca      	adds	r2, r1, r3
 8000602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000604:	4413      	add	r3, r2
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800060e:	fa21 f303 	lsr.w	r3, r1, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4313      	orrs	r3, r2
 8000616:	b2d8      	uxtb	r0, r3
 8000618:	4944      	ldr	r1, [pc, #272]	; (800072c <do_vfd_init+0x314>)
 800061a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800061c:	4613      	mov	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4413      	add	r3, r2
 8000622:	18ca      	adds	r2, r1, r3
 8000624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000626:	4413      	add	r3, r2
 8000628:	4602      	mov	r2, r0
 800062a:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++) {
 800062c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800062e:	3301      	adds	r3, #1
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
 8000632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000634:	2b02      	cmp	r3, #2
 8000636:	ddde      	ble.n	80005f6 <do_vfd_init+0x1de>
		for (int i = 1; i < 11; i++) {
 8000638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800063a:	3301      	adds	r3, #1
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
 800063e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000640:	2b0a      	cmp	r3, #10
 8000642:	ddd5      	ble.n	80005f0 <do_vfd_init+0x1d8>
			}
		}
		vfd_update();
 8000644:	f7ff fea4 	bl	8000390 <vfd_update>
		HAL_Delay(100);
 8000648:	2064      	movs	r0, #100	; 0x64
 800064a:	f002 fef1 	bl	8003430 <HAL_Delay>
		do_microrl();
 800064e:	f7ff fec9 	bl	80003e4 <do_microrl>
	for (int j = 1; j < 15; j++) {
 8000652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000654:	3301      	adds	r3, #1
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800065a:	2b0e      	cmp	r3, #14
 800065c:	ddc0      	ble.n	80005e0 <do_vfd_init+0x1c8>
	}

	const uint8_t arr[][2] = {
 800065e:	4b35      	ldr	r3, [pc, #212]	; (8000734 <do_vfd_init+0x31c>)
 8000660:	1d3c      	adds	r4, r7, #4
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	682b      	ldr	r3, [r5, #0]
 8000672:	8023      	strh	r3, [r4, #0]
			{ 9, 16 },
			{ 10, 16 },
			{ 10, 15 },
	};

	for (int j = 0; j < sizeof(arr) / 2; j++) {
 8000674:	2300      	movs	r3, #0
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
 8000678:	e047      	b.n	800070a <do_vfd_init+0x2f2>
		for (int b = 0; b < 3; b++)
 800067a:	2300      	movs	r3, #0
 800067c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800067e:	e037      	b.n	80006f0 <do_vfd_init+0x2d8>
			vfd.arr2[arr[j][0]][b] |= ((1 << arr[j][1]) >> (b << 3)) & 0xFF;
 8000680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000688:	4413      	add	r3, r2
 800068a:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 800068e:	4619      	mov	r1, r3
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <do_vfd_init+0x314>)
 8000692:	460b      	mov	r3, r1
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	440b      	add	r3, r1
 8000698:	441a      	add	r2, r3
 800069a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800069c:	4413      	add	r3, r2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b25a      	sxtb	r2, r3
 80006a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006aa:	440b      	add	r3, r1
 80006ac:	f813 3c5b 	ldrb.w	r3, [r3, #-91]
 80006b0:	4619      	mov	r1, r3
 80006b2:	2301      	movs	r3, #1
 80006b4:	fa03 f101 	lsl.w	r1, r3, r1
 80006b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	fa41 f303 	asr.w	r3, r1, r3
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006ce:	440b      	add	r3, r1
 80006d0:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 80006d4:	4619      	mov	r1, r3
 80006d6:	b2d0      	uxtb	r0, r2
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <do_vfd_init+0x314>)
 80006da:	460b      	mov	r3, r1
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	440b      	add	r3, r1
 80006e0:	441a      	add	r2, r3
 80006e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e4:	4413      	add	r3, r2
 80006e6:	4602      	mov	r2, r0
 80006e8:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 80006ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ec:	3301      	adds	r3, #1
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	ddc4      	ble.n	8000680 <do_vfd_init+0x268>
		vfd_update();
 80006f6:	f7ff fe4b 	bl	8000390 <vfd_update>
		HAL_Delay(70);
 80006fa:	2046      	movs	r0, #70	; 0x46
 80006fc:	f002 fe98 	bl	8003430 <HAL_Delay>
		do_microrl();
 8000700:	f7ff fe70 	bl	80003e4 <do_microrl>
	for (int j = 0; j < sizeof(arr) / 2; j++) {
 8000704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000706:	3301      	adds	r3, #1
 8000708:	643b      	str	r3, [r7, #64]	; 0x40
 800070a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800070c:	2b18      	cmp	r3, #24
 800070e:	d9b4      	bls.n	800067a <do_vfd_init+0x262>
	}

	HAL_Delay(300);
 8000710:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000714:	f002 fe8c 	bl	8003430 <HAL_Delay>

	//erase everything... just in case
	clr_vfd();
 8000718:	f002 fda8 	bl	800326c <clr_vfd>

	vfd_update();
 800071c:	f7ff fe38 	bl	8000390 <vfd_update>
}
 8000720:	bf00      	nop
 8000722:	3760      	adds	r7, #96	; 0x60
 8000724:	46bd      	mov	sp, r7
 8000726:	bdb0      	pop	{r4, r5, r7, pc}
 8000728:	40010c00 	.word	0x40010c00
 800072c:	20000634 	.word	0x20000634
 8000730:	20000504 	.word	0x20000504
 8000734:	0800b844 	.word	0x0800b844

08000738 <do_brightness>:

void do_brightness(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
	uint8_t data;
	static uint32_t last_time = 0;
	if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))
 800073e:	2104      	movs	r1, #4
 8000740:	4841      	ldr	r0, [pc, #260]	; (8000848 <do_brightness+0x110>)
 8000742:	f003 f92b 	bl	800399c <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d078      	beq.n	800083e <do_brightness+0x106>
	{
		// update only if pause shorter than 2 sec
		if (HAL_GetTick() - last_time < 2000)
 800074c:	f002 fe66 	bl	800341c <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <do_brightness+0x114>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800075c:	d210      	bcs.n	8000780 <do_brightness+0x48>
		{
			brightness = (brightness - 1)&0b111;
 800075e:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <do_brightness+0x118>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	3b01      	subs	r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b38      	ldr	r3, [pc, #224]	; (8000850 <do_brightness+0x118>)
 800076e:	701a      	strb	r2, [r3, #0]
			d3231_set_A2M2(0b111-brightness);
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <do_brightness+0x118>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	f1c3 0307 	rsb	r3, r3, #7
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fd56 	bl	800022c <d3231_set_A2M2>
		}

		save_vfd();
 8000780:	f002 fd8e 	bl	80032a0 <save_vfd>
		clr_vfd();
 8000784:	f002 fd72 	bl	800326c <clr_vfd>
		uint32_t bits = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
		for (int i = 2; i < 1 + 2 + brightness; i++)
 800078c:	2302      	movs	r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	e00a      	b.n	80007a8 <do_brightness+0x70>
			bits |= 1<<i;
 8000792:	2201      	movs	r2, #1
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	461a      	mov	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4313      	orrs	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
		for (int i = 2; i < 1 + 2 + brightness; i++)
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <do_brightness+0x118>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	ddee      	ble.n	8000792 <do_brightness+0x5a>
		symbols_vfd(bits);
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f002 fcc9 	bl	800314c <symbols_vfd>
		str2vfd("BRIGHTNESS");
 80007ba:	4826      	ldr	r0, [pc, #152]	; (8000854 <do_brightness+0x11c>)
 80007bc:	f002 fc40 	bl	8003040 <str2vfd>
		vfd_update();
 80007c0:	f7ff fde6 	bl	8000390 <vfd_update>

		data = 0b10000000; // command 4
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	71fb      	strb	r3, [r7, #7]
		data |= 1<<3; // enable/disable display
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f043 0308 	orr.w	r3, r3, #8
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	71fb      	strb	r3, [r7, #7]
		data |= brightness&0b111; // set brightness
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <do_brightness+0x118>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	f003 0307 	and.w	r3, r3, #7
 80007dc:	b25a      	sxtb	r2, r3
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f0:	4815      	ldr	r0, [pc, #84]	; (8000848 <do_brightness+0x110>)
 80007f2:	f003 f8ea 	bl	80039ca <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80007f6:	1df9      	adds	r1, r7, #7
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	2201      	movs	r2, #1
 80007fe:	4816      	ldr	r0, [pc, #88]	; (8000858 <do_brightness+0x120>)
 8000800:	f006 fb1c 	bl	8006e3c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080a:	480f      	ldr	r0, [pc, #60]	; (8000848 <do_brightness+0x110>)
 800080c:	f003 f8dd 	bl	80039ca <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8000810:	2014      	movs	r0, #20
 8000812:	f002 fe0d 	bl	8003430 <HAL_Delay>
		while(HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin)); // wait release
 8000816:	bf00      	nop
 8000818:	2104      	movs	r1, #4
 800081a:	480b      	ldr	r0, [pc, #44]	; (8000848 <do_brightness+0x110>)
 800081c:	f003 f8be 	bl	800399c <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1f8      	bne.n	8000818 <do_brightness+0xe0>
		HAL_Delay(100);
 8000826:	2064      	movs	r0, #100	; 0x64
 8000828:	f002 fe02 	bl	8003430 <HAL_Delay>
		last_time = HAL_GetTick();
 800082c:	f002 fdf6 	bl	800341c <HAL_GetTick>
 8000830:	4603      	mov	r3, r0
 8000832:	4a06      	ldr	r2, [pc, #24]	; (800084c <do_brightness+0x114>)
 8000834:	6013      	str	r3, [r2, #0]
		restore_vfd();
 8000836:	f002 fd53 	bl	80032e0 <restore_vfd>
		vfd_update();
 800083a:	f7ff fda9 	bl	8000390 <vfd_update>
	}
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40010c00 	.word	0x40010c00
 800084c:	200001ac 	.word	0x200001ac
 8000850:	20000655 	.word	0x20000655
 8000854:	0800b878 	.word	0x0800b878
 8000858:	20000504 	.word	0x20000504

0800085c <do_clock>:

void do_clock(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 50)
 8000862:	f002 fddb 	bl	800341c <HAL_GetTick>
 8000866:	4602      	mov	r2, r0
 8000868:	4b46      	ldr	r3, [pc, #280]	; (8000984 <do_clock+0x128>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b31      	cmp	r3, #49	; 0x31
 8000870:	f240 8084 	bls.w	800097c <do_clock+0x120>
		return;
	last_time = HAL_GetTick();
 8000874:	f002 fdd2 	bl	800341c <HAL_GetTick>
 8000878:	4603      	mov	r3, r0
 800087a:	4a42      	ldr	r2, [pc, #264]	; (8000984 <do_clock+0x128>)
 800087c:	6013      	str	r3, [r2, #0]

	if (show_clock)
 800087e:	4b42      	ldr	r3, [pc, #264]	; (8000988 <do_clock+0x12c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d07b      	beq.n	800097e <do_clock+0x122>
	{
		uint8_t * time = d3231_get_time();
 8000886:	f7ff fc81 	bl	800018c <d3231_get_time>
 800088a:	60f8      	str	r0, [r7, #12]
		uint8_t clock [4];

		static uint8_t old_seconds = 0;
		clock[0] = time[1] & 0xF;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	b2db      	uxtb	r3, r3
 8000898:	713b      	strb	r3, [r7, #4]
		clock[1] = (time[1] >> 4) & 0xF;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	717b      	strb	r3, [r7, #5]
		clock[2] = time[2] & 0xF;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3302      	adds	r3, #2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f003 030f 	and.w	r3, r3, #15
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	71bb      	strb	r3, [r7, #6]
		clock[3] = (time[2] >> 4) & 0xF;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3302      	adds	r3, #2
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	091b      	lsrs	r3, r3, #4
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	71fb      	strb	r3, [r7, #7]

		if (time[0] != old_seconds)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <do_clock+0x130>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d058      	beq.n	800097e <do_clock+0x122>
		{
			old_seconds = time[0];
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	4b2e      	ldr	r3, [pc, #184]	; (800098c <do_clock+0x130>)
 80008d2:	701a      	strb	r2, [r3, #0]

			//erase everything...
			clr_vfd();
 80008d4:	f002 fcca 	bl	800326c <clr_vfd>


			for (int i = 0; i < 4; i++)
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e024      	b.n	8000928 <do_clock+0xcc>
			{
				uint16_t buf = get_char(clock[i]);
 80008de:	1d3a      	adds	r2, r7, #4
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	4413      	add	r3, r2
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fb3e 	bl	8002f68 <get_char>
 80008ec:	4603      	mov	r3, r0
 80008ee:	817b      	strh	r3, [r7, #10]

				vfd.arr2[4+i][0] = buf & 0xFF;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	1d1a      	adds	r2, r3, #4
 80008f4:	897b      	ldrh	r3, [r7, #10]
 80008f6:	b2d8      	uxtb	r0, r3
 80008f8:	4925      	ldr	r1, [pc, #148]	; (8000990 <do_clock+0x134>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	440b      	add	r3, r1
 8000902:	4602      	mov	r2, r0
 8000904:	701a      	strb	r2, [r3, #0]
				vfd.arr2[4+i][1] = (buf>>8)&0xFF;
 8000906:	897b      	ldrh	r3, [r7, #10]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	b299      	uxth	r1, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	1d1a      	adds	r2, r3, #4
 8000910:	b2c8      	uxtb	r0, r1
 8000912:	491f      	ldr	r1, [pc, #124]	; (8000990 <do_clock+0x134>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	440b      	add	r3, r1
 800091c:	3301      	adds	r3, #1
 800091e:	4602      	mov	r2, r0
 8000920:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	2b03      	cmp	r3, #3
 800092c:	ddd7      	ble.n	80008de <do_clock+0x82>
			}

			if ((time[0]&0b1) == 0)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	2b00      	cmp	r3, #0
 8000938:	d11d      	bne.n	8000976 <do_clock+0x11a>
			{
				for (int b = 0; b < 3; b++)
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	e017      	b.n	8000970 <do_clock+0x114>
					vfd.arr2[6][b] |= ((1<<0)>>(b<<3))&0xFF;
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <do_clock+0x134>)
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4413      	add	r3, r2
 8000946:	3312      	adds	r3, #18
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b25a      	sxtb	r2, r3
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	2101      	movs	r1, #1
 8000952:	fa41 f303 	asr.w	r3, r1, r3
 8000956:	b25b      	sxtb	r3, r3
 8000958:	4313      	orrs	r3, r2
 800095a:	b25b      	sxtb	r3, r3
 800095c:	b2d9      	uxtb	r1, r3
 800095e:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <do_clock+0x134>)
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	4413      	add	r3, r2
 8000964:	3312      	adds	r3, #18
 8000966:	460a      	mov	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
				for (int b = 0; b < 3; b++)
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	3301      	adds	r3, #1
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	2b02      	cmp	r3, #2
 8000974:	dde4      	ble.n	8000940 <do_clock+0xe4>
			}

			vfd_update();
 8000976:	f7ff fd0b 	bl	8000390 <vfd_update>
 800097a:	e000      	b.n	800097e <do_clock+0x122>
		return;
 800097c:	bf00      	nop
		}
	}
}
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200001b0 	.word	0x200001b0
 8000988:	20000009 	.word	0x20000009
 800098c:	200001b4 	.word	0x200001b4
 8000990:	20000634 	.word	0x20000634

08000994 <do_text>:

void do_text(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	static uint32_t t2dlen = 0;
	if (HAL_GetTick() - last_time < 300)
 800099a:	f002 fd3f 	bl	800341c <HAL_GetTick>
 800099e:	4602      	mov	r2, r0
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <do_text+0xfc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009aa:	d36a      	bcc.n	8000a82 <do_text+0xee>
		return;
	last_time = HAL_GetTick();
 80009ac:	f002 fd36 	bl	800341c <HAL_GetTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a37      	ldr	r2, [pc, #220]	; (8000a90 <do_text+0xfc>)
 80009b4:	6013      	str	r3, [r2, #0]

	if (show_clock)
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <do_text+0x100>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d163      	bne.n	8000a86 <do_text+0xf2>
		return;

	static int16_t pos = 0;

	if (fresh_txt)
 80009be:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <do_text+0x104>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d033      	beq.n	8000a2e <do_text+0x9a>
	{
		fresh_txt = false;
 80009c6:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <do_text+0x104>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
		pos = 0;
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <do_text+0x108>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	801a      	strh	r2, [r3, #0]
		t2dlen = strlen(txt2disp);
 80009d2:	4833      	ldr	r0, [pc, #204]	; (8000aa0 <do_text+0x10c>)
 80009d4:	f7ff fbc4 	bl	8000160 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <do_text+0x110>)
 80009dc:	6013      	str	r3, [r2, #0]
		// if text too long add spaces before
		if (t2dlen > 10)
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <do_text+0x110>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b0a      	cmp	r3, #10
 80009e4:	d923      	bls.n	8000a2e <do_text+0x9a>
		{
			for (int i = sizeof(txt2disp) - 11; i >= 0; i--)
 80009e6:	2375      	movs	r3, #117	; 0x75
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	e00a      	b.n	8000a02 <do_text+0x6e>
				txt2disp[i + 10] = txt2disp[i];
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	330a      	adds	r3, #10
 80009f0:	492b      	ldr	r1, [pc, #172]	; (8000aa0 <do_text+0x10c>)
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	440a      	add	r2, r1
 80009f6:	7811      	ldrb	r1, [r2, #0]
 80009f8:	4a29      	ldr	r2, [pc, #164]	; (8000aa0 <do_text+0x10c>)
 80009fa:	54d1      	strb	r1, [r2, r3]
			for (int i = sizeof(txt2disp) - 11; i >= 0; i--)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	daf1      	bge.n	80009ec <do_text+0x58>
			for (int i = 0; i < 10; i ++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	e007      	b.n	8000a1e <do_text+0x8a>
				txt2disp[i] = ' ';
 8000a0e:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <do_text+0x10c>)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	2220      	movs	r2, #32
 8000a16:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 10; i ++)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	ddf4      	ble.n	8000a0e <do_text+0x7a>
			t2dlen += 10;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <do_text+0x110>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	330a      	adds	r3, #10
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <do_text+0x110>)
 8000a2c:	6013      	str	r3, [r2, #0]
		}
	}

	clr_vfd();
 8000a2e:	f002 fc1d 	bl	800326c <clr_vfd>
	str2vfd(&txt2disp[pos]);
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <do_text+0x108>)
 8000a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <do_text+0x10c>)
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 fafe 	bl	8003040 <str2vfd>
	if (t2dlen > 10) // scroll long text
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <do_text+0x110>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b0a      	cmp	r3, #10
 8000a4a:	d917      	bls.n	8000a7c <do_text+0xe8>
	{
		if (pos < t2dlen)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <do_text+0x108>)
 8000a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <do_text+0x110>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d209      	bcs.n	8000a70 <do_text+0xdc>
			pos += 1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <do_text+0x108>)
 8000a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	3301      	adds	r3, #1
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <do_text+0x108>)
 8000a6c:	801a      	strh	r2, [r3, #0]
 8000a6e:	e002      	b.n	8000a76 <do_text+0xe2>
		else
			pos = 0;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <do_text+0x108>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	801a      	strh	r2, [r3, #0]
		symbols_vfd(0b11);
 8000a76:	2003      	movs	r0, #3
 8000a78:	f002 fb68 	bl	800314c <symbols_vfd>
		//symbols_vfd(1<<(19+((tick++)&0b11)));
	}
	vfd_update();
 8000a7c:	f7ff fc88 	bl	8000390 <vfd_update>
 8000a80:	e002      	b.n	8000a88 <do_text+0xf4>
		return;
 8000a82:	bf00      	nop
 8000a84:	e000      	b.n	8000a88 <do_text+0xf4>
		return;
 8000a86:	bf00      	nop
}
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200001b8 	.word	0x200001b8
 8000a94:	20000009 	.word	0x20000009
 8000a98:	20000630 	.word	0x20000630
 8000a9c:	200001bc 	.word	0x200001bc
 8000aa0:	200005b0 	.word	0x200005b0
 8000aa4:	200001c0 	.word	0x200001c0

08000aa8 <do_leds>:

void do_leds(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	static uint8_t tick_counter = 0;
	if (HAL_GetTick() - last_time < 500)
 8000aae:	f002 fcb5 	bl	800341c <HAL_GetTick>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <do_leds+0xe4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000abe:	d360      	bcc.n	8000b82 <do_leds+0xda>
		return;
	last_time = HAL_GetTick();
 8000ac0:	f002 fcac 	bl	800341c <HAL_GetTick>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a31      	ldr	r2, [pc, #196]	; (8000b8c <do_leds+0xe4>)
 8000ac8:	6013      	str	r3, [r2, #0]
	if (use_leds)
 8000aca:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <do_leds+0xe8>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d032      	beq.n	8000b38 <do_leds+0x90>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad6:	482f      	ldr	r0, [pc, #188]	; (8000b94 <do_leds+0xec>)
 8000ad8:	f002 ff8f 	bl	80039fa <HAL_GPIO_TogglePin>

		uint8_t data = 0b01000001; // command 2, write to LED port
 8000adc:	2341      	movs	r3, #65	; 0x41
 8000ade:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae6:	482c      	ldr	r0, [pc, #176]	; (8000b98 <do_leds+0xf0>)
 8000ae8:	f002 ff6f 	bl	80039ca <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000aec:	1df9      	adds	r1, r7, #7
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	2201      	movs	r2, #1
 8000af4:	4829      	ldr	r0, [pc, #164]	; (8000b9c <do_leds+0xf4>)
 8000af6:	f006 f9a1 	bl	8006e3c <HAL_SPI_Transmit>

		data = ~(1<<((tick_counter++ >> 1)&0b11));
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <do_leds+0xf8>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	b2d1      	uxtb	r1, r2
 8000b02:	4a27      	ldr	r2, [pc, #156]	; (8000ba0 <do_leds+0xf8>)
 8000b04:	7011      	strb	r1, [r2, #0]
 8000b06:	085b      	lsrs	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	2201      	movs	r2, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	71fb      	strb	r3, [r7, #7]

		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000b1c:	1df9      	adds	r1, r7, #7
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	2201      	movs	r2, #1
 8000b24:	481d      	ldr	r0, [pc, #116]	; (8000b9c <do_leds+0xf4>)
 8000b26:	f006 f989 	bl	8006e3c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b30:	4819      	ldr	r0, [pc, #100]	; (8000b98 <do_leds+0xf0>)
 8000b32:	f002 ff4a 	bl	80039ca <HAL_GPIO_WritePin>
 8000b36:	e025      	b.n	8000b84 <do_leds+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3e:	4815      	ldr	r0, [pc, #84]	; (8000b94 <do_leds+0xec>)
 8000b40:	f002 ff43 	bl	80039ca <HAL_GPIO_WritePin>
		uint8_t data = 0b01000001; // command 2, write to LED port
 8000b44:	2341      	movs	r3, #65	; 0x41
 8000b46:	71bb      	strb	r3, [r7, #6]
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	4812      	ldr	r0, [pc, #72]	; (8000b98 <do_leds+0xf0>)
 8000b50:	f002 ff3b 	bl	80039ca <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000b54:	1db9      	adds	r1, r7, #6
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	480f      	ldr	r0, [pc, #60]	; (8000b9c <do_leds+0xf4>)
 8000b5e:	f006 f96d 	bl	8006e3c <HAL_SPI_Transmit>

		data = 0b1111; // disable all leds
 8000b62:	230f      	movs	r3, #15
 8000b64:	71bb      	strb	r3, [r7, #6]

		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000b66:	1db9      	adds	r1, r7, #6
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	480b      	ldr	r0, [pc, #44]	; (8000b9c <do_leds+0xf4>)
 8000b70:	f006 f964 	bl	8006e3c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <do_leds+0xf0>)
 8000b7c:	f002 ff25 	bl	80039ca <HAL_GPIO_WritePin>
 8000b80:	e000      	b.n	8000b84 <do_leds+0xdc>
		return;
 8000b82:	bf00      	nop
	}


}
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001c4 	.word	0x200001c4
 8000b90:	200001ca 	.word	0x200001ca
 8000b94:	40011000 	.word	0x40011000
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	20000504 	.word	0x20000504
 8000ba0:	200001c8 	.word	0x200001c8

08000ba4 <_do_temperature>:

// read temperature from d3231 sensor
void _do_temperature(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
	uint16_t buf;
	// show temperature
	if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
 8000baa:	2102      	movs	r1, #2
 8000bac:	4842      	ldr	r0, [pc, #264]	; (8000cb8 <_do_temperature+0x114>)
 8000bae:	f002 fef5 	bl	800399c <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d07a      	beq.n	8000cae <_do_temperature+0x10a>
	{
		//erase everything...
		clr_vfd();
 8000bb8:	f002 fb58 	bl	800326c <clr_vfd>

		uint8_t td3231 = *d3231_get_temp();
 8000bbc:	f7ff fafe 	bl	80001bc <d3231_get_temp>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	73fb      	strb	r3, [r7, #15]
		uint8_t td [6];

		td[0] = 'C';
 8000bc6:	2343      	movs	r3, #67	; 0x43
 8000bc8:	703b      	strb	r3, [r7, #0]
		td[1] = 176; //°
 8000bca:	23b0      	movs	r3, #176	; 0xb0
 8000bcc:	707b      	strb	r3, [r7, #1]
		uint8_t i = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	73bb      	strb	r3, [r7, #14]
		while (td3231)
 8000bd2:	e019      	b.n	8000c08 <_do_temperature+0x64>
		{
			td[i++] = td3231 %10;
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	73ba      	strb	r2, [r7, #14]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	7bfa      	ldrb	r2, [r7, #15]
 8000bde:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <_do_temperature+0x118>)
 8000be0:	fba3 1302 	umull	r1, r3, r3, r2
 8000be4:	08d9      	lsrs	r1, r3, #3
 8000be6:	460b      	mov	r3, r1
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	440b      	add	r3, r1
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	4403      	add	r3, r0
 8000bf8:	f803 2c10 	strb.w	r2, [r3, #-16]
			td3231 /= 10;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <_do_temperature+0x118>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	08db      	lsrs	r3, r3, #3
 8000c06:	73fb      	strb	r3, [r7, #15]
		while (td3231)
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1e2      	bne.n	8000bd4 <_do_temperature+0x30>
		}
		if (i>2)
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d90c      	bls.n	8000c2e <_do_temperature+0x8a>
			td[i] = td3231&(1<<7)?'-':'+';
 8000c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da01      	bge.n	8000c20 <_do_temperature+0x7c>
 8000c1c:	222d      	movs	r2, #45	; 0x2d
 8000c1e:	e000      	b.n	8000c22 <_do_temperature+0x7e>
 8000c20:	222b      	movs	r2, #43	; 0x2b
 8000c22:	7bbb      	ldrb	r3, [r7, #14]
 8000c24:	f107 0110 	add.w	r1, r7, #16
 8000c28:	440b      	add	r3, r1
 8000c2a:	f803 2c10 	strb.w	r2, [r3, #-16]

		for (int j = 0; j <= i; j++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	e024      	b.n	8000c7e <_do_temperature+0xda>
		{
			buf = get_char(td[j]);
 8000c34:	463a      	mov	r2, r7
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 f993 	bl	8002f68 <get_char>
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]

			vfd.arr2[j+1][0] = buf & 0xFF;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	b2d8      	uxtb	r0, r3
 8000c4e:	491c      	ldr	r1, [pc, #112]	; (8000cc0 <_do_temperature+0x11c>)
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	4602      	mov	r2, r0
 8000c5a:	701a      	strb	r2, [r3, #0]
			vfd.arr2[j+1][1] = (buf>>8)&0xFF;
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	b299      	uxth	r1, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	b2c8      	uxtb	r0, r1
 8000c68:	4915      	ldr	r1, [pc, #84]	; (8000cc0 <_do_temperature+0x11c>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	3301      	adds	r3, #1
 8000c74:	4602      	mov	r2, r0
 8000c76:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j <= i; j++)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	7bbb      	ldrb	r3, [r7, #14]
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	ddd6      	ble.n	8000c34 <_do_temperature+0x90>
		}

		vfd_update();
 8000c86:	f7ff fb83 	bl	8000390 <vfd_update>
		HAL_Delay(20);
 8000c8a:	2014      	movs	r0, #20
 8000c8c:	f002 fbd0 	bl	8003430 <HAL_Delay>
		while(HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)); // wait release
 8000c90:	bf00      	nop
 8000c92:	2102      	movs	r1, #2
 8000c94:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <_do_temperature+0x114>)
 8000c96:	f002 fe81 	bl	800399c <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1f8      	bne.n	8000c92 <_do_temperature+0xee>
		HAL_Delay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f002 fbc4 	bl	8003430 <HAL_Delay>
		show_clock = true;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <_do_temperature+0x120>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
	}
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40010c00 	.word	0x40010c00
 8000cbc:	cccccccd 	.word	0xcccccccd
 8000cc0:	20000634 	.word	0x20000634
 8000cc4:	20000009 	.word	0x20000009

08000cc8 <do_measurements>:

void do_measurements(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	_do_temperature();
 8000ccc:	f7ff ff6a 	bl	8000ba4 <_do_temperature>
	if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	480f      	ldr	r0, [pc, #60]	; (8000d10 <do_measurements+0x48>)
 8000cd4:	f002 fe62 	bl	800399c <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d015      	beq.n	8000d0a <do_measurements+0x42>
	{
		//erase everything...
		clr_vfd();
 8000cde:	f002 fac5 	bl	800326c <clr_vfd>

		vfd_update();
 8000ce2:	f7ff fb55 	bl	8000390 <vfd_update>
		HAL_Delay(20);
 8000ce6:	2014      	movs	r0, #20
 8000ce8:	f002 fba2 	bl	8003430 <HAL_Delay>
		while(HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)); // wait release
 8000cec:	bf00      	nop
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <do_measurements+0x48>)
 8000cf2:	f002 fe53 	bl	800399c <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f8      	bne.n	8000cee <do_measurements+0x26>
		HAL_Delay(1000);
 8000cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d00:	f002 fb96 	bl	8003430 <HAL_Delay>
		show_clock = true;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <do_measurements+0x4c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	20000009 	.word	0x20000009

08000d18 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d1e:	f002 fb25 	bl	800336c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d22:	f000 f85d 	bl	8000de0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d26:	f000 f91b 	bl	8000f60 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000d2a:	f000 f8b5 	bl	8000e98 <MX_I2C1_Init>
	MX_SPI2_Init();
 8000d2e:	f000 f8e1 	bl	8000ef4 <MX_SPI2_Init>
	MX_USB_DEVICE_Init();
 8000d32:	f00a f861 	bl	800adf8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, 1); // we have initialized USB, pull it up!
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3c:	4823      	ldr	r0, [pc, #140]	; (8000dcc <main+0xb4>)
 8000d3e:	f002 fe44 	bl	80039ca <HAL_GPIO_WritePin>
	d3231_init(&hi2c1);
 8000d42:	4823      	ldr	r0, [pc, #140]	; (8000dd0 <main+0xb8>)
 8000d44:	f7ff fa14 	bl	8000170 <d3231_init>
	init_microrl(); // we are ready for microrl!
 8000d48:	f001 fd92 	bl	8002870 <init_microrl>

	do_vfd_init(); // nice demo
 8000d4c:	f7ff fb64 	bl	8000418 <do_vfd_init>

	d3231_get_all();
 8000d50:	f7ff fa4c 	bl	80001ec <d3231_get_all>

	brightness = 0b111-d3231_get_A2M2(); // alarm2 minutes as EEPROM, default max
 8000d54:	f7ff fa62 	bl	800021c <d3231_get_A2M2>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <main+0xbc>)
 8000d62:	701a      	strb	r2, [r3, #0]

	uint8_t data;

	data = 0b10000000; // command 4
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	71fb      	strb	r3, [r7, #7]
	data |= 1<<3; // enable/disable display
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	data |= brightness&0b111; // set brightness
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <main+0xbc>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	b25a      	sxtb	r2, r3
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	4313      	orrs	r3, r2
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <main+0xc0>)
 8000d92:	f002 fe1a 	bl	80039ca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000d96:	1df9      	adds	r1, r7, #7
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	480f      	ldr	r0, [pc, #60]	; (8000ddc <main+0xc4>)
 8000da0:	f006 f84c 	bl	8006e3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <main+0xc0>)
 8000dac:	f002 fe0d 	bl	80039ca <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		do_microrl();
 8000db0:	f7ff fb18 	bl	80003e4 <do_microrl>
		do_brightness();
 8000db4:	f7ff fcc0 	bl	8000738 <do_brightness>
		do_clock();
 8000db8:	f7ff fd50 	bl	800085c <do_clock>
		do_text();
 8000dbc:	f7ff fdea 	bl	8000994 <do_text>
		do_leds();
 8000dc0:	f7ff fe72 	bl	8000aa8 <do_leds>
		do_measurements();
 8000dc4:	f7ff ff80 	bl	8000cc8 <do_measurements>
		do_microrl();
 8000dc8:	e7f2      	b.n	8000db0 <main+0x98>
 8000dca:	bf00      	nop
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	2000055c 	.word	0x2000055c
 8000dd4:	20000655 	.word	0x20000655
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	20000504 	.word	0x20000504

08000de0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	; 0x50
 8000de4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	2228      	movs	r2, #40	; 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f00a fcfc 	bl	800b7ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000e1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e20:	2301      	movs	r3, #1
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e24:	2302      	movs	r3, #2
 8000e26:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e2c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e2e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e32:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f005 fabd 	bl	80063b8 <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x68>
	{
		Error_Handler();
 8000e44:	f000 f922 	bl	800108c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	230f      	movs	r3, #15
 8000e4a:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e58:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	2102      	movs	r1, #2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 fd27 	bl	80068b8 <HAL_RCC_ClockConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000e70:	f000 f90c 	bl	800108c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e74:	2310      	movs	r3, #16
 8000e76:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f005 fea2 	bl	8006bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000e8a:	f000 f8ff 	bl	800108c <Error_Handler>
	}
}
 8000e8e:	bf00      	nop
 8000e90:	3750      	adds	r7, #80	; 0x50
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <MX_I2C1_Init+0x54>)
 8000ea0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_I2C1_Init+0x58>)
 8000ea6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ed6:	f002 fda9 	bl	8003a2c <HAL_I2C_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000ee0:	f000 f8d4 	bl	800108c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000055c 	.word	0x2000055c
 8000eec:	40005400 	.word	0x40005400
 8000ef0:	000186a0 	.word	0x000186a0

08000ef4 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000efa:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <MX_SPI2_Init+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f04:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f14:	2202      	movs	r2, #2
 8000f16:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f24:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f28:	2218      	movs	r2, #24
 8000f2a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f40:	220a      	movs	r2, #10
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_SPI2_Init+0x64>)
 8000f46:	f005 fef5 	bl	8006d34 <HAL_SPI_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8000f50:	f000 f89c 	bl	800108c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000504 	.word	0x20000504
 8000f5c:	40003800 	.word	0x40003800

08000f60 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b41      	ldr	r3, [pc, #260]	; (800107c <MX_GPIO_Init+0x11c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a40      	ldr	r2, [pc, #256]	; (800107c <MX_GPIO_Init+0x11c>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b3e      	ldr	r3, [pc, #248]	; (800107c <MX_GPIO_Init+0x11c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <MX_GPIO_Init+0x11c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a3a      	ldr	r2, [pc, #232]	; (800107c <MX_GPIO_Init+0x11c>)
 8000f92:	f043 0320 	orr.w	r3, r3, #32
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b38      	ldr	r3, [pc, #224]	; (800107c <MX_GPIO_Init+0x11c>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0320 	and.w	r3, r3, #32
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b35      	ldr	r3, [pc, #212]	; (800107c <MX_GPIO_Init+0x11c>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a34      	ldr	r2, [pc, #208]	; (800107c <MX_GPIO_Init+0x11c>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b32      	ldr	r3, [pc, #200]	; (800107c <MX_GPIO_Init+0x11c>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <MX_GPIO_Init+0x11c>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a2e      	ldr	r2, [pc, #184]	; (800107c <MX_GPIO_Init+0x11c>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <MX_GPIO_Init+0x11c>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fda:	4829      	ldr	r0, [pc, #164]	; (8001080 <MX_GPIO_Init+0x120>)
 8000fdc:	f002 fcf5 	bl	80039ca <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|PT6315_STB_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8000fe6:	4827      	ldr	r0, [pc, #156]	; (8001084 <MX_GPIO_Init+0x124>)
 8000fe8:	f002 fcef 	bl	80039ca <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff2:	4825      	ldr	r0, [pc, #148]	; (8001088 <MX_GPIO_Init+0x128>)
 8000ff4:	f002 fce9 	bl	80039ca <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4821      	ldr	r0, [pc, #132]	; (8001084 <MX_GPIO_Init+0x124>)
 8000ffe:	f002 fce4 	bl	80039ca <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001006:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2302      	movs	r3, #2
 8001012:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	4819      	ldr	r0, [pc, #100]	; (8001080 <MX_GPIO_Init+0x120>)
 800101c:	f002 fb3a 	bl	8003694 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB1_Pin PB2_Pin */
	GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 8001020:	2306      	movs	r3, #6
 8001022:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4619      	mov	r1, r3
 8001032:	4814      	ldr	r0, [pc, #80]	; (8001084 <MX_GPIO_Init+0x124>)
 8001034:	f002 fb2e 	bl	8003694 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI2_nRF_CSn_Pin HV_EN_Pin PT6315_STB_Pin */
	GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8001038:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 800103c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2302      	movs	r3, #2
 8001048:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_GPIO_Init+0x124>)
 8001052:	f002 fb1f 	bl	8003694 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PU_Pin */
	GPIO_InitStruct.Pin = USB_PU_Pin;
 8001056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2302      	movs	r3, #2
 8001066:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <MX_GPIO_Init+0x128>)
 8001070:	f002 fb10 	bl	8003694 <HAL_GPIO_Init>

}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	40011000 	.word	0x40011000
 8001084:	40010c00 	.word	0x40010c00
 8001088:	40010800 	.word	0x40010800

0800108c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>

08001096 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	5c8a      	ldrb	r2, [r1, r2]
 80010aa:	4413      	add	r3, r2
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b3f      	cmp	r3, #63	; 0x3f
 80010b4:	dd02      	ble.n	80010bc <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3b40      	subs	r3, #64	; 0x40
 80010ba:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <hist_is_space_for_new+0x1a>
		return true;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e01e      	b.n	8001124 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	429a      	cmp	r2, r3
 80010f0:	db0c      	blt.n	800110c <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4413      	add	r3, r2
 8001100:	3b01      	subs	r3, #1
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	da0c      	bge.n	8001122 <hist_is_space_for_new+0x56>
			return true;
 8001108:	2301      	movs	r3, #1
 800110a:	e00b      	b.n	8001124 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	3b01      	subs	r3, #1
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	da01      	bge.n	8001122 <hist_is_space_for_new+0x56>
			return true;
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <hist_is_space_for_new+0x58>
	}
	return false;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b3e      	cmp	r3, #62	; 0x3e
 800113e:	dc61      	bgt.n	8001204 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8001140:	e002      	b.n	8001148 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff ffa7 	bl	8001096 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff ffbe 	bl	80010cc <hist_is_space_for_new>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f5      	beq.n	8001142 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	5cd3      	ldrb	r3, [r2, r3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d105      	bne.n	800116e <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	b2d1      	uxtb	r1, r2
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	da0a      	bge.n	8001192 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	3301      	adds	r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	4618      	mov	r0, r3
 800118c:	f00a fb06 	bl	800b79c <memcpy>
 8001190:	e018      	b.n	80011c4 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800119a:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	3301      	adds	r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00a faf6 	bl	800b79c <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	18d1      	adds	r1, r2, r3
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	f00a faec 	bl	800b79c <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	b2d1      	uxtb	r1, r2
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	2b3f      	cmp	r3, #63	; 0x3f
 80011e4:	dd05      	ble.n	80011f2 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	2100      	movs	r1, #0
 80011fa:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	649a      	str	r2, [r3, #72]	; 0x48
 8001202:	e000      	b.n	8001206 <hist_save_line+0xd8>
		return;
 8001204:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8001222:	e010      	b.n	8001246 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	3301      	adds	r3, #1
 800122e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001230:	4413      	add	r3, r2
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	2b3f      	cmp	r3, #63	; 0x3f
 8001238:	dd02      	ble.n	8001240 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	3b40      	subs	r3, #64	; 0x40
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	3301      	adds	r3, #1
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1e8      	bne.n	8001224 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d176      	bne.n	8001346 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800125e:	429a      	cmp	r2, r3
 8001260:	f2c0 80d6 	blt.w	8001410 <hist_restore_line+0x204>
			int header = pThis->begin;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800126e:	e010      	b.n	8001292 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127c:	4413      	add	r3, r2
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	2b3f      	cmp	r3, #63	; 0x3f
 8001284:	dd02      	ble.n	800128c <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	3b40      	subs	r3, #64	; 0x40
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	3301      	adds	r3, #1
 8001290:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <hist_restore_line+0xa2>
 800129e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d1e0      	bne.n	8001270 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80aa 	beq.w	8001410 <hist_restore_line+0x204>
					pThis->cur++;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	4413      	add	r3, r2
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	4413      	add	r3, r2
 80012d4:	2b3f      	cmp	r3, #63	; 0x3f
 80012d6:	dc11      	bgt.n	80012fc <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 80012d8:	2265      	movs	r2, #101	; 0x65
 80012da:	2100      	movs	r1, #0
 80012dc:	68b8      	ldr	r0, [r7, #8]
 80012de:	f00a fa85 	bl	800b7ec <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	3301      	adds	r3, #1
 80012e8:	18d1      	adds	r1, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	4413      	add	r3, r2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f00a fa51 	bl	800b79c <memcpy>
 80012fa:	e01f      	b.n	800133c <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001302:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8001304:	2265      	movs	r2, #101	; 0x65
 8001306:	2100      	movs	r1, #0
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f00a fa6f 	bl	800b7ec <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	3301      	adds	r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4619      	mov	r1, r3
 800131a:	68b8      	ldr	r0, [r7, #8]
 800131c:	f00a fa3e 	bl	800b79c <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	18d0      	adds	r0, r2, r3
 8001326:	68f9      	ldr	r1, [r7, #12]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	461a      	mov	r2, r3
 8001338:	f00a fa30 	bl	800b79c <memcpy>
				}
				return pThis->ring_buf[header];
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	e066      	b.n	8001414 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134a:	2b00      	cmp	r3, #0
 800134c:	dd5e      	ble.n	800140c <hist_restore_line+0x200>
				pThis->cur--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001352:	1e5a      	subs	r2, r3, #1
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	61fb      	str	r3, [r7, #28]
			int j = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001362:	e010      	b.n	8001386 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b3f      	cmp	r3, #63	; 0x3f
 8001378:	dd02      	ble.n	8001380 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b40      	subs	r3, #64	; 0x40
 800137e:	61fb      	str	r3, [r7, #28]
				j++;
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	3301      	adds	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <hist_restore_line+0x194>
 8001392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139c:	429a      	cmp	r2, r3
 800139e:	d1e1      	bne.n	8001364 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	2b3f      	cmp	r3, #63	; 0x3f
 80013b0:	dc0c      	bgt.n	80013cc <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	3301      	adds	r3, #1
 80013b8:	18d1      	adds	r1, r2, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f00a f9e9 	bl	800b79c <memcpy>
 80013ca:	e01a      	b.n	8001402 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80013d2:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3301      	adds	r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4619      	mov	r1, r3
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f00a f9db 	bl	800b79c <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	18d0      	adds	r0, r2, r3
 80013ec:	68f9      	ldr	r1, [r7, #12]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	f00a f9cd 	bl	800b79c <memcpy>
			}
			return pThis->ring_buf[header];
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	e003      	b.n	8001414 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 800140c:	2300      	movs	r3, #0
 800140e:	e001      	b.n	8001414 <hist_restore_line+0x208>
		}
	}
	return -1;
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001414:	4618      	mov	r0, r3
 8001416:	3730      	adds	r7, #48	; 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
	int ind = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001430:	e002      	b.n	8001438 <split+0x1c>
			ind++;
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	3301      	adds	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4413      	add	r3, r2
 800143e:	3354      	adds	r3, #84	; 0x54
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <split+0x32>
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	429a      	cmp	r2, r3
 800144c:	dbf1      	blt.n	8001432 <split+0x16>
		}
		if (!(ind < limit)) return i;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	429a      	cmp	r2, r3
 8001454:	db01      	blt.n	800145a <split+0x3e>
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	e024      	b.n	80014a4 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1c58      	adds	r0, r3, #1
 8001466:	6178      	str	r0, [r7, #20]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	4403      	add	r3, r0
 800146e:	440a      	add	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b09      	cmp	r3, #9
 8001476:	dd05      	ble.n	8001484 <split+0x68>
			return -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
 800147c:	e012      	b.n	80014a4 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	3301      	adds	r3, #1
 8001482:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4413      	add	r3, r2
 800148a:	3354      	adds	r3, #84	; 0x54
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <split+0x7e>
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbf1      	blt.n	800147e <split+0x62>
		}
		if (!(ind < limit)) return i;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	429a      	cmp	r2, r3
 80014a0:	dbca      	blt.n	8001438 <split+0x1c>
 80014a2:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014c0:	4610      	mov	r0, r2
 80014c2:	4798      	blx	r3
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <terminal_backspace+0x1c>)
 80014dc:	4798      	blx	r3
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	0800b894 	.word	0x0800b894

080014ec <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80014fa:	4803      	ldr	r0, [pc, #12]	; (8001508 <terminal_newline+0x1c>)
 80014fc:	4798      	blx	r3
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	0800b89c 	.word	0x0800b89c

0800150c <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	2300      	movs	r3, #0
 800151c:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001528:	d235      	bcs.n	8001596 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 800152a:	e01a      	b.n	8001562 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <u16bit_to_str+0x9c>)
 8001530:	fba3 2301 	umull	r2, r3, r3, r1
 8001534:	08da      	lsrs	r2, r3, #3
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	1aca      	subs	r2, r1, r3
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	6179      	str	r1, [r7, #20]
 8001548:	3230      	adds	r2, #48	; 0x30
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	f107 0118 	add.w	r1, r7, #24
 8001550:	440b      	add	r3, r1
 8001552:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <u16bit_to_str+0x9c>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e1      	bne.n	800152c <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	e00f      	b.n	800158e <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	1c59      	adds	r1, r3, #1
 800157a:	6039      	str	r1, [r7, #0]
 800157c:	f107 0118 	add.w	r1, r7, #24
 8001580:	440a      	add	r2, r1
 8001582:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001586:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	3301      	adds	r3, #1
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	429a      	cmp	r2, r3
 8001594:	dbeb      	blt.n	800156e <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
	return buf;
 800159c:	683b      	ldr	r3, [r7, #0]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	cccccccd 	.word	0xcccccccd

080015ac <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <terminal_move_cursor+0x94>)
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	4611      	mov	r1, r2
 80015d0:	8019      	strh	r1, [r3, #0]
 80015d2:	3302      	adds	r3, #2
 80015d4:	0c12      	lsrs	r2, r2, #16
 80015d6:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	dd0f      	ble.n	80015fe <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	3302      	adds	r3, #2
 80015e6:	4619      	mov	r1, r3
 80015e8:	4610      	mov	r0, r2
 80015ea:	f7ff ff8f 	bl	800150c <u16bit_to_str>
 80015ee:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4914      	ldr	r1, [pc, #80]	; (8001644 <terminal_move_cursor+0x98>)
 80015f4:	461a      	mov	r2, r3
 80015f6:	460b      	mov	r3, r1
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	8013      	strh	r3, [r2, #0]
 80015fc:	e013      	b.n	8001626 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	da18      	bge.n	8001636 <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	425b      	negs	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	3302      	adds	r3, #2
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff ff7a 	bl	800150c <u16bit_to_str>
 8001618:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	490a      	ldr	r1, [pc, #40]	; (8001648 <terminal_move_cursor+0x9c>)
 800161e:	461a      	mov	r2, r3
 8001620:	460b      	mov	r3, r1
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800162c:	f107 020c 	add.w	r2, r7, #12
 8001630:	4610      	mov	r0, r2
 8001632:	4798      	blx	r3
 8001634:	e000      	b.n	8001638 <terminal_move_cursor+0x8c>
		return;
 8001636:	bf00      	nop
}
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	0800b8a0 	.word	0x0800b8a0
 8001644:	0800b8a4 	.word	0x0800b8a4
 8001648:	0800b8a8 	.word	0x0800b8a8

0800164c <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <terminal_reset_cursor+0x64>)
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	4611      	mov	r1, r2
 800165e:	8019      	strh	r1, [r3, #0]
 8001660:	3302      	adds	r3, #2
 8001662:	0c12      	lsrs	r2, r2, #16
 8001664:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	3302      	adds	r3, #2
 800166c:	4619      	mov	r1, r3
 800166e:	206c      	movs	r0, #108	; 0x6c
 8001670:	f7ff ff4c 	bl	800150c <u16bit_to_str>
 8001674:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <terminal_reset_cursor+0x68>)
 800167a:	6810      	ldr	r0, [r2, #0]
 800167c:	6018      	str	r0, [r3, #0]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3303      	adds	r3, #3
 8001682:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8001684:	69f9      	ldr	r1, [r7, #28]
 8001686:	2005      	movs	r0, #5
 8001688:	f7ff ff40 	bl	800150c <u16bit_to_str>
 800168c:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4909      	ldr	r1, [pc, #36]	; (80016b8 <terminal_reset_cursor+0x6c>)
 8001692:	461a      	mov	r2, r3
 8001694:	460b      	mov	r3, r1
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80016a0:	f107 020c 	add.w	r2, r7, #12
 80016a4:	4610      	mov	r0, r2
 80016a6:	4798      	blx	r3
}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	0800b8a0 	.word	0x0800b8a0
 80016b4:	0800b8ac 	.word	0x0800b8ac
 80016b8:	0800b8a4 	.word	0x0800b8a4

080016bc <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80016ce:	4816      	ldr	r0, [pc, #88]	; (8001728 <terminal_print_line+0x6c>)
 80016d0:	4798      	blx	r3

	char nch [] = {0,0};
 80016d2:	2300      	movs	r3, #0
 80016d4:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	e014      	b.n	8001706 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	4413      	add	r3, r2
 80016e2:	3354      	adds	r3, #84	; 0x54
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 80016e8:	7c3b      	ldrb	r3, [r7, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <terminal_print_line+0x36>
			nch[0] = ' ';
 80016ee:	2320      	movs	r3, #32
 80016f0:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80016f8:	f107 0210 	add.w	r2, r7, #16
 80016fc:	4610      	mov	r0, r2
 80016fe:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbe4      	blt.n	80016dc <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7ff ff9a 	bl	800164c <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff ff46 	bl	80015ac <terminal_move_cursor>
}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	0800b8b0 	.word	0x0800b8b0

0800172c <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3354      	adds	r3, #84	; 0x54
 800173a:	2265      	movs	r2, #101	; 0x65
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f00a f854 	bl	800b7ec <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3304      	adds	r3, #4
 8001748:	2240      	movs	r2, #64	; 0x40
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f00a f84d 	bl	800b7ec <memset>
	pThis->ring_hist.begin = 0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <microrl_init+0x78>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000

080017a8 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	1d18      	adds	r0, r3, #4
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3354      	adds	r3, #84	; 0x54
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff fcfb 	bl	800120c <hist_restore_line>
 8001816:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db1a      	blt.n	8001854 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	3354      	adds	r3, #84	; 0x54
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff04 	bl	800164c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800184a:	461a      	mov	r2, r3
 800184c:	2100      	movs	r1, #0
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ff34 	bl	80016bc <terminal_print_line>
	}
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	2b5b      	cmp	r3, #91	; 0x5b
 800186c:	d104      	bne.n	8001878 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
		return 0;
 8001874:	2300      	movs	r3, #0
 8001876:	e07b      	b.n	8001970 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d14f      	bne.n	8001920 <escape_process+0xc4>
		if (ch == 'A') {
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	2b41      	cmp	r3, #65	; 0x41
 8001884:	d105      	bne.n	8001892 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8001886:	2100      	movs	r1, #0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ffb7 	bl	80017fc <hist_search>
#endif
			return 1;
 800188e:	2301      	movs	r3, #1
 8001890:	e06e      	b.n	8001970 <escape_process+0x114>
		} else if (ch == 'B') {
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	2b42      	cmp	r3, #66	; 0x42
 8001896:	d105      	bne.n	80018a4 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8001898:	2101      	movs	r1, #1
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffae 	bl	80017fc <hist_search>
#endif
			return 1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e065      	b.n	8001970 <escape_process+0x114>
		} else if (ch == 'C') {
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	2b43      	cmp	r3, #67	; 0x43
 80018a8:	d114      	bne.n	80018d4 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80018b6:	429a      	cmp	r2, r3
 80018b8:	da0a      	bge.n	80018d0 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 80018ba:	2101      	movs	r1, #1
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fe75 	bl	80015ac <terminal_move_cursor>
				pThis->cursor++;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e04d      	b.n	8001970 <escape_process+0x114>
		} else if (ch == 'D') {
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	2b44      	cmp	r3, #68	; 0x44
 80018d8:	d112      	bne.n	8001900 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dd0b      	ble.n	80018fc <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fe5f 	bl	80015ac <terminal_move_cursor>
				pThis->cursor--;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80018f4:	1e5a      	subs	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e037      	b.n	8001970 <escape_process+0x114>
		} else if (ch == '7') {
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	2b37      	cmp	r3, #55	; 0x37
 8001904:	d104      	bne.n	8001910 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	701a      	strb	r2, [r3, #0]
			return 0;
 800190c:	2300      	movs	r3, #0
 800190e:	e02f      	b.n	8001970 <escape_process+0x114>
		} else if (ch == '8') {
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	2b38      	cmp	r3, #56	; 0x38
 8001914:	d12b      	bne.n	800196e <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2203      	movs	r2, #3
 800191a:	701a      	strb	r2, [r3, #0]
			return 0;
 800191c:	2300      	movs	r3, #0
 800191e:	e027      	b.n	8001970 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	2b7e      	cmp	r3, #126	; 0x7e
 8001924:	d123      	bne.n	800196e <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d108      	bne.n	8001940 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fe8c 	bl	800164c <terminal_reset_cursor>
			pThis->cursor = 0;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 800193c:	2301      	movs	r3, #1
 800193e:	e017      	b.n	8001970 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d112      	bne.n	800196e <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	4619      	mov	r1, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fe27 	bl	80015ac <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	dc60      	bgt.n	8001a54 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800199e:	4619      	mov	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	440b      	add	r3, r1
 80019a4:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3354      	adds	r3, #84	; 0x54
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 80019b0:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019be:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 80019c0:	461a      	mov	r2, r3
 80019c2:	f009 fef9 	bl	800b7b8 <memmove>
		for (i = 0; i < len; i++) {
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e025      	b.n	8001a18 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	441a      	add	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	440b      	add	r3, r1
 80019dc:	7811      	ldrb	r1, [r2, #0]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	460a      	mov	r2, r1
 80019e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	4413      	add	r3, r2
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	d109      	bne.n	8001a12 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	4413      	add	r3, r2
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbd5      	blt.n	80019cc <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	441a      	add	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	441a      	add	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <microrl_insert_text+0xde>
	}
	return false;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dd31      	ble.n	8001ad4 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fd2b 	bl	80014cc <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a82:	3b01      	subs	r3, #1
 8001a84:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3354      	adds	r3, #84	; 0x54
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 8001a90:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f009 fe88 	bl	800b7b8 <memmove>
		pThis->cursor--;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001aae:	1e5a      	subs	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7fe fb38 	bl	8000160 <strlen>
 8001af0:	4603      	mov	r3, r0
 8001af2:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e019      	b.n	8001b2e <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fb2b 	bl	8000160 <strlen>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d20a      	bcs.n	8001b28 <common_len+0x4c>
			shortest = arr[i];
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7fe fb1e 	bl	8000160 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1de      	bne.n	8001afa <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e01f      	b.n	8001b82 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	e012      	b.n	8001b6e <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	440b      	add	r3, r1
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	440b      	add	r3, r1
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <common_len+0x8c>
				return i;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	e011      	b.n	8001b8c <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e5      	bne.n	8001b48 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	dbdb      	blt.n	8001b42 <common_len+0x66>

	return i;
 8001b8a:	697b      	ldr	r3, [r7, #20]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001b94:	b5b0      	push	{r4, r5, r7, lr}
 8001b96:	b090      	sub	sp, #64	; 0x40
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 809c 	beq.w	8001ce0 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bae:	f107 0208 	add.w	r2, r7, #8
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff fc31 	bl	800141c <split>
 8001bba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a42      	ldr	r2, [pc, #264]	; (8001ce8 <microrl_get_complite+0x154>)
 8001be0:	f843 2c38 	str.w	r2, [r3, #-56]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001bea:	f107 0208 	add.w	r2, r7, #8
 8001bee:	4611      	mov	r1, r2
 8001bf0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001bf2:	4798      	blx	r3
 8001bf4:	6338      	str	r0, [r7, #48]	; 0x30
	if (compl_token[0] != NULL) {
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d071      	beq.n	8001ce2 <microrl_get_complite+0x14e>
		int i = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
		int len;

		if (compl_token[1] == NULL) {
 8001c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c04:	3304      	adds	r3, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d107      	bne.n	8001c1c <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe faa5 	bl	8000160 <strlen>
 8001c16:	4603      	mov	r3, r0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
 8001c1a:	e026      	b.n	8001c6a <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c1e:	f7ff ff5d 	bl	8001adc <common_len>
 8001c22:	6378      	str	r0, [r7, #52]	; 0x34
			terminal_newline (pThis);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff fc61 	bl	80014ec <terminal_newline>
			while (compl_token [i] != NULL) {
 8001c2a:	e011      	b.n	8001c50 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c38:	440a      	add	r2, r1
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4798      	blx	r3
				pThis->print (" ");
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001c46:	4829      	ldr	r0, [pc, #164]	; (8001cec <microrl_get_complite+0x158>)
 8001c48:	4798      	blx	r3
				i++;
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
			while (compl_token [i] != NULL) {
 8001c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c56:	4413      	add	r3, r2
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1e6      	bne.n	8001c2c <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fc44 	bl	80014ec <terminal_newline>
			print_prompt (pThis);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fc22 	bl	80014ae <print_prompt>
		}
		
		if (len) {
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02b      	beq.n	8001cc8 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c72:	681c      	ldr	r4, [r3, #0]
 8001c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c76:	3b01      	subs	r3, #1
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c7e:	4413      	add	r3, r2
 8001c80:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fa6b 	bl	8000160 <strlen>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001c8e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c92:	3b01      	subs	r3, #1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fa5d 	bl	8000160 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001caa:	461a      	mov	r2, r3
 8001cac:	4629      	mov	r1, r5
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fe62 	bl	8001978 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d104      	bne.n	8001cc8 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	490a      	ldr	r1, [pc, #40]	; (8001cec <microrl_get_complite+0x158>)
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fe58 	bl	8001978 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fcbf 	bl	800164c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff fcef 	bl	80016bc <terminal_print_line>
 8001cde:	e000      	b.n	8001ce2 <microrl_get_complite+0x14e>
		return;
 8001ce0:	bf00      	nop
	} 
}
 8001ce2:	3740      	adds	r7, #64	; 0x40
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce8:	0800b8b4 	.word	0x0800b8b4
 8001cec:	0800b8b8 	.word	0x0800b8b8

08001cf0 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08e      	sub	sp, #56	; 0x38
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fbf7 	bl	80014ec <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	dd0a      	ble.n	8001d1e <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1d18      	adds	r0, r3, #4
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff fa08 	bl	800112e <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d24:	f107 020c 	add.w	r2, r7, #12
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fb76 	bl	800141c <split>
 8001d30:	6378      	str	r0, [r7, #52]	; 0x34
	if (status == -1){
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d109      	bne.n	8001d4e <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001d40:	4817      	ldr	r0, [pc, #92]	; (8001da0 <new_line_handler+0xb0>)
 8001d42:	4798      	blx	r3
		pThis->print (ENDL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001d4a:	4816      	ldr	r0, [pc, #88]	; (8001da4 <new_line_handler+0xb4>)
 8001d4c:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	dd0c      	ble.n	8001d6e <new_line_handler+0x7e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d64:	f107 020c 	add.w	r2, r7, #12
 8001d68:	4611      	mov	r1, r2
 8001d6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d6c:	4798      	blx	r3
	print_prompt (pThis);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fb9d 	bl	80014ae <print_prompt>
	pThis->cmdlen = 0;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3354      	adds	r3, #84	; 0x54
 8001d88:	2265      	movs	r2, #101	; 0x65
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f009 fd2d 	bl	800b7ec <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001d98:	bf00      	nop
 8001d9a:	3738      	adds	r7, #56	; 0x38
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	0800b8bc 	.word	0x0800b8bc
 8001da4:	0800b89c 	.word	0x0800b89c

08001da8 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fd4b 	bl	800185c <escape_process>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 81e3 	beq.w	8002194 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001dd4:	e1de      	b.n	8002194 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	2b7e      	cmp	r3, #126	; 0x7e
 8001ddc:	f200 81af 	bhi.w	800213e <microrl_insert_char+0x396>
 8001de0:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <microrl_insert_char+0x40>)
 8001de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de6:	bf00      	nop
 8001de8:	0800207b 	.word	0x0800207b
 8001dec:	080020b3 	.word	0x080020b3
 8001df0:	0800212b 	.word	0x0800212b
 8001df4:	0800213f 	.word	0x0800213f
 8001df8:	08002057 	.word	0x08002057
 8001dfc:	0800208b 	.word	0x0800208b
 8001e00:	0800213f 	.word	0x0800213f
 8001e04:	080020eb 	.word	0x080020eb
 8001e08:	0800200d 	.word	0x0800200d
 8001e0c:	08001fe5 	.word	0x08001fe5
 8001e10:	0800203f 	.word	0x0800203f
 8001e14:	0800213f 	.word	0x0800213f
 8001e18:	08001fe5 	.word	0x08001fe5
 8001e1c:	080020e1 	.word	0x080020e1
 8001e20:	0800213f 	.word	0x0800213f
 8001e24:	080020d7 	.word	0x080020d7
 8001e28:	0800213f 	.word	0x0800213f
 8001e2c:	08002107 	.word	0x08002107
 8001e30:	0800213f 	.word	0x0800213f
 8001e34:	0800213f 	.word	0x0800213f
 8001e38:	08002023 	.word	0x08002023
 8001e3c:	0800213f 	.word	0x0800213f
 8001e40:	0800213f 	.word	0x0800213f
 8001e44:	0800213f 	.word	0x0800213f
 8001e48:	0800213f 	.word	0x0800213f
 8001e4c:	0800213f 	.word	0x0800213f
 8001e50:	08002015 	.word	0x08002015
 8001e54:	0800213f 	.word	0x0800213f
 8001e58:	0800213f 	.word	0x0800213f
 8001e5c:	0800213f 	.word	0x0800213f
 8001e60:	0800213f 	.word	0x0800213f
 8001e64:	0800213f 	.word	0x0800213f
 8001e68:	0800213f 	.word	0x0800213f
 8001e6c:	0800213f 	.word	0x0800213f
 8001e70:	0800213f 	.word	0x0800213f
 8001e74:	0800213f 	.word	0x0800213f
 8001e78:	0800213f 	.word	0x0800213f
 8001e7c:	0800213f 	.word	0x0800213f
 8001e80:	0800213f 	.word	0x0800213f
 8001e84:	0800213f 	.word	0x0800213f
 8001e88:	0800213f 	.word	0x0800213f
 8001e8c:	0800213f 	.word	0x0800213f
 8001e90:	0800213f 	.word	0x0800213f
 8001e94:	0800213f 	.word	0x0800213f
 8001e98:	0800213f 	.word	0x0800213f
 8001e9c:	0800213f 	.word	0x0800213f
 8001ea0:	0800213f 	.word	0x0800213f
 8001ea4:	0800213f 	.word	0x0800213f
 8001ea8:	0800213f 	.word	0x0800213f
 8001eac:	0800213f 	.word	0x0800213f
 8001eb0:	0800213f 	.word	0x0800213f
 8001eb4:	0800213f 	.word	0x0800213f
 8001eb8:	0800213f 	.word	0x0800213f
 8001ebc:	0800213f 	.word	0x0800213f
 8001ec0:	0800213f 	.word	0x0800213f
 8001ec4:	0800213f 	.word	0x0800213f
 8001ec8:	0800213f 	.word	0x0800213f
 8001ecc:	0800213f 	.word	0x0800213f
 8001ed0:	0800213f 	.word	0x0800213f
 8001ed4:	0800213f 	.word	0x0800213f
 8001ed8:	0800213f 	.word	0x0800213f
 8001edc:	0800213f 	.word	0x0800213f
 8001ee0:	0800213f 	.word	0x0800213f
 8001ee4:	0800213f 	.word	0x0800213f
 8001ee8:	0800213f 	.word	0x0800213f
 8001eec:	0800213f 	.word	0x0800213f
 8001ef0:	0800213f 	.word	0x0800213f
 8001ef4:	0800213f 	.word	0x0800213f
 8001ef8:	0800213f 	.word	0x0800213f
 8001efc:	0800213f 	.word	0x0800213f
 8001f00:	0800213f 	.word	0x0800213f
 8001f04:	0800213f 	.word	0x0800213f
 8001f08:	0800213f 	.word	0x0800213f
 8001f0c:	0800213f 	.word	0x0800213f
 8001f10:	0800213f 	.word	0x0800213f
 8001f14:	0800213f 	.word	0x0800213f
 8001f18:	0800213f 	.word	0x0800213f
 8001f1c:	0800213f 	.word	0x0800213f
 8001f20:	0800213f 	.word	0x0800213f
 8001f24:	0800213f 	.word	0x0800213f
 8001f28:	0800213f 	.word	0x0800213f
 8001f2c:	0800213f 	.word	0x0800213f
 8001f30:	0800213f 	.word	0x0800213f
 8001f34:	0800213f 	.word	0x0800213f
 8001f38:	0800213f 	.word	0x0800213f
 8001f3c:	0800213f 	.word	0x0800213f
 8001f40:	0800213f 	.word	0x0800213f
 8001f44:	0800213f 	.word	0x0800213f
 8001f48:	0800213f 	.word	0x0800213f
 8001f4c:	0800213f 	.word	0x0800213f
 8001f50:	0800213f 	.word	0x0800213f
 8001f54:	0800213f 	.word	0x0800213f
 8001f58:	0800213f 	.word	0x0800213f
 8001f5c:	0800213f 	.word	0x0800213f
 8001f60:	0800213f 	.word	0x0800213f
 8001f64:	0800213f 	.word	0x0800213f
 8001f68:	0800213f 	.word	0x0800213f
 8001f6c:	0800213f 	.word	0x0800213f
 8001f70:	0800213f 	.word	0x0800213f
 8001f74:	0800213f 	.word	0x0800213f
 8001f78:	0800213f 	.word	0x0800213f
 8001f7c:	0800213f 	.word	0x0800213f
 8001f80:	0800213f 	.word	0x0800213f
 8001f84:	0800213f 	.word	0x0800213f
 8001f88:	0800213f 	.word	0x0800213f
 8001f8c:	0800213f 	.word	0x0800213f
 8001f90:	0800213f 	.word	0x0800213f
 8001f94:	0800213f 	.word	0x0800213f
 8001f98:	0800213f 	.word	0x0800213f
 8001f9c:	0800213f 	.word	0x0800213f
 8001fa0:	0800213f 	.word	0x0800213f
 8001fa4:	0800213f 	.word	0x0800213f
 8001fa8:	0800213f 	.word	0x0800213f
 8001fac:	0800213f 	.word	0x0800213f
 8001fb0:	0800213f 	.word	0x0800213f
 8001fb4:	0800213f 	.word	0x0800213f
 8001fb8:	0800213f 	.word	0x0800213f
 8001fbc:	0800213f 	.word	0x0800213f
 8001fc0:	0800213f 	.word	0x0800213f
 8001fc4:	0800213f 	.word	0x0800213f
 8001fc8:	0800213f 	.word	0x0800213f
 8001fcc:	0800213f 	.word	0x0800213f
 8001fd0:	0800213f 	.word	0x0800213f
 8001fd4:	0800213f 	.word	0x0800213f
 8001fd8:	0800213f 	.word	0x0800213f
 8001fdc:	0800213f 	.word	0x0800213f
 8001fe0:	080020eb 	.word	0x080020eb
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	789b      	ldrb	r3, [r3, #2]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b0d      	cmp	r3, #13
 8001fee:	d101      	bne.n	8001ff4 <microrl_insert_char+0x24c>
 8001ff0:	230a      	movs	r3, #10
 8001ff2:	e000      	b.n	8001ff6 <microrl_insert_char+0x24e>
 8001ff4:	230d      	movs	r3, #13
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	f000 80c1 	beq.w	800217e <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fe73 	bl	8001cf0 <new_line_handler>
				break;
 800200a:	e0c3      	b.n	8002194 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff fdc1 	bl	8001b94 <microrl_get_complite>
			break;
 8002012:	e0bf      	b.n	8002194 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	705a      	strb	r2, [r3, #1]
			break;
 800201a:	e0bb      	b.n	8002194 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff fd1e 	bl	8001a5e <microrl_backspace>
					while (pThis->cursor > 0) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002028:	2b00      	cmp	r3, #0
 800202a:	dcf7      	bgt.n	800201c <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002032:	461a      	mov	r2, r3
 8002034:	2100      	movs	r1, #0
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fb40 	bl	80016bc <terminal_print_line>
			break;
 800203c:	e0aa      	b.n	8002194 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002044:	4855      	ldr	r0, [pc, #340]	; (800219c <microrl_insert_char+0x3f4>)
 8002046:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 8002054:	e09e      	b.n	8002194 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff faa0 	bl	80015ac <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002078:	e08c      	b.n	8002194 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fae6 	bl	800164c <terminal_reset_cursor>
				pThis->cursor = 0;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8002088:	e084      	b.n	8002194 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002096:	429a      	cmp	r2, r3
 8002098:	da73      	bge.n	8002182 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 800209a:	2101      	movs	r1, #1
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff fa85 	bl	80015ac <terminal_move_cursor>
				pThis->cursor++;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80020b0:	e067      	b.n	8002182 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d064      	beq.n	8002186 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fa73 	bl	80015ac <terminal_move_cursor>
				pThis->cursor--;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80020d4:	e057      	b.n	8002186 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 80020d6:	2100      	movs	r1, #0
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fb8f 	bl	80017fc <hist_search>
			break;
 80020de:	e059      	b.n	8002194 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 80020e0:	2101      	movs	r1, #1
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fb8a 	bl	80017fc <hist_search>
			break;
 80020e8:	e054      	b.n	8002194 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fcb7 	bl	8001a5e <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020fc:	461a      	mov	r2, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fadc 	bl	80016bc <terminal_print_line>
			break;
 8002104:	e046      	b.n	8002194 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff f9f0 	bl	80014ec <terminal_newline>
				print_prompt (pThis);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff f9ce 	bl	80014ae <print_prompt>
				terminal_reset_cursor (pThis);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fa9a 	bl	800164c <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800211e:	461a      	mov	r2, r3
 8002120:	2100      	movs	r1, #0
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff faca 	bl	80016bc <terminal_print_line>
			break;
 8002128:	e034      	b.n	8002194 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d02a      	beq.n	800218a <microrl_insert_char+0x3e2>
				pThis->sigint();
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800213a:	4798      	blx	r3
			break;
 800213c:	e025      	b.n	800218a <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b20      	cmp	r3, #32
 8002142:	d104      	bne.n	800214e <microrl_insert_char+0x3a6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01f      	beq.n	800218e <microrl_insert_char+0x3e6>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b1f      	cmp	r3, #31
 8002152:	dd1c      	ble.n	800218e <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8002154:	463b      	mov	r3, r7
 8002156:	2201      	movs	r2, #1
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fc0c 	bl	8001978 <microrl_insert_text>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d015      	beq.n	8002192 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800216c:	1e59      	subs	r1, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002174:	461a      	mov	r2, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff faa0 	bl	80016bc <terminal_print_line>
			break;
 800217c:	e009      	b.n	8002192 <microrl_insert_char+0x3ea>
					break;
 800217e:	bf00      	nop
 8002180:	e008      	b.n	8002194 <microrl_insert_char+0x3ec>
			break;
 8002182:	bf00      	nop
 8002184:	e006      	b.n	8002194 <microrl_insert_char+0x3ec>
			break;
 8002186:	bf00      	nop
 8002188:	e004      	b.n	8002194 <microrl_insert_char+0x3ec>
			break;
 800218a:	bf00      	nop
 800218c:	e002      	b.n	8002194 <microrl_insert_char+0x3ec>
	}
 800218e:	bf00      	nop
 8002190:	e000      	b.n	8002194 <microrl_insert_char+0x3ec>
			break;
 8002192:	bf00      	nop
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	0800b8b0 	.word	0x0800b8b0

080021a0 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <microrl_print_char+0x20>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	79fa      	ldrb	r2, [r7, #7]
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fdf8 	bl	8001da8 <microrl_insert_char>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000004 	.word	0x20000004

080021c4 <print>:

void print (const char * str)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <print+0x70>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	f083 0301 	eor.w	r3, r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <print+0x1e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b1b      	cmp	r3, #27
 80021e0:	d024      	beq.n	800222c <print+0x68>
		return;
	uint16_t len = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 80021e6:	89fb      	ldrh	r3, [r7, #14]
 80021e8:	3301      	adds	r3, #1
 80021ea:	81fb      	strh	r3, [r7, #14]
 80021ec:	89fb      	ldrh	r3, [r7, #14]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f6      	bne.n	80021e6 <print+0x22>
	uint32_t timeout = HAL_GetTick();
 80021f8:	f001 f910 	bl	800341c <HAL_GetTick>
 80021fc:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80021fe:	e006      	b.n	800220e <print+0x4a>
		if (HAL_GetTick() - timeout >= 5)
 8002200:	f001 f90c 	bl	800341c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b04      	cmp	r3, #4
 800220c:	d807      	bhi.n	800221e <print+0x5a>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <print+0x74>)
 8002210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002214:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f1      	bne.n	8002200 <print+0x3c>
 800221c:	e000      	b.n	8002220 <print+0x5c>
			break;
 800221e:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8002220:	89fb      	ldrh	r3, [r7, #14]
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f008 feb7 	bl	800af98 <CDC_Transmit_FS>
 800222a:	e000      	b.n	800222e <print+0x6a>
		return;
 800222c:	bf00      	nop
}
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000008 	.word	0x20000008
 8002238:	200007a4 	.word	0x200007a4

0800223c <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e010      	b.n	800226e <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <find_color_by_name+0x44>)
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	440b      	add	r3, r1
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	79fa      	ldrb	r2, [r7, #7]
 8002260:	429a      	cmp	r2, r3
 8002262:	d101      	bne.n	8002268 <find_color_by_name+0x2c>
		{
			return i;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	e006      	b.n	8002276 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3301      	adds	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b10      	cmp	r3, #16
 8002272:	d9eb      	bls.n	800224c <find_color_by_name+0x10>
		}
	}
	return 0;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	0800bd84 	.word	0x0800bd84

08002284 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ffd2 	bl	800223c <find_color_by_name>
 8002298:	4602      	mov	r2, r0
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <print_color+0x44>)
 80022a6:	4413      	add	r3, r2
 80022a8:	3301      	adds	r3, #1
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff8a 	bl	80021c4 <print>
	print(str);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff87 	bl	80021c4 <print>
	print(COLOR_NC);
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <print_color+0x48>)
 80022b8:	f7ff ff84 	bl	80021c4 <print>
	return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	0800bd84 	.word	0x0800bd84
 80022cc:	0800b8d4 	.word	0x0800b8d4

080022d0 <str_length>:

int str_length(const char * str)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80022dc:	e002      	b.n	80022e4 <str_length+0x14>
		i++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f6      	bne.n	80022de <str_length+0xe>
	return i;
 80022f0:	68fb      	ldr	r3, [r7, #12]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <print_help>:


int print_help(int argc, const char * const * argv)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
	print(_VER);
 8002306:	4862      	ldr	r0, [pc, #392]	; (8002490 <print_help+0x194>)
 8002308:	f7ff ff5c 	bl	80021c4 <print>
	print(ENDL);
 800230c:	4861      	ldr	r0, [pc, #388]	; (8002494 <print_help+0x198>)
 800230e:	f7ff ff59 	bl	80021c4 <print>
	print ("Use ");
 8002312:	4861      	ldr	r0, [pc, #388]	; (8002498 <print_help+0x19c>)
 8002314:	f7ff ff56 	bl	80021c4 <print>
	print_color("TAB", C_GREEN);
 8002318:	2105      	movs	r1, #5
 800231a:	4860      	ldr	r0, [pc, #384]	; (800249c <print_help+0x1a0>)
 800231c:	f7ff ffb2 	bl	8002284 <print_color>
	print(" key for completion");
 8002320:	485f      	ldr	r0, [pc, #380]	; (80024a0 <print_help+0x1a4>)
 8002322:	f7ff ff4f 	bl	80021c4 <print>
	print (ENDL);
 8002326:	485b      	ldr	r0, [pc, #364]	; (8002494 <print_help+0x198>)
 8002328:	f7ff ff4c 	bl	80021c4 <print>
	print ("Available commands:");
 800232c:	485d      	ldr	r0, [pc, #372]	; (80024a4 <print_help+0x1a8>)
 800232e:	f7ff ff49 	bl	80021c4 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e09e      	b.n	8002476 <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8002338:	4a5b      	ldr	r2, [pc, #364]	; (80024a8 <print_help+0x1ac>)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234a:	d11f      	bne.n	800238c <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3b01      	subs	r3, #1
 8002350:	4a55      	ldr	r2, [pc, #340]	; (80024a8 <print_help+0x1ac>)
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d004      	beq.n	800236c <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 8002362:	210c      	movs	r1, #12
 8002364:	4851      	ldr	r0, [pc, #324]	; (80024ac <print_help+0x1b0>)
 8002366:	f7ff ff8d 	bl	8002284 <print_color>
 800236a:	e003      	b.n	8002374 <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 800236c:	210c      	movs	r1, #12
 800236e:	4850      	ldr	r0, [pc, #320]	; (80024b0 <print_help+0x1b4>)
 8002370:	f7ff ff88 	bl	8002284 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	222c      	movs	r2, #44	; 0x2c
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	4a4a      	ldr	r2, [pc, #296]	; (80024a8 <print_help+0x1ac>)
 800237e:	4413      	add	r3, r2
 8002380:	3304      	adds	r3, #4
 8002382:	210b      	movs	r1, #11
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff7d 	bl	8002284 <print_color>
 800238a:	e071      	b.n	8002470 <print_help+0x174>
		}
		else
		{
			print(ENDL);
 800238c:	4841      	ldr	r0, [pc, #260]	; (8002494 <print_help+0x198>)
 800238e:	f7ff ff19 	bl	80021c4 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002392:	f06f 0303 	mvn.w	r3, #3
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	e005      	b.n	80023a6 <print_help+0xaa>
				print(" ");
 800239a:	4846      	ldr	r0, [pc, #280]	; (80024b4 <print_help+0x1b8>)
 800239c:	f7ff ff12 	bl	80021c4 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	3301      	adds	r3, #1
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4a40      	ldr	r2, [pc, #256]	; (80024a8 <print_help+0x1ac>)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	dbef      	blt.n	800239a <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	222c      	movs	r2, #44	; 0x2c
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	4a39      	ldr	r2, [pc, #228]	; (80024a8 <print_help+0x1ac>)
 80023c4:	4413      	add	r3, r2
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	4937      	ldr	r1, [pc, #220]	; (80024a8 <print_help+0x1ac>)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	202c      	movs	r0, #44	; 0x2c
 80023ce:	fb00 f303 	mul.w	r3, r0, r3
 80023d2:	440b      	add	r3, r1
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4938      	ldr	r1, [pc, #224]	; (80024b8 <print_help+0x1bc>)
 80023d8:	5ccb      	ldrb	r3, [r1, r3]
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f7ff ff51 	bl	8002284 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	e005      	b.n	80023f4 <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 80023e8:	4832      	ldr	r0, [pc, #200]	; (80024b4 <print_help+0x1b8>)
 80023ea:	f7ff feeb 	bl	80021c4 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3301      	adds	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	4a2c      	ldr	r2, [pc, #176]	; (80024a8 <print_help+0x1ac>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002402:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	222c      	movs	r2, #44	; 0x2c
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <print_help+0x1ac>)
 8002410:	4413      	add	r3, r2
 8002412:	3304      	adds	r3, #4
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff5b 	bl	80022d0 <str_length>
 800241a:	4603      	mov	r3, r0
 800241c:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	429a      	cmp	r2, r3
 8002422:	dbe1      	blt.n	80023e8 <print_help+0xec>
			switch (microrl_actions[i].level){
 8002424:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <print_help+0x1ac>)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <print_help+0x140>
 8002436:	2b01      	cmp	r3, #1
 8002438:	d004      	beq.n	8002444 <print_help+0x148>
 800243a:	e007      	b.n	800244c <print_help+0x150>
			case 0:
				print ("-");
 800243c:	481f      	ldr	r0, [pc, #124]	; (80024bc <print_help+0x1c0>)
 800243e:	f7ff fec1 	bl	80021c4 <print>
				break;
 8002442:	e007      	b.n	8002454 <print_help+0x158>
			case 1:
				print ("^");
 8002444:	481e      	ldr	r0, [pc, #120]	; (80024c0 <print_help+0x1c4>)
 8002446:	f7ff febd 	bl	80021c4 <print>
				break;
 800244a:	e003      	b.n	8002454 <print_help+0x158>
			default:
				print ("#");
 800244c:	481d      	ldr	r0, [pc, #116]	; (80024c4 <print_help+0x1c8>)
 800244e:	f7ff feb9 	bl	80021c4 <print>
				break;
 8002452:	bf00      	nop
			}
			print (" ");
 8002454:	4817      	ldr	r0, [pc, #92]	; (80024b4 <print_help+0x1b8>)
 8002456:	f7ff feb5 	bl	80021c4 <print>
			print (microrl_actions[i].help_msg);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	222c      	movs	r2, #44	; 0x2c
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	3308      	adds	r3, #8
 8002464:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <print_help+0x1ac>)
 8002466:	4413      	add	r3, r2
 8002468:	3305      	adds	r3, #5
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff feaa 	bl	80021c4 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3301      	adds	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b12      	cmp	r3, #18
 800247a:	f67f af5d 	bls.w	8002338 <print_help+0x3c>
		}
	}
	print(ENDL);
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <print_help+0x198>)
 8002480:	f7ff fea0 	bl	80021c4 <print>
	return 0;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd90      	pop	{r4, r7, pc}
 800248e:	bf00      	nop
 8002490:	0800b8dc 	.word	0x0800b8dc
 8002494:	0800b8ec 	.word	0x0800b8ec
 8002498:	0800b8f0 	.word	0x0800b8f0
 800249c:	0800b8f8 	.word	0x0800b8f8
 80024a0:	0800b8fc 	.word	0x0800b8fc
 80024a4:	0800b910 	.word	0x0800b910
 80024a8:	0800ba40 	.word	0x0800ba40
 80024ac:	0800b924 	.word	0x0800b924
 80024b0:	0800b92c 	.word	0x0800b92c
 80024b4:	0800b930 	.word	0x0800b930
 80024b8:	0800be40 	.word	0x0800be40
 80024bc:	0800b934 	.word	0x0800b934
 80024c0:	0800b938 	.word	0x0800b938
 80024c4:	0800b93c 	.word	0x0800b93c

080024c8 <execute>:



int execute (int argc, const char * const * argv)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	int (*func)   (int argc, const char * const * argv ) = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 80024de:	2300      	movs	r3, #0
 80024e0:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e056      	b.n	8002596 <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	e045      	b.n	800257a <execute+0xb2>
		{
			tokens_found = false;
 80024ee:	2300      	movs	r3, #0
 80024f0:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 80024f2:	4a55      	ldr	r2, [pc, #340]	; (8002648 <execute+0x180>)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d001      	beq.n	800250e <execute+0x46>
				synonym_level = current_level; // save the synonym level
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d003      	beq.n	800251e <execute+0x56>
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	429a      	cmp	r2, r3
 800251c:	db31      	blt.n	8002582 <execute+0xba>
				break;
			if (current_level == i)
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	429a      	cmp	r2, r3
 8002524:	d101      	bne.n	800252a <execute+0x62>
				last_main_synonym = n;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4942      	ldr	r1, [pc, #264]	; (8002648 <execute+0x180>)
 800253e:	440b      	add	r3, r1
 8002540:	3304      	adds	r3, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4610      	mov	r0, r2
 8002546:	f7fd fe01 	bl	800014c <strcmp>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d111      	bne.n	8002574 <execute+0xac>
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	429a      	cmp	r2, r3
 8002556:	d10d      	bne.n	8002574 <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 8002558:	2301      	movs	r3, #1
 800255a:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	623a      	str	r2, [r7, #32]
 8002562:	4a39      	ldr	r2, [pc, #228]	; (8002648 <execute+0x180>)
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3328      	adds	r3, #40	; 0x28
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8002572:	e007      	b.n	8002584 <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	3301      	adds	r3, #1
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b12      	cmp	r3, #18
 800257e:	d9b6      	bls.n	80024ee <execute+0x26>
 8002580:	e000      	b.n	8002584 <execute+0xbc>
				break;
 8002582:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8002584:	7efb      	ldrb	r3, [r7, #27]
 8002586:	f083 0301 	eor.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <execute+0xd8>
	for (int i = 0; i < argc; i++)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3301      	adds	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	dba4      	blt.n	80024e8 <execute+0x20>
 800259e:	e000      	b.n	80025a2 <execute+0xda>
			break;
 80025a0:	bf00      	nop
	}

	if (func != NULL)
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <execute+0xec>
	{
		return func(argc, argv); // function found
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	6839      	ldr	r1, [r7, #0]
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
 80025b0:	4603      	mov	r3, r0
 80025b2:	e045      	b.n	8002640 <execute+0x178>
	} else if (tokens_found)
 80025b4:	7efb      	ldrb	r3, [r7, #27]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d021      	beq.n	80025fe <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 80025ba:	210a      	movs	r1, #10
 80025bc:	4823      	ldr	r0, [pc, #140]	; (800264c <execute+0x184>)
 80025be:	f7ff fe61 	bl	8002284 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	210a      	movs	r1, #10
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fe5b 	bl	8002284 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 80025ce:	210a      	movs	r1, #10
 80025d0:	481f      	ldr	r0, [pc, #124]	; (8002650 <execute+0x188>)
 80025d2:	f7ff fe57 	bl	8002284 <print_color>
		print(ENDL);
 80025d6:	481f      	ldr	r0, [pc, #124]	; (8002654 <execute+0x18c>)
 80025d8:	f7ff fdf4 	bl	80021c4 <print>
		print_color ("use '", C_NC);
 80025dc:	2100      	movs	r1, #0
 80025de:	481e      	ldr	r0, [pc, #120]	; (8002658 <execute+0x190>)
 80025e0:	f7ff fe50 	bl	8002284 <print_color>
		print_color ("?", C_GREEN);
 80025e4:	2105      	movs	r1, #5
 80025e6:	481d      	ldr	r0, [pc, #116]	; (800265c <execute+0x194>)
 80025e8:	f7ff fe4c 	bl	8002284 <print_color>
		print_color ("' for help", C_NC);
 80025ec:	2100      	movs	r1, #0
 80025ee:	481c      	ldr	r0, [pc, #112]	; (8002660 <execute+0x198>)
 80025f0:	f7ff fe48 	bl	8002284 <print_color>
		print (ENDL);
 80025f4:	4817      	ldr	r0, [pc, #92]	; (8002654 <execute+0x18c>)
 80025f6:	f7ff fde5 	bl	80021c4 <print>
		return 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e020      	b.n	8002640 <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 80025fe:	2109      	movs	r1, #9
 8002600:	4812      	ldr	r0, [pc, #72]	; (800264c <execute+0x184>)
 8002602:	f7ff fe3f 	bl	8002284 <print_color>
		print_color ((char*)argv[0], C_RED);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2109      	movs	r1, #9
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fe39 	bl	8002284 <print_color>
		print_color ("' not found", C_RED);
 8002612:	2109      	movs	r1, #9
 8002614:	4813      	ldr	r0, [pc, #76]	; (8002664 <execute+0x19c>)
 8002616:	f7ff fe35 	bl	8002284 <print_color>
		print(ENDL);
 800261a:	480e      	ldr	r0, [pc, #56]	; (8002654 <execute+0x18c>)
 800261c:	f7ff fdd2 	bl	80021c4 <print>
		print_color ("use '", C_NC);
 8002620:	2100      	movs	r1, #0
 8002622:	480d      	ldr	r0, [pc, #52]	; (8002658 <execute+0x190>)
 8002624:	f7ff fe2e 	bl	8002284 <print_color>
		print_color ("?", C_GREEN);
 8002628:	2105      	movs	r1, #5
 800262a:	480c      	ldr	r0, [pc, #48]	; (800265c <execute+0x194>)
 800262c:	f7ff fe2a 	bl	8002284 <print_color>
		print_color ("' for help", C_NC);
 8002630:	2100      	movs	r1, #0
 8002632:	480b      	ldr	r0, [pc, #44]	; (8002660 <execute+0x198>)
 8002634:	f7ff fe26 	bl	8002284 <print_color>
		print (ENDL);
 8002638:	4806      	ldr	r0, [pc, #24]	; (8002654 <execute+0x18c>)
 800263a:	f7ff fdc3 	bl	80021c4 <print>
		return 1;
 800263e:	2301      	movs	r3, #1

	}
}
 8002640:	4618      	mov	r0, r3
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	0800ba40 	.word	0x0800ba40
 800264c:	0800b940 	.word	0x0800b940
 8002650:	0800b94c 	.word	0x0800b94c
 8002654:	0800b8ec 	.word	0x0800b8ec
 8002658:	0800b96c 	.word	0x0800b96c
 800265c:	0800b974 	.word	0x0800b974
 8002660:	0800b978 	.word	0x0800b978
 8002664:	0800b984 	.word	0x0800b984

08002668 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
	int j = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8002676:	4b63      	ldr	r3, [pc, #396]	; (8002804 <complet+0x19c>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d11f      	bne.n	80026c2 <complet+0x5a>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8002682:	2300      	movs	r3, #0
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
 8002686:	e018      	b.n	80026ba <complet+0x52>
			if (microrl_actions[i].level == 0)
 8002688:	4a5f      	ldr	r2, [pc, #380]	; (8002808 <complet+0x1a0>)
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10c      	bne.n	80026b4 <complet+0x4c>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f202 	mul.w	r2, r1, r2
 80026a8:	4957      	ldr	r1, [pc, #348]	; (8002808 <complet+0x1a0>)
 80026aa:	440a      	add	r2, r1
 80026ac:	3204      	adds	r2, #4
 80026ae:	4955      	ldr	r1, [pc, #340]	; (8002804 <complet+0x19c>)
 80026b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	3301      	adds	r3, #1
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	2b12      	cmp	r3, #18
 80026be:	d9e3      	bls.n	8002688 <complet+0x20>
 80026c0:	e095      	b.n	80027ee <complet+0x186>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026c8:	3b01      	subs	r3, #1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 80026dc:	2300      	movs	r3, #0
 80026de:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	e07c      	b.n	80027e0 <complet+0x178>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e06b      	b.n	80027c4 <complet+0x15c>
			{
				tokens_found = false;
 80026ec:	2300      	movs	r3, #0
 80026ee:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 80026f0:	4a45      	ldr	r2, [pc, #276]	; (8002808 <complet+0x1a0>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d001      	beq.n	800270c <complet+0xa4>
					synonym_level = current_level; // save the synonym level
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002712:	d003      	beq.n	800271c <complet+0xb4>
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	429a      	cmp	r2, r3
 800271a:	db57      	blt.n	80027cc <complet+0x164>
					break;
				if (current_level == i)
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	429a      	cmp	r2, r3
 8002722:	d101      	bne.n	8002728 <complet+0xc0>
					last_main_synonym = n;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	429a      	cmp	r2, r3
 8002730:	d128      	bne.n	8002784 <complet+0x11c>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	222c      	movs	r2, #44	; 0x2c
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	4a33      	ldr	r2, [pc, #204]	; (8002808 <complet+0x1a0>)
 800273c:	4413      	add	r3, r2
 800273e:	3304      	adds	r3, #4
 8002740:	6939      	ldr	r1, [r7, #16]
 8002742:	4618      	mov	r0, r3
 8002744:	f009 f85a 	bl	800b7fc <strstr>
 8002748:	4602      	mov	r2, r0
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	492d      	ldr	r1, [pc, #180]	; (8002808 <complet+0x1a0>)
 8002754:	440b      	add	r3, r1
 8002756:	3304      	adds	r3, #4
 8002758:	429a      	cmp	r2, r3
 800275a:	d113      	bne.n	8002784 <complet+0x11c>
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	429a      	cmp	r2, r3
 8002762:	d10f      	bne.n	8002784 <complet+0x11c>
										(i == synonym_level))
				{
					tokens_found = true;
 8002764:	2301      	movs	r3, #1
 8002766:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f202 	mul.w	r2, r1, r2
 8002776:	4924      	ldr	r1, [pc, #144]	; (8002808 <complet+0x1a0>)
 8002778:	440a      	add	r2, r1
 800277a:	3204      	adds	r2, #4
 800277c:	4921      	ldr	r1, [pc, #132]	; (8002804 <complet+0x19c>)
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002782:	e01c      	b.n	80027be <complet+0x156>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	4413      	add	r3, r2
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	491c      	ldr	r1, [pc, #112]	; (8002808 <complet+0x1a0>)
 8002798:	440b      	add	r3, r1
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f7fd fcd4 	bl	800014c <strcmp>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <complet+0x156>
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d105      	bne.n	80027be <complet+0x156>
				{
					last_main_synonym++;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	3301      	adds	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 80027b8:	2301      	movs	r3, #1
 80027ba:	77fb      	strb	r3, [r7, #31]
					break;
 80027bc:	e007      	b.n	80027ce <complet+0x166>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b12      	cmp	r3, #18
 80027c8:	d990      	bls.n	80026ec <complet+0x84>
 80027ca:	e000      	b.n	80027ce <complet+0x166>
					break;
 80027cc:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 80027ce:	7ffb      	ldrb	r3, [r7, #31]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d108      	bne.n	80027ec <complet+0x184>
		for (int i = 0; i < argc; i++)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3301      	adds	r3, #1
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	f6ff af7e 	blt.w	80026e6 <complet+0x7e>
 80027ea:	e000      	b.n	80027ee <complet+0x186>
				break;
 80027ec:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 80027ee:	4a05      	ldr	r2, [pc, #20]	; (8002804 <complet+0x19c>)
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	2100      	movs	r1, #0
 80027f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 80027f8:	4b02      	ldr	r3, [pc, #8]	; (8002804 <complet+0x19c>)
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3730      	adds	r7, #48	; 0x30
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000658 	.word	0x20000658
 8002808:	0800ba40 	.word	0x0800ba40

0800280c <sigint>:
#endif


void sigint (void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <sigint+0x50>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
	show_clock = true;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <sigint+0x54>)
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]

	print (ENDL);
 800281e:	4811      	ldr	r0, [pc, #68]	; (8002864 <sigint+0x58>)
 8002820:	f7ff fcd0 	bl	80021c4 <print>
	print ("^C catched!");
 8002824:	4810      	ldr	r0, [pc, #64]	; (8002868 <sigint+0x5c>)
 8002826:	f7ff fccd 	bl	80021c4 <print>
	int i = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 800282e:	e009      	b.n	8002844 <sigint+0x38>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <sigint+0x60>)
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <sigint+0x58>)
 800283c:	5cd3      	ldrb	r3, [r2, r3]
 800283e:	4619      	mov	r1, r3
 8002840:	f7ff fab2 	bl	8001da8 <microrl_insert_char>
	while (ENTER[i])
 8002844:	4a07      	ldr	r2, [pc, #28]	; (8002864 <sigint+0x58>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ef      	bne.n	8002830 <sigint+0x24>
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200001c9 	.word	0x200001c9
 8002860:	20000009 	.word	0x20000009
 8002864:	0800b8ec 	.word	0x0800b8ec
 8002868:	0800b990 	.word	0x0800b990
 800286c:	20000004 	.word	0x20000004

08002870 <init_microrl>:

void init_microrl(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <init_microrl+0x38>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	490c      	ldr	r1, [pc, #48]	; (80028ac <init_microrl+0x3c>)
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe ff56 	bl	800172c <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <init_microrl+0x38>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	490a      	ldr	r1, [pc, #40]	; (80028b0 <init_microrl+0x40>)
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe ff9c 	bl	80017c4 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <init_microrl+0x38>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4908      	ldr	r1, [pc, #32]	; (80028b4 <init_microrl+0x44>)
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe ff88 	bl	80017a8 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <init_microrl+0x38>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4906      	ldr	r1, [pc, #24]	; (80028b8 <init_microrl+0x48>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe ff9e 	bl	80017e0 <microrl_set_sigint_callback>
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000004 	.word	0x20000004
 80028ac:	080021c5 	.word	0x080021c5
 80028b0:	080024c9 	.word	0x080024c9
 80028b4:	08002669 	.word	0x08002669
 80028b8:	0800280d 	.word	0x0800280d

080028bc <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 80028c6:	4805      	ldr	r0, [pc, #20]	; (80028dc <clear_screen+0x20>)
 80028c8:	f7ff fc7c 	bl	80021c4 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 80028cc:	4804      	ldr	r0, [pc, #16]	; (80028e0 <clear_screen+0x24>)
 80028ce:	f7ff fc79 	bl	80021c4 <print>
	return 0;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	0800b99c 	.word	0x0800b99c
 80028e0:	0800b9a4 	.word	0x0800b9a4

080028e4 <color_toggle>:

int color_toggle 	(int argc, const char * const * argv)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <color_toggle+0x30>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <color_toggle+0x30>)
 8002904:	701a      	strb	r2, [r3, #0]
	return 0;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000008 	.word	0x20000008

08002918 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <color_on+0x28>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8002928:	2105      	movs	r1, #5
 800292a:	4806      	ldr	r0, [pc, #24]	; (8002944 <color_on+0x2c>)
 800292c:	f7ff fcaa 	bl	8002284 <print_color>
	print(ENDL);
 8002930:	4805      	ldr	r0, [pc, #20]	; (8002948 <color_on+0x30>)
 8002932:	f7ff fc47 	bl	80021c4 <print>
	return 0;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000008 	.word	0x20000008
 8002944:	0800b9a8 	.word	0x0800b9a8
 8002948:	0800b8ec 	.word	0x0800b8ec

0800294c <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <color_off+0x28>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 800295c:	4806      	ldr	r0, [pc, #24]	; (8002978 <color_off+0x2c>)
 800295e:	f7ff fc31 	bl	80021c4 <print>
	print(ENDL);
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <color_off+0x30>)
 8002964:	f7ff fc2e 	bl	80021c4 <print>
	return 0;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000008 	.word	0x20000008
 8002978:	0800b9bc 	.word	0x0800b9bc
 800297c:	0800b8ec 	.word	0x0800b8ec

08002980 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
	if (color_out)
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <color_show+0x34>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002992:	2105      	movs	r1, #5
 8002994:	4808      	ldr	r0, [pc, #32]	; (80029b8 <color_show+0x38>)
 8002996:	f7ff fc75 	bl	8002284 <print_color>
 800299a:	e002      	b.n	80029a2 <color_show+0x22>
	else
		print ("Color output is OFF");
 800299c:	4807      	ldr	r0, [pc, #28]	; (80029bc <color_show+0x3c>)
 800299e:	f7ff fc11 	bl	80021c4 <print>
	print(ENDL);
 80029a2:	4807      	ldr	r0, [pc, #28]	; (80029c0 <color_show+0x40>)
 80029a4:	f7ff fc0e 	bl	80021c4 <print>
	return 0;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000008 	.word	0x20000008
 80029b8:	0800b9a8 	.word	0x0800b9a8
 80029bc:	0800b9bc 	.word	0x0800b9bc
 80029c0:	0800b8ec 	.word	0x0800b8ec

080029c4 <vfd_text>:


int vfd_text (int argc, const char * const * argv)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
	show_clock = false;
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <vfd_text+0x90>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
	uint8_t index = 0; // current index in string
 80029d4:	2300      	movs	r3, #0
 80029d6:	75fb      	strb	r3, [r7, #23]
	for (int i = 1; i < argc; i++)
 80029d8:	2301      	movs	r3, #1
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	e025      	b.n	8002a2a <vfd_text+0x66>
	{
		char * pchar = (char*)argv[i];
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
		while(*pchar)
 80029ea:	e00b      	b.n	8002a04 <vfd_text+0x40>
		{
			txt2disp[index++] = *(pchar++);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	60fa      	str	r2, [r7, #12]
 80029f2:	7dfa      	ldrb	r2, [r7, #23]
 80029f4:	1c51      	adds	r1, r2, #1
 80029f6:	75f9      	strb	r1, [r7, #23]
 80029f8:	7819      	ldrb	r1, [r3, #0]
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <vfd_text+0x94>)
 80029fc:	5499      	strb	r1, [r3, r2]
			if (index >= sizeof(txt2disp)-2)
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	2b7d      	cmp	r3, #125	; 0x7d
 8002a02:	d804      	bhi.n	8002a0e <vfd_text+0x4a>
		while(*pchar)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ef      	bne.n	80029ec <vfd_text+0x28>
 8002a0c:	e000      	b.n	8002a10 <vfd_text+0x4c>
				break;
 8002a0e:	bf00      	nop
		}
		txt2disp[index++] = ' ';
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	75fa      	strb	r2, [r7, #23]
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <vfd_text+0x94>)
 8002a1a:	2120      	movs	r1, #32
 8002a1c:	5499      	strb	r1, [r3, r2]
		if (index >= sizeof(txt2disp)-1)
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
 8002a20:	2b7e      	cmp	r3, #126	; 0x7e
 8002a22:	d807      	bhi.n	8002a34 <vfd_text+0x70>
	for (int i = 1; i < argc; i++)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	3301      	adds	r3, #1
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	dbd5      	blt.n	80029de <vfd_text+0x1a>
 8002a32:	e000      	b.n	8002a36 <vfd_text+0x72>
			break;
 8002a34:	bf00      	nop
	}
	txt2disp[index-1] = '\0';
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <vfd_text+0x94>)
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	54d1      	strb	r1, [r2, r3]
	fresh_txt = true;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <vfd_text+0x98>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
	return 0;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000009 	.word	0x20000009
 8002a58:	200005b0 	.word	0x200005b0
 8002a5c:	20000630 	.word	0x20000630

08002a60 <leds_toggle>:


int leds_toggle		(int argc, const char * const * argv)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
	use_leds ^= 1;
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <leds_toggle+0x3c>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f083 0301 	eor.w	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf14      	ite	ne
 8002a78:	2301      	movne	r3, #1
 8002a7a:	2300      	moveq	r3, #0
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <leds_toggle+0x3c>)
 8002a80:	701a      	strb	r2, [r3, #0]
	print_color("Done", C_GREEN);
 8002a82:	2105      	movs	r1, #5
 8002a84:	4806      	ldr	r0, [pc, #24]	; (8002aa0 <leds_toggle+0x40>)
 8002a86:	f7ff fbfd 	bl	8002284 <print_color>
	print(ENDL);
 8002a8a:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <leds_toggle+0x44>)
 8002a8c:	f7ff fb9a 	bl	80021c4 <print>
	return 0;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200001ca 	.word	0x200001ca
 8002aa0:	0800b9d0 	.word	0x0800b9d0
 8002aa4:	0800b8ec 	.word	0x0800b8ec

08002aa8 <set_td>:



int set_td		(int argc, const char * const * argv)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
	if (argc == 3 && str_length(argv[2]) == 6)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d140      	bne.n	8002b3a <set_td+0x92>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	3308      	adds	r3, #8
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fc06 	bl	80022d0 <str_length>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d137      	bne.n	8002b3a <set_td+0x92>
	{
		uint8_t arr [3];
		for (int i = 0; i < 3; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e021      	b.n	8002b14 <set_td+0x6c>
		{
			arr[2-i] = (argv[2][i*2+1]-'0')+((argv[2][i*2]-'0')<<4);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	3301      	adds	r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68f9      	ldr	r1, [r7, #12]
 8002ae8:	0049      	lsls	r1, r1, #1
 8002aea:	440b      	add	r3, r1
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	3b30      	subs	r3, #48	; 0x30
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1c3 0302 	rsb	r3, r3, #2
 8002b00:	3a30      	subs	r2, #48	; 0x30
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	f107 0110 	add.w	r1, r7, #16
 8002b08:	440b      	add	r3, r1
 8002b0a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (int i = 0; i < 3; i++)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3301      	adds	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	ddda      	ble.n	8002ad0 <set_td+0x28>
		}
		d3231_set(arr, argv[0][0] == 'd');
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b64      	cmp	r3, #100	; 0x64
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fb93 	bl	800025c <d3231_set>
		return 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e007      	b.n	8002b4a <set_td+0xa2>
	}
	print_color("wrong format", C_RED);
 8002b3a:	2109      	movs	r1, #9
 8002b3c:	4805      	ldr	r0, [pc, #20]	; (8002b54 <set_td+0xac>)
 8002b3e:	f7ff fba1 	bl	8002284 <print_color>
	print(ENDL);
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <set_td+0xb0>)
 8002b44:	f7ff fb3e 	bl	80021c4 <print>
	return 0;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	0800b9d8 	.word	0x0800b9d8
 8002b58:	0800b8ec 	.word	0x0800b8ec

08002b5c <get_td>:

int get_td		(int argc, const char * const * argv)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	bool date = argv[0][0] == 'd';
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b64      	cmp	r3, #100	; 0x64
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	77fb      	strb	r3, [r7, #31]
	char str[9];
	uint8_t * d3231 = d3231_get_all();
 8002b76:	f7fd fb39 	bl	80001ec <d3231_get_all>
 8002b7a:	61b8      	str	r0, [r7, #24]
	uint8_t offset = date*4;
 8002b7c:	7ffb      	ldrb	r3, [r7, #31]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	75fb      	strb	r3, [r7, #23]
	str[8] = '\0';
 8002b82:	2300      	movs	r3, #0
 8002b84:	753b      	strb	r3, [r7, #20]
	str[7] = (d3231[offset + 0]&0xF) + '0';
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3330      	adds	r3, #48	; 0x30
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	74fb      	strb	r3, [r7, #19]
	str[6] = ((d3231[offset + 0]>>4)&0xF) + '0';
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3330      	adds	r3, #48	; 0x30
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	74bb      	strb	r3, [r7, #18]
	str[4] = (d3231[offset + 1]&0xF) + '0';
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3330      	adds	r3, #48	; 0x30
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	743b      	strb	r3, [r7, #16]
	str[3] = ((d3231[offset + 1]>>4)&0xF) + '0';
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4413      	add	r3, r2
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	3330      	adds	r3, #48	; 0x30
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	73fb      	strb	r3, [r7, #15]
	str[1] = (d3231[offset + 2]&0xF) + '0';
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	3302      	adds	r3, #2
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4413      	add	r3, r2
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3330      	adds	r3, #48	; 0x30
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	737b      	strb	r3, [r7, #13]
	str[0] = ((d3231[offset + 2]>>4)&0xF) + '0';
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	3302      	adds	r3, #2
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3330      	adds	r3, #48	; 0x30
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	733b      	strb	r3, [r7, #12]
	str[5] = str[2] = date?'-':':';
 8002c00:	7ffb      	ldrb	r3, [r7, #31]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <get_td+0xae>
 8002c06:	232d      	movs	r3, #45	; 0x2d
 8002c08:	e000      	b.n	8002c0c <get_td+0xb0>
 8002c0a:	233a      	movs	r3, #58	; 0x3a
 8002c0c:	73bb      	strb	r3, [r7, #14]
 8002c0e:	7bbb      	ldrb	r3, [r7, #14]
 8002c10:	747b      	strb	r3, [r7, #17]
	print_color(str, C_L_BLUE);
 8002c12:	f107 030c 	add.w	r3, r7, #12
 8002c16:	2104      	movs	r1, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fb33 	bl	8002284 <print_color>
	print(ENDL);
 8002c1e:	4804      	ldr	r0, [pc, #16]	; (8002c30 <get_td+0xd4>)
 8002c20:	f7ff fad0 	bl	80021c4 <print>
	return 0;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	0800b8ec 	.word	0x0800b8ec

08002c34 <get_temp>:

int get_temp		(int argc, const char * const * argv)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
	uint8_t * d3231 = d3231_get_temp();
 8002c3e:	f7fd fabd 	bl	80001bc <d3231_get_temp>
 8002c42:	61b8      	str	r0, [r7, #24]

	bool negative = d3231[0]&(1<<7);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]
	uint16_t temp = d3231[0]&(~(1<<7));
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c60:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t dec   = d3231[1]>>6;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	3301      	adds	r3, #1
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	75bb      	strb	r3, [r7, #22]

	dec *= 25; // calculate decimal part
 8002c6c:	7dbb      	ldrb	r3, [r7, #22]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	0092      	lsls	r2, r2, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	0091      	lsls	r1, r2, #2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	75bb      	strb	r3, [r7, #22]
	temp *= 1000;
 8002c80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c82:	461a      	mov	r2, r3
 8002c84:	0152      	lsls	r2, r2, #5
 8002c86:	1ad2      	subs	r2, r2, r3
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	84fb      	strh	r3, [r7, #38]	; 0x26
	temp += dec;
 8002c90:	7dbb      	ldrb	r3, [r7, #22]
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c96:	4413      	add	r3, r2
 8002c98:	84fb      	strh	r3, [r7, #38]	; 0x26


	char str[8];
	str[7] = '\0';
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	74fb      	strb	r3, [r7, #19]
	for (int i = 6; i >= 0; i--)
 8002c9e:	2306      	movs	r3, #6
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	e01c      	b.n	8002cde <get_temp+0xaa>
	{
		str[i] = (temp % 10) + '0';
 8002ca4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ca6:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <get_temp+0x124>)
 8002ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cac:	08d9      	lsrs	r1, r3, #3
 8002cae:	460b      	mov	r3, r1
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3330      	adds	r3, #48	; 0x30
 8002cbe:	b2d9      	uxtb	r1, r3
 8002cc0:	f107 020c 	add.w	r2, r7, #12
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	460a      	mov	r2, r1
 8002cca:	701a      	strb	r2, [r3, #0]
		temp /= 10;
 8002ccc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cce:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <get_temp+0x124>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	08db      	lsrs	r3, r3, #3
 8002cd6:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 6; i >= 0; i--)
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	dadf      	bge.n	8002ca4 <get_temp+0x70>
	}
	str[4] = '.';
 8002ce4:	232e      	movs	r3, #46	; 0x2e
 8002ce6:	743b      	strb	r3, [r7, #16]
	for (int i = 0; i < 7; i++)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	e020      	b.n	8002d30 <get_temp+0xfc>
	{
		if (str[i] != '0')
 8002cee:	f107 020c 	add.w	r2, r7, #12
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b30      	cmp	r3, #48	; 0x30
 8002cfa:	d010      	beq.n	8002d1e <get_temp+0xea>
		{
			if (i > 0)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	dd1a      	ble.n	8002d38 <get_temp+0x104>
				str[i-1] = negative?'-':'+';
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <get_temp+0xd8>
 8002d08:	222d      	movs	r2, #45	; 0x2d
 8002d0a:	e000      	b.n	8002d0e <get_temp+0xda>
 8002d0c:	222b      	movs	r2, #43	; 0x2b
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d16:	440b      	add	r3, r1
 8002d18:	f803 2c1c 	strb.w	r2, [r3, #-28]
			break;
 8002d1c:	e00c      	b.n	8002d38 <get_temp+0x104>
		}
		str[i] = ' ';
 8002d1e:	f107 020c 	add.w	r2, r7, #12
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4413      	add	r3, r2
 8002d26:	2220      	movs	r2, #32
 8002d28:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 7; i++)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	dddb      	ble.n	8002cee <get_temp+0xba>
 8002d36:	e000      	b.n	8002d3a <get_temp+0x106>
			break;
 8002d38:	bf00      	nop
	}
	print_color(str, C_GREEN);
 8002d3a:	f107 030c 	add.w	r3, r7, #12
 8002d3e:	2105      	movs	r1, #5
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fa9f 	bl	8002284 <print_color>
	print(ENDL);
 8002d46:	4805      	ldr	r0, [pc, #20]	; (8002d5c <get_temp+0x128>)
 8002d48:	f7ff fa3c 	bl	80021c4 <print>
	return 0;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3728      	adds	r7, #40	; 0x28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	cccccccd 	.word	0xcccccccd
 8002d5c:	0800b8ec 	.word	0x0800b8ec

08002d60 <clock>:

int clock		(int argc, const char * const * argv)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
	show_clock = true;
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <clock+0x1c>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
	return 0;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	20000009 	.word	0x20000009

08002d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_MspInit+0x5c>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <HAL_MspInit+0x5c>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6193      	str	r3, [r2, #24]
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_MspInit+0x5c>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_MspInit+0x5c>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <HAL_MspInit+0x5c>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da8:	61d3      	str	r3, [r2, #28]
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_MspInit+0x5c>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_MspInit+0x60>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <HAL_MspInit+0x60>)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40010000 	.word	0x40010000

08002de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <HAL_I2C_MspInit+0x70>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d123      	bne.n	8002e4c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_I2C_MspInit+0x74>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <HAL_I2C_MspInit+0x74>)
 8002e0a:	f043 0308 	orr.w	r3, r3, #8
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_I2C_MspInit+0x74>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e1c:	23c0      	movs	r3, #192	; 0xc0
 8002e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e20:	2312      	movs	r3, #18
 8002e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e28:	f107 0310 	add.w	r3, r7, #16
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	480b      	ldr	r0, [pc, #44]	; (8002e5c <HAL_I2C_MspInit+0x78>)
 8002e30:	f000 fc30 	bl	8003694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_I2C_MspInit+0x74>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <HAL_I2C_MspInit+0x74>)
 8002e3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e3e:	61d3      	str	r3, [r2, #28]
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_I2C_MspInit+0x74>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40005400 	.word	0x40005400
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40010c00 	.word	0x40010c00

08002e60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0310 	add.w	r3, r7, #16
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <HAL_SPI_MspInit+0x8c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d131      	bne.n	8002ee4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	4a1a      	ldr	r2, [pc, #104]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8a:	61d3      	str	r3, [r2, #28]
 8002e8c:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e98:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002e9e:	f043 0308 	orr.w	r3, r3, #8
 8002ea2:	6193      	str	r3, [r2, #24]
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_SPI_MspInit+0x90>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002eb0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002eb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ebe:	f107 0310 	add.w	r3, r7, #16
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	480b      	ldr	r0, [pc, #44]	; (8002ef4 <HAL_SPI_MspInit+0x94>)
 8002ec6:	f000 fbe5 	bl	8003694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002eca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	4619      	mov	r1, r3
 8002ede:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <HAL_SPI_MspInit+0x94>)
 8002ee0:	f000 fbd8 	bl	8003694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ee4:	bf00      	nop
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40003800 	.word	0x40003800
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40010c00 	.word	0x40010c00

08002ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002efc:	e7fe      	b.n	8002efc <NMI_Handler+0x4>

08002efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f02:	e7fe      	b.n	8002f02 <HardFault_Handler+0x4>

08002f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f08:	e7fe      	b.n	8002f08 <MemManage_Handler+0x4>

08002f0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f0e:	e7fe      	b.n	8002f0e <BusFault_Handler+0x4>

08002f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f14:	e7fe      	b.n	8002f14 <UsageFault_Handler+0x4>

08002f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f3e:	f000 fa5b 	bl	80033f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002f4e:	f001 fe9e 	bl	8004c8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20001438 	.word	0x20001438

08002f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	2b2f      	cmp	r3, #47	; 0x2f
 8002f76:	d908      	bls.n	8002f8a <get_char+0x22>
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	2b39      	cmp	r3, #57	; 0x39
 8002f7c:	d805      	bhi.n	8002f8a <get_char+0x22>
		return vfd_digits[input - '0'];
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	3b30      	subs	r3, #48	; 0x30
 8002f82:	4a2a      	ldr	r2, [pc, #168]	; (800302c <get_char+0xc4>)
 8002f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f88:	e04a      	b.n	8003020 <get_char+0xb8>
	if (0 <= input && input <= 9)
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	2b09      	cmp	r3, #9
 8002f8e:	d804      	bhi.n	8002f9a <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	4a26      	ldr	r2, [pc, #152]	; (800302c <get_char+0xc4>)
 8002f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f98:	e042      	b.n	8003020 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e00e      	b.n	8002fbe <get_char+0x56>
		if (vfd_special_char[i] == input)
 8002fa0:	4a23      	ldr	r2, [pc, #140]	; (8003030 <get_char+0xc8>)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	79fa      	ldrb	r2, [r7, #7]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d104      	bne.n	8002fb8 <get_char+0x50>
			return vfd_special[i];
 8002fae:	4a21      	ldr	r2, [pc, #132]	; (8003034 <get_char+0xcc>)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb6:	e033      	b.n	8003020 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b19      	cmp	r3, #25
 8002fc2:	d9ed      	bls.n	8002fa0 <get_char+0x38>
	if ('a' <= input && input <= 'z')
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	2b60      	cmp	r3, #96	; 0x60
 8002fc8:	d908      	bls.n	8002fdc <get_char+0x74>
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	2b7a      	cmp	r3, #122	; 0x7a
 8002fce:	d805      	bhi.n	8002fdc <get_char+0x74>
		return vfd_alpha[input - 'a'];
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	3b61      	subs	r3, #97	; 0x61
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <get_char+0xd0>)
 8002fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fda:	e021      	b.n	8003020 <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d908      	bls.n	8002ff4 <get_char+0x8c>
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b5a      	cmp	r3, #90	; 0x5a
 8002fe6:	d805      	bhi.n	8002ff4 <get_char+0x8c>
		return vfd_alpha[input - 'A'];
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	3b41      	subs	r3, #65	; 0x41
 8002fec:	4a12      	ldr	r2, [pc, #72]	; (8003038 <get_char+0xd0>)
 8002fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ff2:	e015      	b.n	8003020 <get_char+0xb8>
	if (192 <= input && input <= 223)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	2bbf      	cmp	r3, #191	; 0xbf
 8002ff8:	d908      	bls.n	800300c <get_char+0xa4>
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2bdf      	cmp	r3, #223	; 0xdf
 8002ffe:	d805      	bhi.n	800300c <get_char+0xa4>
		return vfd_alpha_ru[input - 192];
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	3bc0      	subs	r3, #192	; 0xc0
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <get_char+0xd4>)
 8003006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800300a:	e009      	b.n	8003020 <get_char+0xb8>
	if (224 <= input && input <= 255)
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	2bdf      	cmp	r3, #223	; 0xdf
 8003010:	d905      	bls.n	800301e <get_char+0xb6>
		return vfd_alpha_ru[input - 224];
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	3be0      	subs	r3, #224	; 0xe0
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <get_char+0xd4>)
 8003018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800301c:	e000      	b.n	8003020 <get_char+0xb8>
	return 0;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	0800be5c 	.word	0x0800be5c
 8003030:	0800bf18 	.word	0x0800bf18
 8003034:	0800bee4 	.word	0x0800bee4
 8003038:	0800be70 	.word	0x0800be70
 800303c:	0800bea4 	.word	0x0800bea4

08003040 <str2vfd>:

void str2vfd(char * str)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 8003048:	230a      	movs	r3, #10
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e028      	b.n	80030a0 <str2vfd+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 800304e:	493e      	ldr	r1, [pc, #248]	; (8003148 <str2vfd+0x108>)
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	440b      	add	r3, r1
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	b2d8      	uxtb	r0, r3
 8003062:	4939      	ldr	r1, [pc, #228]	; (8003148 <str2vfd+0x108>)
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	440b      	add	r3, r1
 800306e:	4602      	mov	r2, r0
 8003070:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 8003072:	4935      	ldr	r1, [pc, #212]	; (8003148 <str2vfd+0x108>)
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4613      	mov	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	440b      	add	r3, r1
 800307e:	3301      	adds	r3, #1
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003086:	b2d8      	uxtb	r0, r3
 8003088:	492f      	ldr	r1, [pc, #188]	; (8003148 <str2vfd+0x108>)
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	440b      	add	r3, r1
 8003094:	3301      	adds	r3, #1
 8003096:	4602      	mov	r2, r0
 8003098:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3b01      	subs	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	dcd3      	bgt.n	800304e <str2vfd+0xe>
	}
	uint8_t i = 10;
 80030a6:	230a      	movs	r3, #10
 80030a8:	72fb      	strb	r3, [r7, #11]
	while (*str)
 80030aa:	e042      	b.n	8003132 <str2vfd+0xf2>
	{
		 buf = get_char(*(str++));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff57 	bl	8002f68 <get_char>
 80030ba:	4603      	mov	r3, r0
 80030bc:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 80030be:	7afa      	ldrb	r2, [r7, #11]
 80030c0:	4921      	ldr	r1, [pc, #132]	; (8003148 <str2vfd+0x108>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b25a      	sxtb	r2, r3
 80030ce:	893b      	ldrh	r3, [r7, #8]
 80030d0:	b25b      	sxtb	r3, r3
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	4313      	orrs	r3, r2
 80030da:	b25b      	sxtb	r3, r3
 80030dc:	7afa      	ldrb	r2, [r7, #11]
 80030de:	b2d8      	uxtb	r0, r3
 80030e0:	4919      	ldr	r1, [pc, #100]	; (8003148 <str2vfd+0x108>)
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	4602      	mov	r2, r0
 80030ec:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 80030ee:	7afa      	ldrb	r2, [r7, #11]
 80030f0:	4915      	ldr	r1, [pc, #84]	; (8003148 <str2vfd+0x108>)
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	3301      	adds	r3, #1
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	b25a      	sxtb	r2, r3
 8003100:	893b      	ldrh	r3, [r7, #8]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	b29b      	uxth	r3, r3
 8003106:	b25b      	sxtb	r3, r3
 8003108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800310c:	b25b      	sxtb	r3, r3
 800310e:	4313      	orrs	r3, r2
 8003110:	b25b      	sxtb	r3, r3
 8003112:	7afa      	ldrb	r2, [r7, #11]
 8003114:	b2d8      	uxtb	r0, r3
 8003116:	490c      	ldr	r1, [pc, #48]	; (8003148 <str2vfd+0x108>)
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	440b      	add	r3, r1
 8003120:	3301      	adds	r3, #1
 8003122:	4602      	mov	r2, r0
 8003124:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 8003126:	7afb      	ldrb	r3, [r7, #11]
 8003128:	3b01      	subs	r3, #1
 800312a:	72fb      	strb	r3, [r7, #11]
 800312c:	7afb      	ldrb	r3, [r7, #11]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <str2vfd+0xfc>
	while (*str)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1b8      	bne.n	80030ac <str2vfd+0x6c>
			 break;
	}
}
 800313a:	e000      	b.n	800313e <str2vfd+0xfe>
			 break;
 800313c:	bf00      	nop
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000634 	.word	0x20000634

0800314c <symbols_vfd>:

void symbols_vfd(uint32_t symbols)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(vfd_symbols)/sizeof(vfd_symbols[0]); i++)
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	e07a      	b.n	8003250 <symbols_vfd+0x104>
	{
		if (symbols & (1<<i))
 800315a:	2201      	movs	r2, #1
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	461a      	mov	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d036      	beq.n	80031da <symbols_vfd+0x8e>
		{
			// set symbol
			for (int b = 0; b < 3; b++)
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e02f      	b.n	80031d2 <symbols_vfd+0x86>
			  vfd.arr2[vfd_symbols[i][0]][b] |= ((1<<vfd_symbols[i][1])>>(b<<3))&0xFF;
 8003172:	4a3c      	ldr	r2, [pc, #240]	; (8003264 <symbols_vfd+0x118>)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800317a:	4619      	mov	r1, r3
 800317c:	4a3a      	ldr	r2, [pc, #232]	; (8003268 <symbols_vfd+0x11c>)
 800317e:	460b      	mov	r3, r1
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	440b      	add	r3, r1
 8003184:	441a      	add	r2, r3
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b25a      	sxtb	r2, r3
 800318e:	4935      	ldr	r1, [pc, #212]	; (8003264 <symbols_vfd+0x118>)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	440b      	add	r3, r1
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	4619      	mov	r1, r3
 800319a:	2301      	movs	r3, #1
 800319c:	fa03 f101 	lsl.w	r1, r3, r1
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	fa41 f303 	asr.w	r3, r1, r3
 80031a8:	b25b      	sxtb	r3, r3
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b258      	sxtb	r0, r3
 80031ae:	4a2d      	ldr	r2, [pc, #180]	; (8003264 <symbols_vfd+0x118>)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80031b6:	4619      	mov	r1, r3
 80031b8:	b2c0      	uxtb	r0, r0
 80031ba:	4a2b      	ldr	r2, [pc, #172]	; (8003268 <symbols_vfd+0x11c>)
 80031bc:	460b      	mov	r3, r1
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	440b      	add	r3, r1
 80031c2:	441a      	add	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	4602      	mov	r2, r0
 80031ca:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	3301      	adds	r3, #1
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	ddcc      	ble.n	8003172 <symbols_vfd+0x26>
 80031d8:	e037      	b.n	800324a <symbols_vfd+0xfe>
		}
		else
		{
			// reset symbol
			for (int b = 0; b < 3; b++)
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e031      	b.n	8003244 <symbols_vfd+0xf8>
			  vfd.arr2[vfd_symbols[i][0]][b] &= ~(((1<<vfd_symbols[i][1])>>(b<<3))&0xFF);
 80031e0:	4a20      	ldr	r2, [pc, #128]	; (8003264 <symbols_vfd+0x118>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80031e8:	4619      	mov	r1, r3
 80031ea:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <symbols_vfd+0x11c>)
 80031ec:	460b      	mov	r3, r1
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	440b      	add	r3, r1
 80031f2:	441a      	add	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b25a      	sxtb	r2, r3
 80031fc:	4919      	ldr	r1, [pc, #100]	; (8003264 <symbols_vfd+0x118>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	440b      	add	r3, r1
 8003204:	785b      	ldrb	r3, [r3, #1]
 8003206:	4619      	mov	r1, r3
 8003208:	2301      	movs	r3, #1
 800320a:	fa03 f101 	lsl.w	r1, r3, r1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	fa41 f303 	asr.w	r3, r1, r3
 8003216:	b25b      	sxtb	r3, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	b25b      	sxtb	r3, r3
 800321c:	4013      	ands	r3, r2
 800321e:	b258      	sxtb	r0, r3
 8003220:	4a10      	ldr	r2, [pc, #64]	; (8003264 <symbols_vfd+0x118>)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003228:	4619      	mov	r1, r3
 800322a:	b2c0      	uxtb	r0, r0
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <symbols_vfd+0x11c>)
 800322e:	460b      	mov	r3, r1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	440b      	add	r3, r1
 8003234:	441a      	add	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	4602      	mov	r2, r0
 800323c:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3301      	adds	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b02      	cmp	r3, #2
 8003248:	ddca      	ble.n	80031e0 <symbols_vfd+0x94>
	for (int i = 0; i < sizeof(vfd_symbols)/sizeof(vfd_symbols[0]); i++)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b18      	cmp	r3, #24
 8003254:	d981      	bls.n	800315a <symbols_vfd+0xe>
		}
	}
}
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	0800bf34 	.word	0x0800bf34
 8003268:	20000634 	.word	0x20000634

0800326c <clr_vfd>:

void clr_vfd(void)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	e007      	b.n	8003288 <clr_vfd+0x1c>
		  vfd.arr1[a] = 0;
 8003278:	4a08      	ldr	r2, [pc, #32]	; (800329c <clr_vfd+0x30>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3301      	adds	r3, #1
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b20      	cmp	r3, #32
 800328c:	d9f4      	bls.n	8003278 <clr_vfd+0xc>
}
 800328e:	bf00      	nop
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000634 	.word	0x20000634

080032a0 <save_vfd>:

uint8_t backup[11*3];

void save_vfd(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	e00b      	b.n	80032c4 <save_vfd+0x24>
		backup[i] = vfd.arr1[i];
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <save_vfd+0x38>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	7819      	ldrb	r1, [r3, #0]
 80032b4:	4a09      	ldr	r2, [pc, #36]	; (80032dc <save_vfd+0x3c>)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	460a      	mov	r2, r1
 80032bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3301      	adds	r3, #1
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d9f0      	bls.n	80032ac <save_vfd+0xc>
}
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000634 	.word	0x20000634
 80032dc:	2000077c 	.word	0x2000077c

080032e0 <restore_vfd>:

void restore_vfd(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	e00b      	b.n	8003304 <restore_vfd+0x24>
		vfd.arr1[i] = backup[i];
 80032ec:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <restore_vfd+0x38>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	7819      	ldrb	r1, [r3, #0]
 80032f4:	4a09      	ldr	r2, [pc, #36]	; (800331c <restore_vfd+0x3c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	460a      	mov	r2, r1
 80032fc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3301      	adds	r3, #1
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b20      	cmp	r3, #32
 8003308:	d9f0      	bls.n	80032ec <restore_vfd+0xc>
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	2000077c 	.word	0x2000077c
 800331c:	20000634 	.word	0x20000634

08003320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003320:	480c      	ldr	r0, [pc, #48]	; (8003354 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003322:	490d      	ldr	r1, [pc, #52]	; (8003358 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003324:	4a0d      	ldr	r2, [pc, #52]	; (800335c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003328:	e002      	b.n	8003330 <LoopCopyDataInit>

0800332a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800332c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800332e:	3304      	adds	r3, #4

08003330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003334:	d3f9      	bcc.n	800332a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003338:	4c0a      	ldr	r4, [pc, #40]	; (8003364 <LoopFillZerobss+0x22>)
  movs r3, #0
 800333a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800333c:	e001      	b.n	8003342 <LoopFillZerobss>

0800333e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800333e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003340:	3204      	adds	r2, #4

08003342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003344:	d3fb      	bcc.n	800333e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003346:	f7ff fe09 	bl	8002f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800334a:	f008 fa03 	bl	800b754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800334e:	f7fd fce3 	bl	8000d18 <main>
  bx lr
 8003352:	4770      	bx	lr
  ldr r0, =_sdata
 8003354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003358:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 800335c:	0800bf70 	.word	0x0800bf70
  ldr r2, =_sbss
 8003360:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8003364:	20001724 	.word	0x20001724

08003368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003368:	e7fe      	b.n	8003368 <ADC1_2_IRQHandler>
	...

0800336c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_Init+0x28>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a07      	ldr	r2, [pc, #28]	; (8003394 <HAL_Init+0x28>)
 8003376:	f043 0310 	orr.w	r3, r3, #16
 800337a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337c:	2003      	movs	r0, #3
 800337e:	f000 f947 	bl	8003610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003382:	200f      	movs	r0, #15
 8003384:	f000 f808 	bl	8003398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003388:	f7ff fcfa 	bl	8002d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40022000 	.word	0x40022000

08003398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_InitTick+0x54>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_InitTick+0x58>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f95f 	bl	800367a <HAL_SYSTICK_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e00e      	b.n	80033e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b0f      	cmp	r3, #15
 80033ca:	d80a      	bhi.n	80033e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033cc:	2200      	movs	r2, #0
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	f000 f927 	bl	8003626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d8:	4a06      	ldr	r2, [pc, #24]	; (80033f4 <HAL_InitTick+0x5c>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	2000000c 	.word	0x2000000c
 80033f0:	20000014 	.word	0x20000014
 80033f4:	20000010 	.word	0x20000010

080033f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_IncTick+0x1c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_IncTick+0x20>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4413      	add	r3, r2
 8003408:	4a03      	ldr	r2, [pc, #12]	; (8003418 <HAL_IncTick+0x20>)
 800340a:	6013      	str	r3, [r2, #0]
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	20000014 	.word	0x20000014
 8003418:	200007a0 	.word	0x200007a0

0800341c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return uwTick;
 8003420:	4b02      	ldr	r3, [pc, #8]	; (800342c <HAL_GetTick+0x10>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	200007a0 	.word	0x200007a0

08003430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003438:	f7ff fff0 	bl	800341c <HAL_GetTick>
 800343c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d005      	beq.n	8003456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <HAL_Delay+0x44>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003456:	bf00      	nop
 8003458:	f7ff ffe0 	bl	800341c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	429a      	cmp	r2, r3
 8003466:	d8f7      	bhi.n	8003458 <HAL_Delay+0x28>
  {
  }
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000014 	.word	0x20000014

08003478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003494:	4013      	ands	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034aa:	4a04      	ldr	r2, [pc, #16]	; (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	60d3      	str	r3, [r2, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <__NVIC_GetPriorityGrouping+0x18>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	f003 0307 	and.w	r3, r3, #7
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	db0b      	blt.n	8003506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	f003 021f 	and.w	r2, r3, #31
 80034f4:	4906      	ldr	r1, [pc, #24]	; (8003510 <__NVIC_EnableIRQ+0x34>)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2001      	movs	r0, #1
 80034fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	e000e100 	.word	0xe000e100

08003514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	db0a      	blt.n	800353e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	490c      	ldr	r1, [pc, #48]	; (8003560 <__NVIC_SetPriority+0x4c>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	440b      	add	r3, r1
 8003538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800353c:	e00a      	b.n	8003554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4908      	ldr	r1, [pc, #32]	; (8003564 <__NVIC_SetPriority+0x50>)
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	3b04      	subs	r3, #4
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	440b      	add	r3, r1
 8003552:	761a      	strb	r2, [r3, #24]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000e100 	.word	0xe000e100
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f1c3 0307 	rsb	r3, r3, #7
 8003582:	2b04      	cmp	r3, #4
 8003584:	bf28      	it	cs
 8003586:	2304      	movcs	r3, #4
 8003588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3304      	adds	r3, #4
 800358e:	2b06      	cmp	r3, #6
 8003590:	d902      	bls.n	8003598 <NVIC_EncodePriority+0x30>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3b03      	subs	r3, #3
 8003596:	e000      	b.n	800359a <NVIC_EncodePriority+0x32>
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	401a      	ands	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43d9      	mvns	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	4313      	orrs	r3, r2
         );
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	; 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035dc:	d301      	bcc.n	80035e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035de:	2301      	movs	r3, #1
 80035e0:	e00f      	b.n	8003602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <SysTick_Config+0x40>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ea:	210f      	movs	r1, #15
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	f7ff ff90 	bl	8003514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <SysTick_Config+0x40>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fa:	4b04      	ldr	r3, [pc, #16]	; (800360c <SysTick_Config+0x40>)
 80035fc:	2207      	movs	r2, #7
 80035fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	e000e010 	.word	0xe000e010

08003610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ff2d 	bl	8003478 <__NVIC_SetPriorityGrouping>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003638:	f7ff ff42 	bl	80034c0 <__NVIC_GetPriorityGrouping>
 800363c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	6978      	ldr	r0, [r7, #20]
 8003644:	f7ff ff90 	bl	8003568 <NVIC_EncodePriority>
 8003648:	4602      	mov	r2, r0
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff5f 	bl	8003514 <__NVIC_SetPriority>
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff35 	bl	80034dc <__NVIC_EnableIRQ>
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ffa2 	bl	80035cc <SysTick_Config>
 8003688:	4603      	mov	r3, r0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003694:	b480      	push	{r7}
 8003696:	b08b      	sub	sp, #44	; 0x2c
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036a2:	2300      	movs	r3, #0
 80036a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a6:	e169      	b.n	800397c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036a8:	2201      	movs	r2, #1
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	f040 8158 	bne.w	8003976 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a9a      	ldr	r2, [pc, #616]	; (8003934 <HAL_GPIO_Init+0x2a0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d05e      	beq.n	800378e <HAL_GPIO_Init+0xfa>
 80036d0:	4a98      	ldr	r2, [pc, #608]	; (8003934 <HAL_GPIO_Init+0x2a0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d875      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 80036d6:	4a98      	ldr	r2, [pc, #608]	; (8003938 <HAL_GPIO_Init+0x2a4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d058      	beq.n	800378e <HAL_GPIO_Init+0xfa>
 80036dc:	4a96      	ldr	r2, [pc, #600]	; (8003938 <HAL_GPIO_Init+0x2a4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d86f      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 80036e2:	4a96      	ldr	r2, [pc, #600]	; (800393c <HAL_GPIO_Init+0x2a8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d052      	beq.n	800378e <HAL_GPIO_Init+0xfa>
 80036e8:	4a94      	ldr	r2, [pc, #592]	; (800393c <HAL_GPIO_Init+0x2a8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d869      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 80036ee:	4a94      	ldr	r2, [pc, #592]	; (8003940 <HAL_GPIO_Init+0x2ac>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d04c      	beq.n	800378e <HAL_GPIO_Init+0xfa>
 80036f4:	4a92      	ldr	r2, [pc, #584]	; (8003940 <HAL_GPIO_Init+0x2ac>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d863      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 80036fa:	4a92      	ldr	r2, [pc, #584]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d046      	beq.n	800378e <HAL_GPIO_Init+0xfa>
 8003700:	4a90      	ldr	r2, [pc, #576]	; (8003944 <HAL_GPIO_Init+0x2b0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d85d      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 8003706:	2b12      	cmp	r3, #18
 8003708:	d82a      	bhi.n	8003760 <HAL_GPIO_Init+0xcc>
 800370a:	2b12      	cmp	r3, #18
 800370c:	d859      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 800370e:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <HAL_GPIO_Init+0x80>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	0800378f 	.word	0x0800378f
 8003718:	08003769 	.word	0x08003769
 800371c:	0800377b 	.word	0x0800377b
 8003720:	080037bd 	.word	0x080037bd
 8003724:	080037c3 	.word	0x080037c3
 8003728:	080037c3 	.word	0x080037c3
 800372c:	080037c3 	.word	0x080037c3
 8003730:	080037c3 	.word	0x080037c3
 8003734:	080037c3 	.word	0x080037c3
 8003738:	080037c3 	.word	0x080037c3
 800373c:	080037c3 	.word	0x080037c3
 8003740:	080037c3 	.word	0x080037c3
 8003744:	080037c3 	.word	0x080037c3
 8003748:	080037c3 	.word	0x080037c3
 800374c:	080037c3 	.word	0x080037c3
 8003750:	080037c3 	.word	0x080037c3
 8003754:	080037c3 	.word	0x080037c3
 8003758:	08003771 	.word	0x08003771
 800375c:	08003785 	.word	0x08003785
 8003760:	4a79      	ldr	r2, [pc, #484]	; (8003948 <HAL_GPIO_Init+0x2b4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003766:	e02c      	b.n	80037c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	623b      	str	r3, [r7, #32]
          break;
 800376e:	e029      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	3304      	adds	r3, #4
 8003776:	623b      	str	r3, [r7, #32]
          break;
 8003778:	e024      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	3308      	adds	r3, #8
 8003780:	623b      	str	r3, [r7, #32]
          break;
 8003782:	e01f      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	330c      	adds	r3, #12
 800378a:	623b      	str	r3, [r7, #32]
          break;
 800378c:	e01a      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003796:	2304      	movs	r3, #4
 8003798:	623b      	str	r3, [r7, #32]
          break;
 800379a:	e013      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037a4:	2308      	movs	r3, #8
 80037a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	611a      	str	r2, [r3, #16]
          break;
 80037ae:	e009      	b.n	80037c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037b0:	2308      	movs	r3, #8
 80037b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	615a      	str	r2, [r3, #20]
          break;
 80037ba:	e003      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037bc:	2300      	movs	r3, #0
 80037be:	623b      	str	r3, [r7, #32]
          break;
 80037c0:	e000      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          break;
 80037c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2bff      	cmp	r3, #255	; 0xff
 80037c8:	d801      	bhi.n	80037ce <HAL_GPIO_Init+0x13a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	e001      	b.n	80037d2 <HAL_GPIO_Init+0x13e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2bff      	cmp	r3, #255	; 0xff
 80037d8:	d802      	bhi.n	80037e0 <HAL_GPIO_Init+0x14c>
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	e002      	b.n	80037e6 <HAL_GPIO_Init+0x152>
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	3b08      	subs	r3, #8
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	210f      	movs	r1, #15
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	401a      	ands	r2, r3
 80037f8:	6a39      	ldr	r1, [r7, #32]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	431a      	orrs	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80b1 	beq.w	8003976 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003814:	4b4d      	ldr	r3, [pc, #308]	; (800394c <HAL_GPIO_Init+0x2b8>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	4a4c      	ldr	r2, [pc, #304]	; (800394c <HAL_GPIO_Init+0x2b8>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6193      	str	r3, [r2, #24]
 8003820:	4b4a      	ldr	r3, [pc, #296]	; (800394c <HAL_GPIO_Init+0x2b8>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800382c:	4a48      	ldr	r2, [pc, #288]	; (8003950 <HAL_GPIO_Init+0x2bc>)
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	220f      	movs	r2, #15
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a40      	ldr	r2, [pc, #256]	; (8003954 <HAL_GPIO_Init+0x2c0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <HAL_GPIO_Init+0x1ec>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a3f      	ldr	r2, [pc, #252]	; (8003958 <HAL_GPIO_Init+0x2c4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00d      	beq.n	800387c <HAL_GPIO_Init+0x1e8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a3e      	ldr	r2, [pc, #248]	; (800395c <HAL_GPIO_Init+0x2c8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d007      	beq.n	8003878 <HAL_GPIO_Init+0x1e4>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3d      	ldr	r2, [pc, #244]	; (8003960 <HAL_GPIO_Init+0x2cc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_GPIO_Init+0x1e0>
 8003870:	2303      	movs	r3, #3
 8003872:	e006      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 8003874:	2304      	movs	r3, #4
 8003876:	e004      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 8003878:	2302      	movs	r3, #2
 800387a:	e002      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 8003880:	2300      	movs	r3, #0
 8003882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003884:	f002 0203 	and.w	r2, r2, #3
 8003888:	0092      	lsls	r2, r2, #2
 800388a:	4093      	lsls	r3, r2
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003892:	492f      	ldr	r1, [pc, #188]	; (8003950 <HAL_GPIO_Init+0x2bc>)
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	3302      	adds	r3, #2
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d006      	beq.n	80038ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	492c      	ldr	r1, [pc, #176]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	600b      	str	r3, [r1, #0]
 80038b8:	e006      	b.n	80038c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038ba:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	4928      	ldr	r1, [pc, #160]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038d4:	4b23      	ldr	r3, [pc, #140]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	4922      	ldr	r1, [pc, #136]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
 80038e0:	e006      	b.n	80038f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	491e      	ldr	r1, [pc, #120]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	4918      	ldr	r1, [pc, #96]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800390a:	4b16      	ldr	r3, [pc, #88]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	43db      	mvns	r3, r3
 8003912:	4914      	ldr	r1, [pc, #80]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 8003914:	4013      	ands	r3, r2
 8003916:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d021      	beq.n	8003968 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	490e      	ldr	r1, [pc, #56]	; (8003964 <HAL_GPIO_Init+0x2d0>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	60cb      	str	r3, [r1, #12]
 8003930:	e021      	b.n	8003976 <HAL_GPIO_Init+0x2e2>
 8003932:	bf00      	nop
 8003934:	10320000 	.word	0x10320000
 8003938:	10310000 	.word	0x10310000
 800393c:	10220000 	.word	0x10220000
 8003940:	10210000 	.word	0x10210000
 8003944:	10120000 	.word	0x10120000
 8003948:	10110000 	.word	0x10110000
 800394c:	40021000 	.word	0x40021000
 8003950:	40010000 	.word	0x40010000
 8003954:	40010800 	.word	0x40010800
 8003958:	40010c00 	.word	0x40010c00
 800395c:	40011000 	.word	0x40011000
 8003960:	40011400 	.word	0x40011400
 8003964:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_GPIO_Init+0x304>)
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	43db      	mvns	r3, r3
 8003970:	4909      	ldr	r1, [pc, #36]	; (8003998 <HAL_GPIO_Init+0x304>)
 8003972:	4013      	ands	r3, r2
 8003974:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	3301      	adds	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	f47f ae8e 	bne.w	80036a8 <HAL_GPIO_Init+0x14>
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	372c      	adds	r7, #44	; 0x2c
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	40010400 	.word	0x40010400

0800399c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	887b      	ldrh	r3, [r7, #2]
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e001      	b.n	80039be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039be:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	807b      	strh	r3, [r7, #2]
 80039d6:	4613      	mov	r3, r2
 80039d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039da:	787b      	ldrb	r3, [r7, #1]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039e0:	887a      	ldrh	r2, [r7, #2]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039e6:	e003      	b.n	80039f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	041a      	lsls	r2, r3, #16
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	611a      	str	r2, [r3, #16]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b085      	sub	sp, #20
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a0c:	887a      	ldrh	r2, [r7, #2]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4013      	ands	r3, r2
 8003a12:	041a      	lsls	r2, r3, #16
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	43d9      	mvns	r1, r3
 8003a18:	887b      	ldrh	r3, [r7, #2]
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	611a      	str	r2, [r3, #16]
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e12b      	b.n	8003c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff f9c6 	bl	8002de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	; 0x24
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a90:	f003 f868 	bl	8006b64 <HAL_RCC_GetPCLK1Freq>
 8003a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4a81      	ldr	r2, [pc, #516]	; (8003ca0 <HAL_I2C_Init+0x274>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d807      	bhi.n	8003ab0 <HAL_I2C_Init+0x84>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a80      	ldr	r2, [pc, #512]	; (8003ca4 <HAL_I2C_Init+0x278>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	bf94      	ite	ls
 8003aa8:	2301      	movls	r3, #1
 8003aaa:	2300      	movhi	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e006      	b.n	8003abe <HAL_I2C_Init+0x92>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a7d      	ldr	r2, [pc, #500]	; (8003ca8 <HAL_I2C_Init+0x27c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	bf94      	ite	ls
 8003ab8:	2301      	movls	r3, #1
 8003aba:	2300      	movhi	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0e7      	b.n	8003c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a78      	ldr	r2, [pc, #480]	; (8003cac <HAL_I2C_Init+0x280>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0c9b      	lsrs	r3, r3, #18
 8003ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a6a      	ldr	r2, [pc, #424]	; (8003ca0 <HAL_I2C_Init+0x274>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d802      	bhi.n	8003b00 <HAL_I2C_Init+0xd4>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3301      	adds	r3, #1
 8003afe:	e009      	b.n	8003b14 <HAL_I2C_Init+0xe8>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	4a69      	ldr	r2, [pc, #420]	; (8003cb0 <HAL_I2C_Init+0x284>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	099b      	lsrs	r3, r3, #6
 8003b12:	3301      	adds	r3, #1
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	495c      	ldr	r1, [pc, #368]	; (8003ca0 <HAL_I2C_Init+0x274>)
 8003b30:	428b      	cmp	r3, r1
 8003b32:	d819      	bhi.n	8003b68 <HAL_I2C_Init+0x13c>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1e59      	subs	r1, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b42:	1c59      	adds	r1, r3, #1
 8003b44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b48:	400b      	ands	r3, r1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_I2C_Init+0x138>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1e59      	subs	r1, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b62:	e051      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003b64:	2304      	movs	r3, #4
 8003b66:	e04f      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d111      	bne.n	8003b94 <HAL_I2C_Init+0x168>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1e58      	subs	r0, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	440b      	add	r3, r1
 8003b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e012      	b.n	8003bba <HAL_I2C_Init+0x18e>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e58      	subs	r0, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	0099      	lsls	r1, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Init+0x196>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e022      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10e      	bne.n	8003be8 <HAL_I2C_Init+0x1bc>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1e58      	subs	r0, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	440b      	add	r3, r1
 8003bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be6:	e00f      	b.n	8003c08 <HAL_I2C_Init+0x1dc>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1e58      	subs	r0, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	0099      	lsls	r1, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	6809      	ldr	r1, [r1, #0]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6911      	ldr	r1, [r2, #16]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68d2      	ldr	r2, [r2, #12]
 8003c42:	4311      	orrs	r1, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	000186a0 	.word	0x000186a0
 8003ca4:	001e847f 	.word	0x001e847f
 8003ca8:	003d08ff 	.word	0x003d08ff
 8003cac:	431bde83 	.word	0x431bde83
 8003cb0:	10624dd3 	.word	0x10624dd3

08003cb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	817b      	strh	r3, [r7, #10]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	813b      	strh	r3, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cce:	f7ff fba5 	bl	800341c <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	f040 80d9 	bne.w	8003e94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	2319      	movs	r3, #25
 8003ce8:	2201      	movs	r2, #1
 8003cea:	496d      	ldr	r1, [pc, #436]	; (8003ea0 <HAL_I2C_Mem_Write+0x1ec>)
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fcc1 	bl	8004674 <I2C_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e0cc      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Mem_Write+0x56>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e0c5      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d007      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2221      	movs	r2, #33	; 0x21
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2240      	movs	r2, #64	; 0x40
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a4d      	ldr	r2, [pc, #308]	; (8003ea4 <HAL_I2C_Mem_Write+0x1f0>)
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d72:	88f8      	ldrh	r0, [r7, #6]
 8003d74:	893a      	ldrh	r2, [r7, #8]
 8003d76:	8979      	ldrh	r1, [r7, #10]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	4603      	mov	r3, r0
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 faf8 	bl	8004378 <I2C_RequestMemoryWrite>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d052      	beq.n	8003e34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e081      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fd42 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d107      	bne.n	8003dba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06b      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d11b      	bne.n	8003e34 <HAL_I2C_Mem_Write+0x180>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d017      	beq.n	8003e34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1aa      	bne.n	8003d92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fd2e 	bl	80048a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00d      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d107      	bne.n	8003e64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e016      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	00100002 	.word	0x00100002
 8003ea4:	ffff0000 	.word	0xffff0000

08003ea8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	817b      	strh	r3, [r7, #10]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	813b      	strh	r3, [r7, #8]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ec6:	f7ff faa9 	bl	800341c <HAL_GetTick>
 8003eca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	f040 8244 	bne.w	8004362 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2319      	movs	r3, #25
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	4982      	ldr	r1, [pc, #520]	; (80040ec <HAL_I2C_Mem_Read+0x244>)
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fbc5 	bl	8004674 <I2C_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e237      	b.n	8004364 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_I2C_Mem_Read+0x5a>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e230      	b.n	8004364 <HAL_I2C_Mem_Read+0x4bc>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d007      	beq.n	8003f28 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2222      	movs	r2, #34	; 0x22
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2240      	movs	r2, #64	; 0x40
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a62      	ldr	r2, [pc, #392]	; (80040f0 <HAL_I2C_Mem_Read+0x248>)
 8003f68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f6a:	88f8      	ldrh	r0, [r7, #6]
 8003f6c:	893a      	ldrh	r2, [r7, #8]
 8003f6e:	8979      	ldrh	r1, [r7, #10]
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	4603      	mov	r3, r0
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fa92 	bl	80044a4 <I2C_RequestMemoryRead>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e1ec      	b.n	8004364 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d113      	bne.n	8003fba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e1c0      	b.n	800433c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d11e      	bne.n	8004000 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd2:	b672      	cpsid	i
}
 8003fd4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ffc:	b662      	cpsie	i
}
 8003ffe:	e035      	b.n	800406c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b02      	cmp	r3, #2
 8004006:	d11e      	bne.n	8004046 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004016:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004018:	b672      	cpsid	i
}
 800401a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004040:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004042:	b662      	cpsie	i
}
 8004044:	e012      	b.n	800406c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004054:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004056:	2300      	movs	r3, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800406c:	e166      	b.n	800433c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004072:	2b03      	cmp	r3, #3
 8004074:	f200 811f 	bhi.w	80042b6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407c:	2b01      	cmp	r3, #1
 800407e:	d123      	bne.n	80040c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004082:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fc4d 	bl	8004924 <I2C_WaitOnRXNEFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e167      	b.n	8004364 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040c6:	e139      	b.n	800433c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d152      	bne.n	8004176 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d6:	2200      	movs	r2, #0
 80040d8:	4906      	ldr	r1, [pc, #24]	; (80040f4 <HAL_I2C_Mem_Read+0x24c>)
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 faca 	bl	8004674 <I2C_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e13c      	b.n	8004364 <HAL_I2C_Mem_Read+0x4bc>
 80040ea:	bf00      	nop
 80040ec:	00100002 	.word	0x00100002
 80040f0:	ffff0000 	.word	0xffff0000
 80040f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80040f8:	b672      	cpsid	i
}
 80040fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800413e:	b662      	cpsie	i
}
 8004140:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004174:	e0e2      	b.n	800433c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	2200      	movs	r2, #0
 800417e:	497b      	ldr	r1, [pc, #492]	; (800436c <HAL_I2C_Mem_Read+0x4c4>)
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fa77 	bl	8004674 <I2C_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0e9      	b.n	8004364 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041a0:	b672      	cpsid	i
}
 80041a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041d6:	4b66      	ldr	r3, [pc, #408]	; (8004370 <HAL_I2C_Mem_Read+0x4c8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	08db      	lsrs	r3, r3, #3
 80041dc:	4a65      	ldr	r2, [pc, #404]	; (8004374 <HAL_I2C_Mem_Read+0x4cc>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	0a1a      	lsrs	r2, r3, #8
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	00da      	lsls	r2, r3, #3
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d118      	bne.n	800422e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f043 0220 	orr.w	r2, r3, #32
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800421e:	b662      	cpsie	i
}
 8004220:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e09a      	b.n	8004364 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d1d9      	bne.n	80041f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800427e:	b662      	cpsie	i
}
 8004280:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b4:	e042      	b.n	800433c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fb32 	bl	8004924 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e04c      	b.n	8004364 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b04      	cmp	r3, #4
 8004308:	d118      	bne.n	800433c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f ae94 	bne.w	800406e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e000      	b.n	8004364 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004362:	2302      	movs	r3, #2
  }
}
 8004364:	4618      	mov	r0, r3
 8004366:	3728      	adds	r7, #40	; 0x28
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	00010004 	.word	0x00010004
 8004370:	2000000c 	.word	0x2000000c
 8004374:	14f8b589 	.word	0x14f8b589

08004378 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	4608      	mov	r0, r1
 8004382:	4611      	mov	r1, r2
 8004384:	461a      	mov	r2, r3
 8004386:	4603      	mov	r3, r0
 8004388:	817b      	strh	r3, [r7, #10]
 800438a:	460b      	mov	r3, r1
 800438c:	813b      	strh	r3, [r7, #8]
 800438e:	4613      	mov	r3, r2
 8004390:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f960 	bl	8004674 <I2C_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00d      	beq.n	80043d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c8:	d103      	bne.n	80043d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e05f      	b.n	8004496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043d6:	897b      	ldrh	r3, [r7, #10]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	6a3a      	ldr	r2, [r7, #32]
 80043ea:	492d      	ldr	r1, [pc, #180]	; (80044a0 <I2C_RequestMemoryWrite+0x128>)
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f998 	bl	8004722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e04c      	b.n	8004496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004414:	6a39      	ldr	r1, [r7, #32]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fa02 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00d      	beq.n	800443e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2b04      	cmp	r3, #4
 8004428:	d107      	bne.n	800443a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004438:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e02b      	b.n	8004496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d105      	bne.n	8004450 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004444:	893b      	ldrh	r3, [r7, #8]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	611a      	str	r2, [r3, #16]
 800444e:	e021      	b.n	8004494 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004450:	893b      	ldrh	r3, [r7, #8]
 8004452:	0a1b      	lsrs	r3, r3, #8
 8004454:	b29b      	uxth	r3, r3
 8004456:	b2da      	uxtb	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800445e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004460:	6a39      	ldr	r1, [r7, #32]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f9dc 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	2b04      	cmp	r3, #4
 8004474:	d107      	bne.n	8004486 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004484:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e005      	b.n	8004496 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800448a:	893b      	ldrh	r3, [r7, #8]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	00010002 	.word	0x00010002

080044a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	460b      	mov	r3, r1
 80044b8:	813b      	strh	r3, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f8c2 	bl	8004674 <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004504:	d103      	bne.n	800450e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e0aa      	b.n	8004668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004512:	897b      	ldrh	r3, [r7, #10]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004520:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	4952      	ldr	r1, [pc, #328]	; (8004670 <I2C_RequestMemoryRead+0x1cc>)
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f8fa 	bl	8004722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e097      	b.n	8004668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800454e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004550:	6a39      	ldr	r1, [r7, #32]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f964 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00d      	beq.n	800457a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	2b04      	cmp	r3, #4
 8004564:	d107      	bne.n	8004576 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004574:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e076      	b.n	8004668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d105      	bne.n	800458c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004580:	893b      	ldrh	r3, [r7, #8]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	611a      	str	r2, [r3, #16]
 800458a:	e021      	b.n	80045d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800458c:	893b      	ldrh	r3, [r7, #8]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	b29b      	uxth	r3, r3
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800459a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459c:	6a39      	ldr	r1, [r7, #32]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f93e 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00d      	beq.n	80045c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d107      	bne.n	80045c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e050      	b.n	8004668 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c6:	893b      	ldrh	r3, [r7, #8]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	6a39      	ldr	r1, [r7, #32]
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f923 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d107      	bne.n	80045f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e035      	b.n	8004668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	2200      	movs	r2, #0
 8004614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f82b 	bl	8004674 <I2C_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004632:	d103      	bne.n	800463c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800463a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e013      	b.n	8004668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004640:	897b      	ldrh	r3, [r7, #10]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	6a3a      	ldr	r2, [r7, #32]
 8004654:	4906      	ldr	r1, [pc, #24]	; (8004670 <I2C_RequestMemoryRead+0x1cc>)
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f863 	bl	8004722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	00010002 	.word	0x00010002

08004674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	4613      	mov	r3, r2
 8004682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004684:	e025      	b.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d021      	beq.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468e:	f7fe fec5 	bl	800341c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d302      	bcc.n	80046a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d116      	bne.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f043 0220 	orr.w	r2, r3, #32
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e023      	b.n	800471a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10d      	bne.n	80046f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	43da      	mvns	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf0c      	ite	eq
 80046ee:	2301      	moveq	r3, #1
 80046f0:	2300      	movne	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	e00c      	b.n	8004712 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	43da      	mvns	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	429a      	cmp	r2, r3
 8004716:	d0b6      	beq.n	8004686 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004730:	e051      	b.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d123      	bne.n	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004750:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800475a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f043 0204 	orr.w	r2, r3, #4
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e046      	b.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d021      	beq.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004792:	f7fe fe43 	bl	800341c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d116      	bne.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f043 0220 	orr.w	r2, r3, #32
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e020      	b.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d10c      	bne.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	43da      	mvns	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4013      	ands	r3, r2
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bf14      	ite	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	2300      	moveq	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	e00b      	b.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	43da      	mvns	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d18d      	bne.n	8004732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800482c:	e02d      	b.n	800488a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f8ce 	bl	80049d0 <I2C_IsAcknowledgeFailed>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e02d      	b.n	800489a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d021      	beq.n	800488a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fe fde9 	bl	800341c <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d116      	bne.n	800488a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0220 	orr.w	r2, r3, #32
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e007      	b.n	800489a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d1ca      	bne.n	800482e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ae:	e02d      	b.n	800490c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f88d 	bl	80049d0 <I2C_IsAcknowledgeFailed>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e02d      	b.n	800491c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d021      	beq.n	800490c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c8:	f7fe fda8 	bl	800341c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d302      	bcc.n	80048de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d116      	bne.n	800490c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	f043 0220 	orr.w	r2, r3, #32
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e007      	b.n	800491c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b04      	cmp	r3, #4
 8004918:	d1ca      	bne.n	80048b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004930:	e042      	b.n	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b10      	cmp	r3, #16
 800493e:	d119      	bne.n	8004974 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0210 	mvn.w	r2, #16
 8004948:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e029      	b.n	80049c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004974:	f7fe fd52 	bl	800341c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d116      	bne.n	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e007      	b.n	80049c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d1b5      	bne.n	8004932 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e6:	d11b      	bne.n	8004a20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	f043 0204 	orr.w	r2, r3, #4
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a2e:	b08b      	sub	sp, #44	; 0x2c
 8004a30:	af06      	add	r7, sp, #24
 8004a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e0fd      	b.n	8004c3a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f006 fbd4 	bl	800b200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f002 fbf1 	bl	800724c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	687e      	ldr	r6, [r7, #4]
 8004a72:	466d      	mov	r5, sp
 8004a74:	f106 0410 	add.w	r4, r6, #16
 8004a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	602b      	str	r3, [r5, #0]
 8004a80:	1d33      	adds	r3, r6, #4
 8004a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a84:	6838      	ldr	r0, [r7, #0]
 8004a86:	f002 fbbb 	bl	8007200 <USB_CoreInit>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0ce      	b.n	8004c3a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f002 fbec 	bl	8007280 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	73fb      	strb	r3, [r7, #15]
 8004aac:	e04c      	b.n	8004b48 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	440b      	add	r3, r1
 8004abe:	3301      	adds	r3, #1
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	440b      	add	r3, r1
 8004ad4:	7bfa      	ldrb	r2, [r7, #15]
 8004ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ad8:	7bfa      	ldrb	r2, [r7, #15]
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	b298      	uxth	r0, r3
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	440b      	add	r3, r1
 8004aea:	3336      	adds	r3, #54	; 0x36
 8004aec:	4602      	mov	r2, r0
 8004aee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	440b      	add	r3, r1
 8004b00:	3303      	adds	r3, #3
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b06:	7bfa      	ldrb	r2, [r7, #15]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	440b      	add	r3, r1
 8004b14:	3338      	adds	r3, #56	; 0x38
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b1a:	7bfa      	ldrb	r2, [r7, #15]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	440b      	add	r3, r1
 8004b28:	333c      	adds	r3, #60	; 0x3c
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	440b      	add	r3, r1
 8004b3c:	3340      	adds	r3, #64	; 0x40
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	3301      	adds	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	7bfa      	ldrb	r2, [r7, #15]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d3ad      	bcc.n	8004aae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	73fb      	strb	r3, [r7, #15]
 8004b56:	e044      	b.n	8004be2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b58:	7bfa      	ldrb	r2, [r7, #15]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	440b      	add	r3, r1
 8004b66:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b6e:	7bfa      	ldrb	r2, [r7, #15]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	440b      	add	r3, r1
 8004b7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b80:	7bfa      	ldrb	r2, [r7, #15]
 8004b82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b84:	7bfa      	ldrb	r2, [r7, #15]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	440b      	add	r3, r1
 8004b92:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b9a:	7bfa      	ldrb	r2, [r7, #15]
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	440b      	add	r3, r1
 8004ba8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	440b      	add	r3, r1
 8004bbe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004bc6:	7bfa      	ldrb	r2, [r7, #15]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	3301      	adds	r3, #1
 8004be0:	73fb      	strb	r3, [r7, #15]
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d3b5      	bcc.n	8004b58 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	687e      	ldr	r6, [r7, #4]
 8004bf4:	466d      	mov	r5, sp
 8004bf6:	f106 0410 	add.w	r4, r6, #16
 8004bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	1d33      	adds	r3, r6, #4
 8004c04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c06:	6838      	ldr	r0, [r7, #0]
 8004c08:	f002 fb46 	bl	8007298 <USB_DevInit>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2202      	movs	r2, #2
 8004c16:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e00d      	b.n	8004c3a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f004 fcb7 	bl	80095a6 <USB_DevDisconnect>

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_PCD_Start+0x16>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e016      	b.n	8004c86 <HAL_PCD_Start+0x44>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f002 fadb 	bl	8007220 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f006 fd3a 	bl	800b6e6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f004 fc8b 	bl	8009592 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b088      	sub	sp, #32
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f004 fc8d 	bl	80095ba <USB_ReadInterrupts>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004caa:	d102      	bne.n	8004cb2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fb61 	bl	8005374 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f004 fc7f 	bl	80095ba <USB_ReadInterrupts>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc6:	d112      	bne.n	8004cee <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	b292      	uxth	r2, r2
 8004cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f006 fb08 	bl	800b2f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f925 	bl	8004f38 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f004 fc61 	bl	80095ba <USB_ReadInterrupts>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d02:	d10b      	bne.n	8004d1c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d16:	b292      	uxth	r2, r2
 8004d18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f004 fc4a 	bl	80095ba <USB_ReadInterrupts>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d30:	d10b      	bne.n	8004d4a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d44:	b292      	uxth	r2, r2
 8004d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f004 fc33 	bl	80095ba <USB_ReadInterrupts>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	d126      	bne.n	8004dae <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0204 	bic.w	r2, r2, #4
 8004d72:	b292      	uxth	r2, r2
 8004d74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0208 	bic.w	r2, r2, #8
 8004d8a:	b292      	uxth	r2, r2
 8004d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f006 fae9 	bl	800b368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004da8:	b292      	uxth	r2, r2
 8004daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f004 fc01 	bl	80095ba <USB_ReadInterrupts>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc2:	f040 8084 	bne.w	8004ece <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	e011      	b.n	8004df0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	7ffb      	ldrb	r3, [r7, #31]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	7ffb      	ldrb	r3, [r7, #31]
 8004dda:	8812      	ldrh	r2, [r2, #0]
 8004ddc:	b292      	uxth	r2, r2
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	f107 0120 	add.w	r1, r7, #32
 8004de4:	440b      	add	r3, r1
 8004de6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004dea:	7ffb      	ldrb	r3, [r7, #31]
 8004dec:	3301      	adds	r3, #1
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	7ffb      	ldrb	r3, [r7, #31]
 8004df2:	2b07      	cmp	r3, #7
 8004df4:	d9ea      	bls.n	8004dcc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	b292      	uxth	r2, r2
 8004e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	b292      	uxth	r2, r2
 8004e22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004e26:	bf00      	nop
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f6      	beq.n	8004e28 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4c:	b292      	uxth	r2, r2
 8004e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004e52:	2300      	movs	r3, #0
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e010      	b.n	8004e7a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004e58:	7ffb      	ldrb	r3, [r7, #31]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	4611      	mov	r1, r2
 8004e60:	7ffa      	ldrb	r2, [r7, #31]
 8004e62:	0092      	lsls	r2, r2, #2
 8004e64:	440a      	add	r2, r1
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	f107 0120 	add.w	r1, r7, #32
 8004e6c:	440b      	add	r3, r1
 8004e6e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004e72:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004e74:	7ffb      	ldrb	r3, [r7, #31]
 8004e76:	3301      	adds	r3, #1
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	7ffb      	ldrb	r3, [r7, #31]
 8004e7c:	2b07      	cmp	r3, #7
 8004e7e:	d9eb      	bls.n	8004e58 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0208 	orr.w	r2, r2, #8
 8004e92:	b292      	uxth	r2, r2
 8004e94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eaa:	b292      	uxth	r2, r2
 8004eac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0204 	orr.w	r2, r2, #4
 8004ec2:	b292      	uxth	r2, r2
 8004ec4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f006 fa33 	bl	800b334 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f004 fb71 	bl	80095ba <USB_ReadInterrupts>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee2:	d10e      	bne.n	8004f02 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f006 f9ec 	bl	800b2da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f004 fb57 	bl	80095ba <USB_ReadInterrupts>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f16:	d10b      	bne.n	8004f30 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f2a:	b292      	uxth	r2, r2
 8004f2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004f30:	bf00      	nop
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_PCD_SetAddress+0x1a>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e013      	b.n	8004f7a <HAL_PCD_SetAddress+0x42>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f004 fafe 	bl	800956c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	461a      	mov	r2, r3
 8004f90:	4603      	mov	r3, r0
 8004f92:	70fb      	strb	r3, [r7, #3]
 8004f94:	460b      	mov	r3, r1
 8004f96:	803b      	strh	r3, [r7, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da0e      	bge.n	8004fc6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4413      	add	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	705a      	strb	r2, [r3, #1]
 8004fc4:	e00e      	b.n	8004fe4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	f003 0207 	and.w	r2, r3, #7
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4413      	add	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ff0:	883a      	ldrh	r2, [r7, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	78ba      	ldrb	r2, [r7, #2]
 8004ffa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800500e:	78bb      	ldrb	r3, [r7, #2]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d102      	bne.n	800501a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_PCD_EP_Open+0xa6>
 8005024:	2302      	movs	r3, #2
 8005026:	e00e      	b.n	8005046 <HAL_PCD_EP_Open+0xc4>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68f9      	ldr	r1, [r7, #12]
 8005036:	4618      	mov	r0, r3
 8005038:	f002 f94e 	bl	80072d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005044:	7afb      	ldrb	r3, [r7, #11]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	460b      	mov	r3, r1
 8005058:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800505a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800505e:	2b00      	cmp	r3, #0
 8005060:	da0e      	bge.n	8005080 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	705a      	strb	r2, [r3, #1]
 800507e:	e00e      	b.n	800509e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	f003 0207 	and.w	r2, r3, #7
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_PCD_EP_Close+0x6a>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e00e      	b.n	80050d6 <HAL_PCD_EP_Close+0x88>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68f9      	ldr	r1, [r7, #12]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f002 fc70 	bl	80079ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	460b      	mov	r3, r1
 80050ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	f003 0207 	and.w	r2, r3, #7
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2200      	movs	r2, #0
 8005116:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2200      	movs	r2, #0
 800511c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800511e:	7afb      	ldrb	r3, [r7, #11]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	b2da      	uxtb	r2, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800512a:	7afb      	ldrb	r3, [r7, #11]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6979      	ldr	r1, [r7, #20]
 800513a:	4618      	mov	r0, r3
 800513c:	f002 fe22 	bl	8007d84 <USB_EPStartXfer>
 8005140:	e005      	b.n	800514e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6979      	ldr	r1, [r7, #20]
 8005148:	4618      	mov	r0, r3
 800514a:	f002 fe1b 	bl	8007d84 <USB_EPStartXfer>
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	f003 0207 	and.w	r2, r3, #7
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	440b      	add	r3, r1
 8005176:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800517a:	681b      	ldr	r3, [r3, #0]
}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	460b      	mov	r3, r1
 8005194:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005196:	7afb      	ldrb	r3, [r7, #11]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2201      	movs	r2, #1
 80051d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051d2:	7afb      	ldrb	r3, [r7, #11]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051de:	7afb      	ldrb	r3, [r7, #11]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6979      	ldr	r1, [r7, #20]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f002 fdc8 	bl	8007d84 <USB_EPStartXfer>
 80051f4:	e005      	b.n	8005202 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6979      	ldr	r1, [r7, #20]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f002 fdc1 	bl	8007d84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	f003 0207 	and.w	r2, r3, #7
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d901      	bls.n	800522a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e04c      	b.n	80052c4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800522a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800522e:	2b00      	cmp	r3, #0
 8005230:	da0e      	bge.n	8005250 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4413      	add	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	705a      	strb	r2, [r3, #1]
 800524e:	e00c      	b.n	800526a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005250:	78fa      	ldrb	r2, [r7, #3]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	b2da      	uxtb	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_PCD_EP_SetStall+0x7e>
 8005286:	2302      	movs	r3, #2
 8005288:	e01c      	b.n	80052c4 <HAL_PCD_EP_SetStall+0xb8>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	4618      	mov	r0, r3
 800529a:	f004 f86a 	bl	8009372 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d108      	bne.n	80052ba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f004 f98f 	bl	80095d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	f003 020f 	and.w	r2, r3, #15
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d901      	bls.n	80052ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e040      	b.n	800536c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da0e      	bge.n	8005310 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	705a      	strb	r2, [r3, #1]
 800530e:	e00e      	b.n	800532e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	f003 0207 	and.w	r2, r3, #7
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	4413      	add	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_PCD_EP_ClrStall+0x82>
 800534a:	2302      	movs	r3, #2
 800534c:	e00e      	b.n	800536c <HAL_PCD_EP_ClrStall+0xa0>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68f9      	ldr	r1, [r7, #12]
 800535c:	4618      	mov	r0, r3
 800535e:	f004 f858 	bl	8009412 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08e      	sub	sp, #56	; 0x38
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800537c:	e2ec      	b.n	8005958 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005386:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005388:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005394:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 8161 	bne.w	8005660 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800539e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d152      	bne.n	800544e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80053b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b8:	81fb      	strh	r3, [r7, #14]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	89fb      	ldrh	r3, [r7, #14]
 80053c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3328      	adds	r3, #40	; 0x28
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053da:	b29b      	uxth	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	3302      	adds	r3, #2
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	441a      	add	r2, r3
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800540c:	2100      	movs	r1, #0
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f005 ff49 	bl	800b2a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 829b 	beq.w	8005958 <PCD_EP_ISR_Handler+0x5e4>
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 8296 	bne.w	8005958 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005438:	b2da      	uxtb	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	b292      	uxth	r2, r2
 8005440:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800544c:	e284      	b.n	8005958 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800545e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005464:	2b00      	cmp	r3, #0
 8005466:	d034      	beq.n	80054d2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005470:	b29b      	uxth	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	4413      	add	r3, r2
 800547c:	3306      	adds	r3, #6
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f004 f8e6 	bl	8009678 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80054b8:	4013      	ands	r3, r2
 80054ba:	823b      	strh	r3, [r7, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	8a3a      	ldrh	r2, [r7, #16]
 80054c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054c6:	b292      	uxth	r2, r2
 80054c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f005 febe 	bl	800b24c <HAL_PCD_SetupStageCallback>
 80054d0:	e242      	b.n	8005958 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80054d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f280 823e 	bge.w	8005958 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80054e8:	4013      	ands	r3, r2
 80054ea:	83bb      	strh	r3, [r7, #28]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	8bba      	ldrh	r2, [r7, #28]
 80054f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054f6:	b292      	uxth	r2, r2
 80054f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005502:	b29b      	uxth	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	4413      	add	r3, r2
 800550e:	3306      	adds	r3, #6
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d019      	beq.n	8005562 <PCD_EP_ISR_Handler+0x1ee>
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d015      	beq.n	8005562 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	6959      	ldr	r1, [r3, #20]
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005546:	b29b      	uxth	r3, r3
 8005548:	f004 f896 	bl	8009678 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	695a      	ldr	r2, [r3, #20]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	441a      	add	r2, r3
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800555a:	2100      	movs	r1, #0
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f005 fe87 	bl	800b270 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 81f2 	bne.w	8005958 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005582:	b29b      	uxth	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	4413      	add	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d112      	bne.n	80055c2 <PCD_EP_ISR_Handler+0x24e>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	801a      	strh	r2, [r3, #0]
 80055c0:	e02f      	b.n	8005622 <PCD_EP_ISR_Handler+0x2ae>
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b3e      	cmp	r3, #62	; 0x3e
 80055c8:	d813      	bhi.n	80055f2 <PCD_EP_ISR_Handler+0x27e>
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	085b      	lsrs	r3, r3, #1
 80055d0:	633b      	str	r3, [r7, #48]	; 0x30
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <PCD_EP_ISR_Handler+0x270>
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	3301      	adds	r3, #1
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	029b      	lsls	r3, r3, #10
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	e017      	b.n	8005622 <PCD_EP_ISR_Handler+0x2ae>
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	633b      	str	r3, [r7, #48]	; 0x30
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <PCD_EP_ISR_Handler+0x298>
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	3b01      	subs	r3, #1
 800560a:	633b      	str	r3, [r7, #48]	; 0x30
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	b29b      	uxth	r3, r3
 8005610:	029b      	lsls	r3, r3, #10
 8005612:	b29b      	uxth	r3, r3
 8005614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561c:	b29a      	uxth	r2, r3
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	827b      	strh	r3, [r7, #18]
 8005634:	8a7b      	ldrh	r3, [r7, #18]
 8005636:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800563a:	827b      	strh	r3, [r7, #18]
 800563c:	8a7b      	ldrh	r3, [r7, #18]
 800563e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005642:	827b      	strh	r3, [r7, #18]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	8a7b      	ldrh	r3, [r7, #18]
 800564a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800565a:	b29b      	uxth	r3, r3
 800565c:	8013      	strh	r3, [r2, #0]
 800565e:	e17b      	b.n	8005958 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005672:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005676:	2b00      	cmp	r3, #0
 8005678:	f280 80ea 	bge.w	8005850 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29a      	uxth	r2, r3
 800568e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005692:	4013      	ands	r3, r2
 8005694:	853b      	strh	r3, [r7, #40]	; 0x28
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80056a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056aa:	b292      	uxth	r2, r2
 80056ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80056ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	7b1b      	ldrb	r3, [r3, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d122      	bne.n	8005712 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4413      	add	r3, r2
 80056e0:	3306      	adds	r3, #6
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056f4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80056f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8087 	beq.w	800580c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	6959      	ldr	r1, [r3, #20]
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	88da      	ldrh	r2, [r3, #6]
 800570a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800570c:	f003 ffb4 	bl	8009678 <USB_ReadPMA>
 8005710:	e07c      	b.n	800580c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	78db      	ldrb	r3, [r3, #3]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d108      	bne.n	800572c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800571a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800571c:	461a      	mov	r2, r3
 800571e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f927 	bl	8005974 <HAL_PCD_EP_DB_Receive>
 8005726:	4603      	mov	r3, r0
 8005728:	86fb      	strh	r3, [r7, #54]	; 0x36
 800572a:	e06f      	b.n	800580c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	847b      	strh	r3, [r7, #34]	; 0x22
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	441a      	add	r2, r3
 8005756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005768:	b29b      	uxth	r3, r3
 800576a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d021      	beq.n	80057ca <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800578e:	b29b      	uxth	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	3302      	adds	r3, #2
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80057b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d02a      	beq.n	800580c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	6959      	ldr	r1, [r3, #20]
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	891a      	ldrh	r2, [r3, #8]
 80057c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057c4:	f003 ff58 	bl	8009678 <USB_ReadPMA>
 80057c8:	e020      	b.n	800580c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4413      	add	r3, r2
 80057de:	3306      	adds	r3, #6
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057f2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80057f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	6959      	ldr	r1, [r3, #20]
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	895a      	ldrh	r2, [r3, #10]
 8005806:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005808:	f003 ff36 	bl	8009678 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005812:	441a      	add	r2, r3
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800581e:	441a      	add	r2, r3
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <PCD_EP_ISR_Handler+0x4c2>
 800582c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	429a      	cmp	r2, r3
 8005834:	d206      	bcs.n	8005844 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f005 fd17 	bl	800b270 <HAL_PCD_DataOutStageCallback>
 8005842:	e005      	b.n	8005850 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800584a:	4618      	mov	r0, r3
 800584c:	f002 fa9a 	bl	8007d84 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005856:	2b00      	cmp	r3, #0
 8005858:	d07e      	beq.n	8005958 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800585a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005888:	843b      	strh	r3, [r7, #32]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	441a      	add	r2, r3
 8005898:	8c3b      	ldrh	r3, [r7, #32]
 800589a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800589e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	78db      	ldrb	r3, [r3, #3]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d00c      	beq.n	80058c8 <PCD_EP_ISR_Handler+0x554>
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	78db      	ldrb	r3, [r3, #3]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d146      	bne.n	800594c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80058be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d141      	bne.n	800594c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	3302      	adds	r3, #2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	8bfb      	ldrh	r3, [r7, #30]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d906      	bls.n	800590a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	8bfb      	ldrh	r3, [r7, #30]
 8005902:	1ad2      	subs	r2, r2, r3
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	619a      	str	r2, [r3, #24]
 8005908:	e002      	b.n	8005910 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	2200      	movs	r2, #0
 800590e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d106      	bne.n	8005926 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f005 fcc1 	bl	800b2a6 <HAL_PCD_DataInStageCallback>
 8005924:	e018      	b.n	8005958 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	8bfb      	ldrh	r3, [r7, #30]
 800592c:	441a      	add	r2, r3
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	8bfb      	ldrh	r3, [r7, #30]
 8005938:	441a      	add	r2, r3
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005944:	4618      	mov	r0, r3
 8005946:	f002 fa1d 	bl	8007d84 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800594a:	e005      	b.n	8005958 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800594c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800594e:	461a      	mov	r2, r3
 8005950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f91b 	bl	8005b8e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005960:	b29b      	uxth	r3, r3
 8005962:	b21b      	sxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	f6ff ad0a 	blt.w	800537e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3738      	adds	r7, #56	; 0x38
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d07e      	beq.n	8005a8a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005994:	b29b      	uxth	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	3302      	adds	r3, #2
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	8b7b      	ldrh	r3, [r7, #26]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d306      	bcc.n	80059ce <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	8b7b      	ldrh	r3, [r7, #26]
 80059c6:	1ad2      	subs	r2, r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	619a      	str	r2, [r3, #24]
 80059cc:	e002      	b.n	80059d4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2200      	movs	r2, #0
 80059d2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d123      	bne.n	8005a24 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	833b      	strh	r3, [r7, #24]
 80059f8:	8b3b      	ldrh	r3, [r7, #24]
 80059fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059fe:	833b      	strh	r3, [r7, #24]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	8b3b      	ldrh	r3, [r7, #24]
 8005a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a24:	88fb      	ldrh	r3, [r7, #6]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01f      	beq.n	8005a6e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a48:	82fb      	strh	r3, [r7, #22]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	8afb      	ldrh	r3, [r7, #22]
 8005a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a6e:	8b7b      	ldrh	r3, [r7, #26]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8087 	beq.w	8005b84 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6959      	ldr	r1, [r3, #20]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	891a      	ldrh	r2, [r3, #8]
 8005a82:	8b7b      	ldrh	r3, [r7, #26]
 8005a84:	f003 fdf8 	bl	8009678 <USB_ReadPMA>
 8005a88:	e07c      	b.n	8005b84 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	3306      	adds	r3, #6
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	699a      	ldr	r2, [r3, #24]
 8005ab8:	8b7b      	ldrh	r3, [r7, #26]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d306      	bcc.n	8005acc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	8b7b      	ldrh	r3, [r7, #26]
 8005ac4:	1ad2      	subs	r2, r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	619a      	str	r2, [r3, #24]
 8005aca:	e002      	b.n	8005ad2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d123      	bne.n	8005b22 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af4:	83fb      	strh	r3, [r7, #30]
 8005af6:	8bfb      	ldrh	r3, [r7, #30]
 8005af8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005afc:	83fb      	strh	r3, [r7, #30]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	441a      	add	r2, r3
 8005b0c:	8bfb      	ldrh	r3, [r7, #30]
 8005b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d11f      	bne.n	8005b6c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b46:	83bb      	strh	r3, [r7, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	8bbb      	ldrh	r3, [r7, #28]
 8005b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005b6c:	8b7b      	ldrh	r3, [r7, #26]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6959      	ldr	r1, [r3, #20]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	895a      	ldrh	r2, [r3, #10]
 8005b7e:	8b7b      	ldrh	r3, [r7, #26]
 8005b80:	f003 fd7a 	bl	8009678 <USB_ReadPMA>
    }
  }

  return count;
 8005b84:	8b7b      	ldrh	r3, [r7, #26]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b0a2      	sub	sp, #136	; 0x88
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b9c:	88fb      	ldrh	r3, [r7, #6]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 81c7 	beq.w	8005f36 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	3302      	adds	r3, #2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d907      	bls.n	8005bf0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005be8:	1ad2      	subs	r2, r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	619a      	str	r2, [r3, #24]
 8005bee:	e002      	b.n	8005bf6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f040 80b9 	bne.w	8005d72 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d126      	bne.n	8005c56 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	4413      	add	r3, r2
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	011a      	lsls	r2, r3, #4
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	4413      	add	r3, r2
 8005c2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e01a      	b.n	8005c8c <HAL_PCD_EP_DB_Transmit+0xfe>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d116      	bne.n	8005c8c <HAL_PCD_EP_DB_Transmit+0xfe>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	633b      	str	r3, [r7, #48]	; 0x30
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	4413      	add	r3, r2
 8005c74:	633b      	str	r3, [r7, #48]	; 0x30
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	011a      	lsls	r2, r3, #4
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	4413      	add	r3, r2
 8005c80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	2200      	movs	r2, #0
 8005c8a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	623b      	str	r3, [r7, #32]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d126      	bne.n	8005ce8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	4413      	add	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	011a      	lsls	r2, r3, #4
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	801a      	strh	r2, [r3, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	e017      	b.n	8005d18 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d113      	bne.n	8005d18 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	4413      	add	r3, r2
 8005d00:	623b      	str	r3, [r7, #32]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	011a      	lsls	r2, r3, #4
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	2200      	movs	r2, #0
 8005d16:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f005 fac1 	bl	800b2a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 82d4 	beq.w	80062d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	827b      	strh	r3, [r7, #18]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	8a7b      	ldrh	r3, [r7, #18]
 8005d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	8013      	strh	r3, [r2, #0]
 8005d70:	e2b2      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d021      	beq.n	8005dc0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	441a      	add	r2, r3
 8005da8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	f040 8286 	bne.w	80062d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	695a      	ldr	r2, [r3, #20]
 8005dd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005dd4:	441a      	add	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	69da      	ldr	r2, [r3, #28]
 8005dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005de2:	441a      	add	r2, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d309      	bcc.n	8005e08 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6a1a      	ldr	r2, [r3, #32]
 8005dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e00:	1ad2      	subs	r2, r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	621a      	str	r2, [r3, #32]
 8005e06:	e015      	b.n	8005e34 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d107      	bne.n	8005e20 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005e10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e14:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005e1e:	e009      	b.n	8005e34 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2200      	movs	r2, #0
 8005e32:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d155      	bne.n	8005ee8 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	4413      	add	r3, r2
 8005e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	011a      	lsls	r2, r3, #4
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e62:	637b      	str	r3, [r7, #52]	; 0x34
 8005e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d112      	bne.n	8005e90 <HAL_PCD_EP_DB_Transmit+0x302>
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	801a      	strh	r2, [r3, #0]
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	e047      	b.n	8005f20 <HAL_PCD_EP_DB_Transmit+0x392>
 8005e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e92:	2b3e      	cmp	r3, #62	; 0x3e
 8005e94:	d811      	bhi.n	8005eba <HAL_PCD_EP_DB_Transmit+0x32c>
 8005e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_PCD_EP_DB_Transmit+0x31e>
 8005ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	029b      	lsls	r3, r3, #10
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e032      	b.n	8005f20 <HAL_PCD_EP_DB_Transmit+0x392>
 8005eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <HAL_PCD_EP_DB_Transmit+0x342>
 8005eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	029b      	lsls	r3, r3, #10
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	e01b      	b.n	8005f20 <HAL_PCD_EP_DB_Transmit+0x392>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d117      	bne.n	8005f20 <HAL_PCD_EP_DB_Transmit+0x392>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f04:	4413      	add	r3, r2
 8005f06:	643b      	str	r3, [r7, #64]	; 0x40
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	011a      	lsls	r2, r3, #4
 8005f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f10:	4413      	add	r3, r2
 8005f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6959      	ldr	r1, [r3, #20]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	891a      	ldrh	r2, [r3, #8]
 8005f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f003 fb5d 	bl	80095ee <USB_WritePMA>
 8005f34:	e1d0      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	461a      	mov	r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	3306      	adds	r3, #6
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d307      	bcc.n	8005f7e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f76:	1ad2      	subs	r2, r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	619a      	str	r2, [r3, #24]
 8005f7c:	e002      	b.n	8005f84 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2200      	movs	r2, #0
 8005f82:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f040 80c4 	bne.w	8006116 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d126      	bne.n	8005fe4 <HAL_PCD_EP_DB_Transmit+0x456>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005faa:	4413      	add	r3, r2
 8005fac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	011a      	lsls	r2, r3, #4
 8005fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	e01a      	b.n	800601a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d116      	bne.n	800601a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	677b      	str	r3, [r7, #116]	; 0x74
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006000:	4413      	add	r3, r2
 8006002:	677b      	str	r3, [r7, #116]	; 0x74
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	011a      	lsls	r2, r3, #4
 800600a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800600c:	4413      	add	r3, r2
 800600e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006012:	673b      	str	r3, [r7, #112]	; 0x70
 8006014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006016:	2200      	movs	r2, #0
 8006018:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d12f      	bne.n	8006088 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006038:	b29b      	uxth	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006040:	4413      	add	r3, r2
 8006042:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	011a      	lsls	r2, r3, #4
 800604c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006050:	4413      	add	r3, r2
 8006052:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006056:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800605a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006066:	b29a      	uxth	r2, r3
 8006068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800607a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607e:	b29a      	uxth	r2, r3
 8006080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e017      	b.n	80060b8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d113      	bne.n	80060b8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006098:	b29b      	uxth	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800609e:	4413      	add	r3, r2
 80060a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	011a      	lsls	r2, r3, #4
 80060a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060aa:	4413      	add	r3, r2
 80060ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060b4:	2200      	movs	r2, #0
 80060b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f005 f8f1 	bl	800b2a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f040 8104 	bne.w	80062d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800610c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006110:	b29b      	uxth	r3, r3
 8006112:	8013      	strh	r3, [r2, #0]
 8006114:	e0e0      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d121      	bne.n	8006164 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	441a      	add	r2, r3
 800614c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800615c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006160:	b29b      	uxth	r3, r3
 8006162:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800616a:	2b01      	cmp	r3, #1
 800616c:	f040 80b4 	bne.w	80062d8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006178:	441a      	add	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	69da      	ldr	r2, [r3, #28]
 8006182:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006186:	441a      	add	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	429a      	cmp	r2, r3
 8006196:	d309      	bcc.n	80061ac <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6a1a      	ldr	r2, [r3, #32]
 80061a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a4:	1ad2      	subs	r2, r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	621a      	str	r2, [r3, #32]
 80061aa:	e015      	b.n	80061d8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d107      	bne.n	80061c4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80061b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80061c2:	e009      	b.n	80061d8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2200      	movs	r2, #0
 80061ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	667b      	str	r3, [r7, #100]	; 0x64
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d155      	bne.n	8006292 <HAL_PCD_EP_DB_Transmit+0x704>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061fa:	4413      	add	r3, r2
 80061fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	011a      	lsls	r2, r3, #4
 8006204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006206:	4413      	add	r3, r2
 8006208:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800620c:	65bb      	str	r3, [r7, #88]	; 0x58
 800620e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006210:	2b00      	cmp	r3, #0
 8006212:	d112      	bne.n	800623a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800621e:	b29a      	uxth	r2, r3
 8006220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006222:	801a      	strh	r2, [r3, #0]
 8006224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006232:	b29a      	uxth	r2, r3
 8006234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	e044      	b.n	80062c4 <HAL_PCD_EP_DB_Transmit+0x736>
 800623a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623c:	2b3e      	cmp	r3, #62	; 0x3e
 800623e:	d811      	bhi.n	8006264 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006242:	085b      	lsrs	r3, r3, #1
 8006244:	657b      	str	r3, [r7, #84]	; 0x54
 8006246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006252:	3301      	adds	r3, #1
 8006254:	657b      	str	r3, [r7, #84]	; 0x54
 8006256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006258:	b29b      	uxth	r3, r3
 800625a:	029b      	lsls	r3, r3, #10
 800625c:	b29a      	uxth	r2, r3
 800625e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	e02f      	b.n	80062c4 <HAL_PCD_EP_DB_Transmit+0x736>
 8006264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	657b      	str	r3, [r7, #84]	; 0x54
 800626a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800626c:	f003 031f 	and.w	r3, r3, #31
 8006270:	2b00      	cmp	r3, #0
 8006272:	d102      	bne.n	800627a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006276:	3b01      	subs	r3, #1
 8006278:	657b      	str	r3, [r7, #84]	; 0x54
 800627a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800627c:	b29b      	uxth	r3, r3
 800627e:	029b      	lsls	r3, r3, #10
 8006280:	b29b      	uxth	r3, r3
 8006282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800628a:	b29a      	uxth	r2, r3
 800628c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	e018      	b.n	80062c4 <HAL_PCD_EP_DB_Transmit+0x736>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d114      	bne.n	80062c4 <HAL_PCD_EP_DB_Transmit+0x736>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062a8:	4413      	add	r3, r2
 80062aa:	667b      	str	r3, [r7, #100]	; 0x64
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	011a      	lsls	r2, r3, #4
 80062b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b4:	4413      	add	r3, r2
 80062b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062ba:	663b      	str	r3, [r7, #96]	; 0x60
 80062bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062be:	b29a      	uxth	r2, r3
 80062c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6959      	ldr	r1, [r3, #20]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	895a      	ldrh	r2, [r3, #10]
 80062d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f003 f98b 	bl	80095ee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f2:	823b      	strh	r3, [r7, #16]
 80062f4:	8a3b      	ldrh	r3, [r7, #16]
 80062f6:	f083 0310 	eor.w	r3, r3, #16
 80062fa:	823b      	strh	r3, [r7, #16]
 80062fc:	8a3b      	ldrh	r3, [r7, #16]
 80062fe:	f083 0320 	eor.w	r3, r3, #32
 8006302:	823b      	strh	r3, [r7, #16]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	8a3b      	ldrh	r3, [r7, #16]
 8006314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006324:	b29b      	uxth	r3, r3
 8006326:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3788      	adds	r7, #136	; 0x88
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006332:	b480      	push	{r7}
 8006334:	b087      	sub	sp, #28
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	607b      	str	r3, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	817b      	strh	r3, [r7, #10]
 8006340:	4613      	mov	r3, r2
 8006342:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006344:	897b      	ldrh	r3, [r7, #10]
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006350:	897b      	ldrh	r3, [r7, #10]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	e009      	b.n	800637c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006368:	897a      	ldrh	r2, [r7, #10]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800637c:	893b      	ldrh	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2200      	movs	r2, #0
 8006386:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	b29a      	uxth	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	80da      	strh	r2, [r3, #6]
 8006390:	e00b      	b.n	80063aa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2201      	movs	r2, #1
 8006396:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	b29a      	uxth	r2, r3
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	0c1b      	lsrs	r3, r3, #16
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
	...

080063b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e26c      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 8087 	beq.w	80064e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063d8:	4b92      	ldr	r3, [pc, #584]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f003 030c 	and.w	r3, r3, #12
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d00c      	beq.n	80063fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063e4:	4b8f      	ldr	r3, [pc, #572]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f003 030c 	and.w	r3, r3, #12
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d112      	bne.n	8006416 <HAL_RCC_OscConfig+0x5e>
 80063f0:	4b8c      	ldr	r3, [pc, #560]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fc:	d10b      	bne.n	8006416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fe:	4b89      	ldr	r3, [pc, #548]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d06c      	beq.n	80064e4 <HAL_RCC_OscConfig+0x12c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d168      	bne.n	80064e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e246      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641e:	d106      	bne.n	800642e <HAL_RCC_OscConfig+0x76>
 8006420:	4b80      	ldr	r3, [pc, #512]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a7f      	ldr	r2, [pc, #508]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	e02e      	b.n	800648c <HAL_RCC_OscConfig+0xd4>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10c      	bne.n	8006450 <HAL_RCC_OscConfig+0x98>
 8006436:	4b7b      	ldr	r3, [pc, #492]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a7a      	ldr	r2, [pc, #488]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 800643c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	4b78      	ldr	r3, [pc, #480]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a77      	ldr	r2, [pc, #476]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e01d      	b.n	800648c <HAL_RCC_OscConfig+0xd4>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006458:	d10c      	bne.n	8006474 <HAL_RCC_OscConfig+0xbc>
 800645a:	4b72      	ldr	r3, [pc, #456]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a71      	ldr	r2, [pc, #452]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	4b6f      	ldr	r3, [pc, #444]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a6e      	ldr	r2, [pc, #440]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e00b      	b.n	800648c <HAL_RCC_OscConfig+0xd4>
 8006474:	4b6b      	ldr	r3, [pc, #428]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a6a      	ldr	r2, [pc, #424]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 800647a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	4b68      	ldr	r3, [pc, #416]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a67      	ldr	r2, [pc, #412]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800648a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d013      	beq.n	80064bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fc ffc2 	bl	800341c <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800649c:	f7fc ffbe 	bl	800341c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	; 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e1fa      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ae:	4b5d      	ldr	r3, [pc, #372]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0xe4>
 80064ba:	e014      	b.n	80064e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064bc:	f7fc ffae 	bl	800341c <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c4:	f7fc ffaa 	bl	800341c <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b64      	cmp	r3, #100	; 0x64
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e1e6      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d6:	4b53      	ldr	r3, [pc, #332]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0x10c>
 80064e2:	e000      	b.n	80064e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d063      	beq.n	80065ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064f2:	4b4c      	ldr	r3, [pc, #304]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064fe:	4b49      	ldr	r3, [pc, #292]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f003 030c 	and.w	r3, r3, #12
 8006506:	2b08      	cmp	r3, #8
 8006508:	d11c      	bne.n	8006544 <HAL_RCC_OscConfig+0x18c>
 800650a:	4b46      	ldr	r3, [pc, #280]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d116      	bne.n	8006544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006516:	4b43      	ldr	r3, [pc, #268]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_RCC_OscConfig+0x176>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d001      	beq.n	800652e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e1ba      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652e:	4b3d      	ldr	r3, [pc, #244]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4939      	ldr	r1, [pc, #228]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 800653e:	4313      	orrs	r3, r2
 8006540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006542:	e03a      	b.n	80065ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d020      	beq.n	800658e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800654c:	4b36      	ldr	r3, [pc, #216]	; (8006628 <HAL_RCC_OscConfig+0x270>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006552:	f7fc ff63 	bl	800341c <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655a:	f7fc ff5f 	bl	800341c <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e19b      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656c:	4b2d      	ldr	r3, [pc, #180]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0f0      	beq.n	800655a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006578:	4b2a      	ldr	r3, [pc, #168]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4927      	ldr	r1, [pc, #156]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 8006588:	4313      	orrs	r3, r2
 800658a:	600b      	str	r3, [r1, #0]
 800658c:	e015      	b.n	80065ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658e:	4b26      	ldr	r3, [pc, #152]	; (8006628 <HAL_RCC_OscConfig+0x270>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006594:	f7fc ff42 	bl	800341c <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659c:	f7fc ff3e 	bl	800341c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e17a      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ae:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d03a      	beq.n	800663c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d019      	beq.n	8006602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ce:	4b17      	ldr	r3, [pc, #92]	; (800662c <HAL_RCC_OscConfig+0x274>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d4:	f7fc ff22 	bl	800341c <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065dc:	f7fc ff1e 	bl	800341c <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e15a      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ee:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <HAL_RCC_OscConfig+0x26c>)
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065fa:	2001      	movs	r0, #1
 80065fc:	f000 fac6 	bl	8006b8c <RCC_Delay>
 8006600:	e01c      	b.n	800663c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006602:	4b0a      	ldr	r3, [pc, #40]	; (800662c <HAL_RCC_OscConfig+0x274>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006608:	f7fc ff08 	bl	800341c <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800660e:	e00f      	b.n	8006630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006610:	f7fc ff04 	bl	800341c <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d908      	bls.n	8006630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e140      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
 8006622:	bf00      	nop
 8006624:	40021000 	.word	0x40021000
 8006628:	42420000 	.word	0x42420000
 800662c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006630:	4b9e      	ldr	r3, [pc, #632]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e9      	bne.n	8006610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80a6 	beq.w	8006796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800664a:	2300      	movs	r3, #0
 800664c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800664e:	4b97      	ldr	r3, [pc, #604]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10d      	bne.n	8006676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800665a:	4b94      	ldr	r3, [pc, #592]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	4a93      	ldr	r2, [pc, #588]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006664:	61d3      	str	r3, [r2, #28]
 8006666:	4b91      	ldr	r3, [pc, #580]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666e:	60bb      	str	r3, [r7, #8]
 8006670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006672:	2301      	movs	r3, #1
 8006674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006676:	4b8e      	ldr	r3, [pc, #568]	; (80068b0 <HAL_RCC_OscConfig+0x4f8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d118      	bne.n	80066b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006682:	4b8b      	ldr	r3, [pc, #556]	; (80068b0 <HAL_RCC_OscConfig+0x4f8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a8a      	ldr	r2, [pc, #552]	; (80068b0 <HAL_RCC_OscConfig+0x4f8>)
 8006688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800668c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800668e:	f7fc fec5 	bl	800341c <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006696:	f7fc fec1 	bl	800341c <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b64      	cmp	r3, #100	; 0x64
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e0fd      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a8:	4b81      	ldr	r3, [pc, #516]	; (80068b0 <HAL_RCC_OscConfig+0x4f8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d106      	bne.n	80066ca <HAL_RCC_OscConfig+0x312>
 80066bc:	4b7b      	ldr	r3, [pc, #492]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	4a7a      	ldr	r2, [pc, #488]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	6213      	str	r3, [r2, #32]
 80066c8:	e02d      	b.n	8006726 <HAL_RCC_OscConfig+0x36e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10c      	bne.n	80066ec <HAL_RCC_OscConfig+0x334>
 80066d2:	4b76      	ldr	r3, [pc, #472]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	4a75      	ldr	r2, [pc, #468]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	6213      	str	r3, [r2, #32]
 80066de:	4b73      	ldr	r3, [pc, #460]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	4a72      	ldr	r2, [pc, #456]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	6213      	str	r3, [r2, #32]
 80066ea:	e01c      	b.n	8006726 <HAL_RCC_OscConfig+0x36e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	d10c      	bne.n	800670e <HAL_RCC_OscConfig+0x356>
 80066f4:	4b6d      	ldr	r3, [pc, #436]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	4a6c      	ldr	r2, [pc, #432]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80066fa:	f043 0304 	orr.w	r3, r3, #4
 80066fe:	6213      	str	r3, [r2, #32]
 8006700:	4b6a      	ldr	r3, [pc, #424]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	4a69      	ldr	r2, [pc, #420]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	6213      	str	r3, [r2, #32]
 800670c:	e00b      	b.n	8006726 <HAL_RCC_OscConfig+0x36e>
 800670e:	4b67      	ldr	r3, [pc, #412]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	4a66      	ldr	r2, [pc, #408]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	6213      	str	r3, [r2, #32]
 800671a:	4b64      	ldr	r3, [pc, #400]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	4a63      	ldr	r2, [pc, #396]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006720:	f023 0304 	bic.w	r3, r3, #4
 8006724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d015      	beq.n	800675a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800672e:	f7fc fe75 	bl	800341c <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006734:	e00a      	b.n	800674c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006736:	f7fc fe71 	bl	800341c <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	f241 3288 	movw	r2, #5000	; 0x1388
 8006744:	4293      	cmp	r3, r2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e0ab      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674c:	4b57      	ldr	r3, [pc, #348]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0ee      	beq.n	8006736 <HAL_RCC_OscConfig+0x37e>
 8006758:	e014      	b.n	8006784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800675a:	f7fc fe5f 	bl	800341c <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006760:	e00a      	b.n	8006778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006762:	f7fc fe5b 	bl	800341c <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006770:	4293      	cmp	r3, r2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e095      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006778:	4b4c      	ldr	r3, [pc, #304]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1ee      	bne.n	8006762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d105      	bne.n	8006796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800678a:	4b48      	ldr	r3, [pc, #288]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	4a47      	ldr	r2, [pc, #284]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8081 	beq.w	80068a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067a0:	4b42      	ldr	r3, [pc, #264]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f003 030c 	and.w	r3, r3, #12
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d061      	beq.n	8006870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d146      	bne.n	8006842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b4:	4b3f      	ldr	r3, [pc, #252]	; (80068b4 <HAL_RCC_OscConfig+0x4fc>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ba:	f7fc fe2f 	bl	800341c <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c2:	f7fc fe2b 	bl	800341c <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e067      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067d4:	4b35      	ldr	r3, [pc, #212]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f0      	bne.n	80067c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e8:	d108      	bne.n	80067fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067ea:	4b30      	ldr	r3, [pc, #192]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	492d      	ldr	r1, [pc, #180]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067fc:	4b2b      	ldr	r3, [pc, #172]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a19      	ldr	r1, [r3, #32]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	430b      	orrs	r3, r1
 800680e:	4927      	ldr	r1, [pc, #156]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006810:	4313      	orrs	r3, r2
 8006812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006814:	4b27      	ldr	r3, [pc, #156]	; (80068b4 <HAL_RCC_OscConfig+0x4fc>)
 8006816:	2201      	movs	r2, #1
 8006818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800681a:	f7fc fdff 	bl	800341c <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006822:	f7fc fdfb 	bl	800341c <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e037      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006834:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0f0      	beq.n	8006822 <HAL_RCC_OscConfig+0x46a>
 8006840:	e02f      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006842:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <HAL_RCC_OscConfig+0x4fc>)
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006848:	f7fc fde8 	bl	800341c <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006850:	f7fc fde4 	bl	800341c <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e020      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0x498>
 800686e:	e018      	b.n	80068a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e013      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <HAL_RCC_OscConfig+0x4f4>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	429a      	cmp	r2, r3
 800688e:	d106      	bne.n	800689e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800689a:	429a      	cmp	r2, r3
 800689c:	d001      	beq.n	80068a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40007000 	.word	0x40007000
 80068b4:	42420060 	.word	0x42420060

080068b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0d0      	b.n	8006a6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068cc:	4b6a      	ldr	r3, [pc, #424]	; (8006a78 <HAL_RCC_ClockConfig+0x1c0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d910      	bls.n	80068fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068da:	4b67      	ldr	r3, [pc, #412]	; (8006a78 <HAL_RCC_ClockConfig+0x1c0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f023 0207 	bic.w	r2, r3, #7
 80068e2:	4965      	ldr	r1, [pc, #404]	; (8006a78 <HAL_RCC_ClockConfig+0x1c0>)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ea:	4b63      	ldr	r3, [pc, #396]	; (8006a78 <HAL_RCC_ClockConfig+0x1c0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d001      	beq.n	80068fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e0b8      	b.n	8006a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d020      	beq.n	800694a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006914:	4b59      	ldr	r3, [pc, #356]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	4a58      	ldr	r2, [pc, #352]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 800691a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800691e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0308 	and.w	r3, r3, #8
 8006928:	2b00      	cmp	r3, #0
 800692a:	d005      	beq.n	8006938 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800692c:	4b53      	ldr	r3, [pc, #332]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4a52      	ldr	r2, [pc, #328]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006932:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006936:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006938:	4b50      	ldr	r3, [pc, #320]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	494d      	ldr	r1, [pc, #308]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006946:	4313      	orrs	r3, r2
 8006948:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d040      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d107      	bne.n	800696e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695e:	4b47      	ldr	r3, [pc, #284]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d115      	bne.n	8006996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e07f      	b.n	8006a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d107      	bne.n	8006986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006976:	4b41      	ldr	r3, [pc, #260]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e073      	b.n	8006a6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006986:	4b3d      	ldr	r3, [pc, #244]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e06b      	b.n	8006a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006996:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f023 0203 	bic.w	r2, r3, #3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	4936      	ldr	r1, [pc, #216]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069a8:	f7fc fd38 	bl	800341c <HAL_GetTick>
 80069ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ae:	e00a      	b.n	80069c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b0:	f7fc fd34 	bl	800341c <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80069be:	4293      	cmp	r3, r2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e053      	b.n	8006a6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c6:	4b2d      	ldr	r3, [pc, #180]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f003 020c 	and.w	r2, r3, #12
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d1eb      	bne.n	80069b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069d8:	4b27      	ldr	r3, [pc, #156]	; (8006a78 <HAL_RCC_ClockConfig+0x1c0>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d210      	bcs.n	8006a08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e6:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <HAL_RCC_ClockConfig+0x1c0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f023 0207 	bic.w	r2, r3, #7
 80069ee:	4922      	ldr	r1, [pc, #136]	; (8006a78 <HAL_RCC_ClockConfig+0x1c0>)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f6:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <HAL_RCC_ClockConfig+0x1c0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d001      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e032      	b.n	8006a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d008      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a14:	4b19      	ldr	r3, [pc, #100]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4916      	ldr	r1, [pc, #88]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d009      	beq.n	8006a46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a32:	4b12      	ldr	r3, [pc, #72]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	490e      	ldr	r1, [pc, #56]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a46:	f000 f821 	bl	8006a8c <HAL_RCC_GetSysClockFreq>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <HAL_RCC_ClockConfig+0x1c4>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	490a      	ldr	r1, [pc, #40]	; (8006a80 <HAL_RCC_ClockConfig+0x1c8>)
 8006a58:	5ccb      	ldrb	r3, [r1, r3]
 8006a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5e:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <HAL_RCC_ClockConfig+0x1cc>)
 8006a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <HAL_RCC_ClockConfig+0x1d0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fc fc96 	bl	8003398 <HAL_InitTick>

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40022000 	.word	0x40022000
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	0800be44 	.word	0x0800be44
 8006a84:	2000000c 	.word	0x2000000c
 8006a88:	20000010 	.word	0x20000010

08006a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a8c:	b490      	push	{r4, r7}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a92:	4b2a      	ldr	r3, [pc, #168]	; (8006b3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a94:	1d3c      	adds	r4, r7, #4
 8006a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a9c:	f240 2301 	movw	r3, #513	; 0x201
 8006aa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006ab6:	4b22      	ldr	r3, [pc, #136]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d002      	beq.n	8006acc <HAL_RCC_GetSysClockFreq+0x40>
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	d003      	beq.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x46>
 8006aca:	e02d      	b.n	8006b28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006acc:	4b1d      	ldr	r3, [pc, #116]	; (8006b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ace:	623b      	str	r3, [r7, #32]
      break;
 8006ad0:	e02d      	b.n	8006b2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	0c9b      	lsrs	r3, r3, #18
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ade:	4413      	add	r3, r2
 8006ae0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ae4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d013      	beq.n	8006b18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006af0:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	0c5b      	lsrs	r3, r3, #17
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006afe:	4413      	add	r3, r2
 8006b00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4a0e      	ldr	r2, [pc, #56]	; (8006b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b0a:	fb02 f203 	mul.w	r2, r2, r3
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
 8006b16:	e004      	b.n	8006b22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	4a0b      	ldr	r2, [pc, #44]	; (8006b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b1c:	fb02 f303 	mul.w	r3, r2, r3
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	623b      	str	r3, [r7, #32]
      break;
 8006b26:	e002      	b.n	8006b2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b28:	4b08      	ldr	r3, [pc, #32]	; (8006b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b2a:	623b      	str	r3, [r7, #32]
      break;
 8006b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3728      	adds	r7, #40	; 0x28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc90      	pop	{r4, r7}
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	0800b9e8 	.word	0x0800b9e8
 8006b40:	40021000 	.word	0x40021000
 8006b44:	00f42400 	.word	0x00f42400
 8006b48:	003d0900 	.word	0x003d0900
 8006b4c:	007a1200 	.word	0x007a1200

08006b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b56:	681b      	ldr	r3, [r3, #0]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr
 8006b60:	2000000c 	.word	0x2000000c

08006b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b68:	f7ff fff2 	bl	8006b50 <HAL_RCC_GetHCLKFreq>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	0a1b      	lsrs	r3, r3, #8
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	4903      	ldr	r1, [pc, #12]	; (8006b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b7a:	5ccb      	ldrb	r3, [r1, r3]
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	40021000 	.word	0x40021000
 8006b88:	0800be54 	.word	0x0800be54

08006b8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b94:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <RCC_Delay+0x34>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a0a      	ldr	r2, [pc, #40]	; (8006bc4 <RCC_Delay+0x38>)
 8006b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9e:	0a5b      	lsrs	r3, r3, #9
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006ba8:	bf00      	nop
  }
  while (Delay --);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	1e5a      	subs	r2, r3, #1
 8006bae:	60fa      	str	r2, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1f9      	bne.n	8006ba8 <RCC_Delay+0x1c>
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr
 8006bc0:	2000000c 	.word	0x2000000c
 8006bc4:	10624dd3 	.word	0x10624dd3

08006bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d07d      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006be4:	2300      	movs	r3, #0
 8006be6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006be8:	4b4f      	ldr	r3, [pc, #316]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10d      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bf4:	4b4c      	ldr	r3, [pc, #304]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	4a4b      	ldr	r2, [pc, #300]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	61d3      	str	r3, [r2, #28]
 8006c00:	4b49      	ldr	r3, [pc, #292]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c10:	4b46      	ldr	r3, [pc, #280]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d118      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c1c:	4b43      	ldr	r3, [pc, #268]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a42      	ldr	r2, [pc, #264]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c28:	f7fc fbf8 	bl	800341c <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c2e:	e008      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c30:	f7fc fbf4 	bl	800341c <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b64      	cmp	r3, #100	; 0x64
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e06d      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c42:	4b3a      	ldr	r3, [pc, #232]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0f0      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c4e:	4b36      	ldr	r3, [pc, #216]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d02e      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d027      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c6c:	4b2e      	ldr	r3, [pc, #184]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c76:	4b2e      	ldr	r3, [pc, #184]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c7c:	4b2c      	ldr	r3, [pc, #176]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c82:	4a29      	ldr	r2, [pc, #164]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d014      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c92:	f7fc fbc3 	bl	800341c <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c98:	e00a      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c9a:	f7fc fbbf 	bl	800341c <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e036      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb0:	4b1d      	ldr	r3, [pc, #116]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0ee      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cbc:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4917      	ldr	r1, [pc, #92]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d105      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cd4:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cec:	4b0e      	ldr	r3, [pc, #56]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	490b      	ldr	r1, [pc, #44]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d008      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d0a:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	4904      	ldr	r1, [pc, #16]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	40007000 	.word	0x40007000
 8006d30:	42420440 	.word	0x42420440

08006d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e076      	b.n	8006e34 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d108      	bne.n	8006d60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d56:	d009      	beq.n	8006d6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	61da      	str	r2, [r3, #28]
 8006d5e:	e005      	b.n	8006d6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7fc f86a 	bl	8002e60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df0:	ea42 0103 	orr.w	r1, r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	0c1a      	lsrs	r2, r3, #16
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f002 0204 	and.w	r2, r2, #4
 8006e12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69da      	ldr	r2, [r3, #28]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d101      	bne.n	8006e5e <HAL_SPI_Transmit+0x22>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e126      	b.n	80070ac <HAL_SPI_Transmit+0x270>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e66:	f7fc fad9 	bl	800341c <HAL_GetTick>
 8006e6a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d002      	beq.n	8006e82 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e80:	e10b      	b.n	800709a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <HAL_SPI_Transmit+0x52>
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d102      	bne.n	8006e94 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e92:	e102      	b.n	800709a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2203      	movs	r2, #3
 8006e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	88fa      	ldrh	r2, [r7, #6]
 8006eac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	88fa      	ldrh	r2, [r7, #6]
 8006eb2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eda:	d10f      	bne.n	8006efc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006efa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d007      	beq.n	8006f1a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f22:	d14b      	bne.n	8006fbc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <HAL_SPI_Transmit+0xf6>
 8006f2c:	8afb      	ldrh	r3, [r7, #22]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d13e      	bne.n	8006fb0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	881a      	ldrh	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	1c9a      	adds	r2, r3, #2
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f56:	e02b      	b.n	8006fb0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d112      	bne.n	8006f8c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	881a      	ldrh	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f76:	1c9a      	adds	r2, r3, #2
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f8a:	e011      	b.n	8006fb0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f8c:	f7fc fa46 	bl	800341c <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d803      	bhi.n	8006fa4 <HAL_SPI_Transmit+0x168>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa2:	d102      	bne.n	8006faa <HAL_SPI_Transmit+0x16e>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fae:	e074      	b.n	800709a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1ce      	bne.n	8006f58 <HAL_SPI_Transmit+0x11c>
 8006fba:	e04c      	b.n	8007056 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <HAL_SPI_Transmit+0x18e>
 8006fc4:	8afb      	ldrh	r3, [r7, #22]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d140      	bne.n	800704c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	7812      	ldrb	r2, [r2, #0]
 8006fd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ff0:	e02c      	b.n	800704c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d113      	bne.n	8007028 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	86da      	strh	r2, [r3, #54]	; 0x36
 8007026:	e011      	b.n	800704c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007028:	f7fc f9f8 	bl	800341c <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d803      	bhi.n	8007040 <HAL_SPI_Transmit+0x204>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703e:	d102      	bne.n	8007046 <HAL_SPI_Transmit+0x20a>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	77fb      	strb	r3, [r7, #31]
          goto error;
 800704a:	e026      	b.n	800709a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1cd      	bne.n	8006ff2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 f8b2 	bl	80071c4 <SPI_EndRxTxTransaction>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2220      	movs	r2, #32
 800706a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	77fb      	strb	r3, [r7, #31]
 8007096:	e000      	b.n	800709a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007098:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3720      	adds	r7, #32
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	4613      	mov	r3, r2
 80070c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070c4:	f7fc f9aa 	bl	800341c <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4413      	add	r3, r2
 80070d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070d4:	f7fc f9a2 	bl	800341c <HAL_GetTick>
 80070d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070da:	4b39      	ldr	r3, [pc, #228]	; (80071c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	015b      	lsls	r3, r3, #5
 80070e0:	0d1b      	lsrs	r3, r3, #20
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	fb02 f303 	mul.w	r3, r2, r3
 80070e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ea:	e054      	b.n	8007196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d050      	beq.n	8007196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070f4:	f7fc f992 	bl	800341c <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	69fa      	ldr	r2, [r7, #28]
 8007100:	429a      	cmp	r2, r3
 8007102:	d902      	bls.n	800710a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d13d      	bne.n	8007186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007122:	d111      	bne.n	8007148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712c:	d004      	beq.n	8007138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007136:	d107      	bne.n	8007148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007150:	d10f      	bne.n	8007172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e017      	b.n	80071b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	3b01      	subs	r3, #1
 8007194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4013      	ands	r3, r2
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	bf0c      	ite	eq
 80071a6:	2301      	moveq	r3, #1
 80071a8:	2300      	movne	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d19b      	bne.n	80070ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3720      	adds	r7, #32
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	2000000c 	.word	0x2000000c

080071c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2200      	movs	r2, #0
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff ff6a 	bl	80070b4 <SPI_WaitFlagStateUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ea:	f043 0220 	orr.w	r2, r3, #32
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e000      	b.n	80071f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007200:	b084      	sub	sp, #16
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	f107 0014 	add.w	r0, r7, #20
 800720e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	b004      	add	sp, #16
 800721e:	4770      	bx	lr

08007220 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007230:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007234:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	b29a      	uxth	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007254:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007258:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	b29b      	uxth	r3, r3
 8007266:	43db      	mvns	r3, r3
 8007268:	b29b      	uxth	r3, r3
 800726a:	4013      	ands	r3, r2
 800726c:	b29a      	uxth	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr

08007298 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007298:	b084      	sub	sp, #16
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	f107 0014 	add.w	r0, r7, #20
 80072a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	b004      	add	sp, #16
 80072d6:	4770      	bx	lr

080072d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072d8:	b480      	push	{r7}
 80072da:	b09b      	sub	sp, #108	; 0x6c
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	78db      	ldrb	r3, [r3, #3]
 8007306:	2b03      	cmp	r3, #3
 8007308:	d81f      	bhi.n	800734a <USB_ActivateEndpoint+0x72>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <USB_ActivateEndpoint+0x38>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	08007321 	.word	0x08007321
 8007314:	0800733d 	.word	0x0800733d
 8007318:	08007353 	.word	0x08007353
 800731c:	0800732f 	.word	0x0800732f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007320:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007328:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800732c:	e012      	b.n	8007354 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800732e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007332:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007336:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800733a:	e00b      	b.n	8007354 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800733c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007344:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007348:	e004      	b.n	8007354 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007350:	e000      	b.n	8007354 <USB_ActivateEndpoint+0x7c>
      break;
 8007352:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	441a      	add	r2, r3
 800735e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800736a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800736e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007372:	b29b      	uxth	r3, r3
 8007374:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738c:	b29a      	uxth	r2, r3
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	4313      	orrs	r3, r2
 8007396:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	441a      	add	r2, r3
 80073a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80073a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	7b1b      	ldrb	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f040 8149 	bne.w	8007658 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8084 	beq.w	80074d8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073da:	b29b      	uxth	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	4413      	add	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	011a      	lsls	r2, r3, #4
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	88db      	ldrh	r3, [r3, #6]
 80073f8:	085b      	lsrs	r3, r3, #1
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	81fb      	strh	r3, [r7, #14]
 8007412:	89fb      	ldrh	r3, [r7, #14]
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01b      	beq.n	8007454 <USB_ActivateEndpoint+0x17c>
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007432:	81bb      	strh	r3, [r7, #12]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	89bb      	ldrh	r3, [r7, #12]
 8007440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800744c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007450:	b29b      	uxth	r3, r3
 8007452:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	78db      	ldrb	r3, [r3, #3]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d020      	beq.n	800749e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007472:	813b      	strh	r3, [r7, #8]
 8007474:	893b      	ldrh	r3, [r7, #8]
 8007476:	f083 0320 	eor.w	r3, r3, #32
 800747a:	813b      	strh	r3, [r7, #8]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	893b      	ldrh	r3, [r7, #8]
 8007488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800748c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007498:	b29b      	uxth	r3, r3
 800749a:	8013      	strh	r3, [r2, #0]
 800749c:	e27f      	b.n	800799e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b4:	817b      	strh	r3, [r7, #10]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	441a      	add	r2, r3
 80074c0:	897b      	ldrh	r3, [r7, #10]
 80074c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	8013      	strh	r3, [r2, #0]
 80074d6:	e262      	b.n	800799e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	4413      	add	r3, r2
 80074ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	011a      	lsls	r2, r3, #4
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	88db      	ldrh	r3, [r3, #6]
 8007500:	085b      	lsrs	r3, r3, #1
 8007502:	b29b      	uxth	r3, r3
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007516:	b29b      	uxth	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	4413      	add	r3, r2
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	011a      	lsls	r2, r3, #4
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	4413      	add	r3, r2
 800752a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800752e:	623b      	str	r3, [r7, #32]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d112      	bne.n	800755e <USB_ActivateEndpoint+0x286>
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007542:	b29a      	uxth	r2, r3
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007556:	b29a      	uxth	r2, r3
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	e02f      	b.n	80075be <USB_ActivateEndpoint+0x2e6>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b3e      	cmp	r3, #62	; 0x3e
 8007564:	d813      	bhi.n	800758e <USB_ActivateEndpoint+0x2b6>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	663b      	str	r3, [r7, #96]	; 0x60
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <USB_ActivateEndpoint+0x2a8>
 800757a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800757c:	3301      	adds	r3, #1
 800757e:	663b      	str	r3, [r7, #96]	; 0x60
 8007580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007582:	b29b      	uxth	r3, r3
 8007584:	029b      	lsls	r3, r3, #10
 8007586:	b29a      	uxth	r2, r3
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	e017      	b.n	80075be <USB_ActivateEndpoint+0x2e6>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	095b      	lsrs	r3, r3, #5
 8007594:	663b      	str	r3, [r7, #96]	; 0x60
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 031f 	and.w	r3, r3, #31
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d102      	bne.n	80075a8 <USB_ActivateEndpoint+0x2d0>
 80075a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075a4:	3b01      	subs	r3, #1
 80075a6:	663b      	str	r3, [r7, #96]	; 0x60
 80075a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	029b      	lsls	r3, r3, #10
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	83fb      	strh	r3, [r7, #30]
 80075cc:	8bfb      	ldrh	r3, [r7, #30]
 80075ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01b      	beq.n	800760e <USB_ActivateEndpoint+0x336>
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ec:	83bb      	strh	r3, [r7, #28]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	441a      	add	r2, r3
 80075f8:	8bbb      	ldrh	r3, [r7, #28]
 80075fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760a:	b29b      	uxth	r3, r3
 800760c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007624:	837b      	strh	r3, [r7, #26]
 8007626:	8b7b      	ldrh	r3, [r7, #26]
 8007628:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800762c:	837b      	strh	r3, [r7, #26]
 800762e:	8b7b      	ldrh	r3, [r7, #26]
 8007630:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007634:	837b      	strh	r3, [r7, #26]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	441a      	add	r2, r3
 8007640:	8b7b      	ldrh	r3, [r7, #26]
 8007642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007652:	b29b      	uxth	r3, r3
 8007654:	8013      	strh	r3, [r2, #0]
 8007656:	e1a2      	b.n	800799e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	441a      	add	r2, r3
 800767c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007688:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800768c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007690:	b29b      	uxth	r3, r3
 8007692:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	65bb      	str	r3, [r7, #88]	; 0x58
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800769e:	b29b      	uxth	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076a4:	4413      	add	r3, r2
 80076a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	011a      	lsls	r2, r3, #4
 80076ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076b6:	657b      	str	r3, [r7, #84]	; 0x54
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	891b      	ldrh	r3, [r3, #8]
 80076bc:	085b      	lsrs	r3, r3, #1
 80076be:	b29b      	uxth	r3, r3
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	653b      	str	r3, [r7, #80]	; 0x50
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d8:	4413      	add	r3, r2
 80076da:	653b      	str	r3, [r7, #80]	; 0x50
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	011a      	lsls	r2, r3, #4
 80076e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80076ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	895b      	ldrh	r3, [r3, #10]
 80076f0:	085b      	lsrs	r3, r3, #1
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f040 8091 	bne.w	8007828 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007714:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01b      	beq.n	8007756 <USB_ActivateEndpoint+0x47e>
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	b29b      	uxth	r3, r3
 800772c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007734:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	441a      	add	r2, r3
 8007740:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800774a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800774e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007752:	b29b      	uxth	r3, r3
 8007754:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	873b      	strh	r3, [r7, #56]	; 0x38
 8007764:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d01b      	beq.n	80077a6 <USB_ActivateEndpoint+0x4ce>
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	b29b      	uxth	r3, r3
 800777c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007784:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	441a      	add	r2, r3
 8007790:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800779a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800779e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80077be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80077c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80077c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80077c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	441a      	add	r2, r3
 80077d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80077da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007804:	867b      	strh	r3, [r7, #50]	; 0x32
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	441a      	add	r2, r3
 8007810:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800781a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800781e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007822:	b29b      	uxth	r3, r3
 8007824:	8013      	strh	r3, [r2, #0]
 8007826:	e0ba      	b.n	800799e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800783c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01d      	beq.n	8007880 <USB_ActivateEndpoint+0x5a8>
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	441a      	add	r2, r3
 8007868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800786c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800787c:	b29b      	uxth	r3, r3
 800787e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007890:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01d      	beq.n	80078d8 <USB_ActivateEndpoint+0x600>
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	441a      	add	r2, r3
 80078c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80078c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	78db      	ldrb	r3, [r3, #3]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d024      	beq.n	800792a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80078fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80078fe:	f083 0320 	eor.w	r3, r3, #32
 8007902:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	441a      	add	r2, r3
 8007910:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800791c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007924:	b29b      	uxth	r3, r3
 8007926:	8013      	strh	r3, [r2, #0]
 8007928:	e01d      	b.n	8007966 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800793c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007940:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	441a      	add	r2, r3
 800794e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800795a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800795e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007962:	b29b      	uxth	r3, r3
 8007964:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	441a      	add	r2, r3
 8007988:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800798a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800798e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800799a:	b29b      	uxth	r3, r3
 800799c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800799e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	376c      	adds	r7, #108	; 0x6c
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr

080079ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b08d      	sub	sp, #52	; 0x34
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	7b1b      	ldrb	r3, [r3, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f040 808e 	bne.w	8007adc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	785b      	ldrb	r3, [r3, #1]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d044      	beq.n	8007a52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	81bb      	strh	r3, [r7, #12]
 80079d6:	89bb      	ldrh	r3, [r7, #12]
 80079d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01b      	beq.n	8007a18 <USB_DeactivateEndpoint+0x6c>
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f6:	817b      	strh	r3, [r7, #10]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	441a      	add	r2, r3
 8007a02:	897b      	ldrh	r3, [r7, #10]
 8007a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a2e:	813b      	strh	r3, [r7, #8]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	441a      	add	r2, r3
 8007a3a:	893b      	ldrh	r3, [r7, #8]
 8007a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	8013      	strh	r3, [r2, #0]
 8007a50:	e192      	b.n	8007d78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	827b      	strh	r3, [r7, #18]
 8007a60:	8a7b      	ldrh	r3, [r7, #18]
 8007a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d01b      	beq.n	8007aa2 <USB_DeactivateEndpoint+0xf6>
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a80:	823b      	strh	r3, [r7, #16]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	441a      	add	r2, r3
 8007a8c:	8a3b      	ldrh	r3, [r7, #16]
 8007a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab8:	81fb      	strh	r3, [r7, #14]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	441a      	add	r2, r3
 8007ac4:	89fb      	ldrh	r3, [r7, #14]
 8007ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	8013      	strh	r3, [r2, #0]
 8007ada:	e14d      	b.n	8007d78 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f040 80a5 	bne.w	8007c30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	843b      	strh	r3, [r7, #32]
 8007af4:	8c3b      	ldrh	r3, [r7, #32]
 8007af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01b      	beq.n	8007b36 <USB_DeactivateEndpoint+0x18a>
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b14:	83fb      	strh	r3, [r7, #30]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	441a      	add	r2, r3
 8007b20:	8bfb      	ldrh	r3, [r7, #30]
 8007b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	83bb      	strh	r3, [r7, #28]
 8007b44:	8bbb      	ldrh	r3, [r7, #28]
 8007b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d01b      	beq.n	8007b86 <USB_DeactivateEndpoint+0x1da>
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b64:	837b      	strh	r3, [r7, #26]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	441a      	add	r2, r3
 8007b70:	8b7b      	ldrh	r3, [r7, #26]
 8007b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9c:	833b      	strh	r3, [r7, #24]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	441a      	add	r2, r3
 8007ba8:	8b3b      	ldrh	r3, [r7, #24]
 8007baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd4:	82fb      	strh	r3, [r7, #22]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	441a      	add	r2, r3
 8007be0:	8afb      	ldrh	r3, [r7, #22]
 8007be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c0c:	82bb      	strh	r3, [r7, #20]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	8abb      	ldrh	r3, [r7, #20]
 8007c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]
 8007c2e:	e0a3      	b.n	8007d78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01b      	beq.n	8007c80 <USB_DeactivateEndpoint+0x2d4>
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	441a      	add	r2, r3
 8007c6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007c8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01b      	beq.n	8007cd0 <USB_DeactivateEndpoint+0x324>
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cae:	853b      	strh	r3, [r7, #40]	; 0x28
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	441a      	add	r2, r3
 8007cba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	441a      	add	r2, r3
 8007cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	441a      	add	r2, r3
 8007d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d56:	847b      	strh	r3, [r7, #34]	; 0x22
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	441a      	add	r2, r3
 8007d62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3734      	adds	r7, #52	; 0x34
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr

08007d84 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b0cc      	sub	sp, #304	; 0x130
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	1d3b      	adds	r3, r7, #4
 8007d8c:	6018      	str	r0, [r3, #0]
 8007d8e:	463b      	mov	r3, r7
 8007d90:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d92:	463b      	mov	r3, r7
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	f040 872e 	bne.w	8008bfa <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007d9e:	463b      	mov	r3, r7
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699a      	ldr	r2, [r3, #24]
 8007da4:	463b      	mov	r3, r7
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d905      	bls.n	8007dba <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007dae:	463b      	mov	r3, r7
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007db8:	e004      	b.n	8007dc4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007dba:	463b      	mov	r3, r7
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007dc4:	463b      	mov	r3, r7
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	7b1b      	ldrb	r3, [r3, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d134      	bne.n	8007e38 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007dce:	463b      	mov	r3, r7
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6959      	ldr	r1, [r3, #20]
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	88da      	ldrh	r2, [r3, #6]
 8007dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	1d38      	adds	r0, r7, #4
 8007de2:	6800      	ldr	r0, [r0, #0]
 8007de4:	f001 fc03 	bl	80095ee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007de8:	f107 0310 	add.w	r3, r7, #16
 8007dec:	1d3a      	adds	r2, r7, #4
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	1d3b      	adds	r3, r7, #4
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f107 0310 	add.w	r3, r7, #16
 8007e02:	f107 0210 	add.w	r2, r7, #16
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	440a      	add	r2, r1
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	011a      	lsls	r2, r3, #4
 8007e14:	f107 0310 	add.w	r3, r7, #16
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007e20:	f107 030c 	add.w	r3, r7, #12
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f107 030c 	add.w	r3, r7, #12
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	801a      	strh	r2, [r3, #0]
 8007e34:	f000 beac 	b.w	8008b90 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007e38:	463b      	mov	r3, r7
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	78db      	ldrb	r3, [r3, #3]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	f040 838c 	bne.w	800855c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007e44:	463b      	mov	r3, r7
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6a1a      	ldr	r2, [r3, #32]
 8007e4a:	463b      	mov	r3, r7
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	f240 8330 	bls.w	80084b6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007e56:	1d3b      	adds	r3, r7, #4
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007e74:	1d3b      	adds	r3, r7, #4
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	463b      	mov	r3, r7
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	441a      	add	r2, r3
 8007e82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007e9a:	463b      	mov	r3, r7
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6a1a      	ldr	r2, [r3, #32]
 8007ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea4:	1ad2      	subs	r2, r2, r3
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 819e 	beq.w	8008204 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ec8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ecc:	1d3a      	adds	r2, r7, #4
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	785b      	ldrb	r3, [r3, #1]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d17a      	bne.n	8007fd2 <USB_EPStartXfer+0x24e>
 8007edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ee0:	1d3a      	adds	r2, r7, #4
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	1d3b      	adds	r3, r7, #4
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ef6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007efa:	6812      	ldr	r2, [r2, #0]
 8007efc:	440a      	add	r2, r1
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	463b      	mov	r3, r7
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	011a      	lsls	r2, r3, #4
 8007f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d11a      	bne.n	8007f58 <USB_EPStartXfer+0x1d4>
 8007f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	801a      	strh	r2, [r3, #0]
 8007f56:	e062      	b.n	800801e <USB_EPStartXfer+0x29a>
 8007f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f5e:	d819      	bhi.n	8007f94 <USB_EPStartXfer+0x210>
 8007f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f64:	085b      	lsrs	r3, r3, #1
 8007f66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d004      	beq.n	8007f80 <USB_EPStartXfer+0x1fc>
 8007f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	029b      	lsls	r3, r3, #10
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	e044      	b.n	800801e <USB_EPStartXfer+0x29a>
 8007f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa2:	f003 031f 	and.w	r3, r3, #31
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d104      	bne.n	8007fb4 <USB_EPStartXfer+0x230>
 8007faa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	029b      	lsls	r3, r3, #10
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	e025      	b.n	800801e <USB_EPStartXfer+0x29a>
 8007fd2:	463b      	mov	r3, r7
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d120      	bne.n	800801e <USB_EPStartXfer+0x29a>
 8007fdc:	1d3b      	adds	r3, r7, #4
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007fec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	011a      	lsls	r2, r3, #4
 8007ffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4413      	add	r3, r2
 8008006:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800800a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008014:	b29a      	uxth	r2, r3
 8008016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800801e:	463b      	mov	r3, r7
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	895b      	ldrh	r3, [r3, #10]
 8008024:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008028:	463b      	mov	r3, r7
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6959      	ldr	r1, [r3, #20]
 800802e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008032:	b29b      	uxth	r3, r3
 8008034:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008038:	1d38      	adds	r0, r7, #4
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	f001 fad7 	bl	80095ee <USB_WritePMA>
            ep->xfer_buff += len;
 8008040:	463b      	mov	r3, r7
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804a:	441a      	add	r2, r3
 800804c:	463b      	mov	r3, r7
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008052:	463b      	mov	r3, r7
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6a1a      	ldr	r2, [r3, #32]
 8008058:	463b      	mov	r3, r7
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	429a      	cmp	r2, r3
 8008060:	d909      	bls.n	8008076 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8008062:	463b      	mov	r3, r7
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6a1a      	ldr	r2, [r3, #32]
 8008068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800806c:	1ad2      	subs	r2, r2, r3
 800806e:	463b      	mov	r3, r7
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	621a      	str	r2, [r3, #32]
 8008074:	e008      	b.n	8008088 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008076:	463b      	mov	r3, r7
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008080:	463b      	mov	r3, r7
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2200      	movs	r2, #0
 8008086:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008088:	463b      	mov	r3, r7
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d17a      	bne.n	8008188 <USB_EPStartXfer+0x404>
 8008092:	f107 0318 	add.w	r3, r7, #24
 8008096:	1d3a      	adds	r2, r7, #4
 8008098:	6812      	ldr	r2, [r2, #0]
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	1d3b      	adds	r3, r7, #4
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	4619      	mov	r1, r3
 80080a8:	f107 0318 	add.w	r3, r7, #24
 80080ac:	f107 0218 	add.w	r2, r7, #24
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	440a      	add	r2, r1
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	463b      	mov	r3, r7
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	011a      	lsls	r2, r3, #4
 80080be:	f107 0318 	add.w	r3, r7, #24
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4413      	add	r3, r2
 80080c6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80080ca:	f107 0314 	add.w	r3, r7, #20
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d11a      	bne.n	800810e <USB_EPStartXfer+0x38a>
 80080d8:	f107 0314 	add.w	r3, r7, #20
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	f107 0314 	add.w	r3, r7, #20
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	f107 0314 	add.w	r3, r7, #20
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008102:	b29a      	uxth	r2, r3
 8008104:	f107 0314 	add.w	r3, r7, #20
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	801a      	strh	r2, [r3, #0]
 800810c:	e067      	b.n	80081de <USB_EPStartXfer+0x45a>
 800810e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008112:	2b3e      	cmp	r3, #62	; 0x3e
 8008114:	d819      	bhi.n	800814a <USB_EPStartXfer+0x3c6>
 8008116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d004      	beq.n	8008136 <USB_EPStartXfer+0x3b2>
 800812c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008130:	3301      	adds	r3, #1
 8008132:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008136:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800813a:	b29b      	uxth	r3, r3
 800813c:	029b      	lsls	r3, r3, #10
 800813e:	b29a      	uxth	r2, r3
 8008140:	f107 0314 	add.w	r3, r7, #20
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	801a      	strh	r2, [r3, #0]
 8008148:	e049      	b.n	80081de <USB_EPStartXfer+0x45a>
 800814a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008158:	f003 031f 	and.w	r3, r3, #31
 800815c:	2b00      	cmp	r3, #0
 800815e:	d104      	bne.n	800816a <USB_EPStartXfer+0x3e6>
 8008160:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008164:	3b01      	subs	r3, #1
 8008166:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800816a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800816e:	b29b      	uxth	r3, r3
 8008170:	029b      	lsls	r3, r3, #10
 8008172:	b29b      	uxth	r3, r3
 8008174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800817c:	b29a      	uxth	r2, r3
 800817e:	f107 0314 	add.w	r3, r7, #20
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	e02a      	b.n	80081de <USB_EPStartXfer+0x45a>
 8008188:	463b      	mov	r3, r7
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d125      	bne.n	80081de <USB_EPStartXfer+0x45a>
 8008192:	f107 0320 	add.w	r3, r7, #32
 8008196:	1d3a      	adds	r2, r7, #4
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	1d3b      	adds	r3, r7, #4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	4619      	mov	r1, r3
 80081a8:	f107 0320 	add.w	r3, r7, #32
 80081ac:	f107 0220 	add.w	r2, r7, #32
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	440a      	add	r2, r1
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	463b      	mov	r3, r7
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	011a      	lsls	r2, r3, #4
 80081be:	f107 0320 	add.w	r3, r7, #32
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4413      	add	r3, r2
 80081c6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80081ca:	f107 031c 	add.w	r3, r7, #28
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	f107 031c 	add.w	r3, r7, #28
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80081de:	463b      	mov	r3, r7
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	891b      	ldrh	r3, [r3, #8]
 80081e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081e8:	463b      	mov	r3, r7
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6959      	ldr	r1, [r3, #20]
 80081ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80081f8:	1d38      	adds	r0, r7, #4
 80081fa:	6800      	ldr	r0, [r0, #0]
 80081fc:	f001 f9f7 	bl	80095ee <USB_WritePMA>
 8008200:	f000 bcc6 	b.w	8008b90 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008204:	463b      	mov	r3, r7
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	785b      	ldrb	r3, [r3, #1]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d164      	bne.n	80082d8 <USB_EPStartXfer+0x554>
 800820e:	1d3b      	adds	r3, r7, #4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	64bb      	str	r3, [r7, #72]	; 0x48
 8008214:	1d3b      	adds	r3, r7, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800821c:	b29b      	uxth	r3, r3
 800821e:	461a      	mov	r2, r3
 8008220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008222:	4413      	add	r3, r2
 8008224:	64bb      	str	r3, [r7, #72]	; 0x48
 8008226:	463b      	mov	r3, r7
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	011a      	lsls	r2, r3, #4
 800822e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008230:	4413      	add	r3, r2
 8008232:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008236:	647b      	str	r3, [r7, #68]	; 0x44
 8008238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800823c:	2b00      	cmp	r3, #0
 800823e:	d112      	bne.n	8008266 <USB_EPStartXfer+0x4e2>
 8008240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800824a:	b29a      	uxth	r2, r3
 800824c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800824e:	801a      	strh	r2, [r3, #0]
 8008250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29b      	uxth	r3, r3
 8008256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800825a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800825e:	b29a      	uxth	r2, r3
 8008260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008262:	801a      	strh	r2, [r3, #0]
 8008264:	e057      	b.n	8008316 <USB_EPStartXfer+0x592>
 8008266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800826a:	2b3e      	cmp	r3, #62	; 0x3e
 800826c:	d817      	bhi.n	800829e <USB_EPStartXfer+0x51a>
 800826e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008272:	085b      	lsrs	r3, r3, #1
 8008274:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	d004      	beq.n	800828e <USB_EPStartXfer+0x50a>
 8008284:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008288:	3301      	adds	r3, #1
 800828a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800828e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008292:	b29b      	uxth	r3, r3
 8008294:	029b      	lsls	r3, r3, #10
 8008296:	b29a      	uxth	r2, r3
 8008298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	e03b      	b.n	8008316 <USB_EPStartXfer+0x592>
 800829e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a2:	095b      	lsrs	r3, r3, #5
 80082a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80082a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ac:	f003 031f 	and.w	r3, r3, #31
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d104      	bne.n	80082be <USB_EPStartXfer+0x53a>
 80082b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80082b8:	3b01      	subs	r3, #1
 80082ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80082be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	029b      	lsls	r3, r3, #10
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	e01e      	b.n	8008316 <USB_EPStartXfer+0x592>
 80082d8:	463b      	mov	r3, r7
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	785b      	ldrb	r3, [r3, #1]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d119      	bne.n	8008316 <USB_EPStartXfer+0x592>
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	653b      	str	r3, [r7, #80]	; 0x50
 80082e8:	1d3b      	adds	r3, r7, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082f6:	4413      	add	r3, r2
 80082f8:	653b      	str	r3, [r7, #80]	; 0x50
 80082fa:	463b      	mov	r3, r7
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	011a      	lsls	r2, r3, #4
 8008302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008304:	4413      	add	r3, r2
 8008306:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800830a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800830c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008310:	b29a      	uxth	r2, r3
 8008312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008314:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008316:	463b      	mov	r3, r7
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	891b      	ldrh	r3, [r3, #8]
 800831c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008320:	463b      	mov	r3, r7
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6959      	ldr	r1, [r3, #20]
 8008326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800832a:	b29b      	uxth	r3, r3
 800832c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008330:	1d38      	adds	r0, r7, #4
 8008332:	6800      	ldr	r0, [r0, #0]
 8008334:	f001 f95b 	bl	80095ee <USB_WritePMA>
            ep->xfer_buff += len;
 8008338:	463b      	mov	r3, r7
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	695a      	ldr	r2, [r3, #20]
 800833e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008342:	441a      	add	r2, r3
 8008344:	463b      	mov	r3, r7
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800834a:	463b      	mov	r3, r7
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6a1a      	ldr	r2, [r3, #32]
 8008350:	463b      	mov	r3, r7
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	429a      	cmp	r2, r3
 8008358:	d909      	bls.n	800836e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800835a:	463b      	mov	r3, r7
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6a1a      	ldr	r2, [r3, #32]
 8008360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008364:	1ad2      	subs	r2, r2, r3
 8008366:	463b      	mov	r3, r7
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	621a      	str	r2, [r3, #32]
 800836c:	e008      	b.n	8008380 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800836e:	463b      	mov	r3, r7
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008378:	463b      	mov	r3, r7
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2200      	movs	r2, #0
 800837e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008380:	1d3b      	adds	r3, r7, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	643b      	str	r3, [r7, #64]	; 0x40
 8008386:	463b      	mov	r3, r7
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	785b      	ldrb	r3, [r3, #1]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d164      	bne.n	800845a <USB_EPStartXfer+0x6d6>
 8008390:	1d3b      	adds	r3, r7, #4
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	63bb      	str	r3, [r7, #56]	; 0x38
 8008396:	1d3b      	adds	r3, r7, #4
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800839e:	b29b      	uxth	r3, r3
 80083a0:	461a      	mov	r2, r3
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	4413      	add	r3, r2
 80083a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80083a8:	463b      	mov	r3, r7
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	011a      	lsls	r2, r3, #4
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	4413      	add	r3, r2
 80083b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d112      	bne.n	80083e8 <USB_EPStartXfer+0x664>
 80083c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d0:	801a      	strh	r2, [r3, #0]
 80083d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e4:	801a      	strh	r2, [r3, #0]
 80083e6:	e054      	b.n	8008492 <USB_EPStartXfer+0x70e>
 80083e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ec:	2b3e      	cmp	r3, #62	; 0x3e
 80083ee:	d817      	bhi.n	8008420 <USB_EPStartXfer+0x69c>
 80083f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f4:	085b      	lsrs	r3, r3, #1
 80083f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80083fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d004      	beq.n	8008410 <USB_EPStartXfer+0x68c>
 8008406:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800840a:	3301      	adds	r3, #1
 800840c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008410:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008414:	b29b      	uxth	r3, r3
 8008416:	029b      	lsls	r3, r3, #10
 8008418:	b29a      	uxth	r2, r3
 800841a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	e038      	b.n	8008492 <USB_EPStartXfer+0x70e>
 8008420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800842a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	2b00      	cmp	r3, #0
 8008434:	d104      	bne.n	8008440 <USB_EPStartXfer+0x6bc>
 8008436:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800843a:	3b01      	subs	r3, #1
 800843c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008444:	b29b      	uxth	r3, r3
 8008446:	029b      	lsls	r3, r3, #10
 8008448:	b29b      	uxth	r3, r3
 800844a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800844e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008452:	b29a      	uxth	r2, r3
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	801a      	strh	r2, [r3, #0]
 8008458:	e01b      	b.n	8008492 <USB_EPStartXfer+0x70e>
 800845a:	463b      	mov	r3, r7
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	785b      	ldrb	r3, [r3, #1]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d116      	bne.n	8008492 <USB_EPStartXfer+0x70e>
 8008464:	1d3b      	adds	r3, r7, #4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800846c:	b29b      	uxth	r3, r3
 800846e:	461a      	mov	r2, r3
 8008470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008472:	4413      	add	r3, r2
 8008474:	643b      	str	r3, [r7, #64]	; 0x40
 8008476:	463b      	mov	r3, r7
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	011a      	lsls	r2, r3, #4
 800847e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008480:	4413      	add	r3, r2
 8008482:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848c:	b29a      	uxth	r2, r3
 800848e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008490:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008492:	463b      	mov	r3, r7
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	895b      	ldrh	r3, [r3, #10]
 8008498:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800849c:	463b      	mov	r3, r7
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6959      	ldr	r1, [r3, #20]
 80084a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80084ac:	1d38      	adds	r0, r7, #4
 80084ae:	6800      	ldr	r0, [r0, #0]
 80084b0:	f001 f89d 	bl	80095ee <USB_WritePMA>
 80084b4:	e36c      	b.n	8008b90 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80084b6:	463b      	mov	r3, r7
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80084c0:	1d3b      	adds	r3, r7, #4
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	463b      	mov	r3, r7
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80084d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80084de:	1d3b      	adds	r3, r7, #4
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	463b      	mov	r3, r7
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	441a      	add	r2, r3
 80084ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80084f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008500:	b29b      	uxth	r3, r3
 8008502:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008504:	1d3b      	adds	r3, r7, #4
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800850a:	1d3b      	adds	r3, r7, #4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008512:	b29b      	uxth	r3, r3
 8008514:	461a      	mov	r2, r3
 8008516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008518:	4413      	add	r3, r2
 800851a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800851c:	463b      	mov	r3, r7
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	011a      	lsls	r2, r3, #4
 8008524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008526:	4413      	add	r3, r2
 8008528:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800852c:	65bb      	str	r3, [r7, #88]	; 0x58
 800852e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008532:	b29a      	uxth	r2, r3
 8008534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008536:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008538:	463b      	mov	r3, r7
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	891b      	ldrh	r3, [r3, #8]
 800853e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008542:	463b      	mov	r3, r7
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6959      	ldr	r1, [r3, #20]
 8008548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800854c:	b29b      	uxth	r3, r3
 800854e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008552:	1d38      	adds	r0, r7, #4
 8008554:	6800      	ldr	r0, [r0, #0]
 8008556:	f001 f84a 	bl	80095ee <USB_WritePMA>
 800855a:	e319      	b.n	8008b90 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800855c:	1d3b      	adds	r3, r7, #4
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	463b      	mov	r3, r7
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	b29b      	uxth	r3, r3
 800856e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008576:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800857a:	1d3b      	adds	r3, r7, #4
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	463b      	mov	r3, r7
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	441a      	add	r2, r3
 8008588:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800858c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008594:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800859c:	b29b      	uxth	r3, r3
 800859e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80085a0:	463b      	mov	r3, r7
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6a1a      	ldr	r2, [r3, #32]
 80085a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085aa:	1ad2      	subs	r2, r2, r3
 80085ac:	463b      	mov	r3, r7
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80085b2:	1d3b      	adds	r3, r7, #4
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	463b      	mov	r3, r7
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8162 	beq.w	8008892 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085ce:	1d3b      	adds	r3, r7, #4
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085d6:	463b      	mov	r3, r7
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	785b      	ldrb	r3, [r3, #1]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d164      	bne.n	80086aa <USB_EPStartXfer+0x926>
 80085e0:	1d3b      	adds	r3, r7, #4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80085e6:	1d3b      	adds	r3, r7, #4
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	461a      	mov	r2, r3
 80085f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085f4:	4413      	add	r3, r2
 80085f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80085f8:	463b      	mov	r3, r7
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	011a      	lsls	r2, r3, #4
 8008600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008602:	4413      	add	r3, r2
 8008604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008608:	677b      	str	r3, [r7, #116]	; 0x74
 800860a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d112      	bne.n	8008638 <USB_EPStartXfer+0x8b4>
 8008612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	b29b      	uxth	r3, r3
 8008618:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800861c:	b29a      	uxth	r2, r3
 800861e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008620:	801a      	strh	r2, [r3, #0]
 8008622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800862c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008630:	b29a      	uxth	r2, r3
 8008632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008634:	801a      	strh	r2, [r3, #0]
 8008636:	e057      	b.n	80086e8 <USB_EPStartXfer+0x964>
 8008638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800863c:	2b3e      	cmp	r3, #62	; 0x3e
 800863e:	d817      	bhi.n	8008670 <USB_EPStartXfer+0x8ec>
 8008640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008644:	085b      	lsrs	r3, r3, #1
 8008646:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800864a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <USB_EPStartXfer+0x8dc>
 8008656:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800865a:	3301      	adds	r3, #1
 800865c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008660:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008664:	b29b      	uxth	r3, r3
 8008666:	029b      	lsls	r3, r3, #10
 8008668:	b29a      	uxth	r2, r3
 800866a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800866c:	801a      	strh	r2, [r3, #0]
 800866e:	e03b      	b.n	80086e8 <USB_EPStartXfer+0x964>
 8008670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008674:	095b      	lsrs	r3, r3, #5
 8008676:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800867a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	2b00      	cmp	r3, #0
 8008684:	d104      	bne.n	8008690 <USB_EPStartXfer+0x90c>
 8008686:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800868a:	3b01      	subs	r3, #1
 800868c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008690:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008694:	b29b      	uxth	r3, r3
 8008696:	029b      	lsls	r3, r3, #10
 8008698:	b29b      	uxth	r3, r3
 800869a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800869e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086a6:	801a      	strh	r2, [r3, #0]
 80086a8:	e01e      	b.n	80086e8 <USB_EPStartXfer+0x964>
 80086aa:	463b      	mov	r3, r7
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d119      	bne.n	80086e8 <USB_EPStartXfer+0x964>
 80086b4:	1d3b      	adds	r3, r7, #4
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086bc:	b29b      	uxth	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086c4:	4413      	add	r3, r2
 80086c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086ca:	463b      	mov	r3, r7
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	011a      	lsls	r2, r3, #4
 80086d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086d6:	4413      	add	r3, r2
 80086d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80086e8:	463b      	mov	r3, r7
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	895b      	ldrh	r3, [r3, #10]
 80086ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086f2:	463b      	mov	r3, r7
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6959      	ldr	r1, [r3, #20]
 80086f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008702:	1d38      	adds	r0, r7, #4
 8008704:	6800      	ldr	r0, [r0, #0]
 8008706:	f000 ff72 	bl	80095ee <USB_WritePMA>
          ep->xfer_buff += len;
 800870a:	463b      	mov	r3, r7
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	695a      	ldr	r2, [r3, #20]
 8008710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008714:	441a      	add	r2, r3
 8008716:	463b      	mov	r3, r7
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800871c:	463b      	mov	r3, r7
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6a1a      	ldr	r2, [r3, #32]
 8008722:	463b      	mov	r3, r7
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	429a      	cmp	r2, r3
 800872a:	d909      	bls.n	8008740 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800872c:	463b      	mov	r3, r7
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6a1a      	ldr	r2, [r3, #32]
 8008732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008736:	1ad2      	subs	r2, r2, r3
 8008738:	463b      	mov	r3, r7
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	621a      	str	r2, [r3, #32]
 800873e:	e008      	b.n	8008752 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008740:	463b      	mov	r3, r7
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800874a:	463b      	mov	r3, r7
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2200      	movs	r2, #0
 8008750:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 821a 	beq.w	8008b90 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800875c:	463b      	mov	r3, r7
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d164      	bne.n	8008830 <USB_EPStartXfer+0xaac>
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	66bb      	str	r3, [r7, #104]	; 0x68
 800876c:	1d3b      	adds	r3, r7, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008774:	b29b      	uxth	r3, r3
 8008776:	461a      	mov	r2, r3
 8008778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800877a:	4413      	add	r3, r2
 800877c:	66bb      	str	r3, [r7, #104]	; 0x68
 800877e:	463b      	mov	r3, r7
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	011a      	lsls	r2, r3, #4
 8008786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008788:	4413      	add	r3, r2
 800878a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800878e:	667b      	str	r3, [r7, #100]	; 0x64
 8008790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008794:	2b00      	cmp	r3, #0
 8008796:	d112      	bne.n	80087be <USB_EPStartXfer+0xa3a>
 8008798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	b29b      	uxth	r3, r3
 800879e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	e057      	b.n	800886e <USB_EPStartXfer+0xaea>
 80087be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c2:	2b3e      	cmp	r3, #62	; 0x3e
 80087c4:	d817      	bhi.n	80087f6 <USB_EPStartXfer+0xa72>
 80087c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80087d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <USB_EPStartXfer+0xa62>
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e0:	3301      	adds	r3, #1
 80087e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	029b      	lsls	r3, r3, #10
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087f2:	801a      	strh	r2, [r3, #0]
 80087f4:	e03b      	b.n	800886e <USB_EPStartXfer+0xaea>
 80087f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008804:	f003 031f 	and.w	r3, r3, #31
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <USB_EPStartXfer+0xa92>
 800880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008810:	3b01      	subs	r3, #1
 8008812:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881a:	b29b      	uxth	r3, r3
 800881c:	029b      	lsls	r3, r3, #10
 800881e:	b29b      	uxth	r3, r3
 8008820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008828:	b29a      	uxth	r2, r3
 800882a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800882c:	801a      	strh	r2, [r3, #0]
 800882e:	e01e      	b.n	800886e <USB_EPStartXfer+0xaea>
 8008830:	463b      	mov	r3, r7
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d119      	bne.n	800886e <USB_EPStartXfer+0xaea>
 800883a:	1d3b      	adds	r3, r7, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	673b      	str	r3, [r7, #112]	; 0x70
 8008840:	1d3b      	adds	r3, r7, #4
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008848:	b29b      	uxth	r3, r3
 800884a:	461a      	mov	r2, r3
 800884c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800884e:	4413      	add	r3, r2
 8008850:	673b      	str	r3, [r7, #112]	; 0x70
 8008852:	463b      	mov	r3, r7
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	011a      	lsls	r2, r3, #4
 800885a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800885c:	4413      	add	r3, r2
 800885e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008868:	b29a      	uxth	r2, r3
 800886a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800886c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800886e:	463b      	mov	r3, r7
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	891b      	ldrh	r3, [r3, #8]
 8008874:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008878:	463b      	mov	r3, r7
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6959      	ldr	r1, [r3, #20]
 800887e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008882:	b29b      	uxth	r3, r3
 8008884:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008888:	1d38      	adds	r0, r7, #4
 800888a:	6800      	ldr	r0, [r0, #0]
 800888c:	f000 feaf 	bl	80095ee <USB_WritePMA>
 8008890:	e17e      	b.n	8008b90 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008892:	463b      	mov	r3, r7
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d16f      	bne.n	800897c <USB_EPStartXfer+0xbf8>
 800889c:	1d3b      	adds	r3, r7, #4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088a4:	1d3b      	adds	r3, r7, #4
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	461a      	mov	r2, r3
 80088b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088b4:	4413      	add	r3, r2
 80088b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088ba:	463b      	mov	r3, r7
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	011a      	lsls	r2, r3, #4
 80088c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088c6:	4413      	add	r3, r2
 80088c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d116      	bne.n	8008906 <USB_EPStartXfer+0xb82>
 80088d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088ea:	801a      	strh	r2, [r3, #0]
 80088ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008902:	801a      	strh	r2, [r3, #0]
 8008904:	e05f      	b.n	80089c6 <USB_EPStartXfer+0xc42>
 8008906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890a:	2b3e      	cmp	r3, #62	; 0x3e
 800890c:	d818      	bhi.n	8008940 <USB_EPStartXfer+0xbbc>
 800890e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008912:	085b      	lsrs	r3, r3, #1
 8008914:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <USB_EPStartXfer+0xbaa>
 8008924:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008928:	3301      	adds	r3, #1
 800892a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800892e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008932:	b29b      	uxth	r3, r3
 8008934:	029b      	lsls	r3, r3, #10
 8008936:	b29a      	uxth	r2, r3
 8008938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800893c:	801a      	strh	r2, [r3, #0]
 800893e:	e042      	b.n	80089c6 <USB_EPStartXfer+0xc42>
 8008940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008944:	095b      	lsrs	r3, r3, #5
 8008946:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800894a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894e:	f003 031f 	and.w	r3, r3, #31
 8008952:	2b00      	cmp	r3, #0
 8008954:	d104      	bne.n	8008960 <USB_EPStartXfer+0xbdc>
 8008956:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800895a:	3b01      	subs	r3, #1
 800895c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008960:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008964:	b29b      	uxth	r3, r3
 8008966:	029b      	lsls	r3, r3, #10
 8008968:	b29b      	uxth	r3, r3
 800896a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008972:	b29a      	uxth	r2, r3
 8008974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008978:	801a      	strh	r2, [r3, #0]
 800897a:	e024      	b.n	80089c6 <USB_EPStartXfer+0xc42>
 800897c:	463b      	mov	r3, r7
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	785b      	ldrb	r3, [r3, #1]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d11f      	bne.n	80089c6 <USB_EPStartXfer+0xc42>
 8008986:	1d3b      	adds	r3, r7, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800898e:	1d3b      	adds	r3, r7, #4
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008996:	b29b      	uxth	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800899e:	4413      	add	r3, r2
 80089a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089a4:	463b      	mov	r3, r7
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	011a      	lsls	r2, r3, #4
 80089ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089b0:	4413      	add	r3, r2
 80089b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089be:	b29a      	uxth	r2, r3
 80089c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089c6:	463b      	mov	r3, r7
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	891b      	ldrh	r3, [r3, #8]
 80089cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089d0:	463b      	mov	r3, r7
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6959      	ldr	r1, [r3, #20]
 80089d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089da:	b29b      	uxth	r3, r3
 80089dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089e0:	1d38      	adds	r0, r7, #4
 80089e2:	6800      	ldr	r0, [r0, #0]
 80089e4:	f000 fe03 	bl	80095ee <USB_WritePMA>
          ep->xfer_buff += len;
 80089e8:	463b      	mov	r3, r7
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f2:	441a      	add	r2, r3
 80089f4:	463b      	mov	r3, r7
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80089fa:	463b      	mov	r3, r7
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6a1a      	ldr	r2, [r3, #32]
 8008a00:	463b      	mov	r3, r7
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d909      	bls.n	8008a1e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008a0a:	463b      	mov	r3, r7
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6a1a      	ldr	r2, [r3, #32]
 8008a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a14:	1ad2      	subs	r2, r2, r3
 8008a16:	463b      	mov	r3, r7
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	621a      	str	r2, [r3, #32]
 8008a1c:	e008      	b.n	8008a30 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008a1e:	463b      	mov	r3, r7
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008a28:	463b      	mov	r3, r7
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80ab 	beq.w	8008b90 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a3a:	1d3b      	adds	r3, r7, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a42:	463b      	mov	r3, r7
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	785b      	ldrb	r3, [r3, #1]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d16f      	bne.n	8008b2c <USB_EPStartXfer+0xda8>
 8008a4c:	1d3b      	adds	r3, r7, #4
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a54:	1d3b      	adds	r3, r7, #4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a64:	4413      	add	r3, r2
 8008a66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a6a:	463b      	mov	r3, r7
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	011a      	lsls	r2, r3, #4
 8008a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a76:	4413      	add	r3, r2
 8008a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d116      	bne.n	8008ab6 <USB_EPStartXfer+0xd32>
 8008a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a9a:	801a      	strh	r2, [r3, #0]
 8008a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ab2:	801a      	strh	r2, [r3, #0]
 8008ab4:	e05b      	b.n	8008b6e <USB_EPStartXfer+0xdea>
 8008ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aba:	2b3e      	cmp	r3, #62	; 0x3e
 8008abc:	d818      	bhi.n	8008af0 <USB_EPStartXfer+0xd6c>
 8008abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac2:	085b      	lsrs	r3, r3, #1
 8008ac4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d004      	beq.n	8008ade <USB_EPStartXfer+0xd5a>
 8008ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ad8:	3301      	adds	r3, #1
 8008ada:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	029b      	lsls	r3, r3, #10
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aec:	801a      	strh	r2, [r3, #0]
 8008aee:	e03e      	b.n	8008b6e <USB_EPStartXfer+0xdea>
 8008af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af4:	095b      	lsrs	r3, r3, #5
 8008af6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afe:	f003 031f 	and.w	r3, r3, #31
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d104      	bne.n	8008b10 <USB_EPStartXfer+0xd8c>
 8008b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	029b      	lsls	r3, r3, #10
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b28:	801a      	strh	r2, [r3, #0]
 8008b2a:	e020      	b.n	8008b6e <USB_EPStartXfer+0xdea>
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	785b      	ldrb	r3, [r3, #1]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d11b      	bne.n	8008b6e <USB_EPStartXfer+0xdea>
 8008b36:	1d3b      	adds	r3, r7, #4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	461a      	mov	r2, r3
 8008b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b46:	4413      	add	r3, r2
 8008b48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b4c:	463b      	mov	r3, r7
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	011a      	lsls	r2, r3, #4
 8008b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b58:	4413      	add	r3, r2
 8008b5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b6e:	463b      	mov	r3, r7
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	895b      	ldrh	r3, [r3, #10]
 8008b74:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b78:	463b      	mov	r3, r7
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6959      	ldr	r1, [r3, #20]
 8008b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b88:	1d38      	adds	r0, r7, #4
 8008b8a:	6800      	ldr	r0, [r0, #0]
 8008b8c:	f000 fd2f 	bl	80095ee <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008b90:	1d3b      	adds	r3, r7, #4
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	463b      	mov	r3, r7
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f107 020a 	add.w	r2, r7, #10
 8008ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bae:	8013      	strh	r3, [r2, #0]
 8008bb0:	f107 030a 	add.w	r3, r7, #10
 8008bb4:	f107 020a 	add.w	r2, r7, #10
 8008bb8:	8812      	ldrh	r2, [r2, #0]
 8008bba:	f082 0210 	eor.w	r2, r2, #16
 8008bbe:	801a      	strh	r2, [r3, #0]
 8008bc0:	f107 030a 	add.w	r3, r7, #10
 8008bc4:	f107 020a 	add.w	r2, r7, #10
 8008bc8:	8812      	ldrh	r2, [r2, #0]
 8008bca:	f082 0220 	eor.w	r2, r2, #32
 8008bce:	801a      	strh	r2, [r3, #0]
 8008bd0:	1d3b      	adds	r3, r7, #4
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	463b      	mov	r3, r7
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	441a      	add	r2, r3
 8008bde:	f107 030a 	add.w	r3, r7, #10
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	8013      	strh	r3, [r2, #0]
 8008bf8:	e3b5      	b.n	8009366 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008bfa:	463b      	mov	r3, r7
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	7b1b      	ldrb	r3, [r3, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f040 8090 	bne.w	8008d26 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c06:	463b      	mov	r3, r7
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	699a      	ldr	r2, [r3, #24]
 8008c0c:	463b      	mov	r3, r7
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d90e      	bls.n	8008c34 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8008c16:	463b      	mov	r3, r7
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008c20:	463b      	mov	r3, r7
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	619a      	str	r2, [r3, #24]
 8008c32:	e008      	b.n	8008c46 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008c34:	463b      	mov	r3, r7
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008c3e:	463b      	mov	r3, r7
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2200      	movs	r2, #0
 8008c44:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008c46:	1d3b      	adds	r3, r7, #4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c4e:	1d3b      	adds	r3, r7, #4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c5e:	4413      	add	r3, r2
 8008c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c64:	463b      	mov	r3, r7
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	011a      	lsls	r2, r3, #4
 8008c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c70:	4413      	add	r3, r2
 8008c72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d116      	bne.n	8008cb0 <USB_EPStartXfer+0xf2c>
 8008c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cac:	801a      	strh	r2, [r3, #0]
 8008cae:	e32c      	b.n	800930a <USB_EPStartXfer+0x1586>
 8008cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8008cb6:	d818      	bhi.n	8008cea <USB_EPStartXfer+0xf66>
 8008cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cbc:	085b      	lsrs	r3, r3, #1
 8008cbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d004      	beq.n	8008cd8 <USB_EPStartXfer+0xf54>
 8008cce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	029b      	lsls	r3, r3, #10
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ce6:	801a      	strh	r2, [r3, #0]
 8008ce8:	e30f      	b.n	800930a <USB_EPStartXfer+0x1586>
 8008cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cee:	095b      	lsrs	r3, r3, #5
 8008cf0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf8:	f003 031f 	and.w	r3, r3, #31
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d104      	bne.n	8008d0a <USB_EPStartXfer+0xf86>
 8008d00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d04:	3b01      	subs	r3, #1
 8008d06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008d0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	029b      	lsls	r3, r3, #10
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d22:	801a      	strh	r2, [r3, #0]
 8008d24:	e2f1      	b.n	800930a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008d26:	463b      	mov	r3, r7
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	78db      	ldrb	r3, [r3, #3]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	f040 818f 	bne.w	8009050 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008d32:	463b      	mov	r3, r7
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	785b      	ldrb	r3, [r3, #1]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d175      	bne.n	8008e28 <USB_EPStartXfer+0x10a4>
 8008d3c:	1d3b      	adds	r3, r7, #4
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d44:	1d3b      	adds	r3, r7, #4
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d54:	4413      	add	r3, r2
 8008d56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	011a      	lsls	r2, r3, #4
 8008d62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d66:	4413      	add	r3, r2
 8008d68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d70:	463b      	mov	r3, r7
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d116      	bne.n	8008da8 <USB_EPStartXfer+0x1024>
 8008d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d8c:	801a      	strh	r2, [r3, #0]
 8008d8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008da4:	801a      	strh	r2, [r3, #0]
 8008da6:	e065      	b.n	8008e74 <USB_EPStartXfer+0x10f0>
 8008da8:	463b      	mov	r3, r7
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b3e      	cmp	r3, #62	; 0x3e
 8008db0:	d81a      	bhi.n	8008de8 <USB_EPStartXfer+0x1064>
 8008db2:	463b      	mov	r3, r7
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	085b      	lsrs	r3, r3, #1
 8008dba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008dbe:	463b      	mov	r3, r7
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <USB_EPStartXfer+0x1052>
 8008dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	029b      	lsls	r3, r3, #10
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008de4:	801a      	strh	r2, [r3, #0]
 8008de6:	e045      	b.n	8008e74 <USB_EPStartXfer+0x10f0>
 8008de8:	463b      	mov	r3, r7
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008df4:	463b      	mov	r3, r7
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	f003 031f 	and.w	r3, r3, #31
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d104      	bne.n	8008e0c <USB_EPStartXfer+0x1088>
 8008e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e06:	3b01      	subs	r3, #1
 8008e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	029b      	lsls	r3, r3, #10
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e24:	801a      	strh	r2, [r3, #0]
 8008e26:	e025      	b.n	8008e74 <USB_EPStartXfer+0x10f0>
 8008e28:	463b      	mov	r3, r7
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	785b      	ldrb	r3, [r3, #1]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d120      	bne.n	8008e74 <USB_EPStartXfer+0x10f0>
 8008e32:	1d3b      	adds	r3, r7, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008e3a:	1d3b      	adds	r3, r7, #4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	461a      	mov	r2, r3
 8008e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008e50:	463b      	mov	r3, r7
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	011a      	lsls	r2, r3, #4
 8008e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e66:	463b      	mov	r3, r7
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008e72:	801a      	strh	r2, [r3, #0]
 8008e74:	1d3b      	adds	r3, r7, #4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e7c:	463b      	mov	r3, r7
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	785b      	ldrb	r3, [r3, #1]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d175      	bne.n	8008f72 <USB_EPStartXfer+0x11ee>
 8008e86:	1d3b      	adds	r3, r7, #4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008e8e:	1d3b      	adds	r3, r7, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	011a      	lsls	r2, r3, #4
 8008eac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008eba:	463b      	mov	r3, r7
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d116      	bne.n	8008ef2 <USB_EPStartXfer+0x116e>
 8008ec4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ed6:	801a      	strh	r2, [r3, #0]
 8008ed8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008eee:	801a      	strh	r2, [r3, #0]
 8008ef0:	e061      	b.n	8008fb6 <USB_EPStartXfer+0x1232>
 8008ef2:	463b      	mov	r3, r7
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8008efa:	d81a      	bhi.n	8008f32 <USB_EPStartXfer+0x11ae>
 8008efc:	463b      	mov	r3, r7
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	085b      	lsrs	r3, r3, #1
 8008f04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f08:	463b      	mov	r3, r7
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d004      	beq.n	8008f20 <USB_EPStartXfer+0x119c>
 8008f16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	029b      	lsls	r3, r3, #10
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f2e:	801a      	strh	r2, [r3, #0]
 8008f30:	e041      	b.n	8008fb6 <USB_EPStartXfer+0x1232>
 8008f32:	463b      	mov	r3, r7
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	095b      	lsrs	r3, r3, #5
 8008f3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f3e:	463b      	mov	r3, r7
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	f003 031f 	and.w	r3, r3, #31
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d104      	bne.n	8008f56 <USB_EPStartXfer+0x11d2>
 8008f4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f50:	3b01      	subs	r3, #1
 8008f52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	029b      	lsls	r3, r3, #10
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	e021      	b.n	8008fb6 <USB_EPStartXfer+0x1232>
 8008f72:	463b      	mov	r3, r7
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d11c      	bne.n	8008fb6 <USB_EPStartXfer+0x1232>
 8008f7c:	1d3b      	adds	r3, r7, #4
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	461a      	mov	r2, r3
 8008f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f92:	463b      	mov	r3, r7
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	011a      	lsls	r2, r3, #4
 8008f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fa8:	463b      	mov	r3, r7
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008fb4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008fb6:	463b      	mov	r3, r7
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 81a4 	beq.w	800930a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008fc2:	1d3b      	adds	r3, r7, #4
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008fd6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d005      	beq.n	8008fee <USB_EPStartXfer+0x126a>
 8008fe2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10d      	bne.n	800900a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008fee:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f040 8187 	bne.w	800930a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ffc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009004:	2b00      	cmp	r3, #0
 8009006:	f040 8180 	bne.w	800930a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800900a:	1d3b      	adds	r3, r7, #4
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	463b      	mov	r3, r7
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	b29b      	uxth	r3, r3
 800901c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009024:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009028:	1d3b      	adds	r3, r7, #4
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	463b      	mov	r3, r7
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	441a      	add	r2, r3
 8009036:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800903a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800903e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800904a:	b29b      	uxth	r3, r3
 800904c:	8013      	strh	r3, [r2, #0]
 800904e:	e15c      	b.n	800930a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009050:	463b      	mov	r3, r7
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	78db      	ldrb	r3, [r3, #3]
 8009056:	2b01      	cmp	r3, #1
 8009058:	f040 8155 	bne.w	8009306 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800905c:	463b      	mov	r3, r7
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	699a      	ldr	r2, [r3, #24]
 8009062:	463b      	mov	r3, r7
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	429a      	cmp	r2, r3
 800906a:	d90e      	bls.n	800908a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800906c:	463b      	mov	r3, r7
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009076:	463b      	mov	r3, r7
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	699a      	ldr	r2, [r3, #24]
 800907c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009080:	1ad2      	subs	r2, r2, r3
 8009082:	463b      	mov	r3, r7
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	619a      	str	r2, [r3, #24]
 8009088:	e008      	b.n	800909c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800908a:	463b      	mov	r3, r7
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009094:	463b      	mov	r3, r7
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2200      	movs	r2, #0
 800909a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800909c:	463b      	mov	r3, r7
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	785b      	ldrb	r3, [r3, #1]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d16f      	bne.n	8009186 <USB_EPStartXfer+0x1402>
 80090a6:	1d3b      	adds	r3, r7, #4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80090ae:	1d3b      	adds	r3, r7, #4
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	461a      	mov	r2, r3
 80090ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80090be:	4413      	add	r3, r2
 80090c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80090c4:	463b      	mov	r3, r7
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	011a      	lsls	r2, r3, #4
 80090cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80090d0:	4413      	add	r3, r2
 80090d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d116      	bne.n	8009110 <USB_EPStartXfer+0x138c>
 80090e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090f4:	801a      	strh	r2, [r3, #0]
 80090f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009106:	b29a      	uxth	r2, r3
 8009108:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800910c:	801a      	strh	r2, [r3, #0]
 800910e:	e05f      	b.n	80091d0 <USB_EPStartXfer+0x144c>
 8009110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009114:	2b3e      	cmp	r3, #62	; 0x3e
 8009116:	d818      	bhi.n	800914a <USB_EPStartXfer+0x13c6>
 8009118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911c:	085b      	lsrs	r3, r3, #1
 800911e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d004      	beq.n	8009138 <USB_EPStartXfer+0x13b4>
 800912e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009132:	3301      	adds	r3, #1
 8009134:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800913c:	b29b      	uxth	r3, r3
 800913e:	029b      	lsls	r3, r3, #10
 8009140:	b29a      	uxth	r2, r3
 8009142:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	e042      	b.n	80091d0 <USB_EPStartXfer+0x144c>
 800914a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800914e:	095b      	lsrs	r3, r3, #5
 8009150:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009158:	f003 031f 	and.w	r3, r3, #31
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <USB_EPStartXfer+0x13e6>
 8009160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009164:	3b01      	subs	r3, #1
 8009166:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800916a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800916e:	b29b      	uxth	r3, r3
 8009170:	029b      	lsls	r3, r3, #10
 8009172:	b29b      	uxth	r3, r3
 8009174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800917c:	b29a      	uxth	r2, r3
 800917e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009182:	801a      	strh	r2, [r3, #0]
 8009184:	e024      	b.n	80091d0 <USB_EPStartXfer+0x144c>
 8009186:	463b      	mov	r3, r7
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d11f      	bne.n	80091d0 <USB_EPStartXfer+0x144c>
 8009190:	1d3b      	adds	r3, r7, #4
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009198:	1d3b      	adds	r3, r7, #4
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a8:	4413      	add	r3, r2
 80091aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091ae:	463b      	mov	r3, r7
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	011a      	lsls	r2, r3, #4
 80091b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ba:	4413      	add	r3, r2
 80091bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80091c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80091ce:	801a      	strh	r2, [r3, #0]
 80091d0:	1d3b      	adds	r3, r7, #4
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091d8:	463b      	mov	r3, r7
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d16f      	bne.n	80092c2 <USB_EPStartXfer+0x153e>
 80091e2:	1d3b      	adds	r3, r7, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80091ea:	1d3b      	adds	r3, r7, #4
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	461a      	mov	r2, r3
 80091f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091fa:	4413      	add	r3, r2
 80091fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009200:	463b      	mov	r3, r7
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	011a      	lsls	r2, r3, #4
 8009208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800920c:	4413      	add	r3, r2
 800920e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800921a:	2b00      	cmp	r3, #0
 800921c:	d116      	bne.n	800924c <USB_EPStartXfer+0x14c8>
 800921e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	b29b      	uxth	r3, r3
 8009226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800922a:	b29a      	uxth	r2, r3
 800922c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009230:	801a      	strh	r2, [r3, #0]
 8009232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	b29b      	uxth	r3, r3
 800923a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800923e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009242:	b29a      	uxth	r2, r3
 8009244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009248:	801a      	strh	r2, [r3, #0]
 800924a:	e05e      	b.n	800930a <USB_EPStartXfer+0x1586>
 800924c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009250:	2b3e      	cmp	r3, #62	; 0x3e
 8009252:	d818      	bhi.n	8009286 <USB_EPStartXfer+0x1502>
 8009254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009258:	085b      	lsrs	r3, r3, #1
 800925a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800925e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d004      	beq.n	8009274 <USB_EPStartXfer+0x14f0>
 800926a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800926e:	3301      	adds	r3, #1
 8009270:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009274:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009278:	b29b      	uxth	r3, r3
 800927a:	029b      	lsls	r3, r3, #10
 800927c:	b29a      	uxth	r2, r3
 800927e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009282:	801a      	strh	r2, [r3, #0]
 8009284:	e041      	b.n	800930a <USB_EPStartXfer+0x1586>
 8009286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800928a:	095b      	lsrs	r3, r3, #5
 800928c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009294:	f003 031f 	and.w	r3, r3, #31
 8009298:	2b00      	cmp	r3, #0
 800929a:	d104      	bne.n	80092a6 <USB_EPStartXfer+0x1522>
 800929c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092a0:	3b01      	subs	r3, #1
 80092a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80092a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	029b      	lsls	r3, r3, #10
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092be:	801a      	strh	r2, [r3, #0]
 80092c0:	e023      	b.n	800930a <USB_EPStartXfer+0x1586>
 80092c2:	463b      	mov	r3, r7
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	785b      	ldrb	r3, [r3, #1]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d11e      	bne.n	800930a <USB_EPStartXfer+0x1586>
 80092cc:	1d3b      	adds	r3, r7, #4
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	461a      	mov	r2, r3
 80092d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092dc:	4413      	add	r3, r2
 80092de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092e2:	463b      	mov	r3, r7
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	011a      	lsls	r2, r3, #4
 80092ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ee:	4413      	add	r3, r2
 80092f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009302:	801a      	strh	r2, [r3, #0]
 8009304:	e001      	b.n	800930a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e02e      	b.n	8009368 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800930a:	1d3b      	adds	r3, r7, #4
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	463b      	mov	r3, r7
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	b29b      	uxth	r3, r3
 800931c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009324:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009328:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800932c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009330:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009334:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009338:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800933c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009340:	1d3b      	adds	r3, r7, #4
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	463b      	mov	r3, r7
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	441a      	add	r2, r3
 800934e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800935a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800935e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009362:	b29b      	uxth	r3, r3
 8009364:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009372:	b480      	push	{r7}
 8009374:	b085      	sub	sp, #20
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	785b      	ldrb	r3, [r3, #1]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d020      	beq.n	80093c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	b29b      	uxth	r3, r3
 8009392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800939a:	81bb      	strh	r3, [r7, #12]
 800939c:	89bb      	ldrh	r3, [r7, #12]
 800939e:	f083 0310 	eor.w	r3, r3, #16
 80093a2:	81bb      	strh	r3, [r7, #12]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	441a      	add	r2, r3
 80093ae:	89bb      	ldrh	r3, [r7, #12]
 80093b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	8013      	strh	r3, [r2, #0]
 80093c4:	e01f      	b.n	8009406 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093dc:	81fb      	strh	r3, [r7, #14]
 80093de:	89fb      	ldrh	r3, [r7, #14]
 80093e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093e4:	81fb      	strh	r3, [r7, #14]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	441a      	add	r2, r3
 80093f0:	89fb      	ldrh	r3, [r7, #14]
 80093f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009402:	b29b      	uxth	r3, r3
 8009404:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr

08009412 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009412:	b480      	push	{r7}
 8009414:	b087      	sub	sp, #28
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	7b1b      	ldrb	r3, [r3, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 809d 	bne.w	8009560 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	785b      	ldrb	r3, [r3, #1]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d04c      	beq.n	80094c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	823b      	strh	r3, [r7, #16]
 800943c:	8a3b      	ldrh	r3, [r7, #16]
 800943e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01b      	beq.n	800947e <USB_EPClearStall+0x6c>
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29b      	uxth	r3, r3
 8009454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945c:	81fb      	strh	r3, [r7, #14]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	441a      	add	r2, r3
 8009468:	89fb      	ldrh	r3, [r7, #14]
 800946a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800946e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800947a:	b29b      	uxth	r3, r3
 800947c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	78db      	ldrb	r3, [r3, #3]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d06c      	beq.n	8009560 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	b29b      	uxth	r3, r3
 8009494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800949c:	81bb      	strh	r3, [r7, #12]
 800949e:	89bb      	ldrh	r3, [r7, #12]
 80094a0:	f083 0320 	eor.w	r3, r3, #32
 80094a4:	81bb      	strh	r3, [r7, #12]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	441a      	add	r2, r3
 80094b0:	89bb      	ldrh	r3, [r7, #12]
 80094b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	8013      	strh	r3, [r2, #0]
 80094c6:	e04b      	b.n	8009560 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	82fb      	strh	r3, [r7, #22]
 80094d6:	8afb      	ldrh	r3, [r7, #22]
 80094d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01b      	beq.n	8009518 <USB_EPClearStall+0x106>
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f6:	82bb      	strh	r3, [r7, #20]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	441a      	add	r2, r3
 8009502:	8abb      	ldrh	r3, [r7, #20]
 8009504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800950c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009514:	b29b      	uxth	r3, r3
 8009516:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b29b      	uxth	r3, r3
 8009526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800952a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952e:	827b      	strh	r3, [r7, #18]
 8009530:	8a7b      	ldrh	r3, [r7, #18]
 8009532:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009536:	827b      	strh	r3, [r7, #18]
 8009538:	8a7b      	ldrh	r3, [r7, #18]
 800953a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800953e:	827b      	strh	r3, [r7, #18]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	441a      	add	r2, r3
 800954a:	8a7b      	ldrh	r3, [r7, #18]
 800954c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955c:	b29b      	uxth	r3, r3
 800955e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	371c      	adds	r7, #28
 8009566:	46bd      	mov	sp, r7
 8009568:	bc80      	pop	{r7}
 800956a:	4770      	bx	lr

0800956c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009578:	78fb      	ldrb	r3, [r7, #3]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d103      	bne.n	8009586 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2280      	movs	r2, #128	; 0x80
 8009582:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr

08009592 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bc80      	pop	{r7}
 80095a4:	4770      	bx	lr

080095a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b083      	sub	sp, #12
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bc80      	pop	{r7}
 80095b8:	4770      	bx	lr

080095ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b085      	sub	sp, #20
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80095cc:	68fb      	ldr	r3, [r7, #12]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bc80      	pop	{r7}
 80095d6:	4770      	bx	lr

080095d8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr

080095ee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b08d      	sub	sp, #52	; 0x34
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	4611      	mov	r1, r2
 80095fa:	461a      	mov	r2, r3
 80095fc:	460b      	mov	r3, r1
 80095fe:	80fb      	strh	r3, [r7, #6]
 8009600:	4613      	mov	r3, r2
 8009602:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009604:	88bb      	ldrh	r3, [r7, #4]
 8009606:	3301      	adds	r3, #1
 8009608:	085b      	lsrs	r3, r3, #1
 800960a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009614:	88fb      	ldrh	r3, [r7, #6]
 8009616:	005a      	lsls	r2, r3, #1
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	4413      	add	r3, r2
 800961c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009620:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009626:	e01e      	b.n	8009666 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	3301      	adds	r3, #1
 8009632:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	b29b      	uxth	r3, r3
 800963a:	021b      	lsls	r3, r3, #8
 800963c:	b29b      	uxth	r3, r3
 800963e:	461a      	mov	r2, r3
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	4313      	orrs	r3, r2
 8009644:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	b29a      	uxth	r2, r3
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	3302      	adds	r3, #2
 8009652:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	3302      	adds	r3, #2
 8009658:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	3301      	adds	r3, #1
 800965e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	3b01      	subs	r3, #1
 8009664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1dd      	bne.n	8009628 <USB_WritePMA+0x3a>
  }
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	3734      	adds	r7, #52	; 0x34
 8009672:	46bd      	mov	sp, r7
 8009674:	bc80      	pop	{r7}
 8009676:	4770      	bx	lr

08009678 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009678:	b480      	push	{r7}
 800967a:	b08b      	sub	sp, #44	; 0x2c
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4611      	mov	r1, r2
 8009684:	461a      	mov	r2, r3
 8009686:	460b      	mov	r3, r1
 8009688:	80fb      	strh	r3, [r7, #6]
 800968a:	4613      	mov	r3, r2
 800968c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800968e:	88bb      	ldrh	r3, [r7, #4]
 8009690:	085b      	lsrs	r3, r3, #1
 8009692:	b29b      	uxth	r3, r3
 8009694:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	005a      	lsls	r2, r3, #1
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096aa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	627b      	str	r3, [r7, #36]	; 0x24
 80096b0:	e01b      	b.n	80096ea <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	3302      	adds	r3, #2
 80096be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	3301      	adds	r3, #1
 80096cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	0a1b      	lsrs	r3, r3, #8
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	3301      	adds	r3, #1
 80096dc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	3302      	adds	r3, #2
 80096e2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	3b01      	subs	r3, #1
 80096e8:	627b      	str	r3, [r7, #36]	; 0x24
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e0      	bne.n	80096b2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80096f0:	88bb      	ldrh	r3, [r7, #4]
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	881b      	ldrh	r3, [r3, #0]
 8009700:	b29b      	uxth	r3, r3
 8009702:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	b2da      	uxtb	r2, r3
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	701a      	strb	r2, [r3, #0]
  }
}
 800970c:	bf00      	nop
 800970e:	372c      	adds	r7, #44	; 0x2c
 8009710:	46bd      	mov	sp, r7
 8009712:	bc80      	pop	{r7}
 8009714:	4770      	bx	lr

08009716 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	460b      	mov	r3, r1
 8009720:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	7c1b      	ldrb	r3, [r3, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d115      	bne.n	800975a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800972e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009732:	2202      	movs	r2, #2
 8009734:	2181      	movs	r1, #129	; 0x81
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f001 fe99 	bl	800b46e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009746:	2202      	movs	r2, #2
 8009748:	2101      	movs	r1, #1
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 fe8f 	bl	800b46e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009758:	e012      	b.n	8009780 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800975a:	2340      	movs	r3, #64	; 0x40
 800975c:	2202      	movs	r2, #2
 800975e:	2181      	movs	r1, #129	; 0x81
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f001 fe84 	bl	800b46e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800976c:	2340      	movs	r3, #64	; 0x40
 800976e:	2202      	movs	r2, #2
 8009770:	2101      	movs	r1, #1
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 fe7b 	bl	800b46e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009780:	2308      	movs	r3, #8
 8009782:	2203      	movs	r2, #3
 8009784:	2182      	movs	r1, #130	; 0x82
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f001 fe71 	bl	800b46e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009792:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009796:	f001 ff91 	bl	800b6bc <USBD_static_malloc>
 800979a:	4602      	mov	r2, r0
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d102      	bne.n	80097b2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80097ac:	2301      	movs	r3, #1
 80097ae:	73fb      	strb	r3, [r7, #15]
 80097b0:	e026      	b.n	8009800 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	7c1b      	ldrb	r3, [r3, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d109      	bne.n	80097f0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097e6:	2101      	movs	r1, #1
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f001 ff31 	bl	800b650 <USBD_LL_PrepareReceive>
 80097ee:	e007      	b.n	8009800 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097f6:	2340      	movs	r3, #64	; 0x40
 80097f8:	2101      	movs	r1, #1
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f001 ff28 	bl	800b650 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009800:	7bfb      	ldrb	r3, [r7, #15]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800981a:	2181      	movs	r1, #129	; 0x81
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 fe4c 	bl	800b4ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009828:	2101      	movs	r1, #1
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 fe45 	bl	800b4ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009838:	2182      	movs	r1, #130	; 0x82
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f001 fe3d 	bl	800b4ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00e      	beq.n	800986e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009860:	4618      	mov	r0, r3
 8009862:	f001 ff37 	bl	800b6d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800986e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009888:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d039      	beq.n	8009916 <USBD_CDC_Setup+0x9e>
 80098a2:	2b20      	cmp	r3, #32
 80098a4:	d17f      	bne.n	80099a6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	88db      	ldrh	r3, [r3, #6]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d029      	beq.n	8009902 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	b25b      	sxtb	r3, r3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	da11      	bge.n	80098dc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80098c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	88d2      	ldrh	r2, [r2, #6]
 80098ca:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80098cc:	6939      	ldr	r1, [r7, #16]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	88db      	ldrh	r3, [r3, #6]
 80098d2:	461a      	mov	r2, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f001 fa0a 	bl	800acee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80098da:	e06b      	b.n	80099b4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	785a      	ldrb	r2, [r3, #1]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	88db      	ldrh	r3, [r3, #6]
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80098f2:	6939      	ldr	r1, [r7, #16]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	88db      	ldrh	r3, [r3, #6]
 80098f8:	461a      	mov	r2, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 fa25 	bl	800ad4a <USBD_CtlPrepareRx>
      break;
 8009900:	e058      	b.n	80099b4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	7850      	ldrb	r0, [r2, #1]
 800990e:	2200      	movs	r2, #0
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	4798      	blx	r3
      break;
 8009914:	e04e      	b.n	80099b4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	785b      	ldrb	r3, [r3, #1]
 800991a:	2b0b      	cmp	r3, #11
 800991c:	d02e      	beq.n	800997c <USBD_CDC_Setup+0x104>
 800991e:	2b0b      	cmp	r3, #11
 8009920:	dc38      	bgt.n	8009994 <USBD_CDC_Setup+0x11c>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <USBD_CDC_Setup+0xb4>
 8009926:	2b0a      	cmp	r3, #10
 8009928:	d014      	beq.n	8009954 <USBD_CDC_Setup+0xdc>
 800992a:	e033      	b.n	8009994 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009932:	2b03      	cmp	r3, #3
 8009934:	d107      	bne.n	8009946 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009936:	f107 030c 	add.w	r3, r7, #12
 800993a:	2202      	movs	r2, #2
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 f9d5 	bl	800acee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009944:	e02e      	b.n	80099a4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 f966 	bl	800ac1a <USBD_CtlError>
            ret = USBD_FAIL;
 800994e:	2302      	movs	r3, #2
 8009950:	75fb      	strb	r3, [r7, #23]
          break;
 8009952:	e027      	b.n	80099a4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995a:	2b03      	cmp	r3, #3
 800995c:	d107      	bne.n	800996e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800995e:	f107 030f 	add.w	r3, r7, #15
 8009962:	2201      	movs	r2, #1
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f001 f9c1 	bl	800acee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800996c:	e01a      	b.n	80099a4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f001 f952 	bl	800ac1a <USBD_CtlError>
            ret = USBD_FAIL;
 8009976:	2302      	movs	r3, #2
 8009978:	75fb      	strb	r3, [r7, #23]
          break;
 800997a:	e013      	b.n	80099a4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009982:	2b03      	cmp	r3, #3
 8009984:	d00d      	beq.n	80099a2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 f946 	bl	800ac1a <USBD_CtlError>
            ret = USBD_FAIL;
 800998e:	2302      	movs	r3, #2
 8009990:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009992:	e006      	b.n	80099a2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 f93f 	bl	800ac1a <USBD_CtlError>
          ret = USBD_FAIL;
 800999c:	2302      	movs	r3, #2
 800999e:	75fb      	strb	r3, [r7, #23]
          break;
 80099a0:	e000      	b.n	80099a4 <USBD_CDC_Setup+0x12c>
          break;
 80099a2:	bf00      	nop
      }
      break;
 80099a4:	e006      	b.n	80099b4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 f936 	bl	800ac1a <USBD_CtlError>
      ret = USBD_FAIL;
 80099ae:	2302      	movs	r3, #2
 80099b0:	75fb      	strb	r3, [r7, #23]
      break;
 80099b2:	bf00      	nop
  }

  return ret;
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099d8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d03a      	beq.n	8009a5a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80099e4:	78fa      	ldrb	r2, [r7, #3]
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4613      	mov	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	440b      	add	r3, r1
 80099f2:	331c      	adds	r3, #28
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d029      	beq.n	8009a4e <USBD_CDC_DataIn+0x90>
 80099fa:	78fa      	ldrb	r2, [r7, #3]
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	440b      	add	r3, r1
 8009a08:	331c      	adds	r3, #28
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	78f9      	ldrb	r1, [r7, #3]
 8009a0e:	68b8      	ldr	r0, [r7, #8]
 8009a10:	460b      	mov	r3, r1
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	440b      	add	r3, r1
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	4403      	add	r3, r0
 8009a1a:	3338      	adds	r3, #56	; 0x38
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a22:	fb03 f301 	mul.w	r3, r3, r1
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d110      	bne.n	8009a4e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009a2c:	78fa      	ldrb	r2, [r7, #3]
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	4613      	mov	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	440b      	add	r3, r1
 8009a3a:	331c      	adds	r3, #28
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a40:	78f9      	ldrb	r1, [r7, #3]
 8009a42:	2300      	movs	r3, #0
 8009a44:	2200      	movs	r2, #0
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f001 fddf 	bl	800b60a <USBD_LL_Transmit>
 8009a4c:	e003      	b.n	8009a56 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	e000      	b.n	8009a5c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009a5a:	2302      	movs	r3, #2
  }
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f001 fe0a 	bl	800b696 <USBD_LL_GetRxDataSize>
 8009a82:	4602      	mov	r2, r0
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00d      	beq.n	8009ab0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4798      	blx	r3

    return USBD_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	e000      	b.n	8009ab2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009ab0:	2302      	movs	r3, #2
  }
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d015      	beq.n	8009b00 <USBD_CDC_EP0_RxReady+0x46>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009ada:	2bff      	cmp	r3, #255	; 0xff
 8009adc:	d010      	beq.n	8009b00 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009aec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009af4:	b292      	uxth	r2, r2
 8009af6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	22ff      	movs	r2, #255	; 0xff
 8009afc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2243      	movs	r2, #67	; 0x43
 8009b18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009b1a:	4b03      	ldr	r3, [pc, #12]	; (8009b28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bc80      	pop	{r7}
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	200000a0 	.word	0x200000a0

08009b2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2243      	movs	r2, #67	; 0x43
 8009b38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009b3a:	4b03      	ldr	r3, [pc, #12]	; (8009b48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	2000005c 	.word	0x2000005c

08009b4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2243      	movs	r2, #67	; 0x43
 8009b58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009b5a:	4b03      	ldr	r3, [pc, #12]	; (8009b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bc80      	pop	{r7}
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	200000e4 	.word	0x200000e4

08009b6c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	220a      	movs	r2, #10
 8009b78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009b7a:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bc80      	pop	{r7}
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	20000018 	.word	0x20000018

08009b8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009b96:	2302      	movs	r3, #2
 8009b98:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d005      	beq.n	8009bac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bc80      	pop	{r7}
 8009bb6:	4770      	bx	lr

08009bb8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bcc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009bd6:	88fa      	ldrh	r2, [r7, #6]
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bc80      	pop	{r7}
 8009be8:	4770      	bx	lr

08009bea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bfa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bc80      	pop	{r7}
 8009c0e:	4770      	bx	lr

08009c10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d01c      	beq.n	8009c64 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d115      	bne.n	8009c60 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	2181      	movs	r1, #129	; 0x81
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f001 fcd7 	bl	800b60a <USBD_LL_Transmit>

      return USBD_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	e002      	b.n	8009c66 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e000      	b.n	8009c66 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009c64:	2302      	movs	r3, #2
  }
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c7c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d017      	beq.n	8009cb8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	7c1b      	ldrb	r3, [r3, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d109      	bne.n	8009ca4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 fcd7 	bl	800b650 <USBD_LL_PrepareReceive>
 8009ca2:	e007      	b.n	8009cb4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009caa:	2340      	movs	r3, #64	; 0x40
 8009cac:	2101      	movs	r1, #1
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f001 fcce 	bl	800b650 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e000      	b.n	8009cba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009cb8:	2302      	movs	r3, #2
  }
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b084      	sub	sp, #16
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	e01a      	b.n	8009d10 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d003      	beq.n	8009cec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	79fa      	ldrb	r2, [r7, #7]
 8009d06:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f001 fb3b 	bl	800b384 <USBD_LL_Init>

  return USBD_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d006      	beq.n	8009d3a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
 8009d38:	e001      	b.n	8009d3e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bc80      	pop	{r7}
 8009d48:	4770      	bx	lr

08009d4a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f001 fb70 	bl	800b438 <USBD_LL_Start>

  return USBD_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b083      	sub	sp, #12
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bc80      	pop	{r7}
 8009d74:	4770      	bx	lr

08009d76 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009d82:	2302      	movs	r3, #2
 8009d84:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00c      	beq.n	8009daa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	78fa      	ldrb	r2, [r7, #3]
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	4798      	blx	r3
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	4798      	blx	r3

  return USBD_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b082      	sub	sp, #8
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fed8 	bl	800aba2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e00:	461a      	mov	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009e0e:	f003 031f 	and.w	r3, r3, #31
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d016      	beq.n	8009e44 <USBD_LL_SetupStage+0x6a>
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d81c      	bhi.n	8009e54 <USBD_LL_SetupStage+0x7a>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d002      	beq.n	8009e24 <USBD_LL_SetupStage+0x4a>
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d008      	beq.n	8009e34 <USBD_LL_SetupStage+0x5a>
 8009e22:	e017      	b.n	8009e54 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f9cb 	bl	800a1c8 <USBD_StdDevReq>
      break;
 8009e32:	e01a      	b.n	8009e6a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fa2d 	bl	800a29c <USBD_StdItfReq>
      break;
 8009e42:	e012      	b.n	8009e6a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fa6d 	bl	800a32c <USBD_StdEPReq>
      break;
 8009e52:	e00a      	b.n	8009e6a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009e5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 fb48 	bl	800b4f8 <USBD_LL_StallEP>
      break;
 8009e68:	bf00      	nop
  }

  return USBD_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009e82:	7afb      	ldrb	r3, [r7, #11]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d14b      	bne.n	8009f20 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e8e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	d134      	bne.n	8009f04 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	68da      	ldr	r2, [r3, #12]
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d919      	bls.n	8009eda <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	68da      	ldr	r2, [r3, #12]
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	68da      	ldr	r2, [r3, #12]
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d203      	bcs.n	8009ec8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	e002      	b.n	8009ece <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6879      	ldr	r1, [r7, #4]
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 ff57 	bl	800ad86 <USBD_CtlContinueRx>
 8009ed8:	e038      	b.n	8009f4c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00a      	beq.n	8009efc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d105      	bne.n	8009efc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f000 ff54 	bl	800adaa <USBD_CtlSendStatus>
 8009f02:	e023      	b.n	8009f4c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f0a:	2b05      	cmp	r3, #5
 8009f0c:	d11e      	bne.n	8009f4c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009f16:	2100      	movs	r1, #0
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f001 faed 	bl	800b4f8 <USBD_LL_StallEP>
 8009f1e:	e015      	b.n	8009f4c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00d      	beq.n	8009f48 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d108      	bne.n	8009f48 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	7afa      	ldrb	r2, [r7, #11]
 8009f40:	4611      	mov	r1, r2
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	4798      	blx	r3
 8009f46:	e001      	b.n	8009f4c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	e000      	b.n	8009f4e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b086      	sub	sp, #24
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	607a      	str	r2, [r7, #4]
 8009f62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d17f      	bne.n	800a06a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3314      	adds	r3, #20
 8009f6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d15c      	bne.n	800a034 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	68da      	ldr	r2, [r3, #12]
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d915      	bls.n	8009fb2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	1ad2      	subs	r2, r2, r3
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 fec1 	bl	800ad26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	2100      	movs	r1, #0
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f001 fb50 	bl	800b650 <USBD_LL_PrepareReceive>
 8009fb0:	e04e      	b.n	800a050 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	6912      	ldr	r2, [r2, #16]
 8009fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fbe:	fb02 f201 	mul.w	r2, r2, r1
 8009fc2:	1a9b      	subs	r3, r3, r2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d11c      	bne.n	800a002 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	689a      	ldr	r2, [r3, #8]
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d316      	bcc.n	800a002 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	689a      	ldr	r2, [r3, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d20f      	bcs.n	800a002 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 fe9d 	bl	800ad26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f001 fb28 	bl	800b650 <USBD_LL_PrepareReceive>
 800a000:	e026      	b.n	800a050 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a014:	2b03      	cmp	r3, #3
 800a016:	d105      	bne.n	800a024 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a024:	2180      	movs	r1, #128	; 0x80
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f001 fa66 	bl	800b4f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 fecf 	bl	800add0 <USBD_CtlReceiveStatus>
 800a032:	e00d      	b.n	800a050 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	d004      	beq.n	800a048 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a044:	2b00      	cmp	r3, #0
 800a046:	d103      	bne.n	800a050 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a048:	2180      	movs	r1, #128	; 0x80
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f001 fa54 	bl	800b4f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a056:	2b01      	cmp	r3, #1
 800a058:	d11d      	bne.n	800a096 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f7ff fe81 	bl	8009d62 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a068:	e015      	b.n	800a096 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00d      	beq.n	800a092 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	d108      	bne.n	800a092 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	7afa      	ldrb	r2, [r7, #11]
 800a08a:	4611      	mov	r1, r2
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	4798      	blx	r3
 800a090:	e001      	b.n	800a096 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a092:	2302      	movs	r3, #2
 800a094:	e000      	b.n	800a098 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3718      	adds	r7, #24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0a8:	2340      	movs	r3, #64	; 0x40
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f001 f9dd 	bl	800b46e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2240      	movs	r2, #64	; 0x40
 800a0c0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0c4:	2340      	movs	r3, #64	; 0x40
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2180      	movs	r1, #128	; 0x80
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f001 f9cf 	bl	800b46e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2240      	movs	r2, #64	; 0x40
 800a0da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a100:	2b00      	cmp	r3, #0
 800a102:	d009      	beq.n	800a118 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	6852      	ldr	r2, [r2, #4]
 800a110:	b2d2      	uxtb	r2, r2
 800a112:	4611      	mov	r1, r2
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	4798      	blx	r3
  }

  return USBD_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	460b      	mov	r3, r1
 800a12c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	78fa      	ldrb	r2, [r7, #3]
 800a132:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bc80      	pop	{r7}
 800a13e:	4770      	bx	lr

0800a140 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2204      	movs	r2, #4
 800a158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	bc80      	pop	{r7}
 800a166:	4770      	bx	lr

0800a168 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a176:	2b04      	cmp	r3, #4
 800a178:	d105      	bne.n	800a186 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr

0800a192 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d10b      	bne.n	800a1bc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1aa:	69db      	ldr	r3, [r3, #28]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
	...

0800a1c8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1de:	2b40      	cmp	r3, #64	; 0x40
 800a1e0:	d005      	beq.n	800a1ee <USBD_StdDevReq+0x26>
 800a1e2:	2b40      	cmp	r3, #64	; 0x40
 800a1e4:	d84f      	bhi.n	800a286 <USBD_StdDevReq+0xbe>
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d009      	beq.n	800a1fe <USBD_StdDevReq+0x36>
 800a1ea:	2b20      	cmp	r3, #32
 800a1ec:	d14b      	bne.n	800a286 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	4798      	blx	r3
      break;
 800a1fc:	e048      	b.n	800a290 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	785b      	ldrb	r3, [r3, #1]
 800a202:	2b09      	cmp	r3, #9
 800a204:	d839      	bhi.n	800a27a <USBD_StdDevReq+0xb2>
 800a206:	a201      	add	r2, pc, #4	; (adr r2, 800a20c <USBD_StdDevReq+0x44>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a25d 	.word	0x0800a25d
 800a210:	0800a271 	.word	0x0800a271
 800a214:	0800a27b 	.word	0x0800a27b
 800a218:	0800a267 	.word	0x0800a267
 800a21c:	0800a27b 	.word	0x0800a27b
 800a220:	0800a23f 	.word	0x0800a23f
 800a224:	0800a235 	.word	0x0800a235
 800a228:	0800a27b 	.word	0x0800a27b
 800a22c:	0800a253 	.word	0x0800a253
 800a230:	0800a249 	.word	0x0800a249
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f9dc 	bl	800a5f4 <USBD_GetDescriptor>
          break;
 800a23c:	e022      	b.n	800a284 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fb3f 	bl	800a8c4 <USBD_SetAddress>
          break;
 800a246:	e01d      	b.n	800a284 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fb7e 	bl	800a94c <USBD_SetConfig>
          break;
 800a250:	e018      	b.n	800a284 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fc07 	bl	800aa68 <USBD_GetConfig>
          break;
 800a25a:	e013      	b.n	800a284 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fc37 	bl	800aad2 <USBD_GetStatus>
          break;
 800a264:	e00e      	b.n	800a284 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fc65 	bl	800ab38 <USBD_SetFeature>
          break;
 800a26e:	e009      	b.n	800a284 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fc74 	bl	800ab60 <USBD_ClrFeature>
          break;
 800a278:	e004      	b.n	800a284 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fccc 	bl	800ac1a <USBD_CtlError>
          break;
 800a282:	bf00      	nop
      }
      break;
 800a284:	e004      	b.n	800a290 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fcc6 	bl	800ac1a <USBD_CtlError>
      break;
 800a28e:	bf00      	nop
  }

  return ret;
 800a290:	7bfb      	ldrb	r3, [r7, #15]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop

0800a29c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2b2:	2b40      	cmp	r3, #64	; 0x40
 800a2b4:	d005      	beq.n	800a2c2 <USBD_StdItfReq+0x26>
 800a2b6:	2b40      	cmp	r3, #64	; 0x40
 800a2b8:	d82e      	bhi.n	800a318 <USBD_StdItfReq+0x7c>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <USBD_StdItfReq+0x26>
 800a2be:	2b20      	cmp	r3, #32
 800a2c0:	d12a      	bne.n	800a318 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d81d      	bhi.n	800a30a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	889b      	ldrh	r3, [r3, #4]
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d813      	bhi.n	800a300 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	88db      	ldrh	r3, [r3, #6]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d110      	bne.n	800a314 <USBD_StdItfReq+0x78>
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10d      	bne.n	800a314 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fd56 	bl	800adaa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a2fe:	e009      	b.n	800a314 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fc89 	bl	800ac1a <USBD_CtlError>
          break;
 800a308:	e004      	b.n	800a314 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fc84 	bl	800ac1a <USBD_CtlError>
          break;
 800a312:	e000      	b.n	800a316 <USBD_StdItfReq+0x7a>
          break;
 800a314:	bf00      	nop
      }
      break;
 800a316:	e004      	b.n	800a322 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fc7d 	bl	800ac1a <USBD_CtlError>
      break;
 800a320:	bf00      	nop
  }

  return USBD_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	889b      	ldrh	r3, [r3, #4]
 800a33e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a348:	2b40      	cmp	r3, #64	; 0x40
 800a34a:	d007      	beq.n	800a35c <USBD_StdEPReq+0x30>
 800a34c:	2b40      	cmp	r3, #64	; 0x40
 800a34e:	f200 8146 	bhi.w	800a5de <USBD_StdEPReq+0x2b2>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <USBD_StdEPReq+0x40>
 800a356:	2b20      	cmp	r3, #32
 800a358:	f040 8141 	bne.w	800a5de <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	4798      	blx	r3
      break;
 800a36a:	e13d      	b.n	800a5e8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a374:	2b20      	cmp	r3, #32
 800a376:	d10a      	bne.n	800a38e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	4798      	blx	r3
 800a386:	4603      	mov	r3, r0
 800a388:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	e12d      	b.n	800a5ea <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	2b03      	cmp	r3, #3
 800a394:	d007      	beq.n	800a3a6 <USBD_StdEPReq+0x7a>
 800a396:	2b03      	cmp	r3, #3
 800a398:	f300 811b 	bgt.w	800a5d2 <USBD_StdEPReq+0x2a6>
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d072      	beq.n	800a486 <USBD_StdEPReq+0x15a>
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d03a      	beq.n	800a41a <USBD_StdEPReq+0xee>
 800a3a4:	e115      	b.n	800a5d2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d002      	beq.n	800a3b6 <USBD_StdEPReq+0x8a>
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d015      	beq.n	800a3e0 <USBD_StdEPReq+0xb4>
 800a3b4:	e02b      	b.n	800a40e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00c      	beq.n	800a3d6 <USBD_StdEPReq+0xaa>
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	2b80      	cmp	r3, #128	; 0x80
 800a3c0:	d009      	beq.n	800a3d6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f001 f896 	bl	800b4f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a3cc:	2180      	movs	r1, #128	; 0x80
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f001 f892 	bl	800b4f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3d4:	e020      	b.n	800a418 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fc1e 	bl	800ac1a <USBD_CtlError>
              break;
 800a3de:	e01b      	b.n	800a418 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	885b      	ldrh	r3, [r3, #2]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10e      	bne.n	800a406 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00b      	beq.n	800a406 <USBD_StdEPReq+0xda>
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
 800a3f0:	2b80      	cmp	r3, #128	; 0x80
 800a3f2:	d008      	beq.n	800a406 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	88db      	ldrh	r3, [r3, #6]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d104      	bne.n	800a406 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a3fc:	7bbb      	ldrb	r3, [r7, #14]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 f879 	bl	800b4f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fccf 	bl	800adaa <USBD_CtlSendStatus>

              break;
 800a40c:	e004      	b.n	800a418 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fc02 	bl	800ac1a <USBD_CtlError>
              break;
 800a416:	bf00      	nop
          }
          break;
 800a418:	e0e0      	b.n	800a5dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a420:	2b02      	cmp	r3, #2
 800a422:	d002      	beq.n	800a42a <USBD_StdEPReq+0xfe>
 800a424:	2b03      	cmp	r3, #3
 800a426:	d015      	beq.n	800a454 <USBD_StdEPReq+0x128>
 800a428:	e026      	b.n	800a478 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a42a:	7bbb      	ldrb	r3, [r7, #14]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00c      	beq.n	800a44a <USBD_StdEPReq+0x11e>
 800a430:	7bbb      	ldrb	r3, [r7, #14]
 800a432:	2b80      	cmp	r3, #128	; 0x80
 800a434:	d009      	beq.n	800a44a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a436:	7bbb      	ldrb	r3, [r7, #14]
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f001 f85c 	bl	800b4f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a440:	2180      	movs	r1, #128	; 0x80
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f001 f858 	bl	800b4f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a448:	e01c      	b.n	800a484 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a44a:	6839      	ldr	r1, [r7, #0]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fbe4 	bl	800ac1a <USBD_CtlError>
              break;
 800a452:	e017      	b.n	800a484 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	885b      	ldrh	r3, [r3, #2]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d112      	bne.n	800a482 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a462:	2b00      	cmp	r3, #0
 800a464:	d004      	beq.n	800a470 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a466:	7bbb      	ldrb	r3, [r7, #14]
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f001 f863 	bl	800b536 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fc9a 	bl	800adaa <USBD_CtlSendStatus>
              }
              break;
 800a476:	e004      	b.n	800a482 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fbcd 	bl	800ac1a <USBD_CtlError>
              break;
 800a480:	e000      	b.n	800a484 <USBD_StdEPReq+0x158>
              break;
 800a482:	bf00      	nop
          }
          break;
 800a484:	e0aa      	b.n	800a5dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d002      	beq.n	800a496 <USBD_StdEPReq+0x16a>
 800a490:	2b03      	cmp	r3, #3
 800a492:	d032      	beq.n	800a4fa <USBD_StdEPReq+0x1ce>
 800a494:	e097      	b.n	800a5c6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a496:	7bbb      	ldrb	r3, [r7, #14]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d007      	beq.n	800a4ac <USBD_StdEPReq+0x180>
 800a49c:	7bbb      	ldrb	r3, [r7, #14]
 800a49e:	2b80      	cmp	r3, #128	; 0x80
 800a4a0:	d004      	beq.n	800a4ac <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fbb8 	bl	800ac1a <USBD_CtlError>
                break;
 800a4aa:	e091      	b.n	800a5d0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	da0b      	bge.n	800a4cc <USBD_StdEPReq+0x1a0>
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	3310      	adds	r3, #16
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	e00b      	b.n	800a4e4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4cc:	7bbb      	ldrb	r3, [r7, #14]
 800a4ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fbfb 	bl	800acee <USBD_CtlSendData>
              break;
 800a4f8:	e06a      	b.n	800a5d0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	da11      	bge.n	800a526 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a502:	7bbb      	ldrb	r3, [r7, #14]
 800a504:	f003 020f 	and.w	r2, r3, #15
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	4613      	mov	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	440b      	add	r3, r1
 800a514:	3318      	adds	r3, #24
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d117      	bne.n	800a54c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a51c:	6839      	ldr	r1, [r7, #0]
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 fb7b 	bl	800ac1a <USBD_CtlError>
                  break;
 800a524:	e054      	b.n	800a5d0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	f003 020f 	and.w	r2, r3, #15
 800a52c:	6879      	ldr	r1, [r7, #4]
 800a52e:	4613      	mov	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	440b      	add	r3, r1
 800a538:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d104      	bne.n	800a54c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fb68 	bl	800ac1a <USBD_CtlError>
                  break;
 800a54a:	e041      	b.n	800a5d0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a54c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a550:	2b00      	cmp	r3, #0
 800a552:	da0b      	bge.n	800a56c <USBD_StdEPReq+0x240>
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a55a:	4613      	mov	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4413      	add	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	3310      	adds	r3, #16
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	4413      	add	r3, r2
 800a568:	3304      	adds	r3, #4
 800a56a:	e00b      	b.n	800a584 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a572:	4613      	mov	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	4413      	add	r3, r2
 800a582:	3304      	adds	r3, #4
 800a584:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <USBD_StdEPReq+0x266>
 800a58c:	7bbb      	ldrb	r3, [r7, #14]
 800a58e:	2b80      	cmp	r3, #128	; 0x80
 800a590:	d103      	bne.n	800a59a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	e00e      	b.n	800a5b8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 ffe8 	bl	800b574 <USBD_LL_IsStallEP>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	e002      	b.n	800a5b8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fb95 	bl	800acee <USBD_CtlSendData>
              break;
 800a5c4:	e004      	b.n	800a5d0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fb26 	bl	800ac1a <USBD_CtlError>
              break;
 800a5ce:	bf00      	nop
          }
          break;
 800a5d0:	e004      	b.n	800a5dc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fb20 	bl	800ac1a <USBD_CtlError>
          break;
 800a5da:	bf00      	nop
      }
      break;
 800a5dc:	e004      	b.n	800a5e8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fb1a 	bl	800ac1a <USBD_CtlError>
      break;
 800a5e6:	bf00      	nop
  }

  return ret;
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a602:	2300      	movs	r3, #0
 800a604:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	885b      	ldrh	r3, [r3, #2]
 800a60e:	0a1b      	lsrs	r3, r3, #8
 800a610:	b29b      	uxth	r3, r3
 800a612:	3b01      	subs	r3, #1
 800a614:	2b06      	cmp	r3, #6
 800a616:	f200 8128 	bhi.w	800a86a <USBD_GetDescriptor+0x276>
 800a61a:	a201      	add	r2, pc, #4	; (adr r2, 800a620 <USBD_GetDescriptor+0x2c>)
 800a61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a620:	0800a63d 	.word	0x0800a63d
 800a624:	0800a655 	.word	0x0800a655
 800a628:	0800a695 	.word	0x0800a695
 800a62c:	0800a86b 	.word	0x0800a86b
 800a630:	0800a86b 	.word	0x0800a86b
 800a634:	0800a80b 	.word	0x0800a80b
 800a638:	0800a837 	.word	0x0800a837
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	7c12      	ldrb	r2, [r2, #16]
 800a648:	f107 0108 	add.w	r1, r7, #8
 800a64c:	4610      	mov	r0, r2
 800a64e:	4798      	blx	r3
 800a650:	60f8      	str	r0, [r7, #12]
      break;
 800a652:	e112      	b.n	800a87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	7c1b      	ldrb	r3, [r3, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10d      	bne.n	800a678 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a664:	f107 0208 	add.w	r2, r7, #8
 800a668:	4610      	mov	r0, r2
 800a66a:	4798      	blx	r3
 800a66c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3301      	adds	r3, #1
 800a672:	2202      	movs	r2, #2
 800a674:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a676:	e100      	b.n	800a87a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a680:	f107 0208 	add.w	r2, r7, #8
 800a684:	4610      	mov	r0, r2
 800a686:	4798      	blx	r3
 800a688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3301      	adds	r3, #1
 800a68e:	2202      	movs	r2, #2
 800a690:	701a      	strb	r2, [r3, #0]
      break;
 800a692:	e0f2      	b.n	800a87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	885b      	ldrh	r3, [r3, #2]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b05      	cmp	r3, #5
 800a69c:	f200 80ac 	bhi.w	800a7f8 <USBD_GetDescriptor+0x204>
 800a6a0:	a201      	add	r2, pc, #4	; (adr r2, 800a6a8 <USBD_GetDescriptor+0xb4>)
 800a6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a6:	bf00      	nop
 800a6a8:	0800a6c1 	.word	0x0800a6c1
 800a6ac:	0800a6f5 	.word	0x0800a6f5
 800a6b0:	0800a729 	.word	0x0800a729
 800a6b4:	0800a75d 	.word	0x0800a75d
 800a6b8:	0800a791 	.word	0x0800a791
 800a6bc:	0800a7c5 	.word	0x0800a7c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00b      	beq.n	800a6e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	7c12      	ldrb	r2, [r2, #16]
 800a6d8:	f107 0108 	add.w	r1, r7, #8
 800a6dc:	4610      	mov	r0, r2
 800a6de:	4798      	blx	r3
 800a6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6e2:	e091      	b.n	800a808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fa97 	bl	800ac1a <USBD_CtlError>
            err++;
 800a6ec:	7afb      	ldrb	r3, [r7, #11]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a6f2:	e089      	b.n	800a808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	7c12      	ldrb	r2, [r2, #16]
 800a70c:	f107 0108 	add.w	r1, r7, #8
 800a710:	4610      	mov	r0, r2
 800a712:	4798      	blx	r3
 800a714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a716:	e077      	b.n	800a808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a718:	6839      	ldr	r1, [r7, #0]
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fa7d 	bl	800ac1a <USBD_CtlError>
            err++;
 800a720:	7afb      	ldrb	r3, [r7, #11]
 800a722:	3301      	adds	r3, #1
 800a724:	72fb      	strb	r3, [r7, #11]
          break;
 800a726:	e06f      	b.n	800a808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00b      	beq.n	800a74c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	7c12      	ldrb	r2, [r2, #16]
 800a740:	f107 0108 	add.w	r1, r7, #8
 800a744:	4610      	mov	r0, r2
 800a746:	4798      	blx	r3
 800a748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a74a:	e05d      	b.n	800a808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fa63 	bl	800ac1a <USBD_CtlError>
            err++;
 800a754:	7afb      	ldrb	r3, [r7, #11]
 800a756:	3301      	adds	r3, #1
 800a758:	72fb      	strb	r3, [r7, #11]
          break;
 800a75a:	e055      	b.n	800a808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00b      	beq.n	800a780 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	7c12      	ldrb	r2, [r2, #16]
 800a774:	f107 0108 	add.w	r1, r7, #8
 800a778:	4610      	mov	r0, r2
 800a77a:	4798      	blx	r3
 800a77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a77e:	e043      	b.n	800a808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fa49 	bl	800ac1a <USBD_CtlError>
            err++;
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	3301      	adds	r3, #1
 800a78c:	72fb      	strb	r3, [r7, #11]
          break;
 800a78e:	e03b      	b.n	800a808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00b      	beq.n	800a7b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7a2:	695b      	ldr	r3, [r3, #20]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	7c12      	ldrb	r2, [r2, #16]
 800a7a8:	f107 0108 	add.w	r1, r7, #8
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4798      	blx	r3
 800a7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7b2:	e029      	b.n	800a808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fa2f 	bl	800ac1a <USBD_CtlError>
            err++;
 800a7bc:	7afb      	ldrb	r3, [r7, #11]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7c2:	e021      	b.n	800a808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00b      	beq.n	800a7e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	7c12      	ldrb	r2, [r2, #16]
 800a7dc:	f107 0108 	add.w	r1, r7, #8
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	4798      	blx	r3
 800a7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7e6:	e00f      	b.n	800a808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fa15 	bl	800ac1a <USBD_CtlError>
            err++;
 800a7f0:	7afb      	ldrb	r3, [r7, #11]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7f6:	e007      	b.n	800a808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fa0d 	bl	800ac1a <USBD_CtlError>
          err++;
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	3301      	adds	r3, #1
 800a804:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a806:	e038      	b.n	800a87a <USBD_GetDescriptor+0x286>
 800a808:	e037      	b.n	800a87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	7c1b      	ldrb	r3, [r3, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d109      	bne.n	800a826 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81a:	f107 0208 	add.w	r2, r7, #8
 800a81e:	4610      	mov	r0, r2
 800a820:	4798      	blx	r3
 800a822:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a824:	e029      	b.n	800a87a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f9f6 	bl	800ac1a <USBD_CtlError>
        err++;
 800a82e:	7afb      	ldrb	r3, [r7, #11]
 800a830:	3301      	adds	r3, #1
 800a832:	72fb      	strb	r3, [r7, #11]
      break;
 800a834:	e021      	b.n	800a87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	7c1b      	ldrb	r3, [r3, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10d      	bne.n	800a85a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a846:	f107 0208 	add.w	r2, r7, #8
 800a84a:	4610      	mov	r0, r2
 800a84c:	4798      	blx	r3
 800a84e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3301      	adds	r3, #1
 800a854:	2207      	movs	r2, #7
 800a856:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a858:	e00f      	b.n	800a87a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f9dc 	bl	800ac1a <USBD_CtlError>
        err++;
 800a862:	7afb      	ldrb	r3, [r7, #11]
 800a864:	3301      	adds	r3, #1
 800a866:	72fb      	strb	r3, [r7, #11]
      break;
 800a868:	e007      	b.n	800a87a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 f9d4 	bl	800ac1a <USBD_CtlError>
      err++;
 800a872:	7afb      	ldrb	r3, [r7, #11]
 800a874:	3301      	adds	r3, #1
 800a876:	72fb      	strb	r3, [r7, #11]
      break;
 800a878:	bf00      	nop
  }

  if (err != 0U)
 800a87a:	7afb      	ldrb	r3, [r7, #11]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d11c      	bne.n	800a8ba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a880:	893b      	ldrh	r3, [r7, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d011      	beq.n	800a8aa <USBD_GetDescriptor+0x2b6>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	88db      	ldrh	r3, [r3, #6]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00d      	beq.n	800a8aa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	88da      	ldrh	r2, [r3, #6]
 800a892:	893b      	ldrh	r3, [r7, #8]
 800a894:	4293      	cmp	r3, r2
 800a896:	bf28      	it	cs
 800a898:	4613      	movcs	r3, r2
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a89e:	893b      	ldrh	r3, [r7, #8]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fa22 	bl	800acee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	88db      	ldrh	r3, [r3, #6]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d104      	bne.n	800a8bc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fa79 	bl	800adaa <USBD_CtlSendStatus>
 800a8b8:	e000      	b.n	800a8bc <USBD_GetDescriptor+0x2c8>
    return;
 800a8ba:	bf00      	nop
    }
  }
}
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop

0800a8c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	889b      	ldrh	r3, [r3, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d130      	bne.n	800a938 <USBD_SetAddress+0x74>
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	88db      	ldrh	r3, [r3, #6]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d12c      	bne.n	800a938 <USBD_SetAddress+0x74>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	885b      	ldrh	r3, [r3, #2]
 800a8e2:	2b7f      	cmp	r3, #127	; 0x7f
 800a8e4:	d828      	bhi.n	800a938 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	885b      	ldrh	r3, [r3, #2]
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d104      	bne.n	800a906 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f98b 	bl	800ac1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a904:	e01d      	b.n	800a942 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	7bfa      	ldrb	r2, [r7, #15]
 800a90a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fe5a 	bl	800b5cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fa46 	bl	800adaa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d004      	beq.n	800a92e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2202      	movs	r2, #2
 800a928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a92c:	e009      	b.n	800a942 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a936:	e004      	b.n	800a942 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f96d 	bl	800ac1a <USBD_CtlError>
  }
}
 800a940:	bf00      	nop
 800a942:	bf00      	nop
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
	...

0800a94c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	885b      	ldrh	r3, [r3, #2]
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	4b41      	ldr	r3, [pc, #260]	; (800aa64 <USBD_SetConfig+0x118>)
 800a95e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a960:	4b40      	ldr	r3, [pc, #256]	; (800aa64 <USBD_SetConfig+0x118>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d904      	bls.n	800a972 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f955 	bl	800ac1a <USBD_CtlError>
 800a970:	e075      	b.n	800aa5e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d002      	beq.n	800a982 <USBD_SetConfig+0x36>
 800a97c:	2b03      	cmp	r3, #3
 800a97e:	d023      	beq.n	800a9c8 <USBD_SetConfig+0x7c>
 800a980:	e062      	b.n	800aa48 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a982:	4b38      	ldr	r3, [pc, #224]	; (800aa64 <USBD_SetConfig+0x118>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d01a      	beq.n	800a9c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a98a:	4b36      	ldr	r3, [pc, #216]	; (800aa64 <USBD_SetConfig+0x118>)
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2203      	movs	r2, #3
 800a998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a99c:	4b31      	ldr	r3, [pc, #196]	; (800aa64 <USBD_SetConfig+0x118>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff f9e7 	bl	8009d76 <USBD_SetClassConfig>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d104      	bne.n	800a9b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f932 	bl	800ac1a <USBD_CtlError>
            return;
 800a9b6:	e052      	b.n	800aa5e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f9f6 	bl	800adaa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a9be:	e04e      	b.n	800aa5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f9f2 	bl	800adaa <USBD_CtlSendStatus>
        break;
 800a9c6:	e04a      	b.n	800aa5e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a9c8:	4b26      	ldr	r3, [pc, #152]	; (800aa64 <USBD_SetConfig+0x118>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d112      	bne.n	800a9f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a9d8:	4b22      	ldr	r3, [pc, #136]	; (800aa64 <USBD_SetConfig+0x118>)
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	461a      	mov	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a9e2:	4b20      	ldr	r3, [pc, #128]	; (800aa64 <USBD_SetConfig+0x118>)
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7ff f9e3 	bl	8009db4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f9db 	bl	800adaa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a9f4:	e033      	b.n	800aa5e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a9f6:	4b1b      	ldr	r3, [pc, #108]	; (800aa64 <USBD_SetConfig+0x118>)
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d01d      	beq.n	800aa40 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff f9d1 	bl	8009db4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800aa12:	4b14      	ldr	r3, [pc, #80]	; (800aa64 <USBD_SetConfig+0x118>)
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa1c:	4b11      	ldr	r3, [pc, #68]	; (800aa64 <USBD_SetConfig+0x118>)
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff f9a7 	bl	8009d76 <USBD_SetClassConfig>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d104      	bne.n	800aa38 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f8f2 	bl	800ac1a <USBD_CtlError>
            return;
 800aa36:	e012      	b.n	800aa5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f9b6 	bl	800adaa <USBD_CtlSendStatus>
        break;
 800aa3e:	e00e      	b.n	800aa5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f9b2 	bl	800adaa <USBD_CtlSendStatus>
        break;
 800aa46:	e00a      	b.n	800aa5e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f8e5 	bl	800ac1a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aa50:	4b04      	ldr	r3, [pc, #16]	; (800aa64 <USBD_SetConfig+0x118>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff f9ac 	bl	8009db4 <USBD_ClrClassConfig>
        break;
 800aa5c:	bf00      	nop
    }
  }
}
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	200001cb 	.word	0x200001cb

0800aa68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	88db      	ldrh	r3, [r3, #6]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d004      	beq.n	800aa84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f8cc 	bl	800ac1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aa82:	e022      	b.n	800aaca <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	dc02      	bgt.n	800aa94 <USBD_GetConfig+0x2c>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	dc03      	bgt.n	800aa9a <USBD_GetConfig+0x32>
 800aa92:	e015      	b.n	800aac0 <USBD_GetConfig+0x58>
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	d00b      	beq.n	800aab0 <USBD_GetConfig+0x48>
 800aa98:	e012      	b.n	800aac0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f920 	bl	800acee <USBD_CtlSendData>
        break;
 800aaae:	e00c      	b.n	800aaca <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3304      	adds	r3, #4
 800aab4:	2201      	movs	r2, #1
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f918 	bl	800acee <USBD_CtlSendData>
        break;
 800aabe:	e004      	b.n	800aaca <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 f8a9 	bl	800ac1a <USBD_CtlError>
        break;
 800aac8:	bf00      	nop
}
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae2:	3b01      	subs	r3, #1
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d81e      	bhi.n	800ab26 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	88db      	ldrh	r3, [r3, #6]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d004      	beq.n	800aafa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f891 	bl	800ac1a <USBD_CtlError>
        break;
 800aaf8:	e01a      	b.n	800ab30 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d005      	beq.n	800ab16 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	f043 0202 	orr.w	r2, r3, #2
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	330c      	adds	r3, #12
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f8e5 	bl	800acee <USBD_CtlSendData>
      break;
 800ab24:	e004      	b.n	800ab30 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f876 	bl	800ac1a <USBD_CtlError>
      break;
 800ab2e:	bf00      	nop
  }
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	885b      	ldrh	r3, [r3, #2]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d106      	bne.n	800ab58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f929 	bl	800adaa <USBD_CtlSendStatus>
  }
}
 800ab58:	bf00      	nop
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab70:	3b01      	subs	r3, #1
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	d80b      	bhi.n	800ab8e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	885b      	ldrh	r3, [r3, #2]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d10c      	bne.n	800ab98 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f90f 	bl	800adaa <USBD_CtlSendStatus>
      }
      break;
 800ab8c:	e004      	b.n	800ab98 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ab8e:	6839      	ldr	r1, [r7, #0]
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f842 	bl	800ac1a <USBD_CtlError>
      break;
 800ab96:	e000      	b.n	800ab9a <USBD_ClrFeature+0x3a>
      break;
 800ab98:	bf00      	nop
  }
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b083      	sub	sp, #12
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	781a      	ldrb	r2, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	785a      	ldrb	r2, [r3, #1]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	3302      	adds	r3, #2
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	3303      	adds	r3, #3
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	021b      	lsls	r3, r3, #8
 800abce:	b29b      	uxth	r3, r3
 800abd0:	4413      	add	r3, r2
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	3304      	adds	r3, #4
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	b29a      	uxth	r2, r3
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	3305      	adds	r3, #5
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	021b      	lsls	r3, r3, #8
 800abea:	b29b      	uxth	r3, r3
 800abec:	4413      	add	r3, r2
 800abee:	b29a      	uxth	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	3306      	adds	r3, #6
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	3307      	adds	r3, #7
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	021b      	lsls	r3, r3, #8
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	4413      	add	r3, r2
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	80da      	strh	r2, [r3, #6]

}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr

0800ac1a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ac24:	2180      	movs	r1, #128	; 0x80
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fc66 	bl	800b4f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fc62 	bl	800b4f8 <USBD_LL_StallEP>
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d032      	beq.n	800acb8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f000 f834 	bl	800acc0 <USBD_GetLen>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ac66:	7dfb      	ldrb	r3, [r7, #23]
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	75fa      	strb	r2, [r7, #23]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	4413      	add	r3, r2
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	7812      	ldrb	r2, [r2, #0]
 800ac76:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	75fa      	strb	r2, [r7, #23]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	4413      	add	r3, r2
 800ac84:	2203      	movs	r2, #3
 800ac86:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ac88:	e012      	b.n	800acb0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	1c5a      	adds	r2, r3, #1
 800ac8e:	60fa      	str	r2, [r7, #12]
 800ac90:	7dfa      	ldrb	r2, [r7, #23]
 800ac92:	1c51      	adds	r1, r2, #1
 800ac94:	75f9      	strb	r1, [r7, #23]
 800ac96:	4611      	mov	r1, r2
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	440a      	add	r2, r1
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	75fa      	strb	r2, [r7, #23]
 800aca6:	461a      	mov	r2, r3
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	4413      	add	r3, r2
 800acac:	2200      	movs	r2, #0
 800acae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1e8      	bne.n	800ac8a <USBD_GetString+0x4e>
    }
  }
}
 800acb8:	bf00      	nop
 800acba:	3718      	adds	r7, #24
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800acc8:	2300      	movs	r3, #0
 800acca:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800accc:	e005      	b.n	800acda <USBD_GetLen+0x1a>
  {
    len++;
 800acce:	7bfb      	ldrb	r3, [r7, #15]
 800acd0:	3301      	adds	r3, #1
 800acd2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3301      	adds	r3, #1
 800acd8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1f5      	bne.n	800acce <USBD_GetLen+0xe>
  }

  return len;
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	bc80      	pop	{r7}
 800acec:	4770      	bx	lr

0800acee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	60f8      	str	r0, [r7, #12]
 800acf6:	60b9      	str	r1, [r7, #8]
 800acf8:	4613      	mov	r3, r2
 800acfa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ad04:	88fa      	ldrh	r2, [r7, #6]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ad0a:	88fa      	ldrh	r2, [r7, #6]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad10:	88fb      	ldrh	r3, [r7, #6]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	2100      	movs	r1, #0
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 fc77 	bl	800b60a <USBD_LL_Transmit>

  return USBD_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	60f8      	str	r0, [r7, #12]
 800ad2e:	60b9      	str	r1, [r7, #8]
 800ad30:	4613      	mov	r3, r2
 800ad32:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad34:	88fb      	ldrh	r3, [r7, #6]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	2100      	movs	r1, #0
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f000 fc65 	bl	800b60a <USBD_LL_Transmit>

  return USBD_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	60f8      	str	r0, [r7, #12]
 800ad52:	60b9      	str	r1, [r7, #8]
 800ad54:	4613      	mov	r3, r2
 800ad56:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2203      	movs	r2, #3
 800ad5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ad60:	88fa      	ldrh	r2, [r7, #6]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ad68:	88fa      	ldrh	r2, [r7, #6]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad70:	88fb      	ldrh	r3, [r7, #6]
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	2100      	movs	r1, #0
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f000 fc6a 	bl	800b650 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	60b9      	str	r1, [r7, #8]
 800ad90:	4613      	mov	r3, r2
 800ad92:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad94:	88fb      	ldrh	r3, [r7, #6]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	2100      	movs	r1, #0
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f000 fc58 	bl	800b650 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2204      	movs	r2, #4
 800adb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800adba:	2300      	movs	r3, #0
 800adbc:	2200      	movs	r2, #0
 800adbe:	2100      	movs	r1, #0
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fc22 	bl	800b60a <USBD_LL_Transmit>

  return USBD_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2205      	movs	r2, #5
 800addc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ade0:	2300      	movs	r3, #0
 800ade2:	2200      	movs	r2, #0
 800ade4:	2100      	movs	r1, #0
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fc32 	bl	800b650 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
	...

0800adf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800adfc:	2200      	movs	r2, #0
 800adfe:	4912      	ldr	r1, [pc, #72]	; (800ae48 <MX_USB_DEVICE_Init+0x50>)
 800ae00:	4812      	ldr	r0, [pc, #72]	; (800ae4c <MX_USB_DEVICE_Init+0x54>)
 800ae02:	f7fe ff5e 	bl	8009cc2 <USBD_Init>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ae0c:	f7f6 f93e 	bl	800108c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ae10:	490f      	ldr	r1, [pc, #60]	; (800ae50 <MX_USB_DEVICE_Init+0x58>)
 800ae12:	480e      	ldr	r0, [pc, #56]	; (800ae4c <MX_USB_DEVICE_Init+0x54>)
 800ae14:	f7fe ff80 	bl	8009d18 <USBD_RegisterClass>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ae1e:	f7f6 f935 	bl	800108c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae22:	490c      	ldr	r1, [pc, #48]	; (800ae54 <MX_USB_DEVICE_Init+0x5c>)
 800ae24:	4809      	ldr	r0, [pc, #36]	; (800ae4c <MX_USB_DEVICE_Init+0x54>)
 800ae26:	f7fe feb1 	bl	8009b8c <USBD_CDC_RegisterInterface>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d001      	beq.n	800ae34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae30:	f7f6 f92c 	bl	800108c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae34:	4805      	ldr	r0, [pc, #20]	; (800ae4c <MX_USB_DEVICE_Init+0x54>)
 800ae36:	f7fe ff88 	bl	8009d4a <USBD_Start>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ae40:	f7f6 f924 	bl	800108c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ae44:	bf00      	nop
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	20000138 	.word	0x20000138
 800ae4c:	200007a4 	.word	0x200007a4
 800ae50:	20000024 	.word	0x20000024
 800ae54:	20000128 	.word	0x20000128

0800ae58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	4905      	ldr	r1, [pc, #20]	; (800ae74 <CDC_Init_FS+0x1c>)
 800ae60:	4805      	ldr	r0, [pc, #20]	; (800ae78 <CDC_Init_FS+0x20>)
 800ae62:	f7fe fea9 	bl	8009bb8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae66:	4905      	ldr	r1, [pc, #20]	; (800ae7c <CDC_Init_FS+0x24>)
 800ae68:	4803      	ldr	r0, [pc, #12]	; (800ae78 <CDC_Init_FS+0x20>)
 800ae6a:	f7fe febe 	bl	8009bea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ae6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20000e50 	.word	0x20000e50
 800ae78:	200007a4 	.word	0x200007a4
 800ae7c:	20000a68 	.word	0x20000a68

0800ae80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ae80:	b480      	push	{r7}
 800ae82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ae84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bc80      	pop	{r7}
 800ae8c:	4770      	bx	lr
	...

0800ae90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	6039      	str	r1, [r7, #0]
 800ae9a:	71fb      	strb	r3, [r7, #7]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aea0:	79fb      	ldrb	r3, [r7, #7]
 800aea2:	2b23      	cmp	r3, #35	; 0x23
 800aea4:	d84a      	bhi.n	800af3c <CDC_Control_FS+0xac>
 800aea6:	a201      	add	r2, pc, #4	; (adr r2, 800aeac <CDC_Control_FS+0x1c>)
 800aea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeac:	0800af3d 	.word	0x0800af3d
 800aeb0:	0800af3d 	.word	0x0800af3d
 800aeb4:	0800af3d 	.word	0x0800af3d
 800aeb8:	0800af3d 	.word	0x0800af3d
 800aebc:	0800af3d 	.word	0x0800af3d
 800aec0:	0800af3d 	.word	0x0800af3d
 800aec4:	0800af3d 	.word	0x0800af3d
 800aec8:	0800af3d 	.word	0x0800af3d
 800aecc:	0800af3d 	.word	0x0800af3d
 800aed0:	0800af3d 	.word	0x0800af3d
 800aed4:	0800af3d 	.word	0x0800af3d
 800aed8:	0800af3d 	.word	0x0800af3d
 800aedc:	0800af3d 	.word	0x0800af3d
 800aee0:	0800af3d 	.word	0x0800af3d
 800aee4:	0800af3d 	.word	0x0800af3d
 800aee8:	0800af3d 	.word	0x0800af3d
 800aeec:	0800af3d 	.word	0x0800af3d
 800aef0:	0800af3d 	.word	0x0800af3d
 800aef4:	0800af3d 	.word	0x0800af3d
 800aef8:	0800af3d 	.word	0x0800af3d
 800aefc:	0800af3d 	.word	0x0800af3d
 800af00:	0800af3d 	.word	0x0800af3d
 800af04:	0800af3d 	.word	0x0800af3d
 800af08:	0800af3d 	.word	0x0800af3d
 800af0c:	0800af3d 	.word	0x0800af3d
 800af10:	0800af3d 	.word	0x0800af3d
 800af14:	0800af3d 	.word	0x0800af3d
 800af18:	0800af3d 	.word	0x0800af3d
 800af1c:	0800af3d 	.word	0x0800af3d
 800af20:	0800af3d 	.word	0x0800af3d
 800af24:	0800af3d 	.word	0x0800af3d
 800af28:	0800af3d 	.word	0x0800af3d
 800af2c:	0800af3d 	.word	0x0800af3d
 800af30:	0800af3d 	.word	0x0800af3d
 800af34:	0800af3d 	.word	0x0800af3d
 800af38:	0800af3d 	.word	0x0800af3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800af3c:	bf00      	nop
  }

  return (USBD_OK);
 800af3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af40:	4618      	mov	r0, r3
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	bc80      	pop	{r7}
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop

0800af4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < (*Len); i++)
 800af56:	2300      	movs	r3, #0
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	e009      	b.n	800af70 <CDC_Receive_FS+0x24>
	  fifo_push(Buf[i]);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	4413      	add	r3, r2
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	4618      	mov	r0, r3
 800af66:	f7f5 f995 	bl	8000294 <fifo_push>
  for (int i = 0; i < (*Len); i++)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3301      	adds	r3, #1
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	429a      	cmp	r2, r3
 800af78:	d8f0      	bhi.n	800af5c <CDC_Receive_FS+0x10>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800af7a:	6879      	ldr	r1, [r7, #4]
 800af7c:	4805      	ldr	r0, [pc, #20]	; (800af94 <CDC_Receive_FS+0x48>)
 800af7e:	f7fe fe34 	bl	8009bea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800af82:	4804      	ldr	r0, [pc, #16]	; (800af94 <CDC_Receive_FS+0x48>)
 800af84:	f7fe fe73 	bl	8009c6e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800af88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	200007a4 	.word	0x200007a4

0800af98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800afa8:	4b0d      	ldr	r3, [pc, #52]	; (800afe0 <CDC_Transmit_FS+0x48>)
 800afaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800afba:	2301      	movs	r3, #1
 800afbc:	e00b      	b.n	800afd6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800afbe:	887b      	ldrh	r3, [r7, #2]
 800afc0:	461a      	mov	r2, r3
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	4806      	ldr	r0, [pc, #24]	; (800afe0 <CDC_Transmit_FS+0x48>)
 800afc6:	f7fe fdf7 	bl	8009bb8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800afca:	4805      	ldr	r0, [pc, #20]	; (800afe0 <CDC_Transmit_FS+0x48>)
 800afcc:	f7fe fe20 	bl	8009c10 <USBD_CDC_TransmitPacket>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	200007a4 	.word	0x200007a4

0800afe4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	4603      	mov	r3, r0
 800afec:	6039      	str	r1, [r7, #0]
 800afee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	2212      	movs	r2, #18
 800aff4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aff6:	4b03      	ldr	r3, [pc, #12]	; (800b004 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	bc80      	pop	{r7}
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	20000154 	.word	0x20000154

0800b008 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	6039      	str	r1, [r7, #0]
 800b012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	2204      	movs	r2, #4
 800b018:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b01a:	4b03      	ldr	r3, [pc, #12]	; (800b028 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	bc80      	pop	{r7}
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	20000168 	.word	0x20000168

0800b02c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	4603      	mov	r3, r0
 800b034:	6039      	str	r1, [r7, #0]
 800b036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b038:	79fb      	ldrb	r3, [r7, #7]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d105      	bne.n	800b04a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	4907      	ldr	r1, [pc, #28]	; (800b060 <USBD_FS_ProductStrDescriptor+0x34>)
 800b042:	4808      	ldr	r0, [pc, #32]	; (800b064 <USBD_FS_ProductStrDescriptor+0x38>)
 800b044:	f7ff fdfa 	bl	800ac3c <USBD_GetString>
 800b048:	e004      	b.n	800b054 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	4904      	ldr	r1, [pc, #16]	; (800b060 <USBD_FS_ProductStrDescriptor+0x34>)
 800b04e:	4805      	ldr	r0, [pc, #20]	; (800b064 <USBD_FS_ProductStrDescriptor+0x38>)
 800b050:	f7ff fdf4 	bl	800ac3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b054:	4b02      	ldr	r3, [pc, #8]	; (800b060 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b056:	4618      	mov	r0, r3
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	20001238 	.word	0x20001238
 800b064:	0800b9f8 	.word	0x0800b9f8

0800b068 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	6039      	str	r1, [r7, #0]
 800b072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	4904      	ldr	r1, [pc, #16]	; (800b088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b078:	4804      	ldr	r0, [pc, #16]	; (800b08c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b07a:	f7ff fddf 	bl	800ac3c <USBD_GetString>
  return USBD_StrDesc;
 800b07e:	4b02      	ldr	r3, [pc, #8]	; (800b088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b080:	4618      	mov	r0, r3
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20001238 	.word	0x20001238
 800b08c:	0800ba10 	.word	0x0800ba10

0800b090 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	6039      	str	r1, [r7, #0]
 800b09a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	221a      	movs	r2, #26
 800b0a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b0a2:	f000 f843 	bl	800b12c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b0a6:	4b02      	ldr	r3, [pc, #8]	; (800b0b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	2000016c 	.word	0x2000016c

0800b0b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	6039      	str	r1, [r7, #0]
 800b0be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d105      	bne.n	800b0d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b0c6:	683a      	ldr	r2, [r7, #0]
 800b0c8:	4907      	ldr	r1, [pc, #28]	; (800b0e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b0ca:	4808      	ldr	r0, [pc, #32]	; (800b0ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800b0cc:	f7ff fdb6 	bl	800ac3c <USBD_GetString>
 800b0d0:	e004      	b.n	800b0dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	4904      	ldr	r1, [pc, #16]	; (800b0e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b0d6:	4805      	ldr	r0, [pc, #20]	; (800b0ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800b0d8:	f7ff fdb0 	bl	800ac3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0dc:	4b02      	ldr	r3, [pc, #8]	; (800b0e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20001238 	.word	0x20001238
 800b0ec:	0800ba24 	.word	0x0800ba24

0800b0f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	6039      	str	r1, [r7, #0]
 800b0fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0fc:	79fb      	ldrb	r3, [r7, #7]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d105      	bne.n	800b10e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	4907      	ldr	r1, [pc, #28]	; (800b124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b106:	4808      	ldr	r0, [pc, #32]	; (800b128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b108:	f7ff fd98 	bl	800ac3c <USBD_GetString>
 800b10c:	e004      	b.n	800b118 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	4904      	ldr	r1, [pc, #16]	; (800b124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b112:	4805      	ldr	r0, [pc, #20]	; (800b128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b114:	f7ff fd92 	bl	800ac3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b118:	4b02      	ldr	r3, [pc, #8]	; (800b124 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	20001238 	.word	0x20001238
 800b128:	0800ba30 	.word	0x0800ba30

0800b12c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b132:	4b0f      	ldr	r3, [pc, #60]	; (800b170 <Get_SerialNum+0x44>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b138:	4b0e      	ldr	r3, [pc, #56]	; (800b174 <Get_SerialNum+0x48>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b13e:	4b0e      	ldr	r3, [pc, #56]	; (800b178 <Get_SerialNum+0x4c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4413      	add	r3, r2
 800b14a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d009      	beq.n	800b166 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b152:	2208      	movs	r2, #8
 800b154:	4909      	ldr	r1, [pc, #36]	; (800b17c <Get_SerialNum+0x50>)
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f000 f814 	bl	800b184 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b15c:	2204      	movs	r2, #4
 800b15e:	4908      	ldr	r1, [pc, #32]	; (800b180 <Get_SerialNum+0x54>)
 800b160:	68b8      	ldr	r0, [r7, #8]
 800b162:	f000 f80f 	bl	800b184 <IntToUnicode>
  }
}
 800b166:	bf00      	nop
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	1ffff7e8 	.word	0x1ffff7e8
 800b174:	1ffff7ec 	.word	0x1ffff7ec
 800b178:	1ffff7f0 	.word	0x1ffff7f0
 800b17c:	2000016e 	.word	0x2000016e
 800b180:	2000017e 	.word	0x2000017e

0800b184 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b184:	b480      	push	{r7}
 800b186:	b087      	sub	sp, #28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	4613      	mov	r3, r2
 800b190:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b196:	2300      	movs	r3, #0
 800b198:	75fb      	strb	r3, [r7, #23]
 800b19a:	e027      	b.n	800b1ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	0f1b      	lsrs	r3, r3, #28
 800b1a0:	2b09      	cmp	r3, #9
 800b1a2:	d80b      	bhi.n	800b1bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	0f1b      	lsrs	r3, r3, #28
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
 800b1ac:	005b      	lsls	r3, r3, #1
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	440b      	add	r3, r1
 800b1b4:	3230      	adds	r2, #48	; 0x30
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	e00a      	b.n	800b1d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	0f1b      	lsrs	r3, r3, #28
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	440b      	add	r3, r1
 800b1cc:	3237      	adds	r2, #55	; 0x37
 800b1ce:	b2d2      	uxtb	r2, r2
 800b1d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	011b      	lsls	r3, r3, #4
 800b1d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	3301      	adds	r3, #1
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b1e6:	7dfb      	ldrb	r3, [r7, #23]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	75fb      	strb	r3, [r7, #23]
 800b1ec:	7dfa      	ldrb	r2, [r7, #23]
 800b1ee:	79fb      	ldrb	r3, [r7, #7]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d3d3      	bcc.n	800b19c <IntToUnicode+0x18>
  }
}
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop
 800b1f8:	371c      	adds	r7, #28
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bc80      	pop	{r7}
 800b1fe:	4770      	bx	lr

0800b200 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a0d      	ldr	r2, [pc, #52]	; (800b244 <HAL_PCD_MspInit+0x44>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d113      	bne.n	800b23a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b212:	4b0d      	ldr	r3, [pc, #52]	; (800b248 <HAL_PCD_MspInit+0x48>)
 800b214:	69db      	ldr	r3, [r3, #28]
 800b216:	4a0c      	ldr	r2, [pc, #48]	; (800b248 <HAL_PCD_MspInit+0x48>)
 800b218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b21c:	61d3      	str	r3, [r2, #28]
 800b21e:	4b0a      	ldr	r3, [pc, #40]	; (800b248 <HAL_PCD_MspInit+0x48>)
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b226:	60fb      	str	r3, [r7, #12]
 800b228:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b22a:	2200      	movs	r2, #0
 800b22c:	2100      	movs	r1, #0
 800b22e:	2014      	movs	r0, #20
 800b230:	f7f8 f9f9 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b234:	2014      	movs	r0, #20
 800b236:	f7f8 fa12 	bl	800365e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b23a:	bf00      	nop
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	40005c00 	.word	0x40005c00
 800b248:	40021000 	.word	0x40021000

0800b24c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b260:	4619      	mov	r1, r3
 800b262:	4610      	mov	r0, r2
 800b264:	f7fe fdb9 	bl	8009dda <USBD_LL_SetupStage>
}
 800b268:	bf00      	nop
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b282:	78fa      	ldrb	r2, [r7, #3]
 800b284:	6879      	ldr	r1, [r7, #4]
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	00db      	lsls	r3, r3, #3
 800b28e:	440b      	add	r3, r1
 800b290:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	78fb      	ldrb	r3, [r7, #3]
 800b298:	4619      	mov	r1, r3
 800b29a:	f7fe fdeb 	bl	8009e74 <USBD_LL_DataOutStage>
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b2b8:	78fa      	ldrb	r2, [r7, #3]
 800b2ba:	6879      	ldr	r1, [r7, #4]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	00db      	lsls	r3, r3, #3
 800b2c4:	440b      	add	r3, r1
 800b2c6:	333c      	adds	r3, #60	; 0x3c
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	78fb      	ldrb	r3, [r7, #3]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	f7fe fe42 	bl	8009f56 <USBD_LL_DataInStage>
}
 800b2d2:	bf00      	nop
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b082      	sub	sp, #8
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe ff52 	bl	800a192 <USBD_LL_SOF>
}
 800b2ee:	bf00      	nop
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2fe:	2301      	movs	r3, #1
 800b300:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	2b02      	cmp	r3, #2
 800b308:	d001      	beq.n	800b30e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b30a:	f7f5 febf 	bl	800108c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b314:	7bfa      	ldrb	r2, [r7, #15]
 800b316:	4611      	mov	r1, r2
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fe ff02 	bl	800a122 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe febb 	bl	800a0a0 <USBD_LL_Reset>
}
 800b32a:	bf00      	nop
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b342:	4618      	mov	r0, r3
 800b344:	f7fe fefc 	bl	800a140 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b350:	4b04      	ldr	r3, [pc, #16]	; (800b364 <HAL_PCD_SuspendCallback+0x30>)
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	4a03      	ldr	r2, [pc, #12]	; (800b364 <HAL_PCD_SuspendCallback+0x30>)
 800b356:	f043 0306 	orr.w	r3, r3, #6
 800b35a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b35c:	bf00      	nop
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	e000ed00 	.word	0xe000ed00

0800b368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe fef6 	bl	800a168 <USBD_LL_Resume>
}
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b38c:	4a28      	ldr	r2, [pc, #160]	; (800b430 <USBD_LL_Init+0xac>)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a26      	ldr	r2, [pc, #152]	; (800b430 <USBD_LL_Init+0xac>)
 800b398:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b39c:	4b24      	ldr	r3, [pc, #144]	; (800b430 <USBD_LL_Init+0xac>)
 800b39e:	4a25      	ldr	r2, [pc, #148]	; (800b434 <USBD_LL_Init+0xb0>)
 800b3a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b3a2:	4b23      	ldr	r3, [pc, #140]	; (800b430 <USBD_LL_Init+0xac>)
 800b3a4:	2208      	movs	r2, #8
 800b3a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b3a8:	4b21      	ldr	r3, [pc, #132]	; (800b430 <USBD_LL_Init+0xac>)
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b3ae:	4b20      	ldr	r3, [pc, #128]	; (800b430 <USBD_LL_Init+0xac>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b3b4:	4b1e      	ldr	r3, [pc, #120]	; (800b430 <USBD_LL_Init+0xac>)
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b3ba:	4b1d      	ldr	r3, [pc, #116]	; (800b430 <USBD_LL_Init+0xac>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b3c0:	481b      	ldr	r0, [pc, #108]	; (800b430 <USBD_LL_Init+0xac>)
 800b3c2:	f7f9 fb33 	bl	8004a2c <HAL_PCD_Init>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d001      	beq.n	800b3d0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b3cc:	f7f5 fe5e 	bl	800108c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3d6:	2318      	movs	r3, #24
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2100      	movs	r1, #0
 800b3dc:	f7fa ffa9 	bl	8006332 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3e6:	2358      	movs	r3, #88	; 0x58
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	2180      	movs	r1, #128	; 0x80
 800b3ec:	f7fa ffa1 	bl	8006332 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3f6:	23c0      	movs	r3, #192	; 0xc0
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2181      	movs	r1, #129	; 0x81
 800b3fc:	f7fa ff99 	bl	8006332 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b406:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b40a:	2200      	movs	r2, #0
 800b40c:	2101      	movs	r1, #1
 800b40e:	f7fa ff90 	bl	8006332 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b41c:	2200      	movs	r2, #0
 800b41e:	2182      	movs	r1, #130	; 0x82
 800b420:	f7fa ff87 	bl	8006332 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	20001438 	.word	0x20001438
 800b434:	40005c00 	.word	0x40005c00

0800b438 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b44e:	4618      	mov	r0, r3
 800b450:	f7f9 fbf7 	bl	8004c42 <HAL_PCD_Start>
 800b454:	4603      	mov	r3, r0
 800b456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b458:	7bfb      	ldrb	r3, [r7, #15]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 f94e 	bl	800b6fc <USBD_Get_USB_Status>
 800b460:	4603      	mov	r3, r0
 800b462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b464:	7bbb      	ldrb	r3, [r7, #14]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	4608      	mov	r0, r1
 800b478:	4611      	mov	r1, r2
 800b47a:	461a      	mov	r2, r3
 800b47c:	4603      	mov	r3, r0
 800b47e:	70fb      	strb	r3, [r7, #3]
 800b480:	460b      	mov	r3, r1
 800b482:	70bb      	strb	r3, [r7, #2]
 800b484:	4613      	mov	r3, r2
 800b486:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b496:	78bb      	ldrb	r3, [r7, #2]
 800b498:	883a      	ldrh	r2, [r7, #0]
 800b49a:	78f9      	ldrb	r1, [r7, #3]
 800b49c:	f7f9 fd71 	bl	8004f82 <HAL_PCD_EP_Open>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 f928 	bl	800b6fc <USBD_Get_USB_Status>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4d4:	78fa      	ldrb	r2, [r7, #3]
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7f9 fdb8 	bl	800504e <HAL_PCD_EP_Close>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 f909 	bl	800b6fc <USBD_Get_USB_Status>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b504:	2300      	movs	r3, #0
 800b506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b508:	2300      	movs	r3, #0
 800b50a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b512:	78fa      	ldrb	r2, [r7, #3]
 800b514:	4611      	mov	r1, r2
 800b516:	4618      	mov	r0, r3
 800b518:	f7f9 fe78 	bl	800520c <HAL_PCD_EP_SetStall>
 800b51c:	4603      	mov	r3, r0
 800b51e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b520:	7bfb      	ldrb	r3, [r7, #15]
 800b522:	4618      	mov	r0, r3
 800b524:	f000 f8ea 	bl	800b6fc <USBD_Get_USB_Status>
 800b528:	4603      	mov	r3, r0
 800b52a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b52c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b084      	sub	sp, #16
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	460b      	mov	r3, r1
 800b540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b542:	2300      	movs	r3, #0
 800b544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b550:	78fa      	ldrb	r2, [r7, #3]
 800b552:	4611      	mov	r1, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f7f9 feb9 	bl	80052cc <HAL_PCD_EP_ClrStall>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	4618      	mov	r0, r3
 800b562:	f000 f8cb 	bl	800b6fc <USBD_Get_USB_Status>
 800b566:	4603      	mov	r3, r0
 800b568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b56a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b586:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	da0c      	bge.n	800b5aa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b596:	68f9      	ldr	r1, [r7, #12]
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	4613      	mov	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	00db      	lsls	r3, r3, #3
 800b5a2:	440b      	add	r3, r1
 800b5a4:	3302      	adds	r3, #2
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	e00b      	b.n	800b5c2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b5aa:	78fb      	ldrb	r3, [r7, #3]
 800b5ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5b0:	68f9      	ldr	r1, [r7, #12]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	440b      	add	r3, r1
 800b5bc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b5c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bc80      	pop	{r7}
 800b5ca:	4770      	bx	lr

0800b5cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5e6:	78fa      	ldrb	r2, [r7, #3]
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7f9 fca4 	bl	8004f38 <HAL_PCD_SetAddress>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 f880 	bl	800b6fc <USBD_Get_USB_Status>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b600:	7bbb      	ldrb	r3, [r7, #14]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b086      	sub	sp, #24
 800b60e:	af00      	add	r7, sp, #0
 800b610:	60f8      	str	r0, [r7, #12]
 800b612:	607a      	str	r2, [r7, #4]
 800b614:	461a      	mov	r2, r3
 800b616:	460b      	mov	r3, r1
 800b618:	72fb      	strb	r3, [r7, #11]
 800b61a:	4613      	mov	r3, r2
 800b61c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b62c:	893b      	ldrh	r3, [r7, #8]
 800b62e:	7af9      	ldrb	r1, [r7, #11]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	f7f9 fda8 	bl	8005186 <HAL_PCD_EP_Transmit>
 800b636:	4603      	mov	r3, r0
 800b638:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b63a:	7dfb      	ldrb	r3, [r7, #23]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 f85d 	bl	800b6fc <USBD_Get_USB_Status>
 800b642:	4603      	mov	r3, r0
 800b644:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b646:	7dbb      	ldrb	r3, [r7, #22]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3718      	adds	r7, #24
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	607a      	str	r2, [r7, #4]
 800b65a:	461a      	mov	r2, r3
 800b65c:	460b      	mov	r3, r1
 800b65e:	72fb      	strb	r3, [r7, #11]
 800b660:	4613      	mov	r3, r2
 800b662:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b672:	893b      	ldrh	r3, [r7, #8]
 800b674:	7af9      	ldrb	r1, [r7, #11]
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	f7f9 fd31 	bl	80050de <HAL_PCD_EP_Receive>
 800b67c:	4603      	mov	r3, r0
 800b67e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b680:	7dfb      	ldrb	r3, [r7, #23]
 800b682:	4618      	mov	r0, r3
 800b684:	f000 f83a 	bl	800b6fc <USBD_Get_USB_Status>
 800b688:	4603      	mov	r3, r0
 800b68a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b68c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b082      	sub	sp, #8
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6a8:	78fa      	ldrb	r2, [r7, #3]
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7f9 fd53 	bl	8005158 <HAL_PCD_EP_GetRxCount>
 800b6b2:	4603      	mov	r3, r0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6c4:	4b02      	ldr	r3, [pc, #8]	; (800b6d0 <USBD_static_malloc+0x14>)
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bc80      	pop	{r7}
 800b6ce:	4770      	bx	lr
 800b6d0:	200001cc 	.word	0x200001cc

0800b6d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]

}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bc80      	pop	{r7}
 800b6e4:	4770      	bx	lr

0800b6e6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b6f2:	bf00      	nop
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bc80      	pop	{r7}
 800b6fa:	4770      	bx	lr

0800b6fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b70a:	79fb      	ldrb	r3, [r7, #7]
 800b70c:	2b03      	cmp	r3, #3
 800b70e:	d817      	bhi.n	800b740 <USBD_Get_USB_Status+0x44>
 800b710:	a201      	add	r2, pc, #4	; (adr r2, 800b718 <USBD_Get_USB_Status+0x1c>)
 800b712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b716:	bf00      	nop
 800b718:	0800b729 	.word	0x0800b729
 800b71c:	0800b72f 	.word	0x0800b72f
 800b720:	0800b735 	.word	0x0800b735
 800b724:	0800b73b 	.word	0x0800b73b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b728:	2300      	movs	r3, #0
 800b72a:	73fb      	strb	r3, [r7, #15]
    break;
 800b72c:	e00b      	b.n	800b746 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b72e:	2302      	movs	r3, #2
 800b730:	73fb      	strb	r3, [r7, #15]
    break;
 800b732:	e008      	b.n	800b746 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b734:	2301      	movs	r3, #1
 800b736:	73fb      	strb	r3, [r7, #15]
    break;
 800b738:	e005      	b.n	800b746 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b73a:	2302      	movs	r3, #2
 800b73c:	73fb      	strb	r3, [r7, #15]
    break;
 800b73e:	e002      	b.n	800b746 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b740:	2302      	movs	r3, #2
 800b742:	73fb      	strb	r3, [r7, #15]
    break;
 800b744:	bf00      	nop
  }
  return usb_status;
 800b746:	7bfb      	ldrb	r3, [r7, #15]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bc80      	pop	{r7}
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop

0800b754 <__libc_init_array>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	2600      	movs	r6, #0
 800b758:	4d0c      	ldr	r5, [pc, #48]	; (800b78c <__libc_init_array+0x38>)
 800b75a:	4c0d      	ldr	r4, [pc, #52]	; (800b790 <__libc_init_array+0x3c>)
 800b75c:	1b64      	subs	r4, r4, r5
 800b75e:	10a4      	asrs	r4, r4, #2
 800b760:	42a6      	cmp	r6, r4
 800b762:	d109      	bne.n	800b778 <__libc_init_array+0x24>
 800b764:	f000 f862 	bl	800b82c <_init>
 800b768:	2600      	movs	r6, #0
 800b76a:	4d0a      	ldr	r5, [pc, #40]	; (800b794 <__libc_init_array+0x40>)
 800b76c:	4c0a      	ldr	r4, [pc, #40]	; (800b798 <__libc_init_array+0x44>)
 800b76e:	1b64      	subs	r4, r4, r5
 800b770:	10a4      	asrs	r4, r4, #2
 800b772:	42a6      	cmp	r6, r4
 800b774:	d105      	bne.n	800b782 <__libc_init_array+0x2e>
 800b776:	bd70      	pop	{r4, r5, r6, pc}
 800b778:	f855 3b04 	ldr.w	r3, [r5], #4
 800b77c:	4798      	blx	r3
 800b77e:	3601      	adds	r6, #1
 800b780:	e7ee      	b.n	800b760 <__libc_init_array+0xc>
 800b782:	f855 3b04 	ldr.w	r3, [r5], #4
 800b786:	4798      	blx	r3
 800b788:	3601      	adds	r6, #1
 800b78a:	e7f2      	b.n	800b772 <__libc_init_array+0x1e>
 800b78c:	0800bf68 	.word	0x0800bf68
 800b790:	0800bf68 	.word	0x0800bf68
 800b794:	0800bf68 	.word	0x0800bf68
 800b798:	0800bf6c 	.word	0x0800bf6c

0800b79c <memcpy>:
 800b79c:	440a      	add	r2, r1
 800b79e:	4291      	cmp	r1, r2
 800b7a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7a4:	d100      	bne.n	800b7a8 <memcpy+0xc>
 800b7a6:	4770      	bx	lr
 800b7a8:	b510      	push	{r4, lr}
 800b7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ae:	4291      	cmp	r1, r2
 800b7b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7b4:	d1f9      	bne.n	800b7aa <memcpy+0xe>
 800b7b6:	bd10      	pop	{r4, pc}

0800b7b8 <memmove>:
 800b7b8:	4288      	cmp	r0, r1
 800b7ba:	b510      	push	{r4, lr}
 800b7bc:	eb01 0402 	add.w	r4, r1, r2
 800b7c0:	d902      	bls.n	800b7c8 <memmove+0x10>
 800b7c2:	4284      	cmp	r4, r0
 800b7c4:	4623      	mov	r3, r4
 800b7c6:	d807      	bhi.n	800b7d8 <memmove+0x20>
 800b7c8:	1e43      	subs	r3, r0, #1
 800b7ca:	42a1      	cmp	r1, r4
 800b7cc:	d008      	beq.n	800b7e0 <memmove+0x28>
 800b7ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7d6:	e7f8      	b.n	800b7ca <memmove+0x12>
 800b7d8:	4601      	mov	r1, r0
 800b7da:	4402      	add	r2, r0
 800b7dc:	428a      	cmp	r2, r1
 800b7de:	d100      	bne.n	800b7e2 <memmove+0x2a>
 800b7e0:	bd10      	pop	{r4, pc}
 800b7e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ea:	e7f7      	b.n	800b7dc <memmove+0x24>

0800b7ec <memset>:
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	4402      	add	r2, r0
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d100      	bne.n	800b7f6 <memset+0xa>
 800b7f4:	4770      	bx	lr
 800b7f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b7fa:	e7f9      	b.n	800b7f0 <memset+0x4>

0800b7fc <strstr>:
 800b7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7fe:	780c      	ldrb	r4, [r1, #0]
 800b800:	b164      	cbz	r4, 800b81c <strstr+0x20>
 800b802:	4603      	mov	r3, r0
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	4618      	mov	r0, r3
 800b808:	1c5e      	adds	r6, r3, #1
 800b80a:	b90a      	cbnz	r2, 800b810 <strstr+0x14>
 800b80c:	4610      	mov	r0, r2
 800b80e:	e005      	b.n	800b81c <strstr+0x20>
 800b810:	4294      	cmp	r4, r2
 800b812:	d108      	bne.n	800b826 <strstr+0x2a>
 800b814:	460d      	mov	r5, r1
 800b816:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800b81a:	b902      	cbnz	r2, 800b81e <strstr+0x22>
 800b81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b81e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800b822:	4297      	cmp	r7, r2
 800b824:	d0f7      	beq.n	800b816 <strstr+0x1a>
 800b826:	4633      	mov	r3, r6
 800b828:	e7ec      	b.n	800b804 <strstr+0x8>
	...

0800b82c <_init>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr

0800b838 <_fini>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	bf00      	nop
 800b83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83e:	bc08      	pop	{r3}
 800b840:	469e      	mov	lr, r3
 800b842:	4770      	bx	lr
