
VFD_clock_sm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d428  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  0800d534  0800d534  0001d534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dce8  0800dce8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dce8  0800dce8  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dce8  0800dce8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dce8  0800dce8  0001dce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcec  0800dcec  0001dcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800dcf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001664  200001f0  0800dee0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001854  0800dee0  00021854  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5ca  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042de  00000000  00000000  0003d7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00041ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00042de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb54  00000000  00000000  00043fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bdb  00000000  00000000  0005faf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bed2  00000000  00000000  000786cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001045a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005240  00000000  00000000  001045f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d51c 	.word	0x0800d51c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	0800d51c 	.word	0x0800d51c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8000178:	2305      	movs	r3, #5
 800017a:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 800017c:	2300      	movs	r3, #0
 800017e:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000180:	6878      	ldr	r0, [r7, #4]
 8000182:	f001 f8b0 	bl	80012e6 <null_ptr_check>
 8000186:	4603      	mov	r3, r0
 8000188:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800018a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d137      	bne.n	8000202 <bme280_init+0x92>
    {
        while (try_count)
 8000192:	e02c      	b.n	80001ee <bme280_init+0x7e>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000194:	f107 010d 	add.w	r1, r7, #13
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2201      	movs	r2, #1
 800019c:	20d0      	movs	r0, #208	; 0xd0
 800019e:	f000 f836 	bl	800020e <bme280_get_regs>
 80001a2:	4603      	mov	r3, r0
 80001a4:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 80001a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d114      	bne.n	80001d8 <bme280_init+0x68>
 80001ae:	7b7b      	ldrb	r3, [r7, #13]
 80001b0:	2b60      	cmp	r3, #96	; 0x60
 80001b2:	d111      	bne.n	80001d8 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 80001b4:	7b7a      	ldrb	r2, [r7, #13]
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 80001ba:	6878      	ldr	r0, [r7, #4]
 80001bc:	f000 f98f 	bl	80004de <bme280_soft_reset>
 80001c0:	4603      	mov	r3, r0
 80001c2:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME280_OK)
 80001c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d114      	bne.n	80001f6 <bme280_init+0x86>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 80001cc:	6878      	ldr	r0, [r7, #4]
 80001ce:	f000 ff04 	bl	8000fda <get_calib_data>
 80001d2:	4603      	mov	r3, r0
 80001d4:	73fb      	strb	r3, [r7, #15]
                }

                break;
 80001d6:	e00e      	b.n	80001f6 <bme280_init+0x86>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	6852      	ldr	r2, [r2, #4]
 80001e0:	4611      	mov	r1, r2
 80001e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e6:	4798      	blx	r3
            --try_count;
 80001e8:	7bbb      	ldrb	r3, [r7, #14]
 80001ea:	3b01      	subs	r3, #1
 80001ec:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d1cf      	bne.n	8000194 <bme280_init+0x24>
 80001f4:	e000      	b.n	80001f8 <bme280_init+0x88>
                break;
 80001f6:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 80001f8:	7bbb      	ldrb	r3, [r7, #14]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d101      	bne.n	8000202 <bme280_init+0x92>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80001fe:	23fe      	movs	r3, #254	; 0xfe
 8000200:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000202:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000206:	4618      	mov	r0, r3
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}

0800020e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 800020e:	b590      	push	{r4, r7, lr}
 8000210:	b087      	sub	sp, #28
 8000212:	af00      	add	r7, sp, #0
 8000214:	60b9      	str	r1, [r7, #8]
 8000216:	607b      	str	r3, [r7, #4]
 8000218:	4603      	mov	r3, r0
 800021a:	73fb      	strb	r3, [r7, #15]
 800021c:	4613      	mov	r3, r2
 800021e:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f001 f860 	bl	80012e6 <null_ptr_check>
 8000226:	4603      	mov	r3, r0
 8000228:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 800022a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d11f      	bne.n	8000272 <bme280_get_regs+0x64>
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d01c      	beq.n	8000272 <bme280_get_regs+0x64>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	7a1b      	ldrb	r3, [r3, #8]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d003      	beq.n	8000248 <bme280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000240:	7bfb      	ldrb	r3, [r7, #15]
 8000242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000246:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	68dc      	ldr	r4, [r3, #12]
 800024c:	89ba      	ldrh	r2, [r7, #12]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	7bf8      	ldrb	r0, [r7, #15]
 8000254:	68b9      	ldr	r1, [r7, #8]
 8000256:	47a0      	blx	r4
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8000268:	2b00      	cmp	r3, #0
 800026a:	d004      	beq.n	8000276 <bme280_get_regs+0x68>
        {
            rslt = BME280_E_COMM_FAIL;
 800026c:	23fc      	movs	r3, #252	; 0xfc
 800026e:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8000270:	e001      	b.n	8000276 <bme280_get_regs+0x68>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8000272:	23ff      	movs	r3, #255	; 0xff
 8000274:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800027a:	4618      	mov	r0, r3
 800027c:	371c      	adds	r7, #28
 800027e:	46bd      	mov	sp, r7
 8000280:	bd90      	pop	{r4, r7, pc}

08000282 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8000282:	b590      	push	{r4, r7, lr}
 8000284:	b08d      	sub	sp, #52	; 0x34
 8000286:	af00      	add	r7, sp, #0
 8000288:	60f8      	str	r0, [r7, #12]
 800028a:	60b9      	str	r1, [r7, #8]
 800028c:	603b      	str	r3, [r7, #0]
 800028e:	4613      	mov	r3, r2
 8000290:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	2b0a      	cmp	r3, #10
 8000296:	d901      	bls.n	800029c <bme280_set_regs+0x1a>
    {
        len = 10;
 8000298:	230a      	movs	r3, #10
 800029a:	71fb      	strb	r3, [r7, #7]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800029c:	6838      	ldr	r0, [r7, #0]
 800029e:	f001 f822 	bl	80012e6 <null_ptr_check>
 80002a2:	4603      	mov	r3, r0
 80002a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80002a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d159      	bne.n	8000364 <bme280_set_regs+0xe2>
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d056      	beq.n	8000364 <bme280_set_regs+0xe2>
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d053      	beq.n	8000364 <bme280_set_regs+0xe2>
    {
        if (len != 0)
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d04c      	beq.n	800035c <bme280_set_regs+0xda>
        {
            temp_buff[0] = reg_data[0];
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	7a1b      	ldrb	r3, [r3, #8]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d01a      	beq.n	8000306 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80002d0:	2300      	movs	r3, #0
 80002d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80002d6:	e011      	b.n	80002fc <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80002d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	4413      	add	r3, r2
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002e6:	68f9      	ldr	r1, [r7, #12]
 80002e8:	440b      	add	r3, r1
 80002ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80002f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002f6:	3301      	adds	r3, #1
 80002f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80002fc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	429a      	cmp	r2, r3
 8000304:	d3e8      	bcc.n	80002d8 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d90d      	bls.n	8000328 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f107 0114 	add.w	r1, r7, #20
 8000312:	68ba      	ldr	r2, [r7, #8]
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f000 fea5 	bl	8001064 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	b29b      	uxth	r3, r3
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	b29b      	uxth	r3, r3
 8000322:	3b01      	subs	r3, #1
 8000324:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000326:	e001      	b.n	800032c <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	691c      	ldr	r4, [r3, #16]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	7818      	ldrb	r0, [r3, #0]
 8000334:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	f107 0114 	add.w	r1, r7, #20
 800033e:	47a0      	blx	r4
 8000340:	4603      	mov	r3, r0
 8000342:	461a      	mov	r2, r3
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8000350:	2b00      	cmp	r3, #0
 8000352:	d00b      	beq.n	800036c <bme280_set_regs+0xea>
            {
                rslt = BME280_E_COMM_FAIL;
 8000354:	23fc      	movs	r3, #252	; 0xfc
 8000356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 800035a:	e007      	b.n	800036c <bme280_set_regs+0xea>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800035c:	23fd      	movs	r3, #253	; 0xfd
 800035e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8000362:	e003      	b.n	800036c <bme280_set_regs+0xea>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8000364:	23ff      	movs	r3, #255	; 0xff
 8000366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800036a:	e000      	b.n	800036e <bme280_set_regs+0xec>
        if (len != 0)
 800036c:	bf00      	nop
    }

    return rslt;
 800036e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8000372:	4618      	mov	r0, r3
 8000374:	3734      	adds	r7, #52	; 0x34
 8000376:	46bd      	mov	sp, r7
 8000378:	bd90      	pop	{r4, r7, pc}

0800037a <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b084      	sub	sp, #16
 800037e:	af00      	add	r7, sp, #0
 8000380:	4603      	mov	r3, r0
 8000382:	6039      	str	r1, [r7, #0]
 8000384:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000386:	6838      	ldr	r0, [r7, #0]
 8000388:	f000 ffad 	bl	80012e6 <null_ptr_check>
 800038c:	4603      	mov	r3, r0
 800038e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d13f      	bne.n	8000418 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8000398:	f107 030e 	add.w	r3, r7, #14
 800039c:	6839      	ldr	r1, [r7, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f874 	bl	800048c <bme280_get_sensor_mode>
 80003a4:	4603      	mov	r3, r0
 80003a6:	73fb      	strb	r3, [r7, #15]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80003a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d107      	bne.n	80003c0 <bme280_set_sensor_settings+0x46>
 80003b0:	7bbb      	ldrb	r3, [r7, #14]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d004      	beq.n	80003c0 <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 80003b6:	6838      	ldr	r0, [r7, #0]
 80003b8:	f000 fbc3 	bl	8000b42 <put_device_to_sleep>
 80003bc:	4603      	mov	r3, r0
 80003be:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BME280_OK)
 80003c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d127      	bne.n	8000418 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	4619      	mov	r1, r3
 80003cc:	2007      	movs	r0, #7
 80003ce:	f000 ff6f 	bl	80012b0 <are_settings_changed>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d009      	beq.n	80003ec <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	683a      	ldr	r2, [r7, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fa04 	bl	80007f0 <set_osr_settings>
 80003e8:	4603      	mov	r3, r0
 80003ea:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80003ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <bme280_set_sensor_settings+0x9e>
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4619      	mov	r1, r3
 80003f8:	2018      	movs	r0, #24
 80003fa:	f000 ff59 	bl	80012b0 <are_settings_changed>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d009      	beq.n	8000418 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	683a      	ldr	r2, [r7, #0]
 800040e:	4618      	mov	r0, r3
 8000410:	f000 fa8b 	bl	800092a <set_filter_standby_settings>
 8000414:	4603      	mov	r3, r0
 8000416:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	6039      	str	r1, [r7, #0]
 800042e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000430:	6838      	ldr	r0, [r7, #0]
 8000432:	f000 ff58 	bl	80012e6 <null_ptr_check>
 8000436:	4603      	mov	r3, r0
 8000438:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 800043a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d11e      	bne.n	8000480 <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8000442:	f107 030e 	add.w	r3, r7, #14
 8000446:	6839      	ldr	r1, [r7, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f000 f81f 	bl	800048c <bme280_get_sensor_mode>
 800044e:	4603      	mov	r3, r0
 8000450:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8000452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d107      	bne.n	800046a <bme280_set_sensor_mode+0x46>
 800045a:	7bbb      	ldrb	r3, [r7, #14]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d004      	beq.n	800046a <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8000460:	6838      	ldr	r0, [r7, #0]
 8000462:	f000 fb6e 	bl	8000b42 <put_device_to_sleep>
 8000466:	4603      	mov	r3, r0
 8000468:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 800046a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d106      	bne.n	8000480 <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	6839      	ldr	r1, [r7, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fb30 	bl	8000adc <write_power_mode>
 800047c:	4603      	mov	r3, r0
 800047e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000480:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000496:	6838      	ldr	r0, [r7, #0]
 8000498:	f000 ff25 	bl	80012e6 <null_ptr_check>
 800049c:	4603      	mov	r3, r0
 800049e:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 80004a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d112      	bne.n	80004ce <bme280_get_sensor_mode+0x42>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d00f      	beq.n	80004ce <bme280_get_sensor_mode+0x42>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2201      	movs	r2, #1
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	20f4      	movs	r0, #244	; 0xf4
 80004b6:	f7ff feaa 	bl	800020e <bme280_get_regs>
 80004ba:	4603      	mov	r3, r0
 80004bc:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	f003 0303 	and.w	r3, r3, #3
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	701a      	strb	r2, [r3, #0]
 80004cc:	e001      	b.n	80004d2 <bme280_get_sensor_mode+0x46>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80004ce:	23ff      	movs	r3, #255	; 0xff
 80004d0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80004d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b084      	sub	sp, #16
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 80004e6:	23e0      	movs	r3, #224	; 0xe0
 80004e8:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 80004ee:	2305      	movs	r3, #5
 80004f0:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80004f2:	23b6      	movs	r3, #182	; 0xb6
 80004f4:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 fef5 	bl	80012e6 <null_ptr_check>
 80004fc:	4603      	mov	r3, r0
 80004fe:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d133      	bne.n	8000570 <bme280_soft_reset+0x92>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000508:	f107 010b 	add.w	r1, r7, #11
 800050c:	f107 000d 	add.w	r0, r7, #13
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2201      	movs	r2, #1
 8000514:	f7ff feb5 	bl	8000282 <bme280_set_regs>
 8000518:	4603      	mov	r3, r0
 800051a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 800051c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d125      	bne.n	8000570 <bme280_soft_reset+0x92>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	6852      	ldr	r2, [r2, #4]
 800052c:	4611      	mov	r1, r2
 800052e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000532:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8000534:	f107 010c 	add.w	r1, r7, #12
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2201      	movs	r2, #1
 800053c:	20f3      	movs	r0, #243	; 0xf3
 800053e:	f7ff fe66 	bl	800020e <bme280_get_regs>
 8000542:	4603      	mov	r3, r0
 8000544:	73fb      	strb	r3, [r7, #15]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8000546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d109      	bne.n	8000562 <bme280_soft_reset+0x84>
 800054e:	7bbb      	ldrb	r3, [r7, #14]
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	73ba      	strb	r2, [r7, #14]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d004      	beq.n	8000562 <bme280_soft_reset+0x84>
 8000558:	7b3b      	ldrb	r3, [r7, #12]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	2b00      	cmp	r3, #0
 8000560:	d1e0      	bne.n	8000524 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <bme280_soft_reset+0x92>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 800056c:	23fa      	movs	r3, #250	; 0xfa
 800056e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000570:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 fea1 	bl	80012e6 <null_ptr_check>
 80005a4:	4603      	mov	r3, r0
 80005a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BME280_OK) && (comp_data != NULL))
 80005aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d124      	bne.n	80005fc <bme280_get_sensor_data+0x80>
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d021      	beq.n	80005fc <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80005b8:	f107 011c 	add.w	r1, r7, #28
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2208      	movs	r2, #8
 80005c0:	20f7      	movs	r0, #247	; 0xf7
 80005c2:	f7ff fe24 	bl	800020e <bme280_get_regs>
 80005c6:	4603      	mov	r3, r0
 80005c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 80005cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d116      	bne.n	8000602 <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 80005d4:	f107 0210 	add.w	r2, r7, #16
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f815 	bl	800060e <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3318      	adds	r3, #24
 80005e8:	f107 0110 	add.w	r1, r7, #16
 80005ec:	7bf8      	ldrb	r0, [r7, #15]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	f000 f852 	bl	8000698 <bme280_compensate_data>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80005fa:	e002      	b.n	8000602 <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80005fc:	23ff      	movs	r3, #255	; 0xff
 80005fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8000602:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000606:	4618      	mov	r0, r3
 8000608:	3728      	adds	r7, #40	; 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800060e:	b480      	push	{r7}
 8000610:	b087      	sub	sp, #28
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	031b      	lsls	r3, r3, #12
 800061e:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	011b      	lsls	r3, r3, #4
 8000628:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3302      	adds	r3, #2
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	b2db      	uxtb	r3, r3
 8000634:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	431a      	orrs	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	431a      	orrs	r2, r3
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3303      	adds	r3, #3
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	031b      	lsls	r3, r3, #12
 800064c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3304      	adds	r3, #4
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3305      	adds	r3, #5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	091b      	lsrs	r3, r3, #4
 8000660:	b2db      	uxtb	r3, r3
 8000662:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	431a      	orrs	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	431a      	orrs	r2, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3306      	adds	r3, #6
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	021b      	lsls	r3, r3, #8
 800067a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3307      	adds	r3, #7
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	431a      	orrs	r2, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	609a      	str	r2, [r3, #8]
}
 800068e:	bf00      	nop
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 80006a8:	2300      	movs	r3, #0
 80006aa:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d033      	beq.n	800071a <bme280_compensate_data+0x82>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d030      	beq.n	800071a <bme280_compensate_data+0x82>
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d02d      	beq.n	800071a <bme280_compensate_data+0x82>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d006      	beq.n	80006e8 <bme280_compensate_data+0x50>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80006da:	6839      	ldr	r1, [r7, #0]
 80006dc:	68b8      	ldr	r0, [r7, #8]
 80006de:	f000 fa7d 	bl	8000bdc <compensate_temperature>
 80006e2:	4602      	mov	r2, r0
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	605a      	str	r2, [r3, #4]
        }

        if (sensor_comp & BME280_PRESS)
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d006      	beq.n	8000700 <bme280_compensate_data+0x68>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80006f2:	6839      	ldr	r1, [r7, #0]
 80006f4:	68b8      	ldr	r0, [r7, #8]
 80006f6:	f000 fad1 	bl	8000c9c <compensate_pressure>
 80006fa:	4602      	mov	r2, r0
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	601a      	str	r2, [r3, #0]
        }

        if (sensor_comp & BME280_HUM)
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	2b00      	cmp	r3, #0
 8000708:	d009      	beq.n	800071e <bme280_compensate_data+0x86>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800070a:	6839      	ldr	r1, [r7, #0]
 800070c:	68b8      	ldr	r0, [r7, #8]
 800070e:	f000 fbb9 	bl	8000e84 <compensate_humidity>
 8000712:	4602      	mov	r2, r0
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 8000718:	e001      	b.n	800071e <bme280_compensate_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800071a:	23ff      	movs	r3, #255	; 0xff
 800071c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800071e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <bme280_cal_meas_delay>:
/*!
 * @brief This API is used to calculate the maximum delay in milliseconds required for the
 * temperature/pressure/humidity(which ever at enabled) measurement to complete.
 */
uint32_t bme280_cal_meas_delay(const struct bme280_settings *settings)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    uint8_t temp_osr;
    uint8_t pres_osr;
    uint8_t hum_osr;

    /*Array to map OSR config register value to actual OSR */
    uint8_t osr_sett_to_act_osr[] = { 0, 1, 2, 4, 8, 16 };
 8000734:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <bme280_cal_meas_delay+0xbc>)
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800073e:	6018      	str	r0, [r3, #0]
 8000740:	3304      	adds	r3, #4
 8000742:	8019      	strh	r1, [r3, #0]

    /* Mapping osr settings to the actual osr values e.g. 0b101 -> osr X16  */
    if (settings->osr_t <= 5)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	2b05      	cmp	r3, #5
 800074a:	d808      	bhi.n	800075e <bme280_cal_meas_delay+0x32>
    {
        temp_osr = osr_sett_to_act_osr[settings->osr_t];
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	f107 0218 	add.w	r2, r7, #24
 8000754:	4413      	add	r3, r2
 8000756:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800075a:	75fb      	strb	r3, [r7, #23]
 800075c:	e001      	b.n	8000762 <bme280_cal_meas_delay+0x36>
    }
    else
    {
        temp_osr = 16;
 800075e:	2310      	movs	r3, #16
 8000760:	75fb      	strb	r3, [r7, #23]
    }

    if (settings->osr_p <= 5)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b05      	cmp	r3, #5
 8000768:	d808      	bhi.n	800077c <bme280_cal_meas_delay+0x50>
    {
        pres_osr = osr_sett_to_act_osr[settings->osr_p];
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	f107 0218 	add.w	r2, r7, #24
 8000772:	4413      	add	r3, r2
 8000774:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000778:	75bb      	strb	r3, [r7, #22]
 800077a:	e001      	b.n	8000780 <bme280_cal_meas_delay+0x54>
    }
    else
    {
        pres_osr = 16;
 800077c:	2310      	movs	r3, #16
 800077e:	75bb      	strb	r3, [r7, #22]
    }

    if (settings->osr_h <= 5)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	789b      	ldrb	r3, [r3, #2]
 8000784:	2b05      	cmp	r3, #5
 8000786:	d808      	bhi.n	800079a <bme280_cal_meas_delay+0x6e>
    {
        hum_osr = osr_sett_to_act_osr[settings->osr_h];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	789b      	ldrb	r3, [r3, #2]
 800078c:	f107 0218 	add.w	r2, r7, #24
 8000790:	4413      	add	r3, r2
 8000792:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000796:	757b      	strb	r3, [r7, #21]
 8000798:	e001      	b.n	800079e <bme280_cal_meas_delay+0x72>
    }
    else
    {
        hum_osr = 16;
 800079a:	2310      	movs	r3, #16
 800079c:	757b      	strb	r3, [r7, #21]
    }

    max_delay =
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80007a4:	fb02 f303 	mul.w	r3, r2, r3
 80007a8:	f203 42e2 	addw	r2, r3, #1250	; 0x4e2
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 80007ac:	7dbb      	ldrb	r3, [r7, #22]
 80007ae:	f640 01fc 	movw	r1, #2300	; 0x8fc
 80007b2:	fb01 f303 	mul.w	r3, r1, r3
 80007b6:	f203 233f 	addw	r3, r3, #575	; 0x23f
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 80007ba:	441a      	add	r2, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) / BME280_MEAS_SCALING_FACTOR);
 80007bc:	7d7b      	ldrb	r3, [r7, #21]
 80007be:	f640 01fc 	movw	r1, #2300	; 0x8fc
 80007c2:	fb01 f303 	mul.w	r3, r1, r3
 80007c6:	f203 233f 	addw	r3, r3, #575	; 0x23f
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 80007ca:	4413      	add	r3, r2
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) / BME280_MEAS_SCALING_FACTOR);
 80007cc:	4a07      	ldr	r2, [pc, #28]	; (80007ec <bme280_cal_meas_delay+0xc0>)
 80007ce:	fb82 1203 	smull	r1, r2, r2, r3
 80007d2:	1192      	asrs	r2, r2, #6
 80007d4:	17db      	asrs	r3, r3, #31
 80007d6:	1ad3      	subs	r3, r2, r3
    max_delay =
 80007d8:	613b      	str	r3, [r7, #16]

    return max_delay;
 80007da:	693b      	ldr	r3, [r7, #16]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	371c      	adds	r7, #28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	0800d534 	.word	0x0800d534
 80007ec:	10624dd3 	.word	0x10624dd3

080007f0 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80007fe:	2301      	movs	r3, #1
 8000800:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	2b00      	cmp	r3, #0
 800080a:	d005      	beq.n	8000818 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	68b8      	ldr	r0, [r7, #8]
 8000810:	f000 f815 	bl	800083e <set_osr_humidity_settings>
 8000814:	4603      	mov	r3, r0
 8000816:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d007      	beq.n	8000832 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	68b9      	ldr	r1, [r7, #8]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f842 	bl	80008b2 <set_osr_press_temp_settings>
 800082e:	4603      	mov	r3, r0
 8000830:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b084      	sub	sp, #16
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8000848:	23f2      	movs	r3, #242	; 0xf2
 800084a:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	789b      	ldrb	r3, [r3, #2]
 8000850:	f003 0307 	and.w	r3, r3, #7
 8000854:	b2db      	uxtb	r3, r3
 8000856:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8000858:	f107 010e 	add.w	r1, r7, #14
 800085c:	f107 000c 	add.w	r0, r7, #12
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	2201      	movs	r2, #1
 8000864:	f7ff fd0d 	bl	8000282 <bme280_set_regs>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 800086c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d118      	bne.n	80008a6 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8000874:	23f4      	movs	r3, #244	; 0xf4
 8000876:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8000878:	7b38      	ldrb	r0, [r7, #12]
 800087a:	f107 010d 	add.w	r1, r7, #13
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2201      	movs	r2, #1
 8000882:	f7ff fcc4 	bl	800020e <bme280_get_regs>
 8000886:	4603      	mov	r3, r0
 8000888:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d109      	bne.n	80008a6 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8000892:	f107 010d 	add.w	r1, r7, #13
 8000896:	f107 000c 	add.w	r0, r7, #12
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	2201      	movs	r2, #1
 800089e:	f7ff fcf0 	bl	8000282 <bme280_set_regs>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80008c0:	23f4      	movs	r3, #244	; 0xf4
 80008c2:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80008c4:	7db8      	ldrb	r0, [r7, #22]
 80008c6:	f107 0115 	add.w	r1, r7, #21
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2201      	movs	r2, #1
 80008ce:	f7ff fc9e 	bl	800020e <bme280_get_regs>
 80008d2:	4603      	mov	r3, r0
 80008d4:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 80008d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d11f      	bne.n	800091e <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d005      	beq.n	80008f4 <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 80008e8:	f107 0315 	add.w	r3, r7, #21
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f88c 	bl	8000a0c <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d005      	beq.n	800090a <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 80008fe:	f107 0315 	add.w	r3, r7, #21
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f89d 	bl	8000a44 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800090a:	f107 0115 	add.w	r1, r7, #21
 800090e:	f107 0016 	add.w	r0, r7, #22
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	f7ff fcb4 	bl	8000282 <bme280_set_regs>
 800091a:	4603      	mov	r3, r0
 800091c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800091e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8000938:	23f5      	movs	r3, #245	; 0xf5
 800093a:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800093c:	7db8      	ldrb	r0, [r7, #22]
 800093e:	f107 0115 	add.w	r1, r7, #21
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2201      	movs	r2, #1
 8000946:	f7ff fc62 	bl	800020e <bme280_get_regs>
 800094a:	4603      	mov	r3, r0
 800094c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 800094e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d11f      	bne.n	8000996 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	2b00      	cmp	r3, #0
 800095e:	d005      	beq.n	800096c <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8000960:	f107 0315 	add.w	r3, r7, #21
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f81b 	bl	80009a2 <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	2b00      	cmp	r3, #0
 8000974:	d005      	beq.n	8000982 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8000976:	f107 0315 	add.w	r3, r7, #21
 800097a:	68b9      	ldr	r1, [r7, #8]
 800097c:	4618      	mov	r0, r3
 800097e:	f000 f82c 	bl	80009da <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8000982:	f107 0115 	add.w	r1, r7, #21
 8000986:	f107 0016 	add.w	r0, r7, #22
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2201      	movs	r2, #1
 800098e:	f7ff fc78 	bl	8000282 <bme280_set_regs>
 8000992:	4603      	mov	r3, r0
 8000994:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000996:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	f023 031c 	bic.w	r3, r3, #28
 80009b6:	b25a      	sxtb	r2, r3
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	78db      	ldrb	r3, [r3, #3]
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	f003 031c 	and.w	r3, r3, #28
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	701a      	strb	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	f003 031f 	and.w	r3, r3, #31
 80009ee:	b25a      	sxtb	r2, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	791b      	ldrb	r3, [r3, #4]
 80009f4:	015b      	lsls	r3, r3, #5
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	701a      	strb	r2, [r3, #0]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	f023 031c 	bic.w	r3, r3, #28
 8000a20:	b25a      	sxtb	r2, r3
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	f003 031c 	and.w	r3, r3, #28
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	701a      	strb	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	f003 031f 	and.w	r3, r3, #31
 8000a58:	b25a      	sxtb	r2, r3
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	015b      	lsls	r3, r3, #5
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	4313      	orrs	r3, r2
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	701a      	strb	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3302      	adds	r3, #2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	109b      	asrs	r3, r3, #2
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f003 0307 	and.w	r3, r3, #7
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	095b      	lsrs	r3, r3, #5
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3303      	adds	r3, #3
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	109b      	asrs	r3, r3, #2
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3303      	adds	r3, #3
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	711a      	strb	r2, [r3, #4]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8000ae8:	23f4      	movs	r3, #244	; 0xf4
 8000aea:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8000aec:	7bb8      	ldrb	r0, [r7, #14]
 8000aee:	f107 010d 	add.w	r1, r7, #13
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	2201      	movs	r2, #1
 8000af6:	f7ff fb8a 	bl	800020e <bme280_get_regs>
 8000afa:	4603      	mov	r3, r0
 8000afc:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d117      	bne.n	8000b36 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8000b06:	7b7b      	ldrb	r3, [r7, #13]
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	f023 0303 	bic.w	r3, r3, #3
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8000b22:	f107 010d 	add.w	r1, r7, #13
 8000b26:	f107 000e 	add.w	r0, r7, #14
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f7ff fba8 	bl	8000282 <bme280_set_regs>
 8000b32:	4603      	mov	r3, r0
 8000b34:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8000b4a:	f107 0110 	add.w	r1, r7, #16
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2204      	movs	r2, #4
 8000b52:	20f2      	movs	r0, #242	; 0xf2
 8000b54:	f7ff fb5b 	bl	800020e <bme280_get_regs>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8000b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d118      	bne.n	8000b96 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8000b64:	f107 0208 	add.w	r2, r7, #8
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff81 	bl	8000a76 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff fcb2 	bl	80004de <bme280_soft_reset>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BME280_OK)
 8000b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d107      	bne.n	8000b96 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 f808 	bl	8000ba2 <reload_device_settings>
 8000b92:	4603      	mov	r3, r0
 8000b94:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8000b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	201f      	movs	r0, #31
 8000bb2:	f7ff fe1d 	bl	80007f0 <set_osr_settings>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d106      	bne.n	8000bd0 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	201f      	movs	r0, #31
 8000bc8:	f7ff feaf 	bl	800092a <set_filter_standby_settings>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    int32_t var1;
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <compensate_temperature+0xbc>)
 8000be8:	61bb      	str	r3, [r7, #24]
    int32_t temperature_max = 8500;
 8000bea:	f242 1334 	movw	r3, #8500	; 0x2134
 8000bee:	617b      	str	r3, [r7, #20]

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	8812      	ldrh	r2, [r2, #0]
 8000bfa:	0052      	lsls	r2, r2, #1
 8000bfc:	1a9b      	subs	r3, r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c06:	461a      	mov	r2, r3
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	fb03 f302 	mul.w	r3, r3, r2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	da01      	bge.n	8000c16 <compensate_temperature+0x3a>
 8000c12:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000c16:	12db      	asrs	r3, r3, #11
 8000c18:	613b      	str	r3, [r7, #16]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_t1));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	091b      	lsrs	r3, r3, #4
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	8812      	ldrh	r2, [r2, #0]
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	fb03 f303 	mul.w	r3, r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	da01      	bge.n	8000c36 <compensate_temperature+0x5a>
 8000c32:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000c36:	131b      	asrs	r3, r3, #12
 8000c38:	461a      	mov	r2, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c40:	fb03 f302 	mul.w	r3, r3, r2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	da02      	bge.n	8000c4e <compensate_temperature+0x72>
 8000c48:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000c4c:	333f      	adds	r3, #63	; 0x3f
 8000c4e:	139b      	asrs	r3, r3, #14
 8000c50:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = var1 + var2;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	441a      	add	r2, r3
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	3380      	adds	r3, #128	; 0x80
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da00      	bge.n	8000c6e <compensate_temperature+0x92>
 8000c6c:	33ff      	adds	r3, #255	; 0xff
 8000c6e:	121b      	asrs	r3, r3, #8
 8000c70:	61fb      	str	r3, [r7, #28]

    if (temperature < temperature_min)
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	da02      	bge.n	8000c80 <compensate_temperature+0xa4>
    {
        temperature = temperature_min;
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	e005      	b.n	8000c8c <compensate_temperature+0xb0>
    }
    else if (temperature > temperature_max)
 8000c80:	69fa      	ldr	r2, [r7, #28]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dd01      	ble.n	8000c8c <compensate_temperature+0xb0>
    {
        temperature = temperature_max;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	61fb      	str	r3, [r7, #28]
    }

    return temperature;
 8000c8c:	69fb      	ldr	r3, [r7, #28]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	fffff060 	.word	0xfffff060

08000c9c <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in integer data type.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b08b      	sub	sp, #44	; 0x2c
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    uint32_t var5;
    uint32_t pressure;
    uint32_t pressure_min = 30000;
 8000ca6:	f247 5330 	movw	r3, #30000	; 0x7530
 8000caa:	623b      	str	r3, [r7, #32]
    uint32_t pressure_max = 110000;
 8000cac:	4b74      	ldr	r3, [pc, #464]	; (8000e80 <compensate_pressure+0x1e4>)
 8000cae:	61fb      	str	r3, [r7, #28]

    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb4:	0fda      	lsrs	r2, r3, #31
 8000cb6:	4413      	add	r3, r2
 8000cb8:	105b      	asrs	r3, r3, #1
 8000cba:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000cbe:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_p6);
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	da00      	bge.n	8000cc8 <compensate_pressure+0x2c>
 8000cc6:	3303      	adds	r3, #3
 8000cc8:	109b      	asrs	r3, r3, #2
 8000cca:	461a      	mov	r2, r3
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	da00      	bge.n	8000cd4 <compensate_pressure+0x38>
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	109b      	asrs	r3, r3, #2
 8000cd6:	fb03 f302 	mul.w	r3, r3, r2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	da01      	bge.n	8000ce2 <compensate_pressure+0x46>
 8000cde:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000ce2:	12db      	asrs	r3, r3, #11
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000cec:	fb03 f302 	mul.w	r3, r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_p5)) * 2);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	fb03 f302 	mul.w	r3, r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	4413      	add	r3, r2
 8000d06:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_p4) * 65536);
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	da00      	bge.n	8000d10 <compensate_pressure+0x74>
 8000d0e:	3303      	adds	r3, #3
 8000d10:	109b      	asrs	r3, r3, #2
 8000d12:	461a      	mov	r2, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d1a:	041b      	lsls	r3, r3, #16
 8000d1c:	4413      	add	r3, r2
 8000d1e:	617b      	str	r3, [r7, #20]
    var3 = (calib_data->dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d26:	461a      	mov	r2, r3
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	da00      	bge.n	8000d30 <compensate_pressure+0x94>
 8000d2e:	3303      	adds	r3, #3
 8000d30:	109b      	asrs	r3, r3, #2
 8000d32:	4619      	mov	r1, r3
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da00      	bge.n	8000d3c <compensate_pressure+0xa0>
 8000d3a:	3303      	adds	r3, #3
 8000d3c:	109b      	asrs	r3, r3, #2
 8000d3e:	fb03 f301 	mul.w	r3, r3, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	da02      	bge.n	8000d4c <compensate_pressure+0xb0>
 8000d46:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8000d4a:	331f      	adds	r3, #31
 8000d4c:	135b      	asrs	r3, r3, #13
 8000d4e:	fb03 f302 	mul.w	r3, r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	da00      	bge.n	8000d58 <compensate_pressure+0xbc>
 8000d56:	3307      	adds	r3, #7
 8000d58:	10db      	asrs	r3, r3, #3
 8000d5a:	613b      	str	r3, [r7, #16]
    var4 = (((int32_t)calib_data->dig_p2) * var1) / 2;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d62:	461a      	mov	r2, r3
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fb03 f302 	mul.w	r3, r3, r2
 8000d6a:	0fda      	lsrs	r2, r3, #31
 8000d6c:	4413      	add	r3, r2
 8000d6e:	105b      	asrs	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + var4) / 262144;
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	da03      	bge.n	8000d84 <compensate_pressure+0xe8>
 8000d7c:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8000d80:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000d84:	149b      	asrs	r3, r3, #18
 8000d86:	61bb      	str	r3, [r7, #24]
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_p1)) / 32768;
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	88d2      	ldrh	r2, [r2, #6]
 8000d92:	fb02 f303 	mul.w	r3, r2, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da02      	bge.n	8000da0 <compensate_pressure+0x104>
 8000d9a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000d9e:	337f      	adds	r3, #127	; 0x7f
 8000da0:	13db      	asrs	r3, r3, #15
 8000da2:	61bb      	str	r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d061      	beq.n	8000e6e <compensate_pressure+0x1d2>
    {
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000db2:	60bb      	str	r3, [r7, #8]
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	da01      	bge.n	8000dbe <compensate_pressure+0x122>
 8000dba:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000dbe:	131b      	asrs	r3, r3, #12
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	f640 4235 	movw	r2, #3125	; 0xc35
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24

        if (pressure < 0x80000000)
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db06      	blt.n	8000de4 <compensate_pressure+0x148>
        {
            pressure = (pressure << 1) / ((uint32_t)var1);
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	005a      	lsls	r2, r3, #1
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
 8000de2:	e005      	b.n	8000df0 <compensate_pressure+0x154>
        }
        else
        {
            pressure = (pressure / (uint32_t)var1) * 2;
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
        }

        var1 = (((int32_t)calib_data->dig_p9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000df6:	4619      	mov	r1, r3
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	08db      	lsrs	r3, r3, #3
 8000dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dfe:	08d2      	lsrs	r2, r2, #3
 8000e00:	fb02 f303 	mul.w	r3, r2, r3
 8000e04:	0b5b      	lsrs	r3, r3, #13
 8000e06:	fb03 f301 	mul.w	r3, r3, r1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	da01      	bge.n	8000e12 <compensate_pressure+0x176>
 8000e0e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000e12:	131b      	asrs	r3, r3, #12
 8000e14:	61bb      	str	r3, [r7, #24]
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_p8)) / 8192;
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e22:	fb03 f302 	mul.w	r3, r3, r2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da02      	bge.n	8000e30 <compensate_pressure+0x194>
 8000e2a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8000e2e:	331f      	adds	r3, #31
 8000e30:	135b      	asrs	r3, r3, #13
 8000e32:	617b      	str	r3, [r7, #20]
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_p7) / 16));
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4413      	add	r3, r2
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000e40:	4413      	add	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	da00      	bge.n	8000e48 <compensate_pressure+0x1ac>
 8000e46:	330f      	adds	r3, #15
 8000e48:	111b      	asrs	r3, r3, #4
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	4413      	add	r3, r2
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24

        if (pressure < pressure_min)
 8000e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d202      	bcs.n	8000e60 <compensate_pressure+0x1c4>
        {
            pressure = pressure_min;
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5e:	e008      	b.n	8000e72 <compensate_pressure+0x1d6>
        }
        else if (pressure > pressure_max)
 8000e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d904      	bls.n	8000e72 <compensate_pressure+0x1d6>
        {
            pressure = pressure_max;
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6c:	e001      	b.n	8000e72 <compensate_pressure+0x1d6>
        }
    }
    else
    {
        pressure = pressure_min;
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return pressure;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	372c      	adds	r7, #44	; 0x2c
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	0001adb0 	.word	0x0001adb0

08000e84 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b08b      	sub	sp, #44	; 0x2c
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;
 8000e8e:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8000e92:	623b      	str	r3, [r7, #32]

    var1 = calib_data->t_fine - ((int32_t)76800);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e98:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8000e9c:	61fb      	str	r3, [r7, #28]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	039b      	lsls	r3, r3, #14
 8000ea4:	61bb      	str	r3, [r7, #24]
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000eac:	051b      	lsls	r3, r3, #20
 8000eae:	617b      	str	r3, [r7, #20]
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	613b      	str	r3, [r7, #16]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	1ad2      	subs	r2, r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da02      	bge.n	8000ed8 <compensate_humidity+0x54>
 8000ed2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000ed6:	337f      	adds	r3, #127	; 0x7f
 8000ed8:	13db      	asrs	r3, r3, #15
 8000eda:	60fb      	str	r3, [r7, #12]
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	fb03 f302 	mul.w	r3, r3, r2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da01      	bge.n	8000ef2 <compensate_humidity+0x6e>
 8000eee:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000ef2:	129b      	asrs	r3, r3, #10
 8000ef4:	61bb      	str	r3, [r7, #24]
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	7f1b      	ldrb	r3, [r3, #28]
 8000efa:	461a      	mov	r2, r3
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	fb03 f302 	mul.w	r3, r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da01      	bge.n	8000f0a <compensate_humidity+0x86>
 8000f06:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000f0a:	12db      	asrs	r3, r3, #11
 8000f0c:	617b      	str	r3, [r7, #20]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	da01      	bge.n	8000f22 <compensate_humidity+0x9e>
 8000f1e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000f22:	129b      	asrs	r3, r3, #10
 8000f24:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8000f28:	613b      	str	r3, [r7, #16]
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000f30:	461a      	mov	r2, r3
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fb03 f302 	mul.w	r3, r3, r2
 8000f38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	da02      	bge.n	8000f46 <compensate_humidity+0xc2>
 8000f40:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000f44:	333f      	adds	r3, #63	; 0x3f
 8000f46:	139b      	asrs	r3, r3, #14
 8000f48:	61bb      	str	r3, [r7, #24]
    var3 = var5 * var2;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	fb02 f303 	mul.w	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	da02      	bge.n	8000f60 <compensate_humidity+0xdc>
 8000f5a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000f5e:	337f      	adds	r3, #127	; 0x7f
 8000f60:	13db      	asrs	r3, r3, #15
 8000f62:	461a      	mov	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	da02      	bge.n	8000f70 <compensate_humidity+0xec>
 8000f6a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000f6e:	337f      	adds	r3, #127	; 0x7f
 8000f70:	13db      	asrs	r3, r3, #15
 8000f72:	fb03 f302 	mul.w	r3, r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	da00      	bge.n	8000f7c <compensate_humidity+0xf8>
 8000f7a:	337f      	adds	r3, #127	; 0x7f
 8000f7c:	11db      	asrs	r3, r3, #7
 8000f7e:	613b      	str	r3, [r7, #16]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	7e1b      	ldrb	r3, [r3, #24]
 8000f84:	461a      	mov	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	fb03 f302 	mul.w	r3, r3, r2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da00      	bge.n	8000f92 <compensate_humidity+0x10e>
 8000f90:	330f      	adds	r3, #15
 8000f92:	111b      	asrs	r3, r3, #4
 8000f94:	425b      	negs	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
    var5 = (var5 < 0 ? 0 : var5);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000fa4:	60fb      	str	r3, [r7, #12]
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8000fac:	bfa8      	it	ge
 8000fae:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8000fb2:	60fb      	str	r3, [r7, #12]
    humidity = (uint32_t)(var5 / 4096);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da01      	bge.n	8000fbe <compensate_humidity+0x13a>
 8000fba:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000fbe:	131b      	asrs	r3, r3, #12
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24

    if (humidity > humidity_max)
 8000fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d901      	bls.n	8000fce <compensate_humidity+0x14a>
    {
        humidity = humidity_max;
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return humidity;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	372c      	adds	r7, #44	; 0x2c
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b08a      	sub	sp, #40	; 0x28
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8000fe2:	2388      	movs	r3, #136	; 0x88
 8000fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8000ffe:	f107 010c 	add.w	r1, r7, #12
 8001002:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	221a      	movs	r2, #26
 800100a:	f7ff f900 	bl	800020e <bme280_get_regs>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BME280_OK)
 8001014:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001018:	2b00      	cmp	r3, #0
 800101a:	d11d      	bne.n	8001058 <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f849 	bl	80010ba <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8001028:	23e1      	movs	r3, #225	; 0xe1
 800102a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800102e:	f107 010c 	add.w	r1, r7, #12
 8001032:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2207      	movs	r2, #7
 800103a:	f7ff f8e8 	bl	800020e <bme280_get_regs>
 800103e:	4603      	mov	r3, r0
 8001040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 8001044:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001048:	2b00      	cmp	r3, #0
 800104a:	d105      	bne.n	8001058 <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f8df 	bl	8001216 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8001058:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800105c:	4618      	mov	r0, r3
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001072:	2301      	movs	r3, #1
 8001074:	75fb      	strb	r3, [r7, #23]
 8001076:	e016      	b.n	80010a6 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	441a      	add	r2, r3
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	3b01      	subs	r3, #1
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	440b      	add	r3, r1
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	441a      	add	r2, r3
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4619      	mov	r1, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	440b      	add	r3, r1
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	3301      	adds	r3, #1
 80010a4:	75fb      	strb	r3, [r7, #23]
 80010a6:	7dfa      	ldrb	r2, [r7, #23]
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3e4      	bcc.n	8001078 <interleave_reg_addr+0x14>
    }
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3318      	adds	r3, #24
 80010c8:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3301      	adds	r3, #1
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	b29a      	uxth	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3303      	adds	r3, #3
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3302      	adds	r3, #2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3305      	adds	r3, #5
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3304      	adds	r3, #4
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b21a      	sxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3307      	adds	r3, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3306      	adds	r3, #6
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21b      	sxth	r3, r3
 800112e:	b29a      	uxth	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3309      	adds	r3, #9
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3308      	adds	r3, #8
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21a      	sxth	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	330b      	adds	r3, #11
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21a      	sxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	330a      	adds	r3, #10
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b21a      	sxth	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	330d      	adds	r3, #13
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	330c      	adds	r3, #12
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	330f      	adds	r3, #15
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	330e      	adds	r3, #14
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3311      	adds	r3, #17
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3310      	adds	r3, #16
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3313      	adds	r3, #19
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3312      	adds	r3, #18
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3315      	adds	r3, #21
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3314      	adds	r3, #20
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3317      	adds	r3, #23
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3316      	adds	r3, #22
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21a      	sxth	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e5a      	ldrb	r2, [r3, #25]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001216:	b480      	push	{r7}
 8001218:	b087      	sub	sp, #28
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	3318      	adds	r3, #24
 8001224:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21a      	sxth	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	789a      	ldrb	r2, [r3, #2]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3303      	adds	r3, #3
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b25b      	sxtb	r3, r3
 800124e:	b29b      	uxth	r3, r3
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	b29b      	uxth	r3, r3
 8001254:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3304      	adds	r3, #4
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b21b      	sxth	r3, r3
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8001264:	8a7a      	ldrh	r2, [r7, #18]
 8001266:	8a3b      	ldrh	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	b21a      	sxth	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3305      	adds	r3, #5
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b25b      	sxtb	r3, r3
 8001278:	b29b      	uxth	r3, r3
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	b29b      	uxth	r3, r3
 800127e:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3304      	adds	r3, #4
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	b2db      	uxtb	r3, r3
 800128a:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800128c:	89fa      	ldrh	r2, [r7, #14]
 800128e:	89bb      	ldrh	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3306      	adds	r3, #6
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25a      	sxtb	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	460a      	mov	r2, r1
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	4613      	mov	r3, r2
 80012be:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	4013      	ands	r3, r2
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e001      	b.n	80012da <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00b      	beq.n	800130c <null_ptr_check+0x26>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <null_ptr_check+0x26>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <null_ptr_check+0x26>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800130c:	23ff      	movs	r3, #255	; 0xff
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e001      	b.n	8001316 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <d3231_init>:
uint8_t d3231_mem[19];

I2C_HandleTypeDef * hi2c;

void d3231_init(I2C_HandleTypeDef * hi2ci)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	hi2c = hi2ci;
 800132c:	4a03      	ldr	r2, [pc, #12]	; (800133c <d3231_init+0x18>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	200004c8 	.word	0x200004c8

08001340 <d3231_get_time>:

uint8_t * d3231_get_time(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(hi2c, D3231_ADDRESS, 0, 1, d3231_mem, 3, 10);
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <d3231_get_time+0x28>)
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	230a      	movs	r3, #10
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	2303      	movs	r3, #3
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <d3231_get_time+0x2c>)
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2301      	movs	r3, #1
 8001358:	2200      	movs	r2, #0
 800135a:	21d0      	movs	r1, #208	; 0xd0
 800135c:	f003 ffda 	bl	8005314 <HAL_I2C_Mem_Read>
	return d3231_mem;
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <d3231_get_time+0x2c>)
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200004c8 	.word	0x200004c8
 800136c:	2000046c 	.word	0x2000046c

08001370 <d3231_get_temp>:

uint8_t * d3231_get_temp(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(hi2c, D3231_ADDRESS, 0x11, 1, d3231_mem+0x11, 2, 10);
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <d3231_get_temp+0x28>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <d3231_get_temp+0x2c>)
 800137c:	220a      	movs	r2, #10
 800137e:	9202      	str	r2, [sp, #8]
 8001380:	2202      	movs	r2, #2
 8001382:	9201      	str	r2, [sp, #4]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	2211      	movs	r2, #17
 800138a:	21d0      	movs	r1, #208	; 0xd0
 800138c:	f003 ffc2 	bl	8005314 <HAL_I2C_Mem_Read>
	return d3231_mem+0x11;
 8001390:	4b02      	ldr	r3, [pc, #8]	; (800139c <d3231_get_temp+0x2c>)
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200004c8 	.word	0x200004c8
 800139c:	2000047d 	.word	0x2000047d

080013a0 <d3231_get_all>:

uint8_t * d3231_get_all(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(hi2c, D3231_ADDRESS, 0, 1, d3231_mem, 19, 100);
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <d3231_get_all+0x28>)
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2313      	movs	r3, #19
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <d3231_get_all+0x2c>)
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	2200      	movs	r2, #0
 80013ba:	21d0      	movs	r1, #208	; 0xd0
 80013bc:	f003 ffaa 	bl	8005314 <HAL_I2C_Mem_Read>
	return d3231_mem;
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <d3231_get_all+0x2c>)
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200004c8 	.word	0x200004c8
 80013cc:	2000046c 	.word	0x2000046c

080013d0 <d3231_get_A2M2>:

uint8_t d3231_get_A2M2(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	return d3231_get_all()[0xB];
 80013d4:	f7ff ffe4 	bl	80013a0 <d3231_get_all>
 80013d8:	4603      	mov	r3, r0
 80013da:	7adb      	ldrb	r3, [r3, #11]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	bd80      	pop	{r7, pc}

080013e0 <d3231_set_A2M2>:

void d3231_set_A2M2(uint8_t data)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c, D3231_ADDRESS, 0xB, 1, &data, 1, 100);
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <d3231_set_A2M2+0x2c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	2364      	movs	r3, #100	; 0x64
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2301      	movs	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	220b      	movs	r2, #11
 80013fe:	21d0      	movs	r1, #208	; 0xd0
 8001400:	f003 fe8e 	bl	8005120 <HAL_I2C_Mem_Write>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200004c8 	.word	0x200004c8

08001410 <d3231_set>:

void d3231_set(uint8_t * arr, bool date)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af04      	add	r7, sp, #16
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(hi2c, D3231_ADDRESS, date<<2, 1, arr, 3, 100);
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <d3231_set+0x34>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	b29b      	uxth	r3, r3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	b29a      	uxth	r2, r3
 8001428:	2364      	movs	r3, #100	; 0x64
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	2303      	movs	r3, #3
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	21d0      	movs	r1, #208	; 0xd0
 8001438:	f003 fe72 	bl	8005120 <HAL_I2C_Mem_Write>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200004c8 	.word	0x200004c8

08001448 <fifo_push>:
buff_t fifo_buffer[BUFF_SIZE];
uint32_t head_index = 0;
uint32_t tail_index = 0;

bool fifo_push(buff_t data)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	if (fifo_length() >= BUFF_SIZE - 1)
 8001452:	f000 f859 	bl	8001508 <fifo_length>
 8001456:	4603      	mov	r3, r0
 8001458:	2bfe      	cmp	r3, #254	; 0xfe
 800145a:	d901      	bls.n	8001460 <fifo_push+0x18>
		return 1; // too much data!
 800145c:	2301      	movs	r3, #1
 800145e:	e012      	b.n	8001486 <fifo_push+0x3e>
	if (++tail_index == BUFF_SIZE)
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <fifo_push+0x48>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <fifo_push+0x48>)
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <fifo_push+0x48>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001472:	d102      	bne.n	800147a <fifo_push+0x32>
		tail_index = 0;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <fifo_push+0x48>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
	fifo_buffer[tail_index] = data;
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <fifo_push+0x48>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4905      	ldr	r1, [pc, #20]	; (8001494 <fifo_push+0x4c>)
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	54ca      	strb	r2, [r1, r3]
	return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000210 	.word	0x20000210
 8001494:	200004cc 	.word	0x200004cc

08001498 <fifo_pop>:

buff_t fifo_pop(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if (fifo_is_empty())
 800149c:	f000 f820 	bl	80014e0 <fifo_is_empty>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <fifo_pop+0x18>
		return fifo_buffer[head_index]; // buffer is empty, return the last value
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <fifo_pop+0x40>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <fifo_pop+0x44>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	e010      	b.n	80014d2 <fifo_pop+0x3a>
	if (++head_index == BUFF_SIZE)
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <fifo_pop+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <fifo_pop+0x40>)
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <fifo_pop+0x40>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c2:	d102      	bne.n	80014ca <fifo_pop+0x32>
		head_index = 0;
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <fifo_pop+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
	return fifo_buffer[head_index];
 80014ca:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <fifo_pop+0x40>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a03      	ldr	r2, [pc, #12]	; (80014dc <fifo_pop+0x44>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000020c 	.word	0x2000020c
 80014dc:	200004cc 	.word	0x200004cc

080014e0 <fifo_is_empty>:

bool fifo_is_empty(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	return head_index == tail_index;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <fifo_is_empty+0x20>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <fifo_is_empty+0x24>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2000020c 	.word	0x2000020c
 8001504:	20000210 	.word	0x20000210

08001508 <fifo_length>:

uint32_t fifo_length(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
	if (tail_index >= head_index)
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <fifo_length+0x34>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <fifo_length+0x38>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d305      	bcc.n	8001524 <fifo_length+0x1c>
		return tail_index - head_index;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <fifo_length+0x34>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <fifo_length+0x38>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	e006      	b.n	8001532 <fifo_length+0x2a>
	else
		return tail_index + BUFF_SIZE - head_index;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <fifo_length+0x34>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <fifo_length+0x38>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000210 	.word	0x20000210
 8001540:	2000020c 	.word	0x2000020c

08001544 <user_delay_us>:
struct bme280_data comp_data;


// seems to be update in last versions, used only for 2ms and 1ms delays
void user_delay_us(uint32_t period, void *intf_ptr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
    /*
     * Return control or wait,
     * for a period amount of ~milliseconds~ ms
     */
	HAL_Delay(period/1000);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a05      	ldr	r2, [pc, #20]	; (8001568 <user_delay_us+0x24>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	099b      	lsrs	r3, r3, #6
 8001558:	4618      	mov	r0, r3
 800155a:	f003 f99f 	bl	800489c <HAL_Delay>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	10624dd3 	.word	0x10624dd3

0800156c <user_i2c_read>:

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af04      	add	r7, sp, #16
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 800157c:	2300      	movs	r3, #0
 800157e:	75fb      	strb	r3, [r7, #23]
     * | Read       | (....)              |
     * | Read       | (reg_data[len - 1]) |
     * | Stop       | -                   |
     * |------------+---------------------|
     */
	HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, 1, reg_data, len, 100);
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <user_i2c_read+0x40>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b299      	uxth	r1, r3
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	b29a      	uxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	b29b      	uxth	r3, r3
 800158e:	2064      	movs	r0, #100	; 0x64
 8001590:	9002      	str	r0, [sp, #8]
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2301      	movs	r3, #1
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <user_i2c_read+0x44>)
 800159c:	f003 feba 	bl	8005314 <HAL_I2C_Mem_Read>

    return rslt;
 80015a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000000 	.word	0x20000000
 80015b0:	2000066c 	.word	0x2000066c

080015b4 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	4603      	mov	r3, r0
 80015c2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 80015c4:	2300      	movs	r3, #0
 80015c6:	75fb      	strb	r3, [r7, #23]
     * | Write      | (....)              |
     * | Write      | (reg_data[len - 1]) |
     * | Stop       | -                   |
     * |------------+---------------------|
     */
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, 1, (uint8_t*)reg_data, len, 100);
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <user_i2c_write+0x40>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b299      	uxth	r1, r3
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	2064      	movs	r0, #100	; 0x64
 80015d8:	9002      	str	r0, [sp, #8]
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <user_i2c_write+0x44>)
 80015e4:	f003 fd9c 	bl	8005120 <HAL_I2C_Mem_Write>

    return rslt;
 80015e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000000 	.word	0x20000000
 80015f8:	2000066c 	.word	0x2000066c

080015fc <init_bme280_i2c>:


int8_t init_bme280_i2c(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
	int8_t rslt = BME280_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	71fb      	strb	r3, [r7, #7]
	dev.intf_ptr = &dev_addr;
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <init_bme280_i2c+0x40>)
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <init_bme280_i2c+0x44>)
 800160a:	605a      	str	r2, [r3, #4]
	dev.intf = BME280_I2C_INTF;
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <init_bme280_i2c+0x40>)
 800160e:	2201      	movs	r2, #1
 8001610:	721a      	strb	r2, [r3, #8]
	dev.read = user_i2c_read;
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <init_bme280_i2c+0x40>)
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <init_bme280_i2c+0x48>)
 8001616:	60da      	str	r2, [r3, #12]
	dev.write = user_i2c_write;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <init_bme280_i2c+0x40>)
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <init_bme280_i2c+0x4c>)
 800161c:	611a      	str	r2, [r3, #16]
	dev.delay_us = user_delay_us;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <init_bme280_i2c+0x40>)
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <init_bme280_i2c+0x50>)
 8001622:	615a      	str	r2, [r3, #20]

	rslt = bme280_init(&dev);
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <init_bme280_i2c+0x40>)
 8001626:	f7fe fda3 	bl	8000170 <bme280_init>
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	return rslt;
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200005cc 	.word	0x200005cc
 8001640:	20000000 	.word	0x20000000
 8001644:	0800156d 	.word	0x0800156d
 8001648:	080015b5 	.word	0x080015b5
 800164c:	08001545 	.word	0x08001545

08001650 <vfd_update>:



void vfd_update(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
	uint8_t data = 0b11000000; // command 3, set address to 0
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <vfd_update+0x48>)
 8001662:	f003 fbe8 	bl	8004e36 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8001666:	1df9      	adds	r1, r7, #7
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	2201      	movs	r2, #1
 800166e:	480b      	ldr	r0, [pc, #44]	; (800169c <vfd_update+0x4c>)
 8001670:	f006 fe1a 	bl	80082a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
 8001678:	2221      	movs	r2, #33	; 0x21
 800167a:	4909      	ldr	r1, [pc, #36]	; (80016a0 <vfd_update+0x50>)
 800167c:	4807      	ldr	r0, [pc, #28]	; (800169c <vfd_update+0x4c>)
 800167e:	f006 fe13 	bl	80082a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8001682:	2201      	movs	r2, #1
 8001684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <vfd_update+0x48>)
 800168a:	f003 fbd4 	bl	8004e36 <HAL_GPIO_WritePin>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40010c00 	.word	0x40010c00
 800169c:	20000614 	.word	0x20000614
 80016a0:	20000750 	.word	0x20000750

080016a4 <do_microrl>:

void do_microrl(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
	while (!fifo_is_empty())
 80016aa:	e007      	b.n	80016bc <do_microrl+0x18>
	{
		uint8_t buf = fifo_pop();
 80016ac:	f7ff fef4 	bl	8001498 <fifo_pop>
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
		microrl_print_char(buf);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 ff5a 	bl	8003570 <microrl_print_char>
	while (!fifo_is_empty())
 80016bc:	f7ff ff10 	bl	80014e0 <fifo_is_empty>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f083 0301 	eor.w	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ef      	bne.n	80016ac <do_microrl+0x8>
	}
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <do_vfd_init>:

void do_vfd_init(void)
{
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b098      	sub	sp, #96	; 0x60
 80016dc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1); // put CS high
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e4:	48c0      	ldr	r0, [pc, #768]	; (80019e8 <do_vfd_init+0x310>)
 80016e6:	f003 fba6 	bl	8004e36 <HAL_GPIO_WritePin>

	HAL_Delay(300);
 80016ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016ee:	f003 f8d5 	bl	800489c <HAL_Delay>
	HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2120      	movs	r1, #32
 80016f6:	48bc      	ldr	r0, [pc, #752]	; (80019e8 <do_vfd_init+0x310>)
 80016f8:	f003 fb9d 	bl	8004e36 <HAL_GPIO_WritePin>

	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 80016fc:	2300      	movs	r3, #0
 80016fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001700:	e007      	b.n	8001712 <do_vfd_init+0x3a>
		vfd.arr1[i] = 0xFF;
 8001702:	4aba      	ldr	r2, [pc, #744]	; (80019ec <do_vfd_init+0x314>)
 8001704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001706:	4413      	add	r3, r2
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(vfd.arr1); i++) {
 800170c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800170e:	3301      	adds	r3, #1
 8001710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001714:	2b20      	cmp	r3, #32
 8001716:	d9f4      	bls.n	8001702 <do_vfd_init+0x2a>
	}
	uint8_t data;

	data = 0b01000001; // command 2, write to LED port
 8001718:	2341      	movs	r3, #65	; 0x41
 800171a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001724:	48b0      	ldr	r0, [pc, #704]	; (80019e8 <do_vfd_init+0x310>)
 8001726:	f003 fb86 	bl	8004e36 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800172a:	f107 0137 	add.w	r1, r7, #55	; 0x37
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	2201      	movs	r2, #1
 8001734:	48ae      	ldr	r0, [pc, #696]	; (80019f0 <do_vfd_init+0x318>)
 8001736:	f006 fdb7 	bl	80082a8 <HAL_SPI_Transmit>
	HAL_Delay(10);
 800173a:	200a      	movs	r0, #10
 800173c:	f003 f8ae 	bl	800489c <HAL_Delay>

	data = 0b1111; // disable LEDs
 8001740:	230f      	movs	r3, #15
 8001742:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8001746:	f107 0137 	add.w	r1, r7, #55	; 0x37
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	2201      	movs	r2, #1
 8001750:	48a7      	ldr	r0, [pc, #668]	; (80019f0 <do_vfd_init+0x318>)
 8001752:	f006 fda9 	bl	80082a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800175c:	48a2      	ldr	r0, [pc, #648]	; (80019e8 <do_vfd_init+0x310>)
 800175e:	f003 fb6a 	bl	8004e36 <HAL_GPIO_WritePin>

	data = 0b01000000; // command 2, write to Display port
 8001762:	2340      	movs	r3, #64	; 0x40
 8001764:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176e:	489e      	ldr	r0, [pc, #632]	; (80019e8 <do_vfd_init+0x310>)
 8001770:	f003 fb61 	bl	8004e36 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8001774:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	2201      	movs	r2, #1
 800177e:	489c      	ldr	r0, [pc, #624]	; (80019f0 <do_vfd_init+0x318>)
 8001780:	f006 fd92 	bl	80082a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178a:	4897      	ldr	r0, [pc, #604]	; (80019e8 <do_vfd_init+0x310>)
 800178c:	f003 fb53 	bl	8004e36 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001790:	200a      	movs	r0, #10
 8001792:	f003 f883 	bl	800489c <HAL_Delay>
	vfd_update();
 8001796:	f7ff ff5b 	bl	8001650 <vfd_update>
	HAL_Delay(10);
 800179a:	200a      	movs	r0, #10
 800179c:	f003 f87e 	bl	800489c <HAL_Delay>
	// init display, 11 digits 17 segments
	data = 0b00000111; // command 1, 11 digits 17 segments
 80017a0:	2307      	movs	r3, #7
 80017a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ac:	488e      	ldr	r0, [pc, #568]	; (80019e8 <do_vfd_init+0x310>)
 80017ae:	f003 fb42 	bl	8004e36 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80017b2:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	2201      	movs	r2, #1
 80017bc:	488c      	ldr	r0, [pc, #560]	; (80019f0 <do_vfd_init+0x318>)
 80017be:	f006 fd73 	bl	80082a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c8:	4887      	ldr	r0, [pc, #540]	; (80019e8 <do_vfd_init+0x310>)
 80017ca:	f003 fb34 	bl	8004e36 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017ce:	200a      	movs	r0, #10
 80017d0:	f003 f864 	bl	800489c <HAL_Delay>

	for (uint8_t i = 0; i <= 0b111; i++) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80017da:	e02f      	b.n	800183c <do_vfd_init+0x164>
		data = 0b10000000; // command 4
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		data |= 1 << 3; // enable/disable display
 80017e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		data |= i; // set brightness
 80017f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80017f4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001806:	4878      	ldr	r0, [pc, #480]	; (80019e8 <do_vfd_init+0x310>)
 8001808:	f003 fb15 	bl	8004e36 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800180c:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	2201      	movs	r2, #1
 8001816:	4876      	ldr	r0, [pc, #472]	; (80019f0 <do_vfd_init+0x318>)
 8001818:	f006 fd46 	bl	80082a8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001822:	4871      	ldr	r0, [pc, #452]	; (80019e8 <do_vfd_init+0x310>)
 8001824:	f003 fb07 	bl	8004e36 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8001828:	20fa      	movs	r0, #250	; 0xfa
 800182a:	f003 f837 	bl	800489c <HAL_Delay>
		do_microrl();
 800182e:	f7ff ff39 	bl	80016a4 <do_microrl>
	for (uint8_t i = 0; i <= 0b111; i++) {
 8001832:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001836:	3301      	adds	r3, #1
 8001838:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800183c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001840:	2b07      	cmp	r3, #7
 8001842:	d9cb      	bls.n	80017dc <do_vfd_init+0x104>
	}

	for (int i = 0; i < 11; i++) {
 8001844:	2300      	movs	r3, #0
 8001846:	657b      	str	r3, [r7, #84]	; 0x54
 8001848:	e01c      	b.n	8001884 <do_vfd_init+0x1ac>
		for (int b = 0; b < 3; b++) // erasing from right to left
 800184a:	2300      	movs	r3, #0
 800184c:	653b      	str	r3, [r7, #80]	; 0x50
 800184e:	e00c      	b.n	800186a <do_vfd_init+0x192>
		{
			vfd.arr2[i][b] = 0;
 8001850:	4966      	ldr	r1, [pc, #408]	; (80019ec <do_vfd_init+0x314>)
 8001852:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	18ca      	adds	r2, r1, r3
 800185c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800185e:	4413      	add	r3, r2
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++) // erasing from right to left
 8001864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001866:	3301      	adds	r3, #1
 8001868:	653b      	str	r3, [r7, #80]	; 0x50
 800186a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800186c:	2b02      	cmp	r3, #2
 800186e:	ddef      	ble.n	8001850 <do_vfd_init+0x178>
		}
		vfd_update();
 8001870:	f7ff feee 	bl	8001650 <vfd_update>
		HAL_Delay(150);
 8001874:	2096      	movs	r0, #150	; 0x96
 8001876:	f003 f811 	bl	800489c <HAL_Delay>
		do_microrl();
 800187a:	f7ff ff13 	bl	80016a4 <do_microrl>
	for (int i = 0; i < 11; i++) {
 800187e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001880:	3301      	adds	r3, #1
 8001882:	657b      	str	r3, [r7, #84]	; 0x54
 8001884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001886:	2b0a      	cmp	r3, #10
 8001888:	dddf      	ble.n	800184a <do_vfd_init+0x172>
	}
	HAL_Delay(500);
 800188a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800188e:	f003 f805 	bl	800489c <HAL_Delay>
	do_microrl();
 8001892:	f7ff ff07 	bl	80016a4 <do_microrl>

	//erase everything... just in case
	clr_vfd();
 8001896:	f002 ff1f 	bl	80046d8 <clr_vfd>

	// fill everything
	for (int j = 1; j < 15; j++) {
 800189a:	2301      	movs	r3, #1
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800189e:	e03b      	b.n	8001918 <do_vfd_init+0x240>
		uint32_t temp = 1 << j;
 80018a0:	2201      	movs	r2, #1
 80018a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	63bb      	str	r3, [r7, #56]	; 0x38
		for (int i = 1; i < 11; i++) {
 80018aa:	2301      	movs	r3, #1
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ae:	e026      	b.n	80018fe <do_vfd_init+0x226>
			for (int b = 0; b < 3; b++) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
 80018b4:	e01d      	b.n	80018f2 <do_vfd_init+0x21a>
				vfd.arr2[i][b] |= (temp >> (b << 3)) & 0xFF;
 80018b6:	494d      	ldr	r1, [pc, #308]	; (80019ec <do_vfd_init+0x314>)
 80018b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	18ca      	adds	r2, r1, r3
 80018c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c4:	4413      	add	r3, r2
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018ce:	fa21 f303 	lsr.w	r3, r1, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b2d8      	uxtb	r0, r3
 80018d8:	4944      	ldr	r1, [pc, #272]	; (80019ec <do_vfd_init+0x314>)
 80018da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	18ca      	adds	r2, r1, r3
 80018e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e6:	4413      	add	r3, r2
 80018e8:	4602      	mov	r2, r0
 80018ea:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++) {
 80018ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ee:	3301      	adds	r3, #1
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
 80018f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	ddde      	ble.n	80018b6 <do_vfd_init+0x1de>
		for (int i = 1; i < 11; i++) {
 80018f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018fa:	3301      	adds	r3, #1
 80018fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80018fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001900:	2b0a      	cmp	r3, #10
 8001902:	ddd5      	ble.n	80018b0 <do_vfd_init+0x1d8>
			}
		}
		vfd_update();
 8001904:	f7ff fea4 	bl	8001650 <vfd_update>
		HAL_Delay(100);
 8001908:	2064      	movs	r0, #100	; 0x64
 800190a:	f002 ffc7 	bl	800489c <HAL_Delay>
		do_microrl();
 800190e:	f7ff fec9 	bl	80016a4 <do_microrl>
	for (int j = 1; j < 15; j++) {
 8001912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001914:	3301      	adds	r3, #1
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191a:	2b0e      	cmp	r3, #14
 800191c:	ddc0      	ble.n	80018a0 <do_vfd_init+0x1c8>
	}

	const uint8_t arr[][2] = {
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <do_vfd_init+0x31c>)
 8001920:	1d3c      	adds	r4, r7, #4
 8001922:	461d      	mov	r5, r3
 8001924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001930:	682b      	ldr	r3, [r5, #0]
 8001932:	8023      	strh	r3, [r4, #0]
			{ 9, 16 },
			{ 10, 16 },
			{ 10, 15 },
	};

	for (int j = 0; j < sizeof(arr) / 2; j++) {
 8001934:	2300      	movs	r3, #0
 8001936:	643b      	str	r3, [r7, #64]	; 0x40
 8001938:	e047      	b.n	80019ca <do_vfd_init+0x2f2>
		for (int b = 0; b < 3; b++)
 800193a:	2300      	movs	r3, #0
 800193c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800193e:	e037      	b.n	80019b0 <do_vfd_init+0x2d8>
			vfd.arr2[arr[j][0]][b] |= ((1 << arr[j][1]) >> (b << 3)) & 0xFF;
 8001940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001948:	4413      	add	r3, r2
 800194a:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 800194e:	4619      	mov	r1, r3
 8001950:	4a26      	ldr	r2, [pc, #152]	; (80019ec <do_vfd_init+0x314>)
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	441a      	add	r2, r3
 800195a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800195c:	4413      	add	r3, r2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b25a      	sxtb	r2, r3
 8001962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800196a:	440b      	add	r3, r1
 800196c:	f813 3c5b 	ldrb.w	r3, [r3, #-91]
 8001970:	4619      	mov	r1, r3
 8001972:	2301      	movs	r3, #1
 8001974:	fa03 f101 	lsl.w	r1, r3, r1
 8001978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	fa41 f303 	asr.w	r3, r1, r3
 8001980:	b25b      	sxtb	r3, r3
 8001982:	4313      	orrs	r3, r2
 8001984:	b25a      	sxtb	r2, r3
 8001986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800198e:	440b      	add	r3, r1
 8001990:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8001994:	4619      	mov	r1, r3
 8001996:	b2d0      	uxtb	r0, r2
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <do_vfd_init+0x314>)
 800199a:	460b      	mov	r3, r1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	440b      	add	r3, r1
 80019a0:	441a      	add	r2, r3
 80019a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a4:	4413      	add	r3, r2
 80019a6:	4602      	mov	r2, r0
 80019a8:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 80019aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ac:	3301      	adds	r3, #1
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	ddc4      	ble.n	8001940 <do_vfd_init+0x268>
		vfd_update();
 80019b6:	f7ff fe4b 	bl	8001650 <vfd_update>
		HAL_Delay(70);
 80019ba:	2046      	movs	r0, #70	; 0x46
 80019bc:	f002 ff6e 	bl	800489c <HAL_Delay>
		do_microrl();
 80019c0:	f7ff fe70 	bl	80016a4 <do_microrl>
	for (int j = 0; j < sizeof(arr) / 2; j++) {
 80019c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c6:	3301      	adds	r3, #1
 80019c8:	643b      	str	r3, [r7, #64]	; 0x40
 80019ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019cc:	2b18      	cmp	r3, #24
 80019ce:	d9b4      	bls.n	800193a <do_vfd_init+0x262>
	}

	HAL_Delay(300);
 80019d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019d4:	f002 ff62 	bl	800489c <HAL_Delay>

	//erase everything... just in case
	clr_vfd();
 80019d8:	f002 fe7e 	bl	80046d8 <clr_vfd>

	vfd_update();
 80019dc:	f7ff fe38 	bl	8001650 <vfd_update>
}
 80019e0:	bf00      	nop
 80019e2:	3760      	adds	r7, #96	; 0x60
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdb0      	pop	{r4, r5, r7, pc}
 80019e8:	40010c00 	.word	0x40010c00
 80019ec:	20000750 	.word	0x20000750
 80019f0:	20000614 	.word	0x20000614
 80019f4:	0800d53c 	.word	0x0800d53c

080019f8 <do_brightness>:

void do_brightness(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
	uint8_t data;
	static uint32_t last_time = 0;
	if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))
 80019fe:	2104      	movs	r1, #4
 8001a00:	4841      	ldr	r0, [pc, #260]	; (8001b08 <do_brightness+0x110>)
 8001a02:	f003 fa01 	bl	8004e08 <HAL_GPIO_ReadPin>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d078      	beq.n	8001afe <do_brightness+0x106>
	{
		// update only if pause shorter than 2 sec
		if (HAL_GetTick() - last_time < 2000)
 8001a0c:	f002 ff3c 	bl	8004888 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <do_brightness+0x114>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a1c:	d210      	bcs.n	8001a40 <do_brightness+0x48>
		{
			brightness = (brightness - 1)&0b111;
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <do_brightness+0x118>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <do_brightness+0x118>)
 8001a2e:	701a      	strb	r2, [r3, #0]
			d3231_set_A2M2(0b111-brightness);
 8001a30:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <do_brightness+0x118>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	f1c3 0307 	rsb	r3, r3, #7
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fcd0 	bl	80013e0 <d3231_set_A2M2>
		}

		save_vfd();
 8001a40:	f002 fe64 	bl	800470c <save_vfd>
		clr_vfd();
 8001a44:	f002 fe48 	bl	80046d8 <clr_vfd>
		uint32_t bits = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
		for (int i = 2; i < 1 + 2 + brightness; i++)
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	e00a      	b.n	8001a68 <do_brightness+0x70>
			bits |= 1<<i;
 8001a52:	2201      	movs	r2, #1
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
		for (int i = 2; i < 1 + 2 + brightness; i++)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <do_brightness+0x118>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	ddee      	ble.n	8001a52 <do_brightness+0x5a>
		symbols_vfd(bits);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f002 fd9f 	bl	80045b8 <symbols_vfd>
		str2vfd("BRIGHTNESS");
 8001a7a:	4826      	ldr	r0, [pc, #152]	; (8001b14 <do_brightness+0x11c>)
 8001a7c:	f002 fd16 	bl	80044ac <str2vfd>
		vfd_update();
 8001a80:	f7ff fde6 	bl	8001650 <vfd_update>

		data = 0b10000000; // command 4
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	71fb      	strb	r3, [r7, #7]
		data |= 1<<3; // enable/disable display
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	71fb      	strb	r3, [r7, #7]
		data |= brightness&0b111; // set brightness
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <do_brightness+0x118>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	b25a      	sxtb	r2, r3
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b25b      	sxtb	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab0:	4815      	ldr	r0, [pc, #84]	; (8001b08 <do_brightness+0x110>)
 8001ab2:	f003 f9c0 	bl	8004e36 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8001ab6:	1df9      	adds	r1, r7, #7
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	2201      	movs	r2, #1
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <do_brightness+0x120>)
 8001ac0:	f006 fbf2 	bl	80082a8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aca:	480f      	ldr	r0, [pc, #60]	; (8001b08 <do_brightness+0x110>)
 8001acc:	f003 f9b3 	bl	8004e36 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8001ad0:	2014      	movs	r0, #20
 8001ad2:	f002 fee3 	bl	800489c <HAL_Delay>
		while(HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin)); // wait release
 8001ad6:	bf00      	nop
 8001ad8:	2104      	movs	r1, #4
 8001ada:	480b      	ldr	r0, [pc, #44]	; (8001b08 <do_brightness+0x110>)
 8001adc:	f003 f994 	bl	8004e08 <HAL_GPIO_ReadPin>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f8      	bne.n	8001ad8 <do_brightness+0xe0>
		HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	; 0x64
 8001ae8:	f002 fed8 	bl	800489c <HAL_Delay>
		last_time = HAL_GetTick();
 8001aec:	f002 fecc 	bl	8004888 <HAL_GetTick>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <do_brightness+0x114>)
 8001af4:	6013      	str	r3, [r2, #0]
		restore_vfd();
 8001af6:	f002 fe29 	bl	800474c <restore_vfd>
		vfd_update();
 8001afa:	f7ff fda9 	bl	8001650 <vfd_update>
	}
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	20000214 	.word	0x20000214
 8001b10:	20000771 	.word	0x20000771
 8001b14:	0800d570 	.word	0x0800d570
 8001b18:	20000614 	.word	0x20000614

08001b1c <do_clock>:

void do_clock(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 50)
 8001b22:	f002 feb1 	bl	8004888 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <do_clock+0x128>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b31      	cmp	r3, #49	; 0x31
 8001b30:	f240 8084 	bls.w	8001c3c <do_clock+0x120>
		return;
	last_time = HAL_GetTick();
 8001b34:	f002 fea8 	bl	8004888 <HAL_GetTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a42      	ldr	r2, [pc, #264]	; (8001c44 <do_clock+0x128>)
 8001b3c:	6013      	str	r3, [r2, #0]

	if (show_clock)
 8001b3e:	4b42      	ldr	r3, [pc, #264]	; (8001c48 <do_clock+0x12c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d07b      	beq.n	8001c3e <do_clock+0x122>
	{
		uint8_t * time = d3231_get_time();
 8001b46:	f7ff fbfb 	bl	8001340 <d3231_get_time>
 8001b4a:	60f8      	str	r0, [r7, #12]
		uint8_t clock [4];

		static uint8_t old_seconds = 0;
		clock[0] = time[1] & 0xF;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	713b      	strb	r3, [r7, #4]
		clock[1] = (time[1] >> 4) & 0xF;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	717b      	strb	r3, [r7, #5]
		clock[2] = time[2] & 0xF;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3302      	adds	r3, #2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	71bb      	strb	r3, [r7, #6]
		clock[3] = (time[2] >> 4) & 0xF;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3302      	adds	r3, #2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	71fb      	strb	r3, [r7, #7]

		if (time[0] != old_seconds)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <do_clock+0x130>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d058      	beq.n	8001c3e <do_clock+0x122>
		{
			old_seconds = time[0];
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <do_clock+0x130>)
 8001b92:	701a      	strb	r2, [r3, #0]

			//erase everything...
			clr_vfd();
 8001b94:	f002 fda0 	bl	80046d8 <clr_vfd>


			for (int i = 0; i < 4; i++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e024      	b.n	8001be8 <do_clock+0xcc>
			{
				uint16_t buf = get_char(clock[i]);
 8001b9e:	1d3a      	adds	r2, r7, #4
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fc14 	bl	80043d4 <get_char>
 8001bac:	4603      	mov	r3, r0
 8001bae:	817b      	strh	r3, [r7, #10]

				vfd.arr2[4+i][0] = buf & 0xFF;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1d1a      	adds	r2, r3, #4
 8001bb4:	897b      	ldrh	r3, [r7, #10]
 8001bb6:	b2d8      	uxtb	r0, r3
 8001bb8:	4925      	ldr	r1, [pc, #148]	; (8001c50 <do_clock+0x134>)
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	701a      	strb	r2, [r3, #0]
				vfd.arr2[4+i][1] = (buf>>8)&0xFF;
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	1d1a      	adds	r2, r3, #4
 8001bd0:	b2c8      	uxtb	r0, r1
 8001bd2:	491f      	ldr	r1, [pc, #124]	; (8001c50 <do_clock+0x134>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	3301      	adds	r3, #1
 8001bde:	4602      	mov	r2, r0
 8001be0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	ddd7      	ble.n	8001b9e <do_clock+0x82>
			}

			if ((time[0]&0b1) == 0)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11d      	bne.n	8001c36 <do_clock+0x11a>
			{
				for (int b = 0; b < 3; b++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	e017      	b.n	8001c30 <do_clock+0x114>
					vfd.arr2[6][b] |= ((1<<0)>>(b<<3))&0xFF;
 8001c00:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <do_clock+0x134>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	3312      	adds	r3, #18
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b25a      	sxtb	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa41 f303 	asr.w	r3, r1, r3
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	b25b      	sxtb	r3, r3
 8001c1c:	b2d9      	uxtb	r1, r3
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <do_clock+0x134>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4413      	add	r3, r2
 8001c24:	3312      	adds	r3, #18
 8001c26:	460a      	mov	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
				for (int b = 0; b < 3; b++)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	dde4      	ble.n	8001c00 <do_clock+0xe4>
			}

			vfd_update();
 8001c36:	f7ff fd0b 	bl	8001650 <vfd_update>
 8001c3a:	e000      	b.n	8001c3e <do_clock+0x122>
		return;
 8001c3c:	bf00      	nop
		}
	}
}
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000218 	.word	0x20000218
 8001c48:	2000000d 	.word	0x2000000d
 8001c4c:	2000021c 	.word	0x2000021c
 8001c50:	20000750 	.word	0x20000750

08001c54 <do_text>:

void do_text(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	static uint32_t t2dlen = 0;
	if (HAL_GetTick() - last_time < 300)
 8001c5a:	f002 fe15 	bl	8004888 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <do_text+0xfc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c6a:	d36a      	bcc.n	8001d42 <do_text+0xee>
		return;
	last_time = HAL_GetTick();
 8001c6c:	f002 fe0c 	bl	8004888 <HAL_GetTick>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a37      	ldr	r2, [pc, #220]	; (8001d50 <do_text+0xfc>)
 8001c74:	6013      	str	r3, [r2, #0]

	if (show_clock)
 8001c76:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <do_text+0x100>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d163      	bne.n	8001d46 <do_text+0xf2>
		return;

	static int16_t pos = 0;

	if (fresh_txt)
 8001c7e:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <do_text+0x104>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d033      	beq.n	8001cee <do_text+0x9a>
	{
		fresh_txt = false;
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <do_text+0x104>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
		pos = 0;
 8001c8c:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <do_text+0x108>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	801a      	strh	r2, [r3, #0]
		t2dlen = strlen(txt2disp);
 8001c92:	4833      	ldr	r0, [pc, #204]	; (8001d60 <do_text+0x10c>)
 8001c94:	f7fe fa64 	bl	8000160 <strlen>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a32      	ldr	r2, [pc, #200]	; (8001d64 <do_text+0x110>)
 8001c9c:	6013      	str	r3, [r2, #0]
		// if text too long add spaces before
		if (t2dlen > 10)
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <do_text+0x110>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b0a      	cmp	r3, #10
 8001ca4:	d923      	bls.n	8001cee <do_text+0x9a>
		{
			for (int i = sizeof(txt2disp) - 11; i >= 0; i--)
 8001ca6:	2375      	movs	r3, #117	; 0x75
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	e00a      	b.n	8001cc2 <do_text+0x6e>
				txt2disp[i + 10] = txt2disp[i];
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	330a      	adds	r3, #10
 8001cb0:	492b      	ldr	r1, [pc, #172]	; (8001d60 <do_text+0x10c>)
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	440a      	add	r2, r1
 8001cb6:	7811      	ldrb	r1, [r2, #0]
 8001cb8:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <do_text+0x10c>)
 8001cba:	54d1      	strb	r1, [r2, r3]
			for (int i = sizeof(txt2disp) - 11; i >= 0; i--)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	daf1      	bge.n	8001cac <do_text+0x58>
			for (int i = 0; i < 10; i ++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	e007      	b.n	8001cde <do_text+0x8a>
				txt2disp[i] = ' ';
 8001cce:	4a24      	ldr	r2, [pc, #144]	; (8001d60 <do_text+0x10c>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 10; i ++)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	ddf4      	ble.n	8001cce <do_text+0x7a>
			t2dlen += 10;
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <do_text+0x110>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	330a      	adds	r3, #10
 8001cea:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <do_text+0x110>)
 8001cec:	6013      	str	r3, [r2, #0]
		}
	}

	clr_vfd();
 8001cee:	f002 fcf3 	bl	80046d8 <clr_vfd>
	str2vfd(&txt2disp[pos]);
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <do_text+0x108>)
 8001cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <do_text+0x10c>)
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fbd4 	bl	80044ac <str2vfd>
	if (t2dlen > 10) // scroll long text
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <do_text+0x110>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b0a      	cmp	r3, #10
 8001d0a:	d917      	bls.n	8001d3c <do_text+0xe8>
	{
		if (pos < t2dlen)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <do_text+0x108>)
 8001d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <do_text+0x110>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d209      	bcs.n	8001d30 <do_text+0xdc>
			pos += 1;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <do_text+0x108>)
 8001d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b21a      	sxth	r2, r3
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <do_text+0x108>)
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	e002      	b.n	8001d36 <do_text+0xe2>
		else
			pos = 0;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <do_text+0x108>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	801a      	strh	r2, [r3, #0]
		symbols_vfd(0b11);
 8001d36:	2003      	movs	r0, #3
 8001d38:	f002 fc3e 	bl	80045b8 <symbols_vfd>
		//symbols_vfd(1<<(19+((tick++)&0b11)));
	}
	vfd_update();
 8001d3c:	f7ff fc88 	bl	8001650 <vfd_update>
 8001d40:	e002      	b.n	8001d48 <do_text+0xf4>
		return;
 8001d42:	bf00      	nop
 8001d44:	e000      	b.n	8001d48 <do_text+0xf4>
		return;
 8001d46:	bf00      	nop
}
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000220 	.word	0x20000220
 8001d54:	2000000d 	.word	0x2000000d
 8001d58:	2000074c 	.word	0x2000074c
 8001d5c:	20000224 	.word	0x20000224
 8001d60:	200006cc 	.word	0x200006cc
 8001d64:	20000228 	.word	0x20000228

08001d68 <do_leds>:

void do_leds(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	static uint8_t tick_counter = 0;
	if (HAL_GetTick() - last_time < 500)
 8001d6e:	f002 fd8b 	bl	8004888 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <do_leds+0xe4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d7e:	d360      	bcc.n	8001e42 <do_leds+0xda>
		return;
	last_time = HAL_GetTick();
 8001d80:	f002 fd82 	bl	8004888 <HAL_GetTick>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a31      	ldr	r2, [pc, #196]	; (8001e4c <do_leds+0xe4>)
 8001d88:	6013      	str	r3, [r2, #0]
	if (use_leds)
 8001d8a:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <do_leds+0xe8>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d032      	beq.n	8001df8 <do_leds+0x90>
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d96:	482f      	ldr	r0, [pc, #188]	; (8001e54 <do_leds+0xec>)
 8001d98:	f003 f865 	bl	8004e66 <HAL_GPIO_TogglePin>

		uint8_t data = 0b01000001; // command 2, write to LED port
 8001d9c:	2341      	movs	r3, #65	; 0x41
 8001d9e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da6:	482c      	ldr	r0, [pc, #176]	; (8001e58 <do_leds+0xf0>)
 8001da8:	f003 f845 	bl	8004e36 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8001dac:	1df9      	adds	r1, r7, #7
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	2201      	movs	r2, #1
 8001db4:	4829      	ldr	r0, [pc, #164]	; (8001e5c <do_leds+0xf4>)
 8001db6:	f006 fa77 	bl	80082a8 <HAL_SPI_Transmit>

		data = ~(1<<((tick_counter++ >> 1)&0b11));
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <do_leds+0xf8>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	b2d1      	uxtb	r1, r2
 8001dc2:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <do_leds+0xf8>)
 8001dc4:	7011      	strb	r1, [r2, #0]
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2201      	movs	r2, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	71fb      	strb	r3, [r7, #7]

		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8001ddc:	1df9      	adds	r1, r7, #7
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	2201      	movs	r2, #1
 8001de4:	481d      	ldr	r0, [pc, #116]	; (8001e5c <do_leds+0xf4>)
 8001de6:	f006 fa5f 	bl	80082a8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df0:	4819      	ldr	r0, [pc, #100]	; (8001e58 <do_leds+0xf0>)
 8001df2:	f003 f820 	bl	8004e36 <HAL_GPIO_WritePin>
 8001df6:	e025      	b.n	8001e44 <do_leds+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dfe:	4815      	ldr	r0, [pc, #84]	; (8001e54 <do_leds+0xec>)
 8001e00:	f003 f819 	bl	8004e36 <HAL_GPIO_WritePin>
		uint8_t data = 0b01000001; // command 2, write to LED port
 8001e04:	2341      	movs	r3, #65	; 0x41
 8001e06:	71bb      	strb	r3, [r7, #6]
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e0e:	4812      	ldr	r0, [pc, #72]	; (8001e58 <do_leds+0xf0>)
 8001e10:	f003 f811 	bl	8004e36 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8001e14:	1db9      	adds	r1, r7, #6
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	480f      	ldr	r0, [pc, #60]	; (8001e5c <do_leds+0xf4>)
 8001e1e:	f006 fa43 	bl	80082a8 <HAL_SPI_Transmit>

		data = 0b1111; // disable all leds
 8001e22:	230f      	movs	r3, #15
 8001e24:	71bb      	strb	r3, [r7, #6]

		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8001e26:	1db9      	adds	r1, r7, #6
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <do_leds+0xf4>)
 8001e30:	f006 fa3a 	bl	80082a8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3a:	4807      	ldr	r0, [pc, #28]	; (8001e58 <do_leds+0xf0>)
 8001e3c:	f002 fffb 	bl	8004e36 <HAL_GPIO_WritePin>
 8001e40:	e000      	b.n	8001e44 <do_leds+0xdc>
		return;
 8001e42:	bf00      	nop
	}


}
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000022c 	.word	0x2000022c
 8001e50:	20000239 	.word	0x20000239
 8001e54:	40011000 	.word	0x40011000
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	20000614 	.word	0x20000614
 8001e60:	20000230 	.word	0x20000230

08001e64 <update_thp>:
		show_clock = true;
	}
}

void update_thp(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af02      	add	r7, sp, #8
	int8_t rslt;
	uint8_t settings_sel;
	uint32_t req_delay;

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8001e6a:	4b6d      	ldr	r3, [pc, #436]	; (8002020 <update_thp+0x1bc>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	dev.settings.osr_p = BME280_OVERSAMPLING_1X;
 8001e72:	4b6b      	ldr	r3, [pc, #428]	; (8002020 <update_thp+0x1bc>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dev.settings.osr_t = BME280_OVERSAMPLING_1X;
 8001e7a:	4b69      	ldr	r3, [pc, #420]	; (8002020 <update_thp+0x1bc>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	dev.settings.filter = BME280_FILTER_COEFF_OFF;
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <update_thp+0x1bc>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	settings_sel = BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL;
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	71fb      	strb	r3, [r7, #7]

	rslt = bme280_set_sensor_settings(settings_sel, &dev);
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	4963      	ldr	r1, [pc, #396]	; (8002020 <update_thp+0x1bc>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fa71 	bl	800037a <bme280_set_sensor_settings>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71bb      	strb	r3, [r7, #6]

	/*Calculate the minimum delay required between consecutive measurement based upon the sensor enabled
	 *  and the oversampling configuration. */
	req_delay = bme280_cal_meas_delay(&dev.settings);
 8001e9c:	4861      	ldr	r0, [pc, #388]	; (8002024 <update_thp+0x1c0>)
 8001e9e:	f7fe fc45 	bl	800072c <bme280_cal_meas_delay>
 8001ea2:	6038      	str	r0, [r7, #0]

	rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8001ea4:	495e      	ldr	r1, [pc, #376]	; (8002020 <update_thp+0x1bc>)
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f7fe fabc 	bl	8000424 <bme280_set_sensor_mode>
 8001eac:	4603      	mov	r3, r0
 8001eae:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(req_delay+5); // just in case some longer delay
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3305      	adds	r3, #5
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fcf1 	bl	800489c <HAL_Delay>
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8001eba:	4a59      	ldr	r2, [pc, #356]	; (8002020 <update_thp+0x1bc>)
 8001ebc:	495a      	ldr	r1, [pc, #360]	; (8002028 <update_thp+0x1c4>)
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	f7fe fb5c 	bl	800057c <bme280_get_sensor_data>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71bb      	strb	r3, [r7, #6]

	// do some data preparation
	comp_data.humidity = comp_data.humidity*10/1024;
 8001ec8:	4b57      	ldr	r3, [pc, #348]	; (8002028 <update_thp+0x1c4>)
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	0a9b      	lsrs	r3, r3, #10
 8001ed6:	4a54      	ldr	r2, [pc, #336]	; (8002028 <update_thp+0x1c4>)
 8001ed8:	6093      	str	r3, [r2, #8]
	comp_data.temperature = (comp_data.temperature + 5)/10;
 8001eda:	4b53      	ldr	r3, [pc, #332]	; (8002028 <update_thp+0x1c4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	3305      	adds	r3, #5
 8001ee0:	4a52      	ldr	r2, [pc, #328]	; (800202c <update_thp+0x1c8>)
 8001ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee6:	1092      	asrs	r2, r2, #2
 8001ee8:	17db      	asrs	r3, r3, #31
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4a4e      	ldr	r2, [pc, #312]	; (8002028 <update_thp+0x1c4>)
 8001eee:	6053      	str	r3, [r2, #4]
	comp_data.pressure  = (comp_data.pressure + 5)/10;
 8001ef0:	4b4d      	ldr	r3, [pc, #308]	; (8002028 <update_thp+0x1c4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	3305      	adds	r3, #5
 8001ef6:	4a4e      	ldr	r2, [pc, #312]	; (8002030 <update_thp+0x1cc>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	08db      	lsrs	r3, r3, #3
 8001efe:	4a4a      	ldr	r2, [pc, #296]	; (8002028 <update_thp+0x1c4>)
 8001f00:	6013      	str	r3, [r2, #0]

	snprintf(bme280_ascii.temperature, 11,
			"%+5d.%d %cC",
			(int16_t)comp_data.temperature/10,
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <update_thp+0x1c4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	b21b      	sxth	r3, r3
	snprintf(bme280_ascii.temperature, 11,
 8001f08:	4a48      	ldr	r2, [pc, #288]	; (800202c <update_thp+0x1c8>)
 8001f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f0e:	1092      	asrs	r2, r2, #2
 8001f10:	17db      	asrs	r3, r3, #31
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4618      	mov	r0, r3
			(int16_t)comp_data.temperature%10,
 8001f18:	4b43      	ldr	r3, [pc, #268]	; (8002028 <update_thp+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	b21a      	sxth	r2, r3
	snprintf(bme280_ascii.temperature, 11,
 8001f1e:	4b43      	ldr	r3, [pc, #268]	; (800202c <update_thp+0x1c8>)
 8001f20:	fb83 1302 	smull	r1, r3, r3, r2
 8001f24:	1099      	asrs	r1, r3, #2
 8001f26:	17d3      	asrs	r3, r2, #31
 8001f28:	1ac9      	subs	r1, r1, r3
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	23b0      	movs	r3, #176	; 0xb0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	9200      	str	r2, [sp, #0]
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4a3c      	ldr	r2, [pc, #240]	; (8002034 <update_thp+0x1d0>)
 8001f42:	210b      	movs	r1, #11
 8001f44:	483c      	ldr	r0, [pc, #240]	; (8002038 <update_thp+0x1d4>)
 8001f46:	f00a fe95 	bl	800cc74 <sniprintf>
			176);

	snprintf(bme280_ascii.humidity, 11,
			"%4d.%d%% RH",
			(int16_t)comp_data.humidity/10,
 8001f4a:	4b37      	ldr	r3, [pc, #220]	; (8002028 <update_thp+0x1c4>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	b21b      	sxth	r3, r3
	snprintf(bme280_ascii.humidity, 11,
 8001f50:	4a36      	ldr	r2, [pc, #216]	; (800202c <update_thp+0x1c8>)
 8001f52:	fb82 1203 	smull	r1, r2, r2, r3
 8001f56:	1092      	asrs	r2, r2, #2
 8001f58:	17db      	asrs	r3, r3, #31
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	4618      	mov	r0, r3
			(int16_t)comp_data.humidity%10);
 8001f60:	4b31      	ldr	r3, [pc, #196]	; (8002028 <update_thp+0x1c4>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	b21a      	sxth	r2, r3
	snprintf(bme280_ascii.humidity, 11,
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <update_thp+0x1c8>)
 8001f68:	fb83 1302 	smull	r1, r3, r3, r2
 8001f6c:	1099      	asrs	r1, r3, #2
 8001f6e:	17d3      	asrs	r3, r2, #31
 8001f70:	1ac9      	subs	r1, r1, r3
 8001f72:	460b      	mov	r3, r1
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4603      	mov	r3, r0
 8001f82:	4a2e      	ldr	r2, [pc, #184]	; (800203c <update_thp+0x1d8>)
 8001f84:	210b      	movs	r1, #11
 8001f86:	482e      	ldr	r0, [pc, #184]	; (8002040 <update_thp+0x1dc>)
 8001f88:	f00a fe74 	bl	800cc74 <sniprintf>

	snprintf(bme280_ascii.pressure, 11,
			"%4d.%d hPa",
			(int16_t)comp_data.pressure/10,
 8001f8c:	4b26      	ldr	r3, [pc, #152]	; (8002028 <update_thp+0x1c4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b21b      	sxth	r3, r3
	snprintf(bme280_ascii.pressure, 11,
 8001f92:	4a26      	ldr	r2, [pc, #152]	; (800202c <update_thp+0x1c8>)
 8001f94:	fb82 1203 	smull	r1, r2, r2, r3
 8001f98:	1092      	asrs	r2, r2, #2
 8001f9a:	17db      	asrs	r3, r3, #31
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	4618      	mov	r0, r3
			(int16_t)comp_data.pressure%10);
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <update_thp+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b21a      	sxth	r2, r3
	snprintf(bme280_ascii.pressure, 11,
 8001fa8:	4b20      	ldr	r3, [pc, #128]	; (800202c <update_thp+0x1c8>)
 8001faa:	fb83 1302 	smull	r1, r3, r3, r2
 8001fae:	1099      	asrs	r1, r3, #2
 8001fb0:	17d3      	asrs	r3, r2, #31
 8001fb2:	1ac9      	subs	r1, r1, r3
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <update_thp+0x1e0>)
 8001fc6:	210b      	movs	r1, #11
 8001fc8:	481f      	ldr	r0, [pc, #124]	; (8002048 <update_thp+0x1e4>)
 8001fca:	f00a fe53 	bl	800cc74 <sniprintf>

	strcpy(bme280_ascii.all, bme280_ascii.temperature);
 8001fce:	491a      	ldr	r1, [pc, #104]	; (8002038 <update_thp+0x1d4>)
 8001fd0:	481e      	ldr	r0, [pc, #120]	; (800204c <update_thp+0x1e8>)
 8001fd2:	f00a fe92 	bl	800ccfa <strcpy>
	strcat(bme280_ascii.all, "; ");
 8001fd6:	481d      	ldr	r0, [pc, #116]	; (800204c <update_thp+0x1e8>)
 8001fd8:	f7fe f8c2 	bl	8000160 <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <update_thp+0x1e8>)
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <update_thp+0x1ec>)
 8001fe6:	8811      	ldrh	r1, [r2, #0]
 8001fe8:	7892      	ldrb	r2, [r2, #2]
 8001fea:	8019      	strh	r1, [r3, #0]
 8001fec:	709a      	strb	r2, [r3, #2]
	strcat(bme280_ascii.all, bme280_ascii.humidity);
 8001fee:	4914      	ldr	r1, [pc, #80]	; (8002040 <update_thp+0x1dc>)
 8001ff0:	4816      	ldr	r0, [pc, #88]	; (800204c <update_thp+0x1e8>)
 8001ff2:	f00a fe73 	bl	800ccdc <strcat>
	strcat(bme280_ascii.all, "; ");
 8001ff6:	4815      	ldr	r0, [pc, #84]	; (800204c <update_thp+0x1e8>)
 8001ff8:	f7fe f8b2 	bl	8000160 <strlen>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <update_thp+0x1e8>)
 8002002:	4413      	add	r3, r2
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <update_thp+0x1ec>)
 8002006:	8811      	ldrh	r1, [r2, #0]
 8002008:	7892      	ldrb	r2, [r2, #2]
 800200a:	8019      	strh	r1, [r3, #0]
 800200c:	709a      	strb	r2, [r3, #2]
	strcat(bme280_ascii.all, bme280_ascii.pressure);
 800200e:	490e      	ldr	r1, [pc, #56]	; (8002048 <update_thp+0x1e4>)
 8002010:	480e      	ldr	r0, [pc, #56]	; (800204c <update_thp+0x1e8>)
 8002012:	f00a fe63 	bl	800ccdc <strcat>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200005cc 	.word	0x200005cc
 8002024:	2000060c 	.word	0x2000060c
 8002028:	200006c0 	.word	0x200006c0
 800202c:	66666667 	.word	0x66666667
 8002030:	cccccccd 	.word	0xcccccccd
 8002034:	0800d57c 	.word	0x0800d57c
 8002038:	20000480 	.word	0x20000480
 800203c:	0800d588 	.word	0x0800d588
 8002040:	2000048b 	.word	0x2000048b
 8002044:	0800d594 	.word	0x0800d594
 8002048:	20000496 	.word	0x20000496
 800204c:	200004a1 	.word	0x200004a1
 8002050:	0800d5a0 	.word	0x0800d5a0

08002054 <do_measurements>:

void do_measurements(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 200)
 8002058:	f002 fc16 	bl	8004888 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <do_measurements+0x78>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2bc7      	cmp	r3, #199	; 0xc7
 8002066:	d92f      	bls.n	80020c8 <do_measurements+0x74>
		return;

	while(HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)) // wait release
 8002068:	e021      	b.n	80020ae <do_measurements+0x5a>
	{
		update_thp();
 800206a:	f7ff fefb 	bl	8001e64 <update_thp>

		clr_vfd();
 800206e:	f002 fb33 	bl	80046d8 <clr_vfd>

		str2vfd(bme280_ascii.temperature);
 8002072:	4817      	ldr	r0, [pc, #92]	; (80020d0 <do_measurements+0x7c>)
 8002074:	f002 fa1a 	bl	80044ac <str2vfd>
		vfd_update();
 8002078:	f7ff faea 	bl	8001650 <vfd_update>
		HAL_Delay(2000);
 800207c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002080:	f002 fc0c 	bl	800489c <HAL_Delay>
		str2vfd(bme280_ascii.humidity);
 8002084:	4813      	ldr	r0, [pc, #76]	; (80020d4 <do_measurements+0x80>)
 8002086:	f002 fa11 	bl	80044ac <str2vfd>
		vfd_update();
 800208a:	f7ff fae1 	bl	8001650 <vfd_update>
		HAL_Delay(2000);
 800208e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002092:	f002 fc03 	bl	800489c <HAL_Delay>
		str2vfd(bme280_ascii.pressure);
 8002096:	4810      	ldr	r0, [pc, #64]	; (80020d8 <do_measurements+0x84>)
 8002098:	f002 fa08 	bl	80044ac <str2vfd>
		vfd_update();
 800209c:	f7ff fad8 	bl	8001650 <vfd_update>
		HAL_Delay(2000);
 80020a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020a4:	f002 fbfa 	bl	800489c <HAL_Delay>

		show_clock = true;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <do_measurements+0x88>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)) // wait release
 80020ae:	2102      	movs	r1, #2
 80020b0:	480b      	ldr	r0, [pc, #44]	; (80020e0 <do_measurements+0x8c>)
 80020b2:	f002 fea9 	bl	8004e08 <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1d6      	bne.n	800206a <do_measurements+0x16>
	}

	last_time = HAL_GetTick();
 80020bc:	f002 fbe4 	bl	8004888 <HAL_GetTick>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4a02      	ldr	r2, [pc, #8]	; (80020cc <do_measurements+0x78>)
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e000      	b.n	80020ca <do_measurements+0x76>
		return;
 80020c8:	bf00      	nop
}
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000234 	.word	0x20000234
 80020d0:	20000480 	.word	0x20000480
 80020d4:	2000048b 	.word	0x2000048b
 80020d8:	20000496 	.word	0x20000496
 80020dc:	2000000d 	.word	0x2000000d
 80020e0:	40010c00 	.word	0x40010c00

080020e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80020ea:	f002 fb75 	bl	80047d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80020ee:	f000 f85f 	bl	80021b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80020f2:	f000 f91d 	bl	8002330 <MX_GPIO_Init>
	MX_I2C1_Init();
 80020f6:	f000 f8b7 	bl	8002268 <MX_I2C1_Init>
	MX_SPI2_Init();
 80020fa:	f000 f8e3 	bl	80022c4 <MX_SPI2_Init>
	MX_USB_DEVICE_Init();
 80020fe:	f00a f8b1 	bl	800c264 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, 1); // we have initialized USB, pull it up!
 8002102:	2201      	movs	r2, #1
 8002104:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002108:	4824      	ldr	r0, [pc, #144]	; (800219c <main+0xb8>)
 800210a:	f002 fe94 	bl	8004e36 <HAL_GPIO_WritePin>
	d3231_init(&hi2c1);
 800210e:	4824      	ldr	r0, [pc, #144]	; (80021a0 <main+0xbc>)
 8002110:	f7ff f908 	bl	8001324 <d3231_init>
	init_microrl(); // we are ready for microrl!
 8002114:	f001 fd94 	bl	8003c40 <init_microrl>

	init_bme280_i2c();
 8002118:	f7ff fa70 	bl	80015fc <init_bme280_i2c>

	do_vfd_init(); // nice demo
 800211c:	f7ff fadc 	bl	80016d8 <do_vfd_init>

	d3231_get_all();
 8002120:	f7ff f93e 	bl	80013a0 <d3231_get_all>

	brightness = 0b111-d3231_get_A2M2(); // alarm2 minutes as EEPROM, default max
 8002124:	f7ff f954 	bl	80013d0 <d3231_get_A2M2>
 8002128:	4603      	mov	r3, r0
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <main+0xc0>)
 8002132:	701a      	strb	r2, [r3, #0]

	uint8_t data;

	data = 0b10000000; // command 4
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	71fb      	strb	r3, [r7, #7]
	data |= 1<<3; // enable/disable display
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	b2db      	uxtb	r3, r3
 8002140:	71fb      	strb	r3, [r7, #7]
	data |= brightness&0b111; // set brightness
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <main+0xc0>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b25b      	sxtb	r3, r3
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	b25a      	sxtb	r2, r3
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	b25b      	sxtb	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b25b      	sxtb	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002160:	4811      	ldr	r0, [pc, #68]	; (80021a8 <main+0xc4>)
 8002162:	f002 fe68 	bl	8004e36 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8002166:	1df9      	adds	r1, r7, #7
 8002168:	f04f 33ff 	mov.w	r3, #4294967295
 800216c:	2201      	movs	r2, #1
 800216e:	480f      	ldr	r0, [pc, #60]	; (80021ac <main+0xc8>)
 8002170:	f006 f89a 	bl	80082a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800217a:	480b      	ldr	r0, [pc, #44]	; (80021a8 <main+0xc4>)
 800217c:	f002 fe5b 	bl	8004e36 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		do_microrl();
 8002180:	f7ff fa90 	bl	80016a4 <do_microrl>
		do_brightness();
 8002184:	f7ff fc38 	bl	80019f8 <do_brightness>
		do_clock();
 8002188:	f7ff fcc8 	bl	8001b1c <do_clock>
		do_text();
 800218c:	f7ff fd62 	bl	8001c54 <do_text>
		do_leds();
 8002190:	f7ff fdea 	bl	8001d68 <do_leds>
		do_measurements();
 8002194:	f7ff ff5e 	bl	8002054 <do_measurements>
		do_microrl();
 8002198:	e7f2      	b.n	8002180 <main+0x9c>
 800219a:	bf00      	nop
 800219c:	40010800 	.word	0x40010800
 80021a0:	2000066c 	.word	0x2000066c
 80021a4:	20000771 	.word	0x20000771
 80021a8:	40010c00 	.word	0x40010c00
 80021ac:	20000614 	.word	0x20000614

080021b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b094      	sub	sp, #80	; 0x50
 80021b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ba:	2228      	movs	r2, #40	; 0x28
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f00a fd50 	bl	800cc64 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021e0:	2301      	movs	r3, #1
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80021ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f0:	2301      	movs	r3, #1
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f4:	2302      	movs	r3, #2
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021fc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002202:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002208:	4618      	mov	r0, r3
 800220a:	f005 fb0b 	bl	8007824 <HAL_RCC_OscConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <SystemClock_Config+0x68>
	{
		Error_Handler();
 8002214:	f000 f922 	bl	800245c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002218:	230f      	movs	r3, #15
 800221a:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002228:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	2102      	movs	r1, #2
 8002234:	4618      	mov	r0, r3
 8002236:	f005 fd75 	bl	8007d24 <HAL_RCC_ClockConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002240:	f000 f90c 	bl	800245c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002244:	2310      	movs	r3, #16
 8002246:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	4618      	mov	r0, r3
 8002250:	f005 fef0 	bl	8008034 <HAL_RCCEx_PeriphCLKConfig>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <SystemClock_Config+0xae>
	{
		Error_Handler();
 800225a:	f000 f8ff 	bl	800245c <Error_Handler>
	}
}
 800225e:	bf00      	nop
 8002260:	3750      	adds	r7, #80	; 0x50
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <MX_I2C1_Init+0x50>)
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <MX_I2C1_Init+0x54>)
 8002270:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_I2C1_Init+0x50>)
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <MX_I2C1_Init+0x58>)
 8002276:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <MX_I2C1_Init+0x50>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_I2C1_Init+0x50>)
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <MX_I2C1_Init+0x50>)
 8002286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800228a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <MX_I2C1_Init+0x50>)
 800228e:	2200      	movs	r2, #0
 8002290:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <MX_I2C1_Init+0x50>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <MX_I2C1_Init+0x50>)
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_I2C1_Init+0x50>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022a4:	4804      	ldr	r0, [pc, #16]	; (80022b8 <MX_I2C1_Init+0x50>)
 80022a6:	f002 fdf7 	bl	8004e98 <HAL_I2C_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80022b0:	f000 f8d4 	bl	800245c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000066c 	.word	0x2000066c
 80022bc:	40005400 	.word	0x40005400
 80022c0:	000186a0 	.word	0x000186a0

080022c4 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80022c8:	4b17      	ldr	r3, [pc, #92]	; (8002328 <MX_SPI2_Init+0x64>)
 80022ca:	4a18      	ldr	r2, [pc, #96]	; (800232c <MX_SPI2_Init+0x68>)
 80022cc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <MX_SPI2_Init+0x64>)
 80022d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022d4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <MX_SPI2_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <MX_SPI2_Init+0x64>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <MX_SPI2_Init+0x64>)
 80022e4:	2202      	movs	r2, #2
 80022e6:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <MX_SPI2_Init+0x64>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <MX_SPI2_Init+0x64>)
 80022f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f4:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <MX_SPI2_Init+0x64>)
 80022f8:	2218      	movs	r2, #24
 80022fa:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <MX_SPI2_Init+0x64>)
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <MX_SPI2_Init+0x64>)
 8002304:	2200      	movs	r2, #0
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <MX_SPI2_Init+0x64>)
 800230a:	2200      	movs	r2, #0
 800230c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <MX_SPI2_Init+0x64>)
 8002310:	220a      	movs	r2, #10
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002314:	4804      	ldr	r0, [pc, #16]	; (8002328 <MX_SPI2_Init+0x64>)
 8002316:	f005 ff43 	bl	80081a0 <HAL_SPI_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8002320:	f000 f89c 	bl	800245c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000614 	.word	0x20000614
 800232c:	40003800 	.word	0x40003800

08002330 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002344:	4b41      	ldr	r3, [pc, #260]	; (800244c <MX_GPIO_Init+0x11c>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a40      	ldr	r2, [pc, #256]	; (800244c <MX_GPIO_Init+0x11c>)
 800234a:	f043 0310 	orr.w	r3, r3, #16
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b3e      	ldr	r3, [pc, #248]	; (800244c <MX_GPIO_Init+0x11c>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800235c:	4b3b      	ldr	r3, [pc, #236]	; (800244c <MX_GPIO_Init+0x11c>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a3a      	ldr	r2, [pc, #232]	; (800244c <MX_GPIO_Init+0x11c>)
 8002362:	f043 0320 	orr.w	r3, r3, #32
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b38      	ldr	r3, [pc, #224]	; (800244c <MX_GPIO_Init+0x11c>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002374:	4b35      	ldr	r3, [pc, #212]	; (800244c <MX_GPIO_Init+0x11c>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a34      	ldr	r2, [pc, #208]	; (800244c <MX_GPIO_Init+0x11c>)
 800237a:	f043 0308 	orr.w	r3, r3, #8
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <MX_GPIO_Init+0x11c>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <MX_GPIO_Init+0x11c>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a2e      	ldr	r2, [pc, #184]	; (800244c <MX_GPIO_Init+0x11c>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b2c      	ldr	r3, [pc, #176]	; (800244c <MX_GPIO_Init+0x11c>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023aa:	4829      	ldr	r0, [pc, #164]	; (8002450 <MX_GPIO_Init+0x120>)
 80023ac:	f002 fd43 	bl	8004e36 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|PT6315_STB_Pin, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80023b6:	4827      	ldr	r0, [pc, #156]	; (8002454 <MX_GPIO_Init+0x124>)
 80023b8:	f002 fd3d 	bl	8004e36 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 80023bc:	2200      	movs	r2, #0
 80023be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c2:	4825      	ldr	r0, [pc, #148]	; (8002458 <MX_GPIO_Init+0x128>)
 80023c4:	f002 fd37 	bl	8004e36 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, GPIO_PIN_RESET);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2120      	movs	r1, #32
 80023cc:	4821      	ldr	r0, [pc, #132]	; (8002454 <MX_GPIO_Init+0x124>)
 80023ce:	f002 fd32 	bl	8004e36 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80023d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	2301      	movs	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2302      	movs	r3, #2
 80023e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	4619      	mov	r1, r3
 80023ea:	4819      	ldr	r0, [pc, #100]	; (8002450 <MX_GPIO_Init+0x120>)
 80023ec:	f002 fb88 	bl	8004b00 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB1_Pin PB2_Pin */
	GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 80023f0:	2306      	movs	r3, #6
 80023f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	4619      	mov	r1, r3
 8002402:	4814      	ldr	r0, [pc, #80]	; (8002454 <MX_GPIO_Init+0x124>)
 8002404:	f002 fb7c 	bl	8004b00 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI2_nRF_CSn_Pin HV_EN_Pin PT6315_STB_Pin */
	GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8002408:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 800240c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240e:	2301      	movs	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2302      	movs	r3, #2
 8002418:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	4619      	mov	r1, r3
 8002420:	480c      	ldr	r0, [pc, #48]	; (8002454 <MX_GPIO_Init+0x124>)
 8002422:	f002 fb6d 	bl	8004b00 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PU_Pin */
	GPIO_InitStruct.Pin = USB_PU_Pin;
 8002426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800242a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242c:	2301      	movs	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2302      	movs	r3, #2
 8002436:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <MX_GPIO_Init+0x128>)
 8002440:	f002 fb5e 	bl	8004b00 <HAL_GPIO_Init>

}
 8002444:	bf00      	nop
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	40011000 	.word	0x40011000
 8002454:	40010c00 	.word	0x40010c00
 8002458:	40010800 	.word	0x40010800

0800245c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002460:	b672      	cpsid	i
}
 8002462:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002464:	e7fe      	b.n	8002464 <Error_Handler+0x8>

08002466 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	5c8a      	ldrb	r2, [r1, r2]
 800247a:	4413      	add	r3, r2
 800247c:	3301      	adds	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b3f      	cmp	r3, #63	; 0x3f
 8002484:	dd02      	ble.n	800248c <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3b40      	subs	r3, #64	; 0x40
 800248a:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	5cd3      	ldrb	r3, [r2, r3]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <hist_is_space_for_new+0x1a>
		return true;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e01e      	b.n	80024f4 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	429a      	cmp	r2, r3
 80024c0:	db0c      	blt.n	80024dc <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4413      	add	r3, r2
 80024d0:	3b01      	subs	r3, #1
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	da0c      	bge.n	80024f2 <hist_is_space_for_new+0x56>
			return true;
 80024d8:	2301      	movs	r3, #1
 80024da:	e00b      	b.n	80024f4 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	da01      	bge.n	80024f2 <hist_is_space_for_new+0x56>
			return true;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <hist_is_space_for_new+0x58>
	}
	return false;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b3e      	cmp	r3, #62	; 0x3e
 800250e:	dc61      	bgt.n	80025d4 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8002510:	e002      	b.n	8002518 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff ffa7 	bl	8002466 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff ffbe 	bl	800249c <hist_is_space_for_new>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f5      	beq.n	8002512 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	b2d1      	uxtb	r1, r2
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	da0a      	bge.n	8002562 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	3301      	adds	r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	4618      	mov	r0, r3
 800255c:	f00a fb5a 	bl	800cc14 <memcpy>
 8002560:	e018      	b.n	8002594 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800256a:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	3301      	adds	r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	4618      	mov	r0, r3
 800257c:	f00a fb4a 	bl	800cc14 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	18d1      	adds	r1, r2, r3
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	461a      	mov	r2, r3
 8002590:	f00a fb40 	bl	800cc14 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	b2d1      	uxtb	r1, r2
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	2b3f      	cmp	r3, #63	; 0x3f
 80025b4:	dd05      	ble.n	80025c2 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	2100      	movs	r1, #0
 80025ca:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	649a      	str	r2, [r3, #72]	; 0x48
 80025d2:	e000      	b.n	80025d6 <hist_save_line+0xd8>
		return;
 80025d4:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	; 0x30
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 80025f2:	e010      	b.n	8002616 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002600:	4413      	add	r3, r2
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	2b3f      	cmp	r3, #63	; 0x3f
 8002608:	dd02      	ble.n	8002610 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	3b40      	subs	r3, #64	; 0x40
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002612:	3301      	adds	r3, #1
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	4413      	add	r3, r2
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e8      	bne.n	80025f4 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d176      	bne.n	8002716 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262e:	429a      	cmp	r2, r3
 8002630:	f2c0 80d6 	blt.w	80027e0 <hist_restore_line+0x204>
			int header = pThis->begin;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800263e:	e010      	b.n	8002662 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	4413      	add	r3, r2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264c:	4413      	add	r3, r2
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	2b3f      	cmp	r3, #63	; 0x3f
 8002654:	dd02      	ble.n	800265c <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	3b40      	subs	r3, #64	; 0x40
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	3301      	adds	r3, #1
 8002660:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <hist_restore_line+0xa2>
 800266e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	1e5a      	subs	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267a:	429a      	cmp	r2, r3
 800267c:	d1e0      	bne.n	8002640 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80aa 	beq.w	80027e0 <hist_restore_line+0x204>
					pThis->cur++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	4413      	add	r3, r2
 80026a4:	2b3f      	cmp	r3, #63	; 0x3f
 80026a6:	dc11      	bgt.n	80026cc <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 80026a8:	2265      	movs	r2, #101	; 0x65
 80026aa:	2100      	movs	r1, #0
 80026ac:	68b8      	ldr	r0, [r7, #8]
 80026ae:	f00a fad9 	bl	800cc64 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	3301      	adds	r3, #1
 80026b8:	18d1      	adds	r1, r2, r3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	68b8      	ldr	r0, [r7, #8]
 80026c6:	f00a faa5 	bl	800cc14 <memcpy>
 80026ca:	e01f      	b.n	800270c <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80026d2:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 80026d4:	2265      	movs	r2, #101	; 0x65
 80026d6:	2100      	movs	r1, #0
 80026d8:	68b8      	ldr	r0, [r7, #8]
 80026da:	f00a fac3 	bl	800cc64 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	3301      	adds	r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4619      	mov	r1, r3
 80026ea:	68b8      	ldr	r0, [r7, #8]
 80026ec:	f00a fa92 	bl	800cc14 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	18d0      	adds	r0, r2, r3
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	4413      	add	r3, r2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	461a      	mov	r2, r3
 8002708:	f00a fa84 	bl	800cc14 <memcpy>
				}
				return pThis->ring_buf[header];
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	4413      	add	r3, r2
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	e066      	b.n	80027e4 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271a:	2b00      	cmp	r3, #0
 800271c:	dd5e      	ble.n	80027dc <hist_restore_line+0x200>
				pThis->cur--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002722:	1e5a      	subs	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	61fb      	str	r3, [r7, #28]
			int j = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8002732:	e010      	b.n	8002756 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b3f      	cmp	r3, #63	; 0x3f
 8002748:	dd02      	ble.n	8002750 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3b40      	subs	r3, #64	; 0x40
 800274e:	61fb      	str	r3, [r7, #28]
				j++;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	3301      	adds	r3, #1
 8002754:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <hist_restore_line+0x194>
 8002762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	1ad2      	subs	r2, r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276c:	429a      	cmp	r2, r3
 800276e:	d1e1      	bne.n	8002734 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	2b3f      	cmp	r3, #63	; 0x3f
 8002780:	dc0c      	bgt.n	800279c <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	3301      	adds	r3, #1
 8002788:	18d1      	adds	r1, r2, r3
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	4413      	add	r3, r2
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f00a fa3d 	bl	800cc14 <memcpy>
 800279a:	e01a      	b.n	80027d2 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80027a2:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4619      	mov	r1, r3
 80027b0:	68b8      	ldr	r0, [r7, #8]
 80027b2:	f00a fa2f 	bl	800cc14 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	18d0      	adds	r0, r2, r3
 80027bc:	68f9      	ldr	r1, [r7, #12]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	f00a fa21 	bl	800cc14 <memcpy>
			}
			return pThis->ring_buf[header];
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	e003      	b.n	80027e4 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	e001      	b.n	80027e4 <hist_restore_line+0x208>
		}
	}
	return -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3730      	adds	r7, #48	; 0x30
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
	int i = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
	int ind = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8002800:	e002      	b.n	8002808 <split+0x1c>
			ind++;
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	3301      	adds	r3, #1
 8002806:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	3354      	adds	r3, #84	; 0x54
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <split+0x32>
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	dbf1      	blt.n	8002802 <split+0x16>
		}
		if (!(ind < limit)) return i;
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	db01      	blt.n	800282a <split+0x3e>
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	e024      	b.n	8002874 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	1c58      	adds	r0, r3, #1
 8002836:	6178      	str	r0, [r7, #20]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4403      	add	r3, r0
 800283e:	440a      	add	r2, r1
 8002840:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b09      	cmp	r3, #9
 8002846:	dd05      	ble.n	8002854 <split+0x68>
			return -1;
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
 800284c:	e012      	b.n	8002874 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	3301      	adds	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	3354      	adds	r3, #84	; 0x54
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <split+0x7e>
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbf1      	blt.n	800284e <split+0x62>
		}
		if (!(ind < limit)) return i;
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	429a      	cmp	r2, r3
 8002870:	dbca      	blt.n	8002808 <split+0x1c>
 8002872:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002890:	4610      	mov	r0, r2
 8002892:	4798      	blx	r3
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80028aa:	4803      	ldr	r0, [pc, #12]	; (80028b8 <terminal_backspace+0x1c>)
 80028ac:	4798      	blx	r3
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	0800d5b4 	.word	0x0800d5b4

080028bc <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80028ca:	4803      	ldr	r0, [pc, #12]	; (80028d8 <terminal_newline+0x1c>)
 80028cc:	4798      	blx	r3
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	0800d5bc 	.word	0x0800d5bc

080028dc <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	2300      	movs	r3, #0
 80028ec:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d235      	bcs.n	8002966 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 80028fa:	e01a      	b.n	8002932 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <u16bit_to_str+0x9c>)
 8002900:	fba3 2301 	umull	r2, r3, r3, r1
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	1aca      	subs	r2, r1, r3
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	1c59      	adds	r1, r3, #1
 8002916:	6179      	str	r1, [r7, #20]
 8002918:	3230      	adds	r2, #48	; 0x30
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f107 0118 	add.w	r1, r7, #24
 8002920:	440b      	add	r3, r1
 8002922:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a13      	ldr	r2, [pc, #76]	; (8002978 <u16bit_to_str+0x9c>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	08db      	lsrs	r3, r3, #3
 8002930:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e1      	bne.n	80028fc <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e00f      	b.n	800295e <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	6039      	str	r1, [r7, #0]
 800294c:	f107 0118 	add.w	r1, r7, #24
 8002950:	440a      	add	r2, r1
 8002952:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002956:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	3301      	adds	r3, #1
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	429a      	cmp	r2, r3
 8002964:	dbeb      	blt.n	800293e <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
	return buf;
 800296c:	683b      	ldr	r3, [r7, #0]
}
 800296e:	4618      	mov	r0, r3
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	cccccccd 	.word	0xcccccccd

0800297c <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	f107 0310 	add.w	r3, r7, #16
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <terminal_move_cursor+0x94>)
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	4611      	mov	r1, r2
 80029a0:	8019      	strh	r1, [r3, #0]
 80029a2:	3302      	adds	r3, #2
 80029a4:	0c12      	lsrs	r2, r2, #16
 80029a6:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	dd0f      	ble.n	80029ce <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	f107 030c 	add.w	r3, r7, #12
 80029b4:	3302      	adds	r3, #2
 80029b6:	4619      	mov	r1, r3
 80029b8:	4610      	mov	r0, r2
 80029ba:	f7ff ff8f 	bl	80028dc <u16bit_to_str>
 80029be:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4914      	ldr	r1, [pc, #80]	; (8002a14 <terminal_move_cursor+0x98>)
 80029c4:	461a      	mov	r2, r3
 80029c6:	460b      	mov	r3, r1
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	8013      	strh	r3, [r2, #0]
 80029cc:	e013      	b.n	80029f6 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da18      	bge.n	8002a06 <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	425b      	negs	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	3302      	adds	r3, #2
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f7ff ff7a 	bl	80028dc <u16bit_to_str>
 80029e8:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	490a      	ldr	r1, [pc, #40]	; (8002a18 <terminal_move_cursor+0x9c>)
 80029ee:	461a      	mov	r2, r3
 80029f0:	460b      	mov	r3, r1
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80029fc:	f107 020c 	add.w	r2, r7, #12
 8002a00:	4610      	mov	r0, r2
 8002a02:	4798      	blx	r3
 8002a04:	e000      	b.n	8002a08 <terminal_move_cursor+0x8c>
		return;
 8002a06:	bf00      	nop
}
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	0800d5c0 	.word	0x0800d5c0
 8002a14:	0800d5c4 	.word	0x0800d5c4
 8002a18:	0800d5c8 	.word	0x0800d5c8

08002a1c <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <terminal_reset_cursor+0x64>)
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	8019      	strh	r1, [r3, #0]
 8002a30:	3302      	adds	r3, #2
 8002a32:	0c12      	lsrs	r2, r2, #16
 8002a34:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8002a36:	f107 030c 	add.w	r3, r7, #12
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	206c      	movs	r0, #108	; 0x6c
 8002a40:	f7ff ff4c 	bl	80028dc <u16bit_to_str>
 8002a44:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <terminal_reset_cursor+0x68>)
 8002a4a:	6810      	ldr	r0, [r2, #0]
 8002a4c:	6018      	str	r0, [r3, #0]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3303      	adds	r3, #3
 8002a52:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8002a54:	69f9      	ldr	r1, [r7, #28]
 8002a56:	2005      	movs	r0, #5
 8002a58:	f7ff ff40 	bl	80028dc <u16bit_to_str>
 8002a5c:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4909      	ldr	r1, [pc, #36]	; (8002a88 <terminal_reset_cursor+0x6c>)
 8002a62:	461a      	mov	r2, r3
 8002a64:	460b      	mov	r3, r1
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002a70:	f107 020c 	add.w	r2, r7, #12
 8002a74:	4610      	mov	r0, r2
 8002a76:	4798      	blx	r3
}
 8002a78:	bf00      	nop
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	0800d5c0 	.word	0x0800d5c0
 8002a84:	0800d5cc 	.word	0x0800d5cc
 8002a88:	0800d5c4 	.word	0x0800d5c4

08002a8c <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002a9e:	4816      	ldr	r0, [pc, #88]	; (8002af8 <terminal_print_line+0x6c>)
 8002aa0:	4798      	blx	r3

	char nch [] = {0,0};
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e014      	b.n	8002ad6 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3354      	adds	r3, #84	; 0x54
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8002ab8:	7c3b      	ldrb	r3, [r7, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <terminal_print_line+0x36>
			nch[0] = ' ';
 8002abe:	2320      	movs	r3, #32
 8002ac0:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002ac8:	f107 0210 	add.w	r2, r7, #16
 8002acc:	4610      	mov	r0, r2
 8002ace:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	dbe4      	blt.n	8002aac <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff ff9a 	bl	8002a1c <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f7ff ff46 	bl	800297c <terminal_move_cursor>
}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	0800d5d0 	.word	0x0800d5d0

08002afc <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3354      	adds	r3, #84	; 0x54
 8002b0a:	2265      	movs	r2, #101	; 0x65
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f00a f8a8 	bl	800cc64 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f00a f8a1 	bl	800cc64 <memset>
	pThis->ring_hist.begin = 0;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <microrl_init+0x78>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000004 	.word	0x20000004

08002b78 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	1d18      	adds	r0, r3, #4
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3354      	adds	r3, #84	; 0x54
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7ff fcfb 	bl	80025dc <hist_restore_line>
 8002be6:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db1a      	blt.n	8002c24 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3354      	adds	r3, #84	; 0x54
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ff04 	bl	8002a1c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ff34 	bl	8002a8c <terminal_print_line>
	}
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	2b5b      	cmp	r3, #91	; 0x5b
 8002c3c:	d104      	bne.n	8002c48 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
		return 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e07b      	b.n	8002d40 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d14f      	bne.n	8002cf0 <escape_process+0xc4>
		if (ch == 'A') {
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	2b41      	cmp	r3, #65	; 0x41
 8002c54:	d105      	bne.n	8002c62 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8002c56:	2100      	movs	r1, #0
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ffb7 	bl	8002bcc <hist_search>
#endif
			return 1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e06e      	b.n	8002d40 <escape_process+0x114>
		} else if (ch == 'B') {
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	2b42      	cmp	r3, #66	; 0x42
 8002c66:	d105      	bne.n	8002c74 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8002c68:	2101      	movs	r1, #1
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ffae 	bl	8002bcc <hist_search>
#endif
			return 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e065      	b.n	8002d40 <escape_process+0x114>
		} else if (ch == 'C') {
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	2b43      	cmp	r3, #67	; 0x43
 8002c78:	d114      	bne.n	8002ca4 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c86:	429a      	cmp	r2, r3
 8002c88:	da0a      	bge.n	8002ca0 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff fe75 	bl	800297c <terminal_move_cursor>
				pThis->cursor++;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e04d      	b.n	8002d40 <escape_process+0x114>
		} else if (ch == 'D') {
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	2b44      	cmp	r3, #68	; 0x44
 8002ca8:	d112      	bne.n	8002cd0 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	dd0b      	ble.n	8002ccc <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fe5f 	bl	800297c <terminal_move_cursor>
				pThis->cursor--;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cc4:	1e5a      	subs	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e037      	b.n	8002d40 <escape_process+0x114>
		} else if (ch == '7') {
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	2b37      	cmp	r3, #55	; 0x37
 8002cd4:	d104      	bne.n	8002ce0 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	701a      	strb	r2, [r3, #0]
			return 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e02f      	b.n	8002d40 <escape_process+0x114>
		} else if (ch == '8') {
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	2b38      	cmp	r3, #56	; 0x38
 8002ce4:	d12b      	bne.n	8002d3e <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	701a      	strb	r2, [r3, #0]
			return 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e027      	b.n	8002d40 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	2b7e      	cmp	r3, #126	; 0x7e
 8002cf4:	d123      	bne.n	8002d3e <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d108      	bne.n	8002d10 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff fe8c 	bl	8002a1c <terminal_reset_cursor>
			pThis->cursor = 0;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e017      	b.n	8002d40 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d112      	bne.n	8002d3e <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	4619      	mov	r1, r3
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff fe27 	bl	800297c <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	dc60      	bgt.n	8002e24 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d6e:	4619      	mov	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	440b      	add	r3, r1
 8002d74:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3354      	adds	r3, #84	; 0x54
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 8002d80:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d8e:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8002d90:	461a      	mov	r2, r3
 8002d92:	f009 ff4d 	bl	800cc30 <memmove>
		for (i = 0; i < len; i++) {
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e025      	b.n	8002de8 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	441a      	add	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	440b      	add	r3, r1
 8002dac:	7811      	ldrb	r1, [r2, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	460a      	mov	r2, r1
 8002db4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d109      	bne.n	8002de2 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4413      	add	r3, r2
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dbd5      	blt.n	8002d9c <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	441a      	add	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	441a      	add	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4413      	add	r3, r2
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <microrl_insert_text+0xde>
	}
	return false;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	dd31      	ble.n	8002ea4 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff fd2b 	bl	800289c <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e52:	3b01      	subs	r3, #1
 8002e54:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3354      	adds	r3, #84	; 0x54
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 8002e60:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8002e72:	461a      	mov	r2, r3
 8002e74:	f009 fedc 	bl	800cc30 <memmove>
		pThis->cursor--;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e7e:	1e5a      	subs	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002e9c:	1e5a      	subs	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7fd f950 	bl	8000160 <strlen>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	e019      	b.n	8002efe <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd f943 	bl	8000160 <strlen>
 8002eda:	4602      	mov	r2, r0
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d20a      	bcs.n	8002ef8 <common_len+0x4c>
			shortest = arr[i];
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7fd f936 	bl	8000160 <strlen>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3301      	adds	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1de      	bne.n	8002eca <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	e01f      	b.n	8002f52 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	e012      	b.n	8002f3e <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	440b      	add	r3, r1
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	440b      	add	r3, r1
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <common_len+0x8c>
				return i;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	e011      	b.n	8002f5c <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e5      	bne.n	8002f18 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	dbdb      	blt.n	8002f12 <common_len+0x66>

	return i;
 8002f5a:	697b      	ldr	r3, [r7, #20]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8002f64:	b5b0      	push	{r4, r5, r7, lr}
 8002f66:	b090      	sub	sp, #64	; 0x40
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 809c 	beq.w	80030b0 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f7e:	f107 0208 	add.w	r2, r7, #8
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff fc31 	bl	80027ec <split>
 8002f8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f92:	3b01      	subs	r3, #1
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8002fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002fac:	4413      	add	r3, r2
 8002fae:	4a42      	ldr	r2, [pc, #264]	; (80030b8 <microrl_get_complite+0x154>)
 8002fb0:	f843 2c38 	str.w	r2, [r3, #-56]
	compl_token = pThis->get_completion (status, tkn_arr);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002fba:	f107 0208 	add.w	r2, r7, #8
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fc2:	4798      	blx	r3
 8002fc4:	6338      	str	r0, [r7, #48]	; 0x30
	if (compl_token[0] != NULL) {
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d071      	beq.n	80030b2 <microrl_get_complite+0x14e>
		int i = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	63bb      	str	r3, [r7, #56]	; 0x38
		int len;

		if (compl_token[1] == NULL) {
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d107      	bne.n	8002fec <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd f8bd 	bl	8000160 <strlen>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fea:	e026      	b.n	800303a <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8002fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fee:	f7ff ff5d 	bl	8002eac <common_len>
 8002ff2:	6378      	str	r0, [r7, #52]	; 0x34
			terminal_newline (pThis);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff fc61 	bl	80028bc <terminal_newline>
			while (compl_token [i] != NULL) {
 8002ffa:	e011      	b.n	8003020 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003004:	0092      	lsls	r2, r2, #2
 8003006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003008:	440a      	add	r2, r1
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	4610      	mov	r0, r2
 800300e:	4798      	blx	r3
				pThis->print (" ");
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003016:	4829      	ldr	r0, [pc, #164]	; (80030bc <microrl_get_complite+0x158>)
 8003018:	4798      	blx	r3
				i++;
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	3301      	adds	r3, #1
 800301e:	63bb      	str	r3, [r7, #56]	; 0x38
			while (compl_token [i] != NULL) {
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003026:	4413      	add	r3, r2
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e6      	bne.n	8002ffc <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff fc44 	bl	80028bc <terminal_newline>
			print_prompt (pThis);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff fc22 	bl	800287e <print_prompt>
		}
		
		if (len) {
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d02b      	beq.n	8003098 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	681c      	ldr	r4, [r3, #0]
 8003044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003046:	3b01      	subs	r3, #1
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800304e:	4413      	add	r3, r2
 8003050:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd f883 	bl	8000160 <strlen>
 800305a:	4603      	mov	r3, r0
 800305c:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 800305e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8003060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003062:	3b01      	subs	r3, #1
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800306a:	4413      	add	r3, r2
 800306c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd f875 	bl	8000160 <strlen>
 8003076:	4603      	mov	r3, r0
 8003078:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 800307a:	461a      	mov	r2, r3
 800307c:	4629      	mov	r1, r5
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fe62 	bl	8002d48 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	3304      	adds	r3, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 800308e:	2201      	movs	r2, #1
 8003090:	490a      	ldr	r1, [pc, #40]	; (80030bc <microrl_get_complite+0x158>)
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fe58 	bl	8002d48 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff fcbf 	bl	8002a1c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030a4:	461a      	mov	r2, r3
 80030a6:	2100      	movs	r1, #0
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff fcef 	bl	8002a8c <terminal_print_line>
 80030ae:	e000      	b.n	80030b2 <microrl_get_complite+0x14e>
		return;
 80030b0:	bf00      	nop
	} 
}
 80030b2:	3740      	adds	r7, #64	; 0x40
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bdb0      	pop	{r4, r5, r7, pc}
 80030b8:	0800d5d4 	.word	0x0800d5d4
 80030bc:	0800d5d8 	.word	0x0800d5d8

080030c0 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08e      	sub	sp, #56	; 0x38
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff fbf7 	bl	80028bc <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	dd0a      	ble.n	80030ee <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	1d18      	adds	r0, r3, #4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030e8:	461a      	mov	r2, r3
 80030ea:	f7ff fa08 	bl	80024fe <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030f4:	f107 020c 	add.w	r2, r7, #12
 80030f8:	4619      	mov	r1, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff fb76 	bl	80027ec <split>
 8003100:	6378      	str	r0, [r7, #52]	; 0x34
	if (status == -1){
 8003102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d109      	bne.n	800311e <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003110:	4817      	ldr	r0, [pc, #92]	; (8003170 <new_line_handler+0xb0>)
 8003112:	4798      	blx	r3
		pThis->print (ENDL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800311a:	4816      	ldr	r0, [pc, #88]	; (8003174 <new_line_handler+0xb4>)
 800311c:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003120:	2b00      	cmp	r3, #0
 8003122:	dd0c      	ble.n	800313e <new_line_handler+0x7e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003134:	f107 020c 	add.w	r2, r7, #12
 8003138:	4611      	mov	r1, r2
 800313a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800313c:	4798      	blx	r3
	print_prompt (pThis);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fb9d 	bl	800287e <print_prompt>
	pThis->cmdlen = 0;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3354      	adds	r3, #84	; 0x54
 8003158:	2265      	movs	r2, #101	; 0x65
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f009 fd81 	bl	800cc64 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8003168:	bf00      	nop
 800316a:	3738      	adds	r7, #56	; 0x38
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	0800d5dc 	.word	0x0800d5dc
 8003174:	0800d5bc 	.word	0x0800d5bc

08003178 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00d      	beq.n	80031a6 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fd4b 	bl	8002c2c <escape_process>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 81e3 	beq.w	8003564 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 80031a4:	e1de      	b.n	8003564 <microrl_insert_char+0x3ec>
		switch (ch) {
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	2b7e      	cmp	r3, #126	; 0x7e
 80031ac:	f200 81af 	bhi.w	800350e <microrl_insert_char+0x396>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <microrl_insert_char+0x40>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	0800344b 	.word	0x0800344b
 80031bc:	08003483 	.word	0x08003483
 80031c0:	080034fb 	.word	0x080034fb
 80031c4:	0800350f 	.word	0x0800350f
 80031c8:	08003427 	.word	0x08003427
 80031cc:	0800345b 	.word	0x0800345b
 80031d0:	0800350f 	.word	0x0800350f
 80031d4:	080034bb 	.word	0x080034bb
 80031d8:	080033dd 	.word	0x080033dd
 80031dc:	080033b5 	.word	0x080033b5
 80031e0:	0800340f 	.word	0x0800340f
 80031e4:	0800350f 	.word	0x0800350f
 80031e8:	080033b5 	.word	0x080033b5
 80031ec:	080034b1 	.word	0x080034b1
 80031f0:	0800350f 	.word	0x0800350f
 80031f4:	080034a7 	.word	0x080034a7
 80031f8:	0800350f 	.word	0x0800350f
 80031fc:	080034d7 	.word	0x080034d7
 8003200:	0800350f 	.word	0x0800350f
 8003204:	0800350f 	.word	0x0800350f
 8003208:	080033f3 	.word	0x080033f3
 800320c:	0800350f 	.word	0x0800350f
 8003210:	0800350f 	.word	0x0800350f
 8003214:	0800350f 	.word	0x0800350f
 8003218:	0800350f 	.word	0x0800350f
 800321c:	0800350f 	.word	0x0800350f
 8003220:	080033e5 	.word	0x080033e5
 8003224:	0800350f 	.word	0x0800350f
 8003228:	0800350f 	.word	0x0800350f
 800322c:	0800350f 	.word	0x0800350f
 8003230:	0800350f 	.word	0x0800350f
 8003234:	0800350f 	.word	0x0800350f
 8003238:	0800350f 	.word	0x0800350f
 800323c:	0800350f 	.word	0x0800350f
 8003240:	0800350f 	.word	0x0800350f
 8003244:	0800350f 	.word	0x0800350f
 8003248:	0800350f 	.word	0x0800350f
 800324c:	0800350f 	.word	0x0800350f
 8003250:	0800350f 	.word	0x0800350f
 8003254:	0800350f 	.word	0x0800350f
 8003258:	0800350f 	.word	0x0800350f
 800325c:	0800350f 	.word	0x0800350f
 8003260:	0800350f 	.word	0x0800350f
 8003264:	0800350f 	.word	0x0800350f
 8003268:	0800350f 	.word	0x0800350f
 800326c:	0800350f 	.word	0x0800350f
 8003270:	0800350f 	.word	0x0800350f
 8003274:	0800350f 	.word	0x0800350f
 8003278:	0800350f 	.word	0x0800350f
 800327c:	0800350f 	.word	0x0800350f
 8003280:	0800350f 	.word	0x0800350f
 8003284:	0800350f 	.word	0x0800350f
 8003288:	0800350f 	.word	0x0800350f
 800328c:	0800350f 	.word	0x0800350f
 8003290:	0800350f 	.word	0x0800350f
 8003294:	0800350f 	.word	0x0800350f
 8003298:	0800350f 	.word	0x0800350f
 800329c:	0800350f 	.word	0x0800350f
 80032a0:	0800350f 	.word	0x0800350f
 80032a4:	0800350f 	.word	0x0800350f
 80032a8:	0800350f 	.word	0x0800350f
 80032ac:	0800350f 	.word	0x0800350f
 80032b0:	0800350f 	.word	0x0800350f
 80032b4:	0800350f 	.word	0x0800350f
 80032b8:	0800350f 	.word	0x0800350f
 80032bc:	0800350f 	.word	0x0800350f
 80032c0:	0800350f 	.word	0x0800350f
 80032c4:	0800350f 	.word	0x0800350f
 80032c8:	0800350f 	.word	0x0800350f
 80032cc:	0800350f 	.word	0x0800350f
 80032d0:	0800350f 	.word	0x0800350f
 80032d4:	0800350f 	.word	0x0800350f
 80032d8:	0800350f 	.word	0x0800350f
 80032dc:	0800350f 	.word	0x0800350f
 80032e0:	0800350f 	.word	0x0800350f
 80032e4:	0800350f 	.word	0x0800350f
 80032e8:	0800350f 	.word	0x0800350f
 80032ec:	0800350f 	.word	0x0800350f
 80032f0:	0800350f 	.word	0x0800350f
 80032f4:	0800350f 	.word	0x0800350f
 80032f8:	0800350f 	.word	0x0800350f
 80032fc:	0800350f 	.word	0x0800350f
 8003300:	0800350f 	.word	0x0800350f
 8003304:	0800350f 	.word	0x0800350f
 8003308:	0800350f 	.word	0x0800350f
 800330c:	0800350f 	.word	0x0800350f
 8003310:	0800350f 	.word	0x0800350f
 8003314:	0800350f 	.word	0x0800350f
 8003318:	0800350f 	.word	0x0800350f
 800331c:	0800350f 	.word	0x0800350f
 8003320:	0800350f 	.word	0x0800350f
 8003324:	0800350f 	.word	0x0800350f
 8003328:	0800350f 	.word	0x0800350f
 800332c:	0800350f 	.word	0x0800350f
 8003330:	0800350f 	.word	0x0800350f
 8003334:	0800350f 	.word	0x0800350f
 8003338:	0800350f 	.word	0x0800350f
 800333c:	0800350f 	.word	0x0800350f
 8003340:	0800350f 	.word	0x0800350f
 8003344:	0800350f 	.word	0x0800350f
 8003348:	0800350f 	.word	0x0800350f
 800334c:	0800350f 	.word	0x0800350f
 8003350:	0800350f 	.word	0x0800350f
 8003354:	0800350f 	.word	0x0800350f
 8003358:	0800350f 	.word	0x0800350f
 800335c:	0800350f 	.word	0x0800350f
 8003360:	0800350f 	.word	0x0800350f
 8003364:	0800350f 	.word	0x0800350f
 8003368:	0800350f 	.word	0x0800350f
 800336c:	0800350f 	.word	0x0800350f
 8003370:	0800350f 	.word	0x0800350f
 8003374:	0800350f 	.word	0x0800350f
 8003378:	0800350f 	.word	0x0800350f
 800337c:	0800350f 	.word	0x0800350f
 8003380:	0800350f 	.word	0x0800350f
 8003384:	0800350f 	.word	0x0800350f
 8003388:	0800350f 	.word	0x0800350f
 800338c:	0800350f 	.word	0x0800350f
 8003390:	0800350f 	.word	0x0800350f
 8003394:	0800350f 	.word	0x0800350f
 8003398:	0800350f 	.word	0x0800350f
 800339c:	0800350f 	.word	0x0800350f
 80033a0:	0800350f 	.word	0x0800350f
 80033a4:	0800350f 	.word	0x0800350f
 80033a8:	0800350f 	.word	0x0800350f
 80033ac:	0800350f 	.word	0x0800350f
 80033b0:	080034bb 	.word	0x080034bb
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	789b      	ldrb	r3, [r3, #2]
 80033b8:	461a      	mov	r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b0d      	cmp	r3, #13
 80033be:	d101      	bne.n	80033c4 <microrl_insert_char+0x24c>
 80033c0:	230a      	movs	r3, #10
 80033c2:	e000      	b.n	80033c6 <microrl_insert_char+0x24e>
 80033c4:	230d      	movs	r3, #13
 80033c6:	4293      	cmp	r3, r2
 80033c8:	f000 80c1 	beq.w	800354e <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff fe73 	bl	80030c0 <new_line_handler>
				break;
 80033da:	e0c3      	b.n	8003564 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fdc1 	bl	8002f64 <microrl_get_complite>
			break;
 80033e2:	e0bf      	b.n	8003564 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	705a      	strb	r2, [r3, #1]
			break;
 80033ea:	e0bb      	b.n	8003564 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff fd1e 	bl	8002e2e <microrl_backspace>
					while (pThis->cursor > 0) {
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	dcf7      	bgt.n	80033ec <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003402:	461a      	mov	r2, r3
 8003404:	2100      	movs	r1, #0
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fb40 	bl	8002a8c <terminal_print_line>
			break;
 800340c:	e0aa      	b.n	8003564 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003414:	4855      	ldr	r0, [pc, #340]	; (800356c <microrl_insert_char+0x3f4>)
 8003416:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 8003424:	e09e      	b.n	8003564 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff faa0 	bl	800297c <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8003448:	e08c      	b.n	8003564 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff fae6 	bl	8002a1c <terminal_reset_cursor>
				pThis->cursor = 0;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8003458:	e084      	b.n	8003564 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003466:	429a      	cmp	r2, r3
 8003468:	da73      	bge.n	8003552 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 800346a:	2101      	movs	r1, #1
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff fa85 	bl	800297c <terminal_move_cursor>
				pThis->cursor++;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8003480:	e067      	b.n	8003552 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d064      	beq.n	8003556 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 800348c:	f04f 31ff 	mov.w	r1, #4294967295
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff fa73 	bl	800297c <terminal_move_cursor>
				pThis->cursor--;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80034a4:	e057      	b.n	8003556 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 80034a6:	2100      	movs	r1, #0
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff fb8f 	bl	8002bcc <hist_search>
			break;
 80034ae:	e059      	b.n	8003564 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 80034b0:	2101      	movs	r1, #1
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff fb8a 	bl	8002bcc <hist_search>
			break;
 80034b8:	e054      	b.n	8003564 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fcb7 	bl	8002e2e <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034cc:	461a      	mov	r2, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fadc 	bl	8002a8c <terminal_print_line>
			break;
 80034d4:	e046      	b.n	8003564 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff f9f0 	bl	80028bc <terminal_newline>
				print_prompt (pThis);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff f9ce 	bl	800287e <print_prompt>
				terminal_reset_cursor (pThis);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fa9a 	bl	8002a1c <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034ee:	461a      	mov	r2, r3
 80034f0:	2100      	movs	r1, #0
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff faca 	bl	8002a8c <terminal_print_line>
			break;
 80034f8:	e034      	b.n	8003564 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d02a      	beq.n	800355a <microrl_insert_char+0x3e2>
				pThis->sigint();
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800350a:	4798      	blx	r3
			break;
 800350c:	e025      	b.n	800355a <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b20      	cmp	r3, #32
 8003512:	d104      	bne.n	800351e <microrl_insert_char+0x3a6>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01f      	beq.n	800355e <microrl_insert_char+0x3e6>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b1f      	cmp	r3, #31
 8003522:	dd1c      	ble.n	800355e <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8003524:	463b      	mov	r3, r7
 8003526:	2201      	movs	r2, #1
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fc0c 	bl	8002d48 <microrl_insert_text>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d015      	beq.n	8003562 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800353c:	1e59      	subs	r1, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003544:	461a      	mov	r2, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff faa0 	bl	8002a8c <terminal_print_line>
			break;
 800354c:	e009      	b.n	8003562 <microrl_insert_char+0x3ea>
					break;
 800354e:	bf00      	nop
 8003550:	e008      	b.n	8003564 <microrl_insert_char+0x3ec>
			break;
 8003552:	bf00      	nop
 8003554:	e006      	b.n	8003564 <microrl_insert_char+0x3ec>
			break;
 8003556:	bf00      	nop
 8003558:	e004      	b.n	8003564 <microrl_insert_char+0x3ec>
			break;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <microrl_insert_char+0x3ec>
	}
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <microrl_insert_char+0x3ec>
			break;
 8003562:	bf00      	nop
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	0800d5d0 	.word	0x0800d5d0

08003570 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <microrl_print_char+0x20>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	79fa      	ldrb	r2, [r7, #7]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fdf8 	bl	8003178 <microrl_insert_char>
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000008 	.word	0x20000008

08003594 <print>:

void print (const char * str)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <print+0x70>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	f083 0301 	eor.w	r3, r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <print+0x1e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b1b      	cmp	r3, #27
 80035b0:	d024      	beq.n	80035fc <print+0x68>
		return;
	uint16_t len = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 80035b6:	89fb      	ldrh	r3, [r7, #14]
 80035b8:	3301      	adds	r3, #1
 80035ba:	81fb      	strh	r3, [r7, #14]
 80035bc:	89fb      	ldrh	r3, [r7, #14]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f6      	bne.n	80035b6 <print+0x22>
	uint32_t timeout = HAL_GetTick();
 80035c8:	f001 f95e 	bl	8004888 <HAL_GetTick>
 80035cc:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80035ce:	e006      	b.n	80035de <print+0x4a>
		if (HAL_GetTick() - timeout >= 5)
 80035d0:	f001 f95a 	bl	8004888 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d807      	bhi.n	80035ee <print+0x5a>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <print+0x74>)
 80035e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f1      	bne.n	80035d0 <print+0x3c>
 80035ec:	e000      	b.n	80035f0 <print+0x5c>
			break;
 80035ee:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 80035f0:	89fb      	ldrh	r3, [r7, #14]
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f008 ff05 	bl	800c404 <CDC_Transmit_FS>
 80035fa:	e000      	b.n	80035fe <print+0x6a>
		return;
 80035fc:	bf00      	nop
}
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	2000000c 	.word	0x2000000c
 8003608:	200008c4 	.word	0x200008c4

0800360c <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e010      	b.n	800363e <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 800361c:	490c      	ldr	r1, [pc, #48]	; (8003650 <find_color_by_name+0x44>)
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	440b      	add	r3, r1
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	79fa      	ldrb	r2, [r7, #7]
 8003630:	429a      	cmp	r2, r3
 8003632:	d101      	bne.n	8003638 <find_color_by_name+0x2c>
		{
			return i;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	e006      	b.n	8003646 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3301      	adds	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b10      	cmp	r3, #16
 8003642:	d9eb      	bls.n	800361c <find_color_by_name+0x10>
		}
	}
	return 0;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	0800dad0 	.word	0x0800dad0

08003654 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ffd2 	bl	800360c <find_color_by_name>
 8003668:	4602      	mov	r2, r0
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	4a08      	ldr	r2, [pc, #32]	; (8003698 <print_color+0x44>)
 8003676:	4413      	add	r3, r2
 8003678:	3301      	adds	r3, #1
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff8a 	bl	8003594 <print>
	print(str);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff87 	bl	8003594 <print>
	print(COLOR_NC);
 8003686:	4805      	ldr	r0, [pc, #20]	; (800369c <print_color+0x48>)
 8003688:	f7ff ff84 	bl	8003594 <print>
	return 0;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	0800dad0 	.word	0x0800dad0
 800369c:	0800d5f4 	.word	0x0800d5f4

080036a0 <str_length>:

int str_length(const char * str)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80036ac:	e002      	b.n	80036b4 <str_length+0x14>
		i++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3301      	adds	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f6      	bne.n	80036ae <str_length+0xe>
	return i;
 80036c0:	68fb      	ldr	r3, [r7, #12]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <print_help>:


int print_help(int argc, const char * const * argv)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	print(_VER);
 80036d6:	4862      	ldr	r0, [pc, #392]	; (8003860 <print_help+0x194>)
 80036d8:	f7ff ff5c 	bl	8003594 <print>
	print(ENDL);
 80036dc:	4861      	ldr	r0, [pc, #388]	; (8003864 <print_help+0x198>)
 80036de:	f7ff ff59 	bl	8003594 <print>
	print ("Use ");
 80036e2:	4861      	ldr	r0, [pc, #388]	; (8003868 <print_help+0x19c>)
 80036e4:	f7ff ff56 	bl	8003594 <print>
	print_color("TAB", C_GREEN);
 80036e8:	2105      	movs	r1, #5
 80036ea:	4860      	ldr	r0, [pc, #384]	; (800386c <print_help+0x1a0>)
 80036ec:	f7ff ffb2 	bl	8003654 <print_color>
	print(" key for completion");
 80036f0:	485f      	ldr	r0, [pc, #380]	; (8003870 <print_help+0x1a4>)
 80036f2:	f7ff ff4f 	bl	8003594 <print>
	print (ENDL);
 80036f6:	485b      	ldr	r0, [pc, #364]	; (8003864 <print_help+0x198>)
 80036f8:	f7ff ff4c 	bl	8003594 <print>
	print ("Available commands:");
 80036fc:	485d      	ldr	r0, [pc, #372]	; (8003874 <print_help+0x1a8>)
 80036fe:	f7ff ff49 	bl	8003594 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e09e      	b.n	8003846 <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8003708:	4a5b      	ldr	r2, [pc, #364]	; (8003878 <print_help+0x1ac>)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d11f      	bne.n	800375c <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3b01      	subs	r3, #1
 8003720:	4a55      	ldr	r2, [pc, #340]	; (8003878 <print_help+0x1ac>)
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d004      	beq.n	800373c <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 8003732:	210c      	movs	r1, #12
 8003734:	4851      	ldr	r0, [pc, #324]	; (800387c <print_help+0x1b0>)
 8003736:	f7ff ff8d 	bl	8003654 <print_color>
 800373a:	e003      	b.n	8003744 <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 800373c:	210c      	movs	r1, #12
 800373e:	4850      	ldr	r0, [pc, #320]	; (8003880 <print_help+0x1b4>)
 8003740:	f7ff ff88 	bl	8003654 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	222c      	movs	r2, #44	; 0x2c
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	4a4a      	ldr	r2, [pc, #296]	; (8003878 <print_help+0x1ac>)
 800374e:	4413      	add	r3, r2
 8003750:	3304      	adds	r3, #4
 8003752:	210b      	movs	r1, #11
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff7d 	bl	8003654 <print_color>
 800375a:	e071      	b.n	8003840 <print_help+0x174>
		}
		else
		{
			print(ENDL);
 800375c:	4841      	ldr	r0, [pc, #260]	; (8003864 <print_help+0x198>)
 800375e:	f7ff ff19 	bl	8003594 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8003762:	f06f 0303 	mvn.w	r3, #3
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e005      	b.n	8003776 <print_help+0xaa>
				print(" ");
 800376a:	4846      	ldr	r0, [pc, #280]	; (8003884 <print_help+0x1b8>)
 800376c:	f7ff ff12 	bl	8003594 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	3301      	adds	r3, #1
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	4a40      	ldr	r2, [pc, #256]	; (8003878 <print_help+0x1ac>)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	429a      	cmp	r2, r3
 8003788:	dbef      	blt.n	800376a <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	222c      	movs	r2, #44	; 0x2c
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	4a39      	ldr	r2, [pc, #228]	; (8003878 <print_help+0x1ac>)
 8003794:	4413      	add	r3, r2
 8003796:	1d1a      	adds	r2, r3, #4
 8003798:	4937      	ldr	r1, [pc, #220]	; (8003878 <print_help+0x1ac>)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	202c      	movs	r0, #44	; 0x2c
 800379e:	fb00 f303 	mul.w	r3, r0, r3
 80037a2:	440b      	add	r3, r1
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4938      	ldr	r1, [pc, #224]	; (8003888 <print_help+0x1bc>)
 80037a8:	5ccb      	ldrb	r3, [r1, r3]
 80037aa:	4619      	mov	r1, r3
 80037ac:	4610      	mov	r0, r2
 80037ae:	f7ff ff51 	bl	8003654 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e005      	b.n	80037c4 <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 80037b8:	4832      	ldr	r0, [pc, #200]	; (8003884 <print_help+0x1b8>)
 80037ba:	f7ff feeb 	bl	8003594 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3301      	adds	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	4a2c      	ldr	r2, [pc, #176]	; (8003878 <print_help+0x1ac>)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80037d2:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	222c      	movs	r2, #44	; 0x2c
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	4a26      	ldr	r2, [pc, #152]	; (8003878 <print_help+0x1ac>)
 80037e0:	4413      	add	r3, r2
 80037e2:	3304      	adds	r3, #4
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff5b 	bl	80036a0 <str_length>
 80037ea:	4603      	mov	r3, r0
 80037ec:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	dbe1      	blt.n	80037b8 <print_help+0xec>
			switch (microrl_actions[i].level){
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <print_help+0x1ac>)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <print_help+0x140>
 8003806:	2b01      	cmp	r3, #1
 8003808:	d004      	beq.n	8003814 <print_help+0x148>
 800380a:	e007      	b.n	800381c <print_help+0x150>
			case 0:
				print ("-");
 800380c:	481f      	ldr	r0, [pc, #124]	; (800388c <print_help+0x1c0>)
 800380e:	f7ff fec1 	bl	8003594 <print>
				break;
 8003812:	e007      	b.n	8003824 <print_help+0x158>
			case 1:
				print ("^");
 8003814:	481e      	ldr	r0, [pc, #120]	; (8003890 <print_help+0x1c4>)
 8003816:	f7ff febd 	bl	8003594 <print>
				break;
 800381a:	e003      	b.n	8003824 <print_help+0x158>
			default:
				print ("#");
 800381c:	481d      	ldr	r0, [pc, #116]	; (8003894 <print_help+0x1c8>)
 800381e:	f7ff feb9 	bl	8003594 <print>
				break;
 8003822:	bf00      	nop
			}
			print (" ");
 8003824:	4817      	ldr	r0, [pc, #92]	; (8003884 <print_help+0x1b8>)
 8003826:	f7ff feb5 	bl	8003594 <print>
			print (microrl_actions[i].help_msg);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	222c      	movs	r2, #44	; 0x2c
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	3308      	adds	r3, #8
 8003834:	4a10      	ldr	r2, [pc, #64]	; (8003878 <print_help+0x1ac>)
 8003836:	4413      	add	r3, r2
 8003838:	3305      	adds	r3, #5
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff feaa 	bl	8003594 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3301      	adds	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b13      	cmp	r3, #19
 800384a:	f67f af5d 	bls.w	8003708 <print_help+0x3c>
		}
	}
	print(ENDL);
 800384e:	4805      	ldr	r0, [pc, #20]	; (8003864 <print_help+0x198>)
 8003850:	f7ff fea0 	bl	8003594 <print>
	return 0;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	bf00      	nop
 8003860:	0800d5fc 	.word	0x0800d5fc
 8003864:	0800d60c 	.word	0x0800d60c
 8003868:	0800d610 	.word	0x0800d610
 800386c:	0800d618 	.word	0x0800d618
 8003870:	0800d61c 	.word	0x0800d61c
 8003874:	0800d630 	.word	0x0800d630
 8003878:	0800d760 	.word	0x0800d760
 800387c:	0800d644 	.word	0x0800d644
 8003880:	0800d64c 	.word	0x0800d64c
 8003884:	0800d650 	.word	0x0800d650
 8003888:	0800db8c 	.word	0x0800db8c
 800388c:	0800d654 	.word	0x0800d654
 8003890:	0800d658 	.word	0x0800d658
 8003894:	0800d65c 	.word	0x0800d65c

08003898 <execute>:



int execute (int argc, const char * const * argv)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
	int (*func)   (int argc, const char * const * argv ) = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 80038ae:	2300      	movs	r3, #0
 80038b0:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e056      	b.n	8003966 <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e045      	b.n	800394a <execute+0xb2>
		{
			tokens_found = false;
 80038be:	2300      	movs	r3, #0
 80038c0:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 80038c2:	4a55      	ldr	r2, [pc, #340]	; (8003a18 <execute+0x180>)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	212c      	movs	r1, #44	; 0x2c
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d001      	beq.n	80038de <execute+0x46>
				synonym_level = current_level; // save the synonym level
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d003      	beq.n	80038ee <execute+0x56>
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	db31      	blt.n	8003952 <execute+0xba>
				break;
			if (current_level == i)
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d101      	bne.n	80038fa <execute+0x62>
				last_main_synonym = n;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	4413      	add	r3, r2
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	212c      	movs	r1, #44	; 0x2c
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4942      	ldr	r1, [pc, #264]	; (8003a18 <execute+0x180>)
 800390e:	440b      	add	r3, r1
 8003910:	3304      	adds	r3, #4
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f7fc fc19 	bl	800014c <strcmp>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d111      	bne.n	8003944 <execute+0xac>
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	429a      	cmp	r2, r3
 8003926:	d10d      	bne.n	8003944 <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 8003928:	2301      	movs	r3, #1
 800392a:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	623a      	str	r2, [r7, #32]
 8003932:	4a39      	ldr	r2, [pc, #228]	; (8003a18 <execute+0x180>)
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3328      	adds	r3, #40	; 0x28
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8003942:	e007      	b.n	8003954 <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	3301      	adds	r3, #1
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b13      	cmp	r3, #19
 800394e:	d9b6      	bls.n	80038be <execute+0x26>
 8003950:	e000      	b.n	8003954 <execute+0xbc>
				break;
 8003952:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8003954:	7efb      	ldrb	r3, [r7, #27]
 8003956:	f083 0301 	eor.w	r3, r3, #1
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d107      	bne.n	8003970 <execute+0xd8>
	for (int i = 0; i < argc; i++)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	3301      	adds	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	dba4      	blt.n	80038b8 <execute+0x20>
 800396e:	e000      	b.n	8003972 <execute+0xda>
			break;
 8003970:	bf00      	nop
	}

	if (func != NULL)
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <execute+0xec>
	{
		return func(argc, argv); // function found
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	6839      	ldr	r1, [r7, #0]
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
 8003980:	4603      	mov	r3, r0
 8003982:	e045      	b.n	8003a10 <execute+0x178>
	} else if (tokens_found)
 8003984:	7efb      	ldrb	r3, [r7, #27]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d021      	beq.n	80039ce <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 800398a:	210a      	movs	r1, #10
 800398c:	4823      	ldr	r0, [pc, #140]	; (8003a1c <execute+0x184>)
 800398e:	f7ff fe61 	bl	8003654 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	210a      	movs	r1, #10
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fe5b 	bl	8003654 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 800399e:	210a      	movs	r1, #10
 80039a0:	481f      	ldr	r0, [pc, #124]	; (8003a20 <execute+0x188>)
 80039a2:	f7ff fe57 	bl	8003654 <print_color>
		print(ENDL);
 80039a6:	481f      	ldr	r0, [pc, #124]	; (8003a24 <execute+0x18c>)
 80039a8:	f7ff fdf4 	bl	8003594 <print>
		print_color ("use '", C_NC);
 80039ac:	2100      	movs	r1, #0
 80039ae:	481e      	ldr	r0, [pc, #120]	; (8003a28 <execute+0x190>)
 80039b0:	f7ff fe50 	bl	8003654 <print_color>
		print_color ("?", C_GREEN);
 80039b4:	2105      	movs	r1, #5
 80039b6:	481d      	ldr	r0, [pc, #116]	; (8003a2c <execute+0x194>)
 80039b8:	f7ff fe4c 	bl	8003654 <print_color>
		print_color ("' for help", C_NC);
 80039bc:	2100      	movs	r1, #0
 80039be:	481c      	ldr	r0, [pc, #112]	; (8003a30 <execute+0x198>)
 80039c0:	f7ff fe48 	bl	8003654 <print_color>
		print (ENDL);
 80039c4:	4817      	ldr	r0, [pc, #92]	; (8003a24 <execute+0x18c>)
 80039c6:	f7ff fde5 	bl	8003594 <print>
		return 1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e020      	b.n	8003a10 <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 80039ce:	2109      	movs	r1, #9
 80039d0:	4812      	ldr	r0, [pc, #72]	; (8003a1c <execute+0x184>)
 80039d2:	f7ff fe3f 	bl	8003654 <print_color>
		print_color ((char*)argv[0], C_RED);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2109      	movs	r1, #9
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fe39 	bl	8003654 <print_color>
		print_color ("' not found", C_RED);
 80039e2:	2109      	movs	r1, #9
 80039e4:	4813      	ldr	r0, [pc, #76]	; (8003a34 <execute+0x19c>)
 80039e6:	f7ff fe35 	bl	8003654 <print_color>
		print(ENDL);
 80039ea:	480e      	ldr	r0, [pc, #56]	; (8003a24 <execute+0x18c>)
 80039ec:	f7ff fdd2 	bl	8003594 <print>
		print_color ("use '", C_NC);
 80039f0:	2100      	movs	r1, #0
 80039f2:	480d      	ldr	r0, [pc, #52]	; (8003a28 <execute+0x190>)
 80039f4:	f7ff fe2e 	bl	8003654 <print_color>
		print_color ("?", C_GREEN);
 80039f8:	2105      	movs	r1, #5
 80039fa:	480c      	ldr	r0, [pc, #48]	; (8003a2c <execute+0x194>)
 80039fc:	f7ff fe2a 	bl	8003654 <print_color>
		print_color ("' for help", C_NC);
 8003a00:	2100      	movs	r1, #0
 8003a02:	480b      	ldr	r0, [pc, #44]	; (8003a30 <execute+0x198>)
 8003a04:	f7ff fe26 	bl	8003654 <print_color>
		print (ENDL);
 8003a08:	4806      	ldr	r0, [pc, #24]	; (8003a24 <execute+0x18c>)
 8003a0a:	f7ff fdc3 	bl	8003594 <print>
		return 1;
 8003a0e:	2301      	movs	r3, #1

	}
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3728      	adds	r7, #40	; 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	0800d760 	.word	0x0800d760
 8003a1c:	0800d660 	.word	0x0800d660
 8003a20:	0800d66c 	.word	0x0800d66c
 8003a24:	0800d60c 	.word	0x0800d60c
 8003a28:	0800d68c 	.word	0x0800d68c
 8003a2c:	0800d694 	.word	0x0800d694
 8003a30:	0800d698 	.word	0x0800d698
 8003a34:	0800d6a4 	.word	0x0800d6a4

08003a38 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08c      	sub	sp, #48	; 0x30
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
	int j = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8003a46:	4b63      	ldr	r3, [pc, #396]	; (8003bd4 <complet+0x19c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11f      	bne.n	8003a92 <complet+0x5a>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8003a52:	2300      	movs	r3, #0
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a56:	e018      	b.n	8003a8a <complet+0x52>
			if (microrl_actions[i].level == 0)
 8003a58:	4a5f      	ldr	r2, [pc, #380]	; (8003bd8 <complet+0x1a0>)
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <complet+0x4c>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a72:	212c      	movs	r1, #44	; 0x2c
 8003a74:	fb01 f202 	mul.w	r2, r1, r2
 8003a78:	4957      	ldr	r1, [pc, #348]	; (8003bd8 <complet+0x1a0>)
 8003a7a:	440a      	add	r2, r1
 8003a7c:	3204      	adds	r2, #4
 8003a7e:	4955      	ldr	r1, [pc, #340]	; (8003bd4 <complet+0x19c>)
 8003a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	3301      	adds	r3, #1
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	2b13      	cmp	r3, #19
 8003a8e:	d9e3      	bls.n	8003a58 <complet+0x20>
 8003a90:	e095      	b.n	8003bbe <complet+0x186>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8003aac:	2300      	movs	r3, #0
 8003aae:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	e07c      	b.n	8003bb0 <complet+0x178>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	e06b      	b.n	8003b94 <complet+0x15c>
			{
				tokens_found = false;
 8003abc:	2300      	movs	r3, #0
 8003abe:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8003ac0:	4a45      	ldr	r2, [pc, #276]	; (8003bd8 <complet+0x1a0>)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d001      	beq.n	8003adc <complet+0xa4>
					synonym_level = current_level; // save the synonym level
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d003      	beq.n	8003aec <complet+0xb4>
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	db57      	blt.n	8003b9c <complet+0x164>
					break;
				if (current_level == i)
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d101      	bne.n	8003af8 <complet+0xc0>
					last_main_synonym = n;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d128      	bne.n	8003b54 <complet+0x11c>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	222c      	movs	r2, #44	; 0x2c
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	4a33      	ldr	r2, [pc, #204]	; (8003bd8 <complet+0x1a0>)
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	6939      	ldr	r1, [r7, #16]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f009 f8f9 	bl	800cd0a <strstr>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	492d      	ldr	r1, [pc, #180]	; (8003bd8 <complet+0x1a0>)
 8003b24:	440b      	add	r3, r1
 8003b26:	3304      	adds	r3, #4
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d113      	bne.n	8003b54 <complet+0x11c>
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d10f      	bne.n	8003b54 <complet+0x11c>
										(i == synonym_level))
				{
					tokens_found = true;
 8003b34:	2301      	movs	r3, #1
 8003b36:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f202 	mul.w	r2, r1, r2
 8003b46:	4924      	ldr	r1, [pc, #144]	; (8003bd8 <complet+0x1a0>)
 8003b48:	440a      	add	r2, r1
 8003b4a:	3204      	adds	r2, #4
 8003b4c:	4921      	ldr	r1, [pc, #132]	; (8003bd4 <complet+0x19c>)
 8003b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b52:	e01c      	b.n	8003b8e <complet+0x156>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	212c      	movs	r1, #44	; 0x2c
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	491c      	ldr	r1, [pc, #112]	; (8003bd8 <complet+0x1a0>)
 8003b68:	440b      	add	r3, r1
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f7fc faec 	bl	800014c <strcmp>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <complet+0x156>
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d105      	bne.n	8003b8e <complet+0x156>
				{
					last_main_synonym++;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	3301      	adds	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	77fb      	strb	r3, [r7, #31]
					break;
 8003b8c:	e007      	b.n	8003b9e <complet+0x166>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	3301      	adds	r3, #1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b13      	cmp	r3, #19
 8003b98:	d990      	bls.n	8003abc <complet+0x84>
 8003b9a:	e000      	b.n	8003b9e <complet+0x166>
					break;
 8003b9c:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8003b9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ba0:	f083 0301 	eor.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <complet+0x184>
		for (int i = 0; i < argc; i++)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	3301      	adds	r3, #1
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	f6ff af7e 	blt.w	8003ab6 <complet+0x7e>
 8003bba:	e000      	b.n	8003bbe <complet+0x186>
				break;
 8003bbc:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8003bbe:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <complet+0x19c>)
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8003bc8:	4b02      	ldr	r3, [pc, #8]	; (8003bd4 <complet+0x19c>)
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3730      	adds	r7, #48	; 0x30
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000774 	.word	0x20000774
 8003bd8:	0800d760 	.word	0x0800d760

08003bdc <sigint>:
#endif


void sigint (void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8003be2:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <sigint+0x50>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
	show_clock = true;
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <sigint+0x54>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]

	print (ENDL);
 8003bee:	4811      	ldr	r0, [pc, #68]	; (8003c34 <sigint+0x58>)
 8003bf0:	f7ff fcd0 	bl	8003594 <print>
	print ("^C catched!");
 8003bf4:	4810      	ldr	r0, [pc, #64]	; (8003c38 <sigint+0x5c>)
 8003bf6:	f7ff fccd 	bl	8003594 <print>
	int i = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8003bfe:	e009      	b.n	8003c14 <sigint+0x38>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8003c00:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <sigint+0x60>)
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <sigint+0x58>)
 8003c0c:	5cd3      	ldrb	r3, [r2, r3]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f7ff fab2 	bl	8003178 <microrl_insert_char>
	while (ENTER[i])
 8003c14:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <sigint+0x58>)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ef      	bne.n	8003c00 <sigint+0x24>
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000238 	.word	0x20000238
 8003c30:	2000000d 	.word	0x2000000d
 8003c34:	0800d60c 	.word	0x0800d60c
 8003c38:	0800d6b0 	.word	0x0800d6b0
 8003c3c:	20000008 	.word	0x20000008

08003c40 <init_microrl>:

void init_microrl(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <init_microrl+0x38>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	490c      	ldr	r1, [pc, #48]	; (8003c7c <init_microrl+0x3c>)
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe ff56 	bl	8002afc <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <init_microrl+0x38>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	490a      	ldr	r1, [pc, #40]	; (8003c80 <init_microrl+0x40>)
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe ff9c 	bl	8002b94 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <init_microrl+0x38>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4908      	ldr	r1, [pc, #32]	; (8003c84 <init_microrl+0x44>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe ff88 	bl	8002b78 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <init_microrl+0x38>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4906      	ldr	r1, [pc, #24]	; (8003c88 <init_microrl+0x48>)
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe ff9e 	bl	8002bb0 <microrl_set_sigint_callback>
}
 8003c74:	bf00      	nop
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000008 	.word	0x20000008
 8003c7c:	08003595 	.word	0x08003595
 8003c80:	08003899 	.word	0x08003899
 8003c84:	08003a39 	.word	0x08003a39
 8003c88:	08003bdd 	.word	0x08003bdd

08003c8c <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8003c96:	4805      	ldr	r0, [pc, #20]	; (8003cac <clear_screen+0x20>)
 8003c98:	f7ff fc7c 	bl	8003594 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8003c9c:	4804      	ldr	r0, [pc, #16]	; (8003cb0 <clear_screen+0x24>)
 8003c9e:	f7ff fc79 	bl	8003594 <print>
	return 0;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	0800d6bc 	.word	0x0800d6bc
 8003cb0:	0800d6c4 	.word	0x0800d6c4

08003cb4 <color_toggle>:

int color_toggle 	(int argc, const char * const * argv)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <color_toggle+0x30>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	f083 0301 	eor.w	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <color_toggle+0x30>)
 8003cd4:	701a      	strb	r2, [r3, #0]
	return 0;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	2000000c 	.word	0x2000000c

08003ce8 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <color_on+0x28>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8003cf8:	2105      	movs	r1, #5
 8003cfa:	4806      	ldr	r0, [pc, #24]	; (8003d14 <color_on+0x2c>)
 8003cfc:	f7ff fcaa 	bl	8003654 <print_color>
	print(ENDL);
 8003d00:	4805      	ldr	r0, [pc, #20]	; (8003d18 <color_on+0x30>)
 8003d02:	f7ff fc47 	bl	8003594 <print>
	return 0;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	2000000c 	.word	0x2000000c
 8003d14:	0800d6c8 	.word	0x0800d6c8
 8003d18:	0800d60c 	.word	0x0800d60c

08003d1c <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <color_off+0x28>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8003d2c:	4806      	ldr	r0, [pc, #24]	; (8003d48 <color_off+0x2c>)
 8003d2e:	f7ff fc31 	bl	8003594 <print>
	print(ENDL);
 8003d32:	4806      	ldr	r0, [pc, #24]	; (8003d4c <color_off+0x30>)
 8003d34:	f7ff fc2e 	bl	8003594 <print>
	return 0;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	2000000c 	.word	0x2000000c
 8003d48:	0800d6dc 	.word	0x0800d6dc
 8003d4c:	0800d60c 	.word	0x0800d60c

08003d50 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
	if (color_out)
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <color_show+0x34>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8003d62:	2105      	movs	r1, #5
 8003d64:	4808      	ldr	r0, [pc, #32]	; (8003d88 <color_show+0x38>)
 8003d66:	f7ff fc75 	bl	8003654 <print_color>
 8003d6a:	e002      	b.n	8003d72 <color_show+0x22>
	else
		print ("Color output is OFF");
 8003d6c:	4807      	ldr	r0, [pc, #28]	; (8003d8c <color_show+0x3c>)
 8003d6e:	f7ff fc11 	bl	8003594 <print>
	print(ENDL);
 8003d72:	4807      	ldr	r0, [pc, #28]	; (8003d90 <color_show+0x40>)
 8003d74:	f7ff fc0e 	bl	8003594 <print>
	return 0;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2000000c 	.word	0x2000000c
 8003d88:	0800d6c8 	.word	0x0800d6c8
 8003d8c:	0800d6dc 	.word	0x0800d6dc
 8003d90:	0800d60c 	.word	0x0800d60c

08003d94 <vfd_text>:


int vfd_text (int argc, const char * const * argv)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
	show_clock = false;
 8003d9e:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <vfd_text+0x90>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
	uint8_t index = 0; // current index in string
 8003da4:	2300      	movs	r3, #0
 8003da6:	75fb      	strb	r3, [r7, #23]
	for (int i = 1; i < argc; i++)
 8003da8:	2301      	movs	r3, #1
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e025      	b.n	8003dfa <vfd_text+0x66>
	{
		char * pchar = (char*)argv[i];
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	4413      	add	r3, r2
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60fb      	str	r3, [r7, #12]
		while(*pchar)
 8003dba:	e00b      	b.n	8003dd4 <vfd_text+0x40>
		{
			txt2disp[index++] = *(pchar++);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	60fa      	str	r2, [r7, #12]
 8003dc2:	7dfa      	ldrb	r2, [r7, #23]
 8003dc4:	1c51      	adds	r1, r2, #1
 8003dc6:	75f9      	strb	r1, [r7, #23]
 8003dc8:	7819      	ldrb	r1, [r3, #0]
 8003dca:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <vfd_text+0x94>)
 8003dcc:	5499      	strb	r1, [r3, r2]
			if (index >= sizeof(txt2disp)-2)
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	2b7d      	cmp	r3, #125	; 0x7d
 8003dd2:	d804      	bhi.n	8003dde <vfd_text+0x4a>
		while(*pchar)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1ef      	bne.n	8003dbc <vfd_text+0x28>
 8003ddc:	e000      	b.n	8003de0 <vfd_text+0x4c>
				break;
 8003dde:	bf00      	nop
		}
		txt2disp[index++] = ' ';
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	75fa      	strb	r2, [r7, #23]
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <vfd_text+0x94>)
 8003dea:	2120      	movs	r1, #32
 8003dec:	5499      	strb	r1, [r3, r2]
		if (index >= sizeof(txt2disp)-1)
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b7e      	cmp	r3, #126	; 0x7e
 8003df2:	d807      	bhi.n	8003e04 <vfd_text+0x70>
	for (int i = 1; i < argc; i++)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	3301      	adds	r3, #1
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	dbd5      	blt.n	8003dae <vfd_text+0x1a>
 8003e02:	e000      	b.n	8003e06 <vfd_text+0x72>
			break;
 8003e04:	bf00      	nop
	}
	txt2disp[index-1] = '\0';
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	4a07      	ldr	r2, [pc, #28]	; (8003e28 <vfd_text+0x94>)
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	54d1      	strb	r1, [r2, r3]
	fresh_txt = true;
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <vfd_text+0x98>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
	return 0;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	2000000d 	.word	0x2000000d
 8003e28:	200006cc 	.word	0x200006cc
 8003e2c:	2000074c 	.word	0x2000074c

08003e30 <leds_toggle>:


int leds_toggle		(int argc, const char * const * argv)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
	use_leds ^= 1;
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <leds_toggle+0x3c>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	f083 0301 	eor.w	r3, r3, #1
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf14      	ite	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	2300      	moveq	r3, #0
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <leds_toggle+0x3c>)
 8003e50:	701a      	strb	r2, [r3, #0]
	print_color("Done", C_GREEN);
 8003e52:	2105      	movs	r1, #5
 8003e54:	4806      	ldr	r0, [pc, #24]	; (8003e70 <leds_toggle+0x40>)
 8003e56:	f7ff fbfd 	bl	8003654 <print_color>
	print(ENDL);
 8003e5a:	4806      	ldr	r0, [pc, #24]	; (8003e74 <leds_toggle+0x44>)
 8003e5c:	f7ff fb9a 	bl	8003594 <print>
	return 0;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000239 	.word	0x20000239
 8003e70:	0800d6f0 	.word	0x0800d6f0
 8003e74:	0800d60c 	.word	0x0800d60c

08003e78 <set_td>:



int set_td		(int argc, const char * const * argv)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	if (argc == 3 && str_length(argv[2]) == 6)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d140      	bne.n	8003f0a <set_td+0x92>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fc06 	bl	80036a0 <str_length>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d137      	bne.n	8003f0a <set_td+0x92>
	{
		uint8_t arr [3];
		for (int i = 0; i < 3; i++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e021      	b.n	8003ee4 <set_td+0x6c>
		{
			arr[2-i] = (argv[2][i*2+1]-'0')+((argv[2][i*2]-'0')<<4);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	0049      	lsls	r1, r1, #1
 8003eba:	440b      	add	r3, r1
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	3b30      	subs	r3, #48	; 0x30
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f1c3 0302 	rsb	r3, r3, #2
 8003ed0:	3a30      	subs	r2, #48	; 0x30
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	f107 0110 	add.w	r1, r7, #16
 8003ed8:	440b      	add	r3, r1
 8003eda:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (int i = 0; i < 3; i++)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	ddda      	ble.n	8003ea0 <set_td+0x28>
		}
		d3231_set(arr, argv[0][0] == 'd');
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b64      	cmp	r3, #100	; 0x64
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	f107 0308 	add.w	r3, r7, #8
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd fa85 	bl	8001410 <d3231_set>
		return 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e007      	b.n	8003f1a <set_td+0xa2>
	}
	print_color("wrong format", C_RED);
 8003f0a:	2109      	movs	r1, #9
 8003f0c:	4805      	ldr	r0, [pc, #20]	; (8003f24 <set_td+0xac>)
 8003f0e:	f7ff fba1 	bl	8003654 <print_color>
	print(ENDL);
 8003f12:	4805      	ldr	r0, [pc, #20]	; (8003f28 <set_td+0xb0>)
 8003f14:	f7ff fb3e 	bl	8003594 <print>
	return 0;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	0800d6f8 	.word	0x0800d6f8
 8003f28:	0800d60c 	.word	0x0800d60c

08003f2c <get_td>:

int get_td		(int argc, const char * const * argv)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
	bool date = argv[0][0] == 'd';
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b64      	cmp	r3, #100	; 0x64
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	77fb      	strb	r3, [r7, #31]
	char str[9];
	uint8_t * d3231 = d3231_get_all();
 8003f46:	f7fd fa2b 	bl	80013a0 <d3231_get_all>
 8003f4a:	61b8      	str	r0, [r7, #24]
	uint8_t offset = date*4;
 8003f4c:	7ffb      	ldrb	r3, [r7, #31]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	75fb      	strb	r3, [r7, #23]
	str[8] = '\0';
 8003f52:	2300      	movs	r3, #0
 8003f54:	753b      	strb	r3, [r7, #20]
	str[7] = (d3231[offset + 0]&0xF) + '0';
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	3330      	adds	r3, #48	; 0x30
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	74fb      	strb	r3, [r7, #19]
	str[6] = ((d3231[offset + 0]>>4)&0xF) + '0';
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4413      	add	r3, r2
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	3330      	adds	r3, #48	; 0x30
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	74bb      	strb	r3, [r7, #18]
	str[4] = (d3231[offset + 1]&0xF) + '0';
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4413      	add	r3, r2
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	3330      	adds	r3, #48	; 0x30
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	743b      	strb	r3, [r7, #16]
	str[3] = ((d3231[offset + 1]>>4)&0xF) + '0';
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	3301      	adds	r3, #1
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4413      	add	r3, r2
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	3330      	adds	r3, #48	; 0x30
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	73fb      	strb	r3, [r7, #15]
	str[1] = (d3231[offset + 2]&0xF) + '0';
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
 8003fa8:	3302      	adds	r3, #2
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4413      	add	r3, r2
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	3330      	adds	r3, #48	; 0x30
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	737b      	strb	r3, [r7, #13]
	str[0] = ((d3231[offset + 2]>>4)&0xF) + '0';
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	3330      	adds	r3, #48	; 0x30
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	733b      	strb	r3, [r7, #12]
	str[5] = str[2] = date?'-':':';
 8003fd0:	7ffb      	ldrb	r3, [r7, #31]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <get_td+0xae>
 8003fd6:	232d      	movs	r3, #45	; 0x2d
 8003fd8:	e000      	b.n	8003fdc <get_td+0xb0>
 8003fda:	233a      	movs	r3, #58	; 0x3a
 8003fdc:	73bb      	strb	r3, [r7, #14]
 8003fde:	7bbb      	ldrb	r3, [r7, #14]
 8003fe0:	747b      	strb	r3, [r7, #17]
	print_color(str, C_L_BLUE);
 8003fe2:	f107 030c 	add.w	r3, r7, #12
 8003fe6:	2104      	movs	r1, #4
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fb33 	bl	8003654 <print_color>
	print(ENDL);
 8003fee:	4804      	ldr	r0, [pc, #16]	; (8004000 <get_td+0xd4>)
 8003ff0:	f7ff fad0 	bl	8003594 <print>
	return 0;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	0800d60c 	.word	0x0800d60c

08004004 <get_temp>:

int get_temp		(int argc, const char * const * argv)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
	uint8_t * d3231 = d3231_get_temp();
 800400e:	f7fd f9af 	bl	8001370 <d3231_get_temp>
 8004012:	61b8      	str	r0, [r7, #24]

	bool negative = d3231[0]&(1<<7);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]
	uint16_t temp = d3231[0]&(~(1<<7));
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004030:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t dec   = d3231[1]>>6;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	3301      	adds	r3, #1
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	099b      	lsrs	r3, r3, #6
 800403a:	75bb      	strb	r3, [r7, #22]

	dec *= 25; // calculate decimal part
 800403c:	7dbb      	ldrb	r3, [r7, #22]
 800403e:	461a      	mov	r2, r3
 8004040:	0092      	lsls	r2, r2, #2
 8004042:	4413      	add	r3, r2
 8004044:	461a      	mov	r2, r3
 8004046:	0091      	lsls	r1, r2, #2
 8004048:	461a      	mov	r2, r3
 800404a:	460b      	mov	r3, r1
 800404c:	4413      	add	r3, r2
 800404e:	75bb      	strb	r3, [r7, #22]
	temp *= 1000;
 8004050:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004052:	461a      	mov	r2, r3
 8004054:	0152      	lsls	r2, r2, #5
 8004056:	1ad2      	subs	r2, r2, r3
 8004058:	0092      	lsls	r2, r2, #2
 800405a:	4413      	add	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	84fb      	strh	r3, [r7, #38]	; 0x26
	temp += dec;
 8004060:	7dbb      	ldrb	r3, [r7, #22]
 8004062:	b29a      	uxth	r2, r3
 8004064:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004066:	4413      	add	r3, r2
 8004068:	84fb      	strh	r3, [r7, #38]	; 0x26


	char str[8];
	str[7] = '\0';
 800406a:	2300      	movs	r3, #0
 800406c:	74fb      	strb	r3, [r7, #19]
	for (int i = 6; i >= 0; i--)
 800406e:	2306      	movs	r3, #6
 8004070:	623b      	str	r3, [r7, #32]
 8004072:	e01c      	b.n	80040ae <get_temp+0xaa>
	{
		str[i] = (temp % 10) + '0';
 8004074:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004076:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <get_temp+0x124>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	08d9      	lsrs	r1, r3, #3
 800407e:	460b      	mov	r3, r1
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	b29b      	uxth	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	3330      	adds	r3, #48	; 0x30
 800408e:	b2d9      	uxtb	r1, r3
 8004090:	f107 020c 	add.w	r2, r7, #12
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	4413      	add	r3, r2
 8004098:	460a      	mov	r2, r1
 800409a:	701a      	strb	r2, [r3, #0]
		temp /= 10;
 800409c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800409e:	4a22      	ldr	r2, [pc, #136]	; (8004128 <get_temp+0x124>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	08db      	lsrs	r3, r3, #3
 80040a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 6; i >= 0; i--)
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	623b      	str	r3, [r7, #32]
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	dadf      	bge.n	8004074 <get_temp+0x70>
	}
	str[4] = '.';
 80040b4:	232e      	movs	r3, #46	; 0x2e
 80040b6:	743b      	strb	r3, [r7, #16]
	for (int i = 0; i < 7; i++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e020      	b.n	8004100 <get_temp+0xfc>
	{
		if (str[i] != '0')
 80040be:	f107 020c 	add.w	r2, r7, #12
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b30      	cmp	r3, #48	; 0x30
 80040ca:	d010      	beq.n	80040ee <get_temp+0xea>
		{
			if (i > 0)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	dd1a      	ble.n	8004108 <get_temp+0x104>
				str[i-1] = negative?'-':'+';
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <get_temp+0xd8>
 80040d8:	222d      	movs	r2, #45	; 0x2d
 80040da:	e000      	b.n	80040de <get_temp+0xda>
 80040dc:	222b      	movs	r2, #43	; 0x2b
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80040e6:	440b      	add	r3, r1
 80040e8:	f803 2c1c 	strb.w	r2, [r3, #-28]
			break;
 80040ec:	e00c      	b.n	8004108 <get_temp+0x104>
		}
		str[i] = ' ';
 80040ee:	f107 020c 	add.w	r2, r7, #12
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	2220      	movs	r2, #32
 80040f8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 7; i++)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3301      	adds	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b06      	cmp	r3, #6
 8004104:	dddb      	ble.n	80040be <get_temp+0xba>
 8004106:	e000      	b.n	800410a <get_temp+0x106>
			break;
 8004108:	bf00      	nop
	}
	print_color(str, C_GREEN);
 800410a:	f107 030c 	add.w	r3, r7, #12
 800410e:	2105      	movs	r1, #5
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fa9f 	bl	8003654 <print_color>
	print(ENDL);
 8004116:	4805      	ldr	r0, [pc, #20]	; (800412c <get_temp+0x128>)
 8004118:	f7ff fa3c 	bl	8003594 <print>
	return 0;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3728      	adds	r7, #40	; 0x28
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	cccccccd 	.word	0xcccccccd
 800412c:	0800d60c 	.word	0x0800d60c

08004130 <clock>:

int clock		(int argc, const char * const * argv)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	show_clock = true;
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <clock+0x1c>)
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
	return 0;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	2000000d 	.word	0x2000000d

08004150 <get_thp>:

int get_thp		(int argc, const char * const * argv)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
	update_thp();
 800415a:	f7fd fe83 	bl	8001e64 <update_thp>
	print_color(bme280_ascii.all, C_CYAN);
 800415e:	2107      	movs	r1, #7
 8004160:	4805      	ldr	r0, [pc, #20]	; (8004178 <get_thp+0x28>)
 8004162:	f7ff fa77 	bl	8003654 <print_color>
	print(ENDL);
 8004166:	4805      	ldr	r0, [pc, #20]	; (800417c <get_thp+0x2c>)
 8004168:	f7ff fa14 	bl	8003594 <print>
	return 0;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	200004a1 	.word	0x200004a1
 800417c:	0800d60c 	.word	0x0800d60c

08004180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_MspInit+0x5c>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	4a14      	ldr	r2, [pc, #80]	; (80041dc <HAL_MspInit+0x5c>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6193      	str	r3, [r2, #24]
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_MspInit+0x5c>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <HAL_MspInit+0x5c>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <HAL_MspInit+0x5c>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a8:	61d3      	str	r3, [r2, #28]
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <HAL_MspInit+0x5c>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	607b      	str	r3, [r7, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_MspInit+0x60>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <HAL_MspInit+0x60>)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40010000 	.word	0x40010000

080041e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 0310 	add.w	r3, r7, #16
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a15      	ldr	r2, [pc, #84]	; (8004254 <HAL_I2C_MspInit+0x70>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d123      	bne.n	800424c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004204:	4b14      	ldr	r3, [pc, #80]	; (8004258 <HAL_I2C_MspInit+0x74>)
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	4a13      	ldr	r2, [pc, #76]	; (8004258 <HAL_I2C_MspInit+0x74>)
 800420a:	f043 0308 	orr.w	r3, r3, #8
 800420e:	6193      	str	r3, [r2, #24]
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <HAL_I2C_MspInit+0x74>)
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800421c:	23c0      	movs	r3, #192	; 0xc0
 800421e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004220:	2312      	movs	r3, #18
 8004222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004224:	2303      	movs	r3, #3
 8004226:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004228:	f107 0310 	add.w	r3, r7, #16
 800422c:	4619      	mov	r1, r3
 800422e:	480b      	ldr	r0, [pc, #44]	; (800425c <HAL_I2C_MspInit+0x78>)
 8004230:	f000 fc66 	bl	8004b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_I2C_MspInit+0x74>)
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	4a07      	ldr	r2, [pc, #28]	; (8004258 <HAL_I2C_MspInit+0x74>)
 800423a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800423e:	61d3      	str	r3, [r2, #28]
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_I2C_MspInit+0x74>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800424c:	bf00      	nop
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40005400 	.word	0x40005400
 8004258:	40021000 	.word	0x40021000
 800425c:	40010c00 	.word	0x40010c00

08004260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 0310 	add.w	r3, r7, #16
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <HAL_SPI_MspInit+0x8c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d131      	bne.n	80042e4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_SPI_MspInit+0x90>)
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <HAL_SPI_MspInit+0x90>)
 8004286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800428a:	61d3      	str	r3, [r2, #28]
 800428c:	4b18      	ldr	r3, [pc, #96]	; (80042f0 <HAL_SPI_MspInit+0x90>)
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <HAL_SPI_MspInit+0x90>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <HAL_SPI_MspInit+0x90>)
 800429e:	f043 0308 	orr.w	r3, r3, #8
 80042a2:	6193      	str	r3, [r2, #24]
 80042a4:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_SPI_MspInit+0x90>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80042b0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80042b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b6:	2302      	movs	r3, #2
 80042b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ba:	2303      	movs	r3, #3
 80042bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042be:	f107 0310 	add.w	r3, r7, #16
 80042c2:	4619      	mov	r1, r3
 80042c4:	480b      	ldr	r0, [pc, #44]	; (80042f4 <HAL_SPI_MspInit+0x94>)
 80042c6:	f000 fc1b 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80042ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d8:	f107 0310 	add.w	r3, r7, #16
 80042dc:	4619      	mov	r1, r3
 80042de:	4805      	ldr	r0, [pc, #20]	; (80042f4 <HAL_SPI_MspInit+0x94>)
 80042e0:	f000 fc0e 	bl	8004b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80042e4:	bf00      	nop
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40003800 	.word	0x40003800
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40010c00 	.word	0x40010c00

080042f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042fc:	e7fe      	b.n	80042fc <NMI_Handler+0x4>

080042fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004302:	e7fe      	b.n	8004302 <HardFault_Handler+0x4>

08004304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004308:	e7fe      	b.n	8004308 <MemManage_Handler+0x4>

0800430a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800430e:	e7fe      	b.n	800430e <BusFault_Handler+0x4>

08004310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004314:	e7fe      	b.n	8004314 <UsageFault_Handler+0x4>

08004316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004316:	b480      	push	{r7}
 8004318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800431a:	bf00      	nop
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004322:	b480      	push	{r7}
 8004324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004332:	bf00      	nop
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800433e:	f000 fa91 	bl	8004864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800434e:	f001 fed4 	bl	80060fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20001558 	.word	0x20001558

0800435c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004364:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <_sbrk+0x5c>)
 8004366:	4b15      	ldr	r3, [pc, #84]	; (80043bc <_sbrk+0x60>)
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <_sbrk+0x64>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <_sbrk+0x64>)
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <_sbrk+0x68>)
 800437c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <_sbrk+0x64>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	429a      	cmp	r2, r3
 800438a:	d207      	bcs.n	800439c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800438c:	f008 fc18 	bl	800cbc0 <__errno>
 8004390:	4603      	mov	r3, r0
 8004392:	220c      	movs	r2, #12
 8004394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	e009      	b.n	80043b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800439c:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <_sbrk+0x64>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <_sbrk+0x64>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	4a05      	ldr	r2, [pc, #20]	; (80043c0 <_sbrk+0x64>)
 80043ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043ae:	68fb      	ldr	r3, [r7, #12]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20005000 	.word	0x20005000
 80043bc:	00000400 	.word	0x00000400
 80043c0:	2000023c 	.word	0x2000023c
 80043c4:	20001858 	.word	0x20001858

080043c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2b2f      	cmp	r3, #47	; 0x2f
 80043e2:	d908      	bls.n	80043f6 <get_char+0x22>
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	2b39      	cmp	r3, #57	; 0x39
 80043e8:	d805      	bhi.n	80043f6 <get_char+0x22>
		return vfd_digits[input - '0'];
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	3b30      	subs	r3, #48	; 0x30
 80043ee:	4a2a      	ldr	r2, [pc, #168]	; (8004498 <get_char+0xc4>)
 80043f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043f4:	e04a      	b.n	800448c <get_char+0xb8>
	if (0 <= input && input <= 9)
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	2b09      	cmp	r3, #9
 80043fa:	d804      	bhi.n	8004406 <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	4a26      	ldr	r2, [pc, #152]	; (8004498 <get_char+0xc4>)
 8004400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004404:	e042      	b.n	800448c <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e00e      	b.n	800442a <get_char+0x56>
		if (vfd_special_char[i] == input)
 800440c:	4a23      	ldr	r2, [pc, #140]	; (800449c <get_char+0xc8>)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	79fa      	ldrb	r2, [r7, #7]
 8004416:	429a      	cmp	r2, r3
 8004418:	d104      	bne.n	8004424 <get_char+0x50>
			return vfd_special[i];
 800441a:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <get_char+0xcc>)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004422:	e033      	b.n	800448c <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3301      	adds	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b19      	cmp	r3, #25
 800442e:	d9ed      	bls.n	800440c <get_char+0x38>
	if ('a' <= input && input <= 'z')
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	2b60      	cmp	r3, #96	; 0x60
 8004434:	d908      	bls.n	8004448 <get_char+0x74>
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	2b7a      	cmp	r3, #122	; 0x7a
 800443a:	d805      	bhi.n	8004448 <get_char+0x74>
		return vfd_alpha[input - 'a'];
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	3b61      	subs	r3, #97	; 0x61
 8004440:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <get_char+0xd0>)
 8004442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004446:	e021      	b.n	800448c <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	2b40      	cmp	r3, #64	; 0x40
 800444c:	d908      	bls.n	8004460 <get_char+0x8c>
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	2b5a      	cmp	r3, #90	; 0x5a
 8004452:	d805      	bhi.n	8004460 <get_char+0x8c>
		return vfd_alpha[input - 'A'];
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	3b41      	subs	r3, #65	; 0x41
 8004458:	4a12      	ldr	r2, [pc, #72]	; (80044a4 <get_char+0xd0>)
 800445a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800445e:	e015      	b.n	800448c <get_char+0xb8>
	if (192 <= input && input <= 223)
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	2bbf      	cmp	r3, #191	; 0xbf
 8004464:	d908      	bls.n	8004478 <get_char+0xa4>
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	2bdf      	cmp	r3, #223	; 0xdf
 800446a:	d805      	bhi.n	8004478 <get_char+0xa4>
		return vfd_alpha_ru[input - 192];
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	3bc0      	subs	r3, #192	; 0xc0
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <get_char+0xd4>)
 8004472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004476:	e009      	b.n	800448c <get_char+0xb8>
	if (224 <= input && input <= 255)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	2bdf      	cmp	r3, #223	; 0xdf
 800447c:	d905      	bls.n	800448a <get_char+0xb6>
		return vfd_alpha_ru[input - 224];
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	3be0      	subs	r3, #224	; 0xe0
 8004482:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <get_char+0xd4>)
 8004484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004488:	e000      	b.n	800448c <get_char+0xb8>
	return 0;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	0800dba8 	.word	0x0800dba8
 800449c:	0800dc64 	.word	0x0800dc64
 80044a0:	0800dc30 	.word	0x0800dc30
 80044a4:	0800dbbc 	.word	0x0800dbbc
 80044a8:	0800dbf0 	.word	0x0800dbf0

080044ac <str2vfd>:

void str2vfd(char * str)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 80044b4:	230a      	movs	r3, #10
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	e028      	b.n	800450c <str2vfd+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 80044ba:	493e      	ldr	r1, [pc, #248]	; (80045b4 <str2vfd+0x108>)
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4613      	mov	r3, r2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	4413      	add	r3, r2
 80044c4:	440b      	add	r3, r1
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	b2d8      	uxtb	r0, r3
 80044ce:	4939      	ldr	r1, [pc, #228]	; (80045b4 <str2vfd+0x108>)
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	440b      	add	r3, r1
 80044da:	4602      	mov	r2, r0
 80044dc:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 80044de:	4935      	ldr	r1, [pc, #212]	; (80045b4 <str2vfd+0x108>)
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4613      	mov	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	440b      	add	r3, r1
 80044ea:	3301      	adds	r3, #1
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044f2:	b2d8      	uxtb	r0, r3
 80044f4:	492f      	ldr	r1, [pc, #188]	; (80045b4 <str2vfd+0x108>)
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	440b      	add	r3, r1
 8004500:	3301      	adds	r3, #1
 8004502:	4602      	mov	r2, r0
 8004504:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3b01      	subs	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	dcd3      	bgt.n	80044ba <str2vfd+0xe>
	}
	uint8_t i = 10;
 8004512:	230a      	movs	r3, #10
 8004514:	72fb      	strb	r3, [r7, #11]
	while (*str)
 8004516:	e042      	b.n	800459e <str2vfd+0xf2>
	{
		 buf = get_char(*(str++));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff ff57 	bl	80043d4 <get_char>
 8004526:	4603      	mov	r3, r0
 8004528:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 800452a:	7afa      	ldrb	r2, [r7, #11]
 800452c:	4921      	ldr	r1, [pc, #132]	; (80045b4 <str2vfd+0x108>)
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	440b      	add	r3, r1
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	b25a      	sxtb	r2, r3
 800453a:	893b      	ldrh	r3, [r7, #8]
 800453c:	b25b      	sxtb	r3, r3
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	b25b      	sxtb	r3, r3
 8004544:	4313      	orrs	r3, r2
 8004546:	b25b      	sxtb	r3, r3
 8004548:	7afa      	ldrb	r2, [r7, #11]
 800454a:	b2d8      	uxtb	r0, r3
 800454c:	4919      	ldr	r1, [pc, #100]	; (80045b4 <str2vfd+0x108>)
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	440b      	add	r3, r1
 8004556:	4602      	mov	r2, r0
 8004558:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 800455a:	7afa      	ldrb	r2, [r7, #11]
 800455c:	4915      	ldr	r1, [pc, #84]	; (80045b4 <str2vfd+0x108>)
 800455e:	4613      	mov	r3, r2
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	4413      	add	r3, r2
 8004564:	440b      	add	r3, r1
 8004566:	3301      	adds	r3, #1
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b25a      	sxtb	r2, r3
 800456c:	893b      	ldrh	r3, [r7, #8]
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	b29b      	uxth	r3, r3
 8004572:	b25b      	sxtb	r3, r3
 8004574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004578:	b25b      	sxtb	r3, r3
 800457a:	4313      	orrs	r3, r2
 800457c:	b25b      	sxtb	r3, r3
 800457e:	7afa      	ldrb	r2, [r7, #11]
 8004580:	b2d8      	uxtb	r0, r3
 8004582:	490c      	ldr	r1, [pc, #48]	; (80045b4 <str2vfd+0x108>)
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	440b      	add	r3, r1
 800458c:	3301      	adds	r3, #1
 800458e:	4602      	mov	r2, r0
 8004590:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 8004592:	7afb      	ldrb	r3, [r7, #11]
 8004594:	3b01      	subs	r3, #1
 8004596:	72fb      	strb	r3, [r7, #11]
 8004598:	7afb      	ldrb	r3, [r7, #11]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <str2vfd+0xfc>
	while (*str)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1b8      	bne.n	8004518 <str2vfd+0x6c>
			 break;
	}
}
 80045a6:	e000      	b.n	80045aa <str2vfd+0xfe>
			 break;
 80045a8:	bf00      	nop
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000750 	.word	0x20000750

080045b8 <symbols_vfd>:

void symbols_vfd(uint32_t symbols)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(vfd_symbols)/sizeof(vfd_symbols[0]); i++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e07a      	b.n	80046bc <symbols_vfd+0x104>
	{
		if (symbols & (1<<i))
 80045c6:	2201      	movs	r2, #1
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d036      	beq.n	8004646 <symbols_vfd+0x8e>
		{
			// set symbol
			for (int b = 0; b < 3; b++)
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	e02f      	b.n	800463e <symbols_vfd+0x86>
			  vfd.arr2[vfd_symbols[i][0]][b] |= ((1<<vfd_symbols[i][1])>>(b<<3))&0xFF;
 80045de:	4a3c      	ldr	r2, [pc, #240]	; (80046d0 <symbols_vfd+0x118>)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80045e6:	4619      	mov	r1, r3
 80045e8:	4a3a      	ldr	r2, [pc, #232]	; (80046d4 <symbols_vfd+0x11c>)
 80045ea:	460b      	mov	r3, r1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	440b      	add	r3, r1
 80045f0:	441a      	add	r2, r3
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4413      	add	r3, r2
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b25a      	sxtb	r2, r3
 80045fa:	4935      	ldr	r1, [pc, #212]	; (80046d0 <symbols_vfd+0x118>)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	440b      	add	r3, r1
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	4619      	mov	r1, r3
 8004606:	2301      	movs	r3, #1
 8004608:	fa03 f101 	lsl.w	r1, r3, r1
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	fa41 f303 	asr.w	r3, r1, r3
 8004614:	b25b      	sxtb	r3, r3
 8004616:	4313      	orrs	r3, r2
 8004618:	b258      	sxtb	r0, r3
 800461a:	4a2d      	ldr	r2, [pc, #180]	; (80046d0 <symbols_vfd+0x118>)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004622:	4619      	mov	r1, r3
 8004624:	b2c0      	uxtb	r0, r0
 8004626:	4a2b      	ldr	r2, [pc, #172]	; (80046d4 <symbols_vfd+0x11c>)
 8004628:	460b      	mov	r3, r1
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	440b      	add	r3, r1
 800462e:	441a      	add	r2, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	4602      	mov	r2, r0
 8004636:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	3301      	adds	r3, #1
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b02      	cmp	r3, #2
 8004642:	ddcc      	ble.n	80045de <symbols_vfd+0x26>
 8004644:	e037      	b.n	80046b6 <symbols_vfd+0xfe>
		}
		else
		{
			// reset symbol
			for (int b = 0; b < 3; b++)
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e031      	b.n	80046b0 <symbols_vfd+0xf8>
			  vfd.arr2[vfd_symbols[i][0]][b] &= ~(((1<<vfd_symbols[i][1])>>(b<<3))&0xFF);
 800464c:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <symbols_vfd+0x118>)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004654:	4619      	mov	r1, r3
 8004656:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <symbols_vfd+0x11c>)
 8004658:	460b      	mov	r3, r1
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	440b      	add	r3, r1
 800465e:	441a      	add	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	b25a      	sxtb	r2, r3
 8004668:	4919      	ldr	r1, [pc, #100]	; (80046d0 <symbols_vfd+0x118>)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	440b      	add	r3, r1
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	4619      	mov	r1, r3
 8004674:	2301      	movs	r3, #1
 8004676:	fa03 f101 	lsl.w	r1, r3, r1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	fa41 f303 	asr.w	r3, r1, r3
 8004682:	b25b      	sxtb	r3, r3
 8004684:	43db      	mvns	r3, r3
 8004686:	b25b      	sxtb	r3, r3
 8004688:	4013      	ands	r3, r2
 800468a:	b258      	sxtb	r0, r3
 800468c:	4a10      	ldr	r2, [pc, #64]	; (80046d0 <symbols_vfd+0x118>)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004694:	4619      	mov	r1, r3
 8004696:	b2c0      	uxtb	r0, r0
 8004698:	4a0e      	ldr	r2, [pc, #56]	; (80046d4 <symbols_vfd+0x11c>)
 800469a:	460b      	mov	r3, r1
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	440b      	add	r3, r1
 80046a0:	441a      	add	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	4602      	mov	r2, r0
 80046a8:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3301      	adds	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	ddca      	ble.n	800464c <symbols_vfd+0x94>
	for (int i = 0; i < sizeof(vfd_symbols)/sizeof(vfd_symbols[0]); i++)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	3301      	adds	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2b18      	cmp	r3, #24
 80046c0:	d981      	bls.n	80045c6 <symbols_vfd+0xe>
		}
	}
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	0800dc80 	.word	0x0800dc80
 80046d4:	20000750 	.word	0x20000750

080046d8 <clr_vfd>:

void clr_vfd(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80046de:	2300      	movs	r3, #0
 80046e0:	607b      	str	r3, [r7, #4]
 80046e2:	e007      	b.n	80046f4 <clr_vfd+0x1c>
		  vfd.arr1[a] = 0;
 80046e4:	4a08      	ldr	r2, [pc, #32]	; (8004708 <clr_vfd+0x30>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3301      	adds	r3, #1
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d9f4      	bls.n	80046e4 <clr_vfd+0xc>
}
 80046fa:	bf00      	nop
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000750 	.word	0x20000750

0800470c <save_vfd>:

uint8_t backup[11*3];

void save_vfd(void)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	e00b      	b.n	8004730 <save_vfd+0x24>
		backup[i] = vfd.arr1[i];
 8004718:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <save_vfd+0x38>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	7819      	ldrb	r1, [r3, #0]
 8004720:	4a09      	ldr	r2, [pc, #36]	; (8004748 <save_vfd+0x3c>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	460a      	mov	r2, r1
 8004728:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3301      	adds	r3, #1
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b20      	cmp	r3, #32
 8004734:	d9f0      	bls.n	8004718 <save_vfd+0xc>
}
 8004736:	bf00      	nop
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20000750 	.word	0x20000750
 8004748:	2000089c 	.word	0x2000089c

0800474c <restore_vfd>:

void restore_vfd(void)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	e00b      	b.n	8004770 <restore_vfd+0x24>
		vfd.arr1[i] = backup[i];
 8004758:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <restore_vfd+0x38>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	7819      	ldrb	r1, [r3, #0]
 8004760:	4a09      	ldr	r2, [pc, #36]	; (8004788 <restore_vfd+0x3c>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	460a      	mov	r2, r1
 8004768:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3301      	adds	r3, #1
 800476e:	607b      	str	r3, [r7, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b20      	cmp	r3, #32
 8004774:	d9f0      	bls.n	8004758 <restore_vfd+0xc>
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	2000089c 	.word	0x2000089c
 8004788:	20000750 	.word	0x20000750

0800478c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800478c:	480c      	ldr	r0, [pc, #48]	; (80047c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800478e:	490d      	ldr	r1, [pc, #52]	; (80047c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004790:	4a0d      	ldr	r2, [pc, #52]	; (80047c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004794:	e002      	b.n	800479c <LoopCopyDataInit>

08004796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800479a:	3304      	adds	r3, #4

0800479c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800479c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800479e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047a0:	d3f9      	bcc.n	8004796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047a4:	4c0a      	ldr	r4, [pc, #40]	; (80047d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80047a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047a8:	e001      	b.n	80047ae <LoopFillZerobss>

080047aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047ac:	3204      	adds	r2, #4

080047ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047b0:	d3fb      	bcc.n	80047aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80047b2:	f7ff fe09 	bl	80043c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047b6:	f008 fa09 	bl	800cbcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047ba:	f7fd fc93 	bl	80020e4 <main>
  bx lr
 80047be:	4770      	bx	lr
  ldr r0, =_sdata
 80047c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047c4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80047c8:	0800dcf0 	.word	0x0800dcf0
  ldr r2, =_sbss
 80047cc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80047d0:	20001854 	.word	0x20001854

080047d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047d4:	e7fe      	b.n	80047d4 <ADC1_2_IRQHandler>
	...

080047d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_Init+0x28>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a07      	ldr	r2, [pc, #28]	; (8004800 <HAL_Init+0x28>)
 80047e2:	f043 0310 	orr.w	r3, r3, #16
 80047e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047e8:	2003      	movs	r0, #3
 80047ea:	f000 f947 	bl	8004a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047ee:	200f      	movs	r0, #15
 80047f0:	f000 f808 	bl	8004804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047f4:	f7ff fcc4 	bl	8004180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40022000 	.word	0x40022000

08004804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800480c:	4b12      	ldr	r3, [pc, #72]	; (8004858 <HAL_InitTick+0x54>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b12      	ldr	r3, [pc, #72]	; (800485c <HAL_InitTick+0x58>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	4619      	mov	r1, r3
 8004816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800481a:	fbb3 f3f1 	udiv	r3, r3, r1
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f95f 	bl	8004ae6 <HAL_SYSTICK_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e00e      	b.n	8004850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b0f      	cmp	r3, #15
 8004836:	d80a      	bhi.n	800484e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004838:	2200      	movs	r2, #0
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	f000 f927 	bl	8004a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004844:	4a06      	ldr	r2, [pc, #24]	; (8004860 <HAL_InitTick+0x5c>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000010 	.word	0x20000010
 800485c:	20000018 	.word	0x20000018
 8004860:	20000014 	.word	0x20000014

08004864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_IncTick+0x1c>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_IncTick+0x20>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4413      	add	r3, r2
 8004874:	4a03      	ldr	r2, [pc, #12]	; (8004884 <HAL_IncTick+0x20>)
 8004876:	6013      	str	r3, [r2, #0]
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	20000018 	.word	0x20000018
 8004884:	200008c0 	.word	0x200008c0

08004888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return uwTick;
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <HAL_GetTick+0x10>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	200008c0 	.word	0x200008c0

0800489c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048a4:	f7ff fff0 	bl	8004888 <HAL_GetTick>
 80048a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d005      	beq.n	80048c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <HAL_Delay+0x44>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048c2:	bf00      	nop
 80048c4:	f7ff ffe0 	bl	8004888 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d8f7      	bhi.n	80048c4 <HAL_Delay+0x28>
  {
  }
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000018 	.word	0x20000018

080048e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <__NVIC_SetPriorityGrouping+0x44>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004900:	4013      	ands	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800490c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004916:	4a04      	ldr	r2, [pc, #16]	; (8004928 <__NVIC_SetPriorityGrouping+0x44>)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	60d3      	str	r3, [r2, #12]
}
 800491c:	bf00      	nop
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <__NVIC_GetPriorityGrouping+0x18>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0a1b      	lsrs	r3, r3, #8
 8004936:	f003 0307 	and.w	r3, r3, #7
}
 800493a:	4618      	mov	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	e000ed00 	.word	0xe000ed00

08004948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	2b00      	cmp	r3, #0
 8004958:	db0b      	blt.n	8004972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	f003 021f 	and.w	r2, r3, #31
 8004960:	4906      	ldr	r1, [pc, #24]	; (800497c <__NVIC_EnableIRQ+0x34>)
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2001      	movs	r0, #1
 800496a:	fa00 f202 	lsl.w	r2, r0, r2
 800496e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	e000e100 	.word	0xe000e100

08004980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	6039      	str	r1, [r7, #0]
 800498a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800498c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004990:	2b00      	cmp	r3, #0
 8004992:	db0a      	blt.n	80049aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	490c      	ldr	r1, [pc, #48]	; (80049cc <__NVIC_SetPriority+0x4c>)
 800499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499e:	0112      	lsls	r2, r2, #4
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	440b      	add	r3, r1
 80049a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049a8:	e00a      	b.n	80049c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4908      	ldr	r1, [pc, #32]	; (80049d0 <__NVIC_SetPriority+0x50>)
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	3b04      	subs	r3, #4
 80049b8:	0112      	lsls	r2, r2, #4
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	440b      	add	r3, r1
 80049be:	761a      	strb	r2, [r3, #24]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	e000e100 	.word	0xe000e100
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f1c3 0307 	rsb	r3, r3, #7
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	bf28      	it	cs
 80049f2:	2304      	movcs	r3, #4
 80049f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d902      	bls.n	8004a04 <NVIC_EncodePriority+0x30>
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	3b03      	subs	r3, #3
 8004a02:	e000      	b.n	8004a06 <NVIC_EncodePriority+0x32>
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a08:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43da      	mvns	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	401a      	ands	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	43d9      	mvns	r1, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a2c:	4313      	orrs	r3, r2
         );
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3724      	adds	r7, #36	; 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a48:	d301      	bcc.n	8004a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e00f      	b.n	8004a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <SysTick_Config+0x40>)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a56:	210f      	movs	r1, #15
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5c:	f7ff ff90 	bl	8004980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <SysTick_Config+0x40>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <SysTick_Config+0x40>)
 8004a68:	2207      	movs	r2, #7
 8004a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	e000e010 	.word	0xe000e010

08004a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ff2d 	bl	80048e4 <__NVIC_SetPriorityGrouping>
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	4603      	mov	r3, r0
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa4:	f7ff ff42 	bl	800492c <__NVIC_GetPriorityGrouping>
 8004aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	6978      	ldr	r0, [r7, #20]
 8004ab0:	f7ff ff90 	bl	80049d4 <NVIC_EncodePriority>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aba:	4611      	mov	r1, r2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff ff5f 	bl	8004980 <__NVIC_SetPriority>
}
 8004ac2:	bf00      	nop
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff ff35 	bl	8004948 <__NVIC_EnableIRQ>
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff ffa2 	bl	8004a38 <SysTick_Config>
 8004af4:	4603      	mov	r3, r0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b08b      	sub	sp, #44	; 0x2c
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b12:	e169      	b.n	8004de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004b14:	2201      	movs	r2, #1
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	4013      	ands	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	f040 8158 	bne.w	8004de2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4a9a      	ldr	r2, [pc, #616]	; (8004da0 <HAL_GPIO_Init+0x2a0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d05e      	beq.n	8004bfa <HAL_GPIO_Init+0xfa>
 8004b3c:	4a98      	ldr	r2, [pc, #608]	; (8004da0 <HAL_GPIO_Init+0x2a0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d875      	bhi.n	8004c2e <HAL_GPIO_Init+0x12e>
 8004b42:	4a98      	ldr	r2, [pc, #608]	; (8004da4 <HAL_GPIO_Init+0x2a4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d058      	beq.n	8004bfa <HAL_GPIO_Init+0xfa>
 8004b48:	4a96      	ldr	r2, [pc, #600]	; (8004da4 <HAL_GPIO_Init+0x2a4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d86f      	bhi.n	8004c2e <HAL_GPIO_Init+0x12e>
 8004b4e:	4a96      	ldr	r2, [pc, #600]	; (8004da8 <HAL_GPIO_Init+0x2a8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d052      	beq.n	8004bfa <HAL_GPIO_Init+0xfa>
 8004b54:	4a94      	ldr	r2, [pc, #592]	; (8004da8 <HAL_GPIO_Init+0x2a8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d869      	bhi.n	8004c2e <HAL_GPIO_Init+0x12e>
 8004b5a:	4a94      	ldr	r2, [pc, #592]	; (8004dac <HAL_GPIO_Init+0x2ac>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d04c      	beq.n	8004bfa <HAL_GPIO_Init+0xfa>
 8004b60:	4a92      	ldr	r2, [pc, #584]	; (8004dac <HAL_GPIO_Init+0x2ac>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d863      	bhi.n	8004c2e <HAL_GPIO_Init+0x12e>
 8004b66:	4a92      	ldr	r2, [pc, #584]	; (8004db0 <HAL_GPIO_Init+0x2b0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d046      	beq.n	8004bfa <HAL_GPIO_Init+0xfa>
 8004b6c:	4a90      	ldr	r2, [pc, #576]	; (8004db0 <HAL_GPIO_Init+0x2b0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d85d      	bhi.n	8004c2e <HAL_GPIO_Init+0x12e>
 8004b72:	2b12      	cmp	r3, #18
 8004b74:	d82a      	bhi.n	8004bcc <HAL_GPIO_Init+0xcc>
 8004b76:	2b12      	cmp	r3, #18
 8004b78:	d859      	bhi.n	8004c2e <HAL_GPIO_Init+0x12e>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <HAL_GPIO_Init+0x80>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004bfb 	.word	0x08004bfb
 8004b84:	08004bd5 	.word	0x08004bd5
 8004b88:	08004be7 	.word	0x08004be7
 8004b8c:	08004c29 	.word	0x08004c29
 8004b90:	08004c2f 	.word	0x08004c2f
 8004b94:	08004c2f 	.word	0x08004c2f
 8004b98:	08004c2f 	.word	0x08004c2f
 8004b9c:	08004c2f 	.word	0x08004c2f
 8004ba0:	08004c2f 	.word	0x08004c2f
 8004ba4:	08004c2f 	.word	0x08004c2f
 8004ba8:	08004c2f 	.word	0x08004c2f
 8004bac:	08004c2f 	.word	0x08004c2f
 8004bb0:	08004c2f 	.word	0x08004c2f
 8004bb4:	08004c2f 	.word	0x08004c2f
 8004bb8:	08004c2f 	.word	0x08004c2f
 8004bbc:	08004c2f 	.word	0x08004c2f
 8004bc0:	08004c2f 	.word	0x08004c2f
 8004bc4:	08004bdd 	.word	0x08004bdd
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	4a79      	ldr	r2, [pc, #484]	; (8004db4 <HAL_GPIO_Init+0x2b4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004bd2:	e02c      	b.n	8004c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	623b      	str	r3, [r7, #32]
          break;
 8004bda:	e029      	b.n	8004c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	3304      	adds	r3, #4
 8004be2:	623b      	str	r3, [r7, #32]
          break;
 8004be4:	e024      	b.n	8004c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	3308      	adds	r3, #8
 8004bec:	623b      	str	r3, [r7, #32]
          break;
 8004bee:	e01f      	b.n	8004c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	623b      	str	r3, [r7, #32]
          break;
 8004bf8:	e01a      	b.n	8004c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004c02:	2304      	movs	r3, #4
 8004c04:	623b      	str	r3, [r7, #32]
          break;
 8004c06:	e013      	b.n	8004c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d105      	bne.n	8004c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c10:	2308      	movs	r3, #8
 8004c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	611a      	str	r2, [r3, #16]
          break;
 8004c1a:	e009      	b.n	8004c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	615a      	str	r2, [r3, #20]
          break;
 8004c26:	e003      	b.n	8004c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	623b      	str	r3, [r7, #32]
          break;
 8004c2c:	e000      	b.n	8004c30 <HAL_GPIO_Init+0x130>
          break;
 8004c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2bff      	cmp	r3, #255	; 0xff
 8004c34:	d801      	bhi.n	8004c3a <HAL_GPIO_Init+0x13a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	e001      	b.n	8004c3e <HAL_GPIO_Init+0x13e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2bff      	cmp	r3, #255	; 0xff
 8004c44:	d802      	bhi.n	8004c4c <HAL_GPIO_Init+0x14c>
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	e002      	b.n	8004c52 <HAL_GPIO_Init+0x152>
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	3b08      	subs	r3, #8
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	210f      	movs	r1, #15
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	401a      	ands	r2, r3
 8004c64:	6a39      	ldr	r1, [r7, #32]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 80b1 	beq.w	8004de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c80:	4b4d      	ldr	r3, [pc, #308]	; (8004db8 <HAL_GPIO_Init+0x2b8>)
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	4a4c      	ldr	r2, [pc, #304]	; (8004db8 <HAL_GPIO_Init+0x2b8>)
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	6193      	str	r3, [r2, #24]
 8004c8c:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <HAL_GPIO_Init+0x2b8>)
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c98:	4a48      	ldr	r2, [pc, #288]	; (8004dbc <HAL_GPIO_Init+0x2bc>)
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	220f      	movs	r2, #15
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <HAL_GPIO_Init+0x2c0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <HAL_GPIO_Init+0x1ec>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3f      	ldr	r2, [pc, #252]	; (8004dc4 <HAL_GPIO_Init+0x2c4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00d      	beq.n	8004ce8 <HAL_GPIO_Init+0x1e8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3e      	ldr	r2, [pc, #248]	; (8004dc8 <HAL_GPIO_Init+0x2c8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <HAL_GPIO_Init+0x1e4>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3d      	ldr	r2, [pc, #244]	; (8004dcc <HAL_GPIO_Init+0x2cc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d101      	bne.n	8004ce0 <HAL_GPIO_Init+0x1e0>
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <HAL_GPIO_Init+0x1ee>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	e004      	b.n	8004cee <HAL_GPIO_Init+0x1ee>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e002      	b.n	8004cee <HAL_GPIO_Init+0x1ee>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <HAL_GPIO_Init+0x1ee>
 8004cec:	2300      	movs	r3, #0
 8004cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf0:	f002 0203 	and.w	r2, r2, #3
 8004cf4:	0092      	lsls	r2, r2, #2
 8004cf6:	4093      	lsls	r3, r2
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004cfe:	492f      	ldr	r1, [pc, #188]	; (8004dbc <HAL_GPIO_Init+0x2bc>)
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	089b      	lsrs	r3, r3, #2
 8004d04:	3302      	adds	r3, #2
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004d18:	4b2d      	ldr	r3, [pc, #180]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	492c      	ldr	r1, [pc, #176]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	600b      	str	r3, [r1, #0]
 8004d24:	e006      	b.n	8004d34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004d26:	4b2a      	ldr	r3, [pc, #168]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	4928      	ldr	r1, [pc, #160]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d006      	beq.n	8004d4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d40:	4b23      	ldr	r3, [pc, #140]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	4922      	ldr	r1, [pc, #136]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
 8004d4c:	e006      	b.n	8004d5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d4e:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	43db      	mvns	r3, r3
 8004d56:	491e      	ldr	r1, [pc, #120]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d006      	beq.n	8004d76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d68:	4b19      	ldr	r3, [pc, #100]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	4918      	ldr	r1, [pc, #96]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]
 8004d74:	e006      	b.n	8004d84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004d76:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	4914      	ldr	r1, [pc, #80]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d021      	beq.n	8004dd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	490e      	ldr	r1, [pc, #56]	; (8004dd0 <HAL_GPIO_Init+0x2d0>)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60cb      	str	r3, [r1, #12]
 8004d9c:	e021      	b.n	8004de2 <HAL_GPIO_Init+0x2e2>
 8004d9e:	bf00      	nop
 8004da0:	10320000 	.word	0x10320000
 8004da4:	10310000 	.word	0x10310000
 8004da8:	10220000 	.word	0x10220000
 8004dac:	10210000 	.word	0x10210000
 8004db0:	10120000 	.word	0x10120000
 8004db4:	10110000 	.word	0x10110000
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40010800 	.word	0x40010800
 8004dc4:	40010c00 	.word	0x40010c00
 8004dc8:	40011000 	.word	0x40011000
 8004dcc:	40011400 	.word	0x40011400
 8004dd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_GPIO_Init+0x304>)
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	4909      	ldr	r1, [pc, #36]	; (8004e04 <HAL_GPIO_Init+0x304>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	3301      	adds	r3, #1
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	fa22 f303 	lsr.w	r3, r2, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f47f ae8e 	bne.w	8004b14 <HAL_GPIO_Init+0x14>
  }
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	372c      	adds	r7, #44	; 0x2c
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr
 8004e04:	40010400 	.word	0x40010400

08004e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	887b      	ldrh	r3, [r7, #2]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
 8004e24:	e001      	b.n	8004e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr

08004e36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	807b      	strh	r3, [r7, #2]
 8004e42:	4613      	mov	r3, r2
 8004e44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e46:	787b      	ldrb	r3, [r7, #1]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e4c:	887a      	ldrh	r2, [r7, #2]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004e52:	e003      	b.n	8004e5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e54:	887b      	ldrh	r3, [r7, #2]
 8004e56:	041a      	lsls	r2, r3, #16
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	611a      	str	r2, [r3, #16]
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e78:	887a      	ldrh	r2, [r7, #2]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	041a      	lsls	r2, r3, #16
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	43d9      	mvns	r1, r3
 8004e84:	887b      	ldrh	r3, [r7, #2]
 8004e86:	400b      	ands	r3, r1
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	611a      	str	r2, [r3, #16]
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr

08004e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e12b      	b.n	8005102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff f990 	bl	80041e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	; 0x24
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004efc:	f003 f868 	bl	8007fd0 <HAL_RCC_GetPCLK1Freq>
 8004f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4a81      	ldr	r2, [pc, #516]	; (800510c <HAL_I2C_Init+0x274>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d807      	bhi.n	8004f1c <HAL_I2C_Init+0x84>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a80      	ldr	r2, [pc, #512]	; (8005110 <HAL_I2C_Init+0x278>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	bf94      	ite	ls
 8004f14:	2301      	movls	r3, #1
 8004f16:	2300      	movhi	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	e006      	b.n	8004f2a <HAL_I2C_Init+0x92>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a7d      	ldr	r2, [pc, #500]	; (8005114 <HAL_I2C_Init+0x27c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	bf94      	ite	ls
 8004f24:	2301      	movls	r3, #1
 8004f26:	2300      	movhi	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e0e7      	b.n	8005102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a78      	ldr	r2, [pc, #480]	; (8005118 <HAL_I2C_Init+0x280>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	0c9b      	lsrs	r3, r3, #18
 8004f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4a6a      	ldr	r2, [pc, #424]	; (800510c <HAL_I2C_Init+0x274>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d802      	bhi.n	8004f6c <HAL_I2C_Init+0xd4>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	e009      	b.n	8004f80 <HAL_I2C_Init+0xe8>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	4a69      	ldr	r2, [pc, #420]	; (800511c <HAL_I2C_Init+0x284>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	099b      	lsrs	r3, r3, #6
 8004f7e:	3301      	adds	r3, #1
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	495c      	ldr	r1, [pc, #368]	; (800510c <HAL_I2C_Init+0x274>)
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	d819      	bhi.n	8004fd4 <HAL_I2C_Init+0x13c>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1e59      	subs	r1, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fae:	1c59      	adds	r1, r3, #1
 8004fb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fb4:	400b      	ands	r3, r1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_I2C_Init+0x138>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1e59      	subs	r1, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fce:	e051      	b.n	8005074 <HAL_I2C_Init+0x1dc>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	e04f      	b.n	8005074 <HAL_I2C_Init+0x1dc>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d111      	bne.n	8005000 <HAL_I2C_Init+0x168>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1e58      	subs	r0, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6859      	ldr	r1, [r3, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	440b      	add	r3, r1
 8004fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf0c      	ite	eq
 8004ff8:	2301      	moveq	r3, #1
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	e012      	b.n	8005026 <HAL_I2C_Init+0x18e>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	1e58      	subs	r0, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6859      	ldr	r1, [r3, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	0099      	lsls	r1, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	fbb0 f3f3 	udiv	r3, r0, r3
 8005016:	3301      	adds	r3, #1
 8005018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_I2C_Init+0x196>
 800502a:	2301      	movs	r3, #1
 800502c:	e022      	b.n	8005074 <HAL_I2C_Init+0x1dc>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10e      	bne.n	8005054 <HAL_I2C_Init+0x1bc>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1e58      	subs	r0, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	440b      	add	r3, r1
 8005044:	fbb0 f3f3 	udiv	r3, r0, r3
 8005048:	3301      	adds	r3, #1
 800504a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	e00f      	b.n	8005074 <HAL_I2C_Init+0x1dc>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	1e58      	subs	r0, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6859      	ldr	r1, [r3, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	0099      	lsls	r1, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	fbb0 f3f3 	udiv	r3, r0, r3
 800506a:	3301      	adds	r3, #1
 800506c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	6809      	ldr	r1, [r1, #0]
 8005078:	4313      	orrs	r3, r2
 800507a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6911      	ldr	r1, [r2, #16]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68d2      	ldr	r2, [r2, #12]
 80050ae:	4311      	orrs	r1, r2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	000186a0 	.word	0x000186a0
 8005110:	001e847f 	.word	0x001e847f
 8005114:	003d08ff 	.word	0x003d08ff
 8005118:	431bde83 	.word	0x431bde83
 800511c:	10624dd3 	.word	0x10624dd3

08005120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	4608      	mov	r0, r1
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	4603      	mov	r3, r0
 8005130:	817b      	strh	r3, [r7, #10]
 8005132:	460b      	mov	r3, r1
 8005134:	813b      	strh	r3, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800513a:	f7ff fba5 	bl	8004888 <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b20      	cmp	r3, #32
 800514a:	f040 80d9 	bne.w	8005300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	2319      	movs	r3, #25
 8005154:	2201      	movs	r2, #1
 8005156:	496d      	ldr	r1, [pc, #436]	; (800530c <HAL_I2C_Mem_Write+0x1ec>)
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fcc1 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
 8005166:	e0cc      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_I2C_Mem_Write+0x56>
 8005172:	2302      	movs	r3, #2
 8005174:	e0c5      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d007      	beq.n	800519c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2221      	movs	r2, #33	; 0x21
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2240      	movs	r2, #64	; 0x40
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a4d      	ldr	r2, [pc, #308]	; (8005310 <HAL_I2C_Mem_Write+0x1f0>)
 80051dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051de:	88f8      	ldrh	r0, [r7, #6]
 80051e0:	893a      	ldrh	r2, [r7, #8]
 80051e2:	8979      	ldrh	r1, [r7, #10]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4603      	mov	r3, r0
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 faf8 	bl	80057e4 <I2C_RequestMemoryWrite>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d052      	beq.n	80052a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e081      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fd42 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00d      	beq.n	800522a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	2b04      	cmp	r3, #4
 8005214:	d107      	bne.n	8005226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e06b      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	781a      	ldrb	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b04      	cmp	r3, #4
 8005266:	d11b      	bne.n	80052a0 <HAL_I2C_Mem_Write+0x180>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	2b00      	cmp	r3, #0
 800526e:	d017      	beq.n	80052a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1aa      	bne.n	80051fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fd2e 	bl	8005d0e <I2C_WaitOnBTFFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d107      	bne.n	80052d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e016      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e000      	b.n	8005302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005300:	2302      	movs	r3, #2
  }
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	00100002 	.word	0x00100002
 8005310:	ffff0000 	.word	0xffff0000

08005314 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08c      	sub	sp, #48	; 0x30
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	4608      	mov	r0, r1
 800531e:	4611      	mov	r1, r2
 8005320:	461a      	mov	r2, r3
 8005322:	4603      	mov	r3, r0
 8005324:	817b      	strh	r3, [r7, #10]
 8005326:	460b      	mov	r3, r1
 8005328:	813b      	strh	r3, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005332:	f7ff faa9 	bl	8004888 <HAL_GetTick>
 8005336:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b20      	cmp	r3, #32
 8005342:	f040 8244 	bne.w	80057ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	2319      	movs	r3, #25
 800534c:	2201      	movs	r2, #1
 800534e:	4982      	ldr	r1, [pc, #520]	; (8005558 <HAL_I2C_Mem_Read+0x244>)
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fbc5 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800535c:	2302      	movs	r3, #2
 800535e:	e237      	b.n	80057d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_I2C_Mem_Read+0x5a>
 800536a:	2302      	movs	r3, #2
 800536c:	e230      	b.n	80057d0 <HAL_I2C_Mem_Read+0x4bc>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b01      	cmp	r3, #1
 8005382:	d007      	beq.n	8005394 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2222      	movs	r2, #34	; 0x22
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2240      	movs	r2, #64	; 0x40
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80053c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4a62      	ldr	r2, [pc, #392]	; (800555c <HAL_I2C_Mem_Read+0x248>)
 80053d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053d6:	88f8      	ldrh	r0, [r7, #6]
 80053d8:	893a      	ldrh	r2, [r7, #8]
 80053da:	8979      	ldrh	r1, [r7, #10]
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	4603      	mov	r3, r0
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fa92 	bl	8005910 <I2C_RequestMemoryRead>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e1ec      	b.n	80057d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d113      	bne.n	8005426 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	e1c0      	b.n	80057a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542a:	2b01      	cmp	r3, #1
 800542c:	d11e      	bne.n	800546c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800543e:	b672      	cpsid	i
}
 8005440:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005442:	2300      	movs	r3, #0
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005466:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005468:	b662      	cpsie	i
}
 800546a:	e035      	b.n	80054d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005470:	2b02      	cmp	r3, #2
 8005472:	d11e      	bne.n	80054b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005482:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005484:	b672      	cpsid	i
}
 8005486:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80054ae:	b662      	cpsie	i
}
 80054b0:	e012      	b.n	80054d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80054d8:	e166      	b.n	80057a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	2b03      	cmp	r3, #3
 80054e0:	f200 811f 	bhi.w	8005722 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d123      	bne.n	8005534 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fc4d 	bl	8005d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e167      	b.n	80057d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005532:	e139      	b.n	80057a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	2b02      	cmp	r3, #2
 800553a:	d152      	bne.n	80055e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	2200      	movs	r2, #0
 8005544:	4906      	ldr	r1, [pc, #24]	; (8005560 <HAL_I2C_Mem_Read+0x24c>)
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 faca 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d008      	beq.n	8005564 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e13c      	b.n	80057d0 <HAL_I2C_Mem_Read+0x4bc>
 8005556:	bf00      	nop
 8005558:	00100002 	.word	0x00100002
 800555c:	ffff0000 	.word	0xffff0000
 8005560:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005564:	b672      	cpsid	i
}
 8005566:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80055aa:	b662      	cpsie	i
}
 80055ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055e0:	e0e2      	b.n	80057a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	2200      	movs	r2, #0
 80055ea:	497b      	ldr	r1, [pc, #492]	; (80057d8 <HAL_I2C_Mem_Read+0x4c4>)
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 fa77 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0e9      	b.n	80057d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800560a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800560c:	b672      	cpsid	i
}
 800560e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005642:	4b66      	ldr	r3, [pc, #408]	; (80057dc <HAL_I2C_Mem_Read+0x4c8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	08db      	lsrs	r3, r3, #3
 8005648:	4a65      	ldr	r2, [pc, #404]	; (80057e0 <HAL_I2C_Mem_Read+0x4cc>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	0a1a      	lsrs	r2, r3, #8
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	00da      	lsls	r2, r3, #3
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	3b01      	subs	r3, #1
 8005660:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d118      	bne.n	800569a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800568a:	b662      	cpsie	i
}
 800568c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e09a      	b.n	80057d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d1d9      	bne.n	800565c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80056ea:	b662      	cpsie	i
}
 80056ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005720:	e042      	b.n	80057a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fb32 	bl	8005d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e04c      	b.n	80057d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b04      	cmp	r3, #4
 8005774:	d118      	bne.n	80057a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f47f ae94 	bne.w	80054da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e000      	b.n	80057d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
  }
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3728      	adds	r7, #40	; 0x28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	00010004 	.word	0x00010004
 80057dc:	20000010 	.word	0x20000010
 80057e0:	14f8b589 	.word	0x14f8b589

080057e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	4608      	mov	r0, r1
 80057ee:	4611      	mov	r1, r2
 80057f0:	461a      	mov	r2, r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	817b      	strh	r3, [r7, #10]
 80057f6:	460b      	mov	r3, r1
 80057f8:	813b      	strh	r3, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800580c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	2200      	movs	r2, #0
 8005816:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f960 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00d      	beq.n	8005842 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005834:	d103      	bne.n	800583e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e05f      	b.n	8005902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005850:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	6a3a      	ldr	r2, [r7, #32]
 8005856:	492d      	ldr	r1, [pc, #180]	; (800590c <I2C_RequestMemoryWrite+0x128>)
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f998 	bl	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e04c      	b.n	8005902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800587e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005880:	6a39      	ldr	r1, [r7, #32]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 fa02 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	2b04      	cmp	r3, #4
 8005894:	d107      	bne.n	80058a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e02b      	b.n	8005902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d105      	bne.n	80058bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058b0:	893b      	ldrh	r3, [r7, #8]
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	e021      	b.n	8005900 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058bc:	893b      	ldrh	r3, [r7, #8]
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	6a39      	ldr	r1, [r7, #32]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f9dc 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00d      	beq.n	80058f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d107      	bne.n	80058f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e005      	b.n	8005902 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058f6:	893b      	ldrh	r3, [r7, #8]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	00010002 	.word	0x00010002

08005910 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	4608      	mov	r0, r1
 800591a:	4611      	mov	r1, r2
 800591c:	461a      	mov	r2, r3
 800591e:	4603      	mov	r3, r0
 8005920:	817b      	strh	r3, [r7, #10]
 8005922:	460b      	mov	r3, r1
 8005924:	813b      	strh	r3, [r7, #8]
 8005926:	4613      	mov	r3, r2
 8005928:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005938:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2200      	movs	r2, #0
 8005952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f8c2 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005970:	d103      	bne.n	800597a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e0aa      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800597e:	897b      	ldrh	r3, [r7, #10]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800598c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	6a3a      	ldr	r2, [r7, #32]
 8005992:	4952      	ldr	r1, [pc, #328]	; (8005adc <I2C_RequestMemoryRead+0x1cc>)
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f8fa 	bl	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e097      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	6a39      	ldr	r1, [r7, #32]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f964 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d107      	bne.n	80059e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e076      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d105      	bne.n	80059f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ec:	893b      	ldrh	r3, [r7, #8]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	e021      	b.n	8005a3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059f8:	893b      	ldrh	r3, [r7, #8]
 80059fa:	0a1b      	lsrs	r3, r3, #8
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a08:	6a39      	ldr	r1, [r7, #32]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f93e 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00d      	beq.n	8005a32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d107      	bne.n	8005a2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e050      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a32:	893b      	ldrh	r3, [r7, #8]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3e:	6a39      	ldr	r1, [r7, #32]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f923 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00d      	beq.n	8005a68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d107      	bne.n	8005a64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e035      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f82b 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9e:	d103      	bne.n	8005aa8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e013      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005aac:	897b      	ldrh	r3, [r7, #10]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	6a3a      	ldr	r2, [r7, #32]
 8005ac0:	4906      	ldr	r1, [pc, #24]	; (8005adc <I2C_RequestMemoryRead+0x1cc>)
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f863 	bl	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	00010002 	.word	0x00010002

08005ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005af0:	e025      	b.n	8005b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d021      	beq.n	8005b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afa:	f7fe fec5 	bl	8004888 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d116      	bne.n	8005b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f043 0220 	orr.w	r2, r3, #32
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e023      	b.n	8005b86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	0c1b      	lsrs	r3, r3, #16
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10d      	bne.n	8005b64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	43da      	mvns	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4013      	ands	r3, r2
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bf0c      	ite	eq
 8005b5a:	2301      	moveq	r3, #1
 8005b5c:	2300      	movne	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	e00c      	b.n	8005b7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	43da      	mvns	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d0b6      	beq.n	8005af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b9c:	e051      	b.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bac:	d123      	bne.n	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	f043 0204 	orr.w	r2, r3, #4
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e046      	b.n	8005c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d021      	beq.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfe:	f7fe fe43 	bl	8004888 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d302      	bcc.n	8005c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d116      	bne.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e020      	b.n	8005c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	0c1b      	lsrs	r3, r3, #16
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d10c      	bne.n	8005c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	43da      	mvns	r2, r3
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4013      	ands	r3, r2
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bf14      	ite	ne
 8005c5e:	2301      	movne	r3, #1
 8005c60:	2300      	moveq	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	e00b      	b.n	8005c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	43da      	mvns	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4013      	ands	r3, r2
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bf14      	ite	ne
 8005c78:	2301      	movne	r3, #1
 8005c7a:	2300      	moveq	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d18d      	bne.n	8005b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c98:	e02d      	b.n	8005cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f8ce 	bl	8005e3c <I2C_IsAcknowledgeFailed>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e02d      	b.n	8005d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d021      	beq.n	8005cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb2:	f7fe fde9 	bl	8004888 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d116      	bne.n	8005cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e007      	b.n	8005d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d00:	2b80      	cmp	r3, #128	; 0x80
 8005d02:	d1ca      	bne.n	8005c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d1a:	e02d      	b.n	8005d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f88d 	bl	8005e3c <I2C_IsAcknowledgeFailed>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e02d      	b.n	8005d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d021      	beq.n	8005d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d34:	f7fe fda8 	bl	8004888 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d302      	bcc.n	8005d4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d116      	bne.n	8005d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	f043 0220 	orr.w	r2, r3, #32
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e007      	b.n	8005d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d1ca      	bne.n	8005d1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d9c:	e042      	b.n	8005e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d119      	bne.n	8005de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0210 	mvn.w	r2, #16
 8005db4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e029      	b.n	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de0:	f7fe fd52 	bl	8004888 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d116      	bne.n	8005e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e007      	b.n	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d1b5      	bne.n	8005d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e52:	d11b      	bne.n	8005e8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	f043 0204 	orr.w	r2, r3, #4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9a:	b08b      	sub	sp, #44	; 0x2c
 8005e9c:	af06      	add	r7, sp, #24
 8005e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e0fd      	b.n	80060a6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f006 fbd4 	bl	800c66c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2203      	movs	r2, #3
 8005ec8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f002 fbf1 	bl	80086b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	687e      	ldr	r6, [r7, #4]
 8005ede:	466d      	mov	r5, sp
 8005ee0:	f106 0410 	add.w	r4, r6, #16
 8005ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	1d33      	adds	r3, r6, #4
 8005eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ef0:	6838      	ldr	r0, [r7, #0]
 8005ef2:	f002 fbbb 	bl	800866c <USB_CoreInit>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0ce      	b.n	80060a6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f002 fbec 	bl	80086ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	73fb      	strb	r3, [r7, #15]
 8005f18:	e04c      	b.n	8005fb4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	440b      	add	r3, r1
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	440b      	add	r3, r1
 8005f40:	7bfa      	ldrb	r2, [r7, #15]
 8005f42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f44:	7bfa      	ldrb	r2, [r7, #15]
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	b298      	uxth	r0, r3
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	440b      	add	r3, r1
 8005f56:	3336      	adds	r3, #54	; 0x36
 8005f58:	4602      	mov	r2, r0
 8005f5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	440b      	add	r3, r1
 8005f6c:	3303      	adds	r3, #3
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f72:	7bfa      	ldrb	r2, [r7, #15]
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	440b      	add	r3, r1
 8005f80:	3338      	adds	r3, #56	; 0x38
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f86:	7bfa      	ldrb	r2, [r7, #15]
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	440b      	add	r3, r1
 8005f94:	333c      	adds	r3, #60	; 0x3c
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f9a:	7bfa      	ldrb	r2, [r7, #15]
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3340      	adds	r3, #64	; 0x40
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	73fb      	strb	r3, [r7, #15]
 8005fb4:	7bfa      	ldrb	r2, [r7, #15]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d3ad      	bcc.n	8005f1a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
 8005fc2:	e044      	b.n	800604e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005fc4:	7bfa      	ldrb	r2, [r7, #15]
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	440b      	add	r3, r1
 8005fd2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005fda:	7bfa      	ldrb	r2, [r7, #15]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	440b      	add	r3, r1
 8005fe8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fec:	7bfa      	ldrb	r2, [r7, #15]
 8005fee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ff0:	7bfa      	ldrb	r2, [r7, #15]
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	440b      	add	r3, r1
 8005ffe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006006:	7bfa      	ldrb	r2, [r7, #15]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	440b      	add	r3, r1
 8006014:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800601c:	7bfa      	ldrb	r2, [r7, #15]
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	440b      	add	r3, r1
 800602a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	440b      	add	r3, r1
 8006040:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	3301      	adds	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
 800604e:	7bfa      	ldrb	r2, [r7, #15]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d3b5      	bcc.n	8005fc4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	687e      	ldr	r6, [r7, #4]
 8006060:	466d      	mov	r5, sp
 8006062:	f106 0410 	add.w	r4, r6, #16
 8006066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	602b      	str	r3, [r5, #0]
 800606e:	1d33      	adds	r3, r6, #4
 8006070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006072:	6838      	ldr	r0, [r7, #0]
 8006074:	f002 fb46 	bl	8008704 <USB_DevInit>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2202      	movs	r2, #2
 8006082:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e00d      	b.n	80060a6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f004 fcb7 	bl	800aa12 <USB_DevDisconnect>

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_PCD_Start+0x16>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e016      	b.n	80060f2 <HAL_PCD_Start+0x44>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f002 fadb 	bl	800868c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80060d6:	2101      	movs	r1, #1
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f006 fd3a 	bl	800cb52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f004 fc8b 	bl	800a9fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b088      	sub	sp, #32
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f004 fc8d 	bl	800aa26 <USB_ReadInterrupts>
 800610c:	4603      	mov	r3, r0
 800610e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006116:	d102      	bne.n	800611e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fb61 	bl	80067e0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f004 fc7f 	bl	800aa26 <USB_ReadInterrupts>
 8006128:	4603      	mov	r3, r0
 800612a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006132:	d112      	bne.n	800615a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800613c:	b29a      	uxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006146:	b292      	uxth	r2, r2
 8006148:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f006 fb08 	bl	800c762 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006152:	2100      	movs	r1, #0
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f925 	bl	80063a4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f004 fc61 	bl	800aa26 <USB_ReadInterrupts>
 8006164:	4603      	mov	r3, r0
 8006166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800616e:	d10b      	bne.n	8006188 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006178:	b29a      	uxth	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006182:	b292      	uxth	r2, r2
 8006184:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f004 fc4a 	bl	800aa26 <USB_ReadInterrupts>
 8006192:	4603      	mov	r3, r0
 8006194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800619c:	d10b      	bne.n	80061b6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061b0:	b292      	uxth	r2, r2
 80061b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f004 fc33 	bl	800aa26 <USB_ReadInterrupts>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ca:	d126      	bne.n	800621a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0204 	bic.w	r2, r2, #4
 80061de:	b292      	uxth	r2, r2
 80061e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0208 	bic.w	r2, r2, #8
 80061f6:	b292      	uxth	r2, r2
 80061f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f006 fae9 	bl	800c7d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800620a:	b29a      	uxth	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006214:	b292      	uxth	r2, r2
 8006216:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f004 fc01 	bl	800aa26 <USB_ReadInterrupts>
 8006224:	4603      	mov	r3, r0
 8006226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800622a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622e:	f040 8084 	bne.w	800633a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8006232:	2300      	movs	r3, #0
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e011      	b.n	800625c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	7ffb      	ldrb	r3, [r7, #31]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	441a      	add	r2, r3
 8006244:	7ffb      	ldrb	r3, [r7, #31]
 8006246:	8812      	ldrh	r2, [r2, #0]
 8006248:	b292      	uxth	r2, r2
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	f107 0120 	add.w	r1, r7, #32
 8006250:	440b      	add	r3, r1
 8006252:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8006256:	7ffb      	ldrb	r3, [r7, #31]
 8006258:	3301      	adds	r3, #1
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	7ffb      	ldrb	r3, [r7, #31]
 800625e:	2b07      	cmp	r3, #7
 8006260:	d9ea      	bls.n	8006238 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	b292      	uxth	r2, r2
 8006276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	b292      	uxth	r2, r2
 800628e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8006292:	bf00      	nop
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800629c:	b29b      	uxth	r3, r3
 800629e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f6      	beq.n	8006294 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b8:	b292      	uxth	r2, r2
 80062ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e010      	b.n	80062e6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80062c4:	7ffb      	ldrb	r3, [r7, #31]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	4611      	mov	r1, r2
 80062cc:	7ffa      	ldrb	r2, [r7, #31]
 80062ce:	0092      	lsls	r2, r2, #2
 80062d0:	440a      	add	r2, r1
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	f107 0120 	add.w	r1, r7, #32
 80062d8:	440b      	add	r3, r1
 80062da:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80062de:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80062e0:	7ffb      	ldrb	r3, [r7, #31]
 80062e2:	3301      	adds	r3, #1
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	7ffb      	ldrb	r3, [r7, #31]
 80062e8:	2b07      	cmp	r3, #7
 80062ea:	d9eb      	bls.n	80062c4 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0208 	orr.w	r2, r2, #8
 80062fe:	b292      	uxth	r2, r2
 8006300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800630c:	b29a      	uxth	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006316:	b292      	uxth	r2, r2
 8006318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006324:	b29a      	uxth	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0204 	orr.w	r2, r2, #4
 800632e:	b292      	uxth	r2, r2
 8006330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f006 fa33 	bl	800c7a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f004 fb71 	bl	800aa26 <USB_ReadInterrupts>
 8006344:	4603      	mov	r3, r0
 8006346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800634a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800634e:	d10e      	bne.n	800636e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006358:	b29a      	uxth	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006362:	b292      	uxth	r2, r2
 8006364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f006 f9ec 	bl	800c746 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f004 fb57 	bl	800aa26 <USB_ReadInterrupts>
 8006378:	4603      	mov	r3, r0
 800637a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006382:	d10b      	bne.n	800639c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800638c:	b29a      	uxth	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006396:	b292      	uxth	r2, r2
 8006398:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800639c:	bf00      	nop
 800639e:	3720      	adds	r7, #32
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_PCD_SetAddress+0x1a>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e013      	b.n	80063e6 <HAL_PCD_SetAddress+0x42>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	4611      	mov	r1, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f004 fafe 	bl	800a9d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	4608      	mov	r0, r1
 80063f8:	4611      	mov	r1, r2
 80063fa:	461a      	mov	r2, r3
 80063fc:	4603      	mov	r3, r0
 80063fe:	70fb      	strb	r3, [r7, #3]
 8006400:	460b      	mov	r3, r1
 8006402:	803b      	strh	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800640c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006410:	2b00      	cmp	r3, #0
 8006412:	da0e      	bge.n	8006432 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	4613      	mov	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	4413      	add	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	705a      	strb	r2, [r3, #1]
 8006430:	e00e      	b.n	8006450 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	f003 0207 	and.w	r2, r3, #7
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	4413      	add	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	b2da      	uxtb	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800645c:	883a      	ldrh	r2, [r7, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	78ba      	ldrb	r2, [r7, #2]
 8006466:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d004      	beq.n	800647a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800647a:	78bb      	ldrb	r3, [r7, #2]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d102      	bne.n	8006486 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_PCD_EP_Open+0xa6>
 8006490:	2302      	movs	r3, #2
 8006492:	e00e      	b.n	80064b2 <HAL_PCD_EP_Open+0xc4>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68f9      	ldr	r1, [r7, #12]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f002 f94e 	bl	8008744 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80064b0:	7afb      	ldrb	r3, [r7, #11]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	da0e      	bge.n	80064ec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	4413      	add	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	705a      	strb	r2, [r3, #1]
 80064ea:	e00e      	b.n	800650a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	f003 0207 	and.w	r2, r3, #7
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	b2da      	uxtb	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_PCD_EP_Close+0x6a>
 8006520:	2302      	movs	r3, #2
 8006522:	e00e      	b.n	8006542 <HAL_PCD_EP_Close+0x88>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68f9      	ldr	r1, [r7, #12]
 8006532:	4618      	mov	r0, r3
 8006534:	f002 fc70 	bl	8008e18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b086      	sub	sp, #24
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	460b      	mov	r3, r1
 8006558:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800655a:	7afb      	ldrb	r3, [r7, #11]
 800655c:	f003 0207 	and.w	r2, r3, #7
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2200      	movs	r2, #0
 8006582:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2200      	movs	r2, #0
 8006588:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800658a:	7afb      	ldrb	r3, [r7, #11]
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	b2da      	uxtb	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	2b00      	cmp	r3, #0
 800659e:	d106      	bne.n	80065ae <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6979      	ldr	r1, [r7, #20]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f002 fe22 	bl	80091f0 <USB_EPStartXfer>
 80065ac:	e005      	b.n	80065ba <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f002 fe1b 	bl	80091f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	f003 0207 	and.w	r2, r3, #7
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	440b      	add	r3, r1
 80065e2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80065e6:	681b      	ldr	r3, [r3, #0]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr

080065f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
 80065fe:	460b      	mov	r3, r1
 8006600:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006602:	7afb      	ldrb	r3, [r7, #11]
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2200      	movs	r2, #0
 8006636:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2201      	movs	r2, #1
 800663c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800663e:	7afb      	ldrb	r3, [r7, #11]
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	b2da      	uxtb	r2, r3
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800664a:	7afb      	ldrb	r3, [r7, #11]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	2b00      	cmp	r3, #0
 8006652:	d106      	bne.n	8006662 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6979      	ldr	r1, [r7, #20]
 800665a:	4618      	mov	r0, r3
 800665c:	f002 fdc8 	bl	80091f0 <USB_EPStartXfer>
 8006660:	e005      	b.n	800666e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6979      	ldr	r1, [r7, #20]
 8006668:	4618      	mov	r0, r3
 800666a:	f002 fdc1 	bl	80091f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	f003 0207 	and.w	r2, r3, #7
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	429a      	cmp	r2, r3
 8006690:	d901      	bls.n	8006696 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e04c      	b.n	8006730 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800669a:	2b00      	cmp	r3, #0
 800669c:	da0e      	bge.n	80066bc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	4413      	add	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	705a      	strb	r2, [r3, #1]
 80066ba:	e00c      	b.n	80066d6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066bc:	78fa      	ldrb	r2, [r7, #3]
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4413      	add	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_PCD_EP_SetStall+0x7e>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e01c      	b.n	8006730 <HAL_PCD_EP_SetStall+0xb8>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	4618      	mov	r0, r3
 8006706:	f004 f86a 	bl	800a7de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	f003 0307 	and.w	r3, r3, #7
 8006710:	2b00      	cmp	r3, #0
 8006712:	d108      	bne.n	8006726 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f004 f98f 	bl	800aa44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	f003 020f 	and.w	r2, r3, #15
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	429a      	cmp	r2, r3
 8006750:	d901      	bls.n	8006756 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e040      	b.n	80067d8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800675a:	2b00      	cmp	r3, #0
 800675c:	da0e      	bge.n	800677c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	4413      	add	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	705a      	strb	r2, [r3, #1]
 800677a:	e00e      	b.n	800679a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	f003 0207 	and.w	r2, r3, #7
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_PCD_EP_ClrStall+0x82>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e00e      	b.n	80067d8 <HAL_PCD_EP_ClrStall+0xa0>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f004 f858 	bl	800a87e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08e      	sub	sp, #56	; 0x38
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80067e8:	e2ec      	b.n	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067f2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80067f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006800:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006804:	2b00      	cmp	r3, #0
 8006806:	f040 8161 	bne.w	8006acc <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800680a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800680c:	f003 0310 	and.w	r3, r3, #16
 8006810:	2b00      	cmp	r3, #0
 8006812:	d152      	bne.n	80068ba <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006824:	81fb      	strh	r3, [r7, #14]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	89fb      	ldrh	r3, [r7, #14]
 800682c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006834:	b29b      	uxth	r3, r3
 8006836:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3328      	adds	r3, #40	; 0x28
 800683c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006846:	b29b      	uxth	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	4413      	add	r3, r2
 8006852:	3302      	adds	r3, #2
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6812      	ldr	r2, [r2, #0]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	441a      	add	r2, r3
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006878:	2100      	movs	r1, #0
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f005 ff49 	bl	800c712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 829b 	beq.w	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f040 8296 	bne.w	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	b292      	uxth	r2, r2
 80068ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80068b8:	e284      	b.n	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80068ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80068cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d034      	beq.n	800693e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068dc:	b29b      	uxth	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	4413      	add	r3, r2
 80068e8:	3306      	adds	r3, #6
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006912:	b29b      	uxth	r3, r3
 8006914:	f004 f8e6 	bl	800aae4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29a      	uxth	r2, r3
 8006920:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006924:	4013      	ands	r3, r2
 8006926:	823b      	strh	r3, [r7, #16]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	8a3a      	ldrh	r2, [r7, #16]
 800692e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006932:	b292      	uxth	r2, r2
 8006934:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f005 febe 	bl	800c6b8 <HAL_PCD_SetupStageCallback>
 800693c:	e242      	b.n	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800693e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006942:	2b00      	cmp	r3, #0
 8006944:	f280 823e 	bge.w	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	b29a      	uxth	r2, r3
 8006950:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006954:	4013      	ands	r3, r2
 8006956:	83bb      	strh	r3, [r7, #28]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	8bba      	ldrh	r2, [r7, #28]
 800695e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006962:	b292      	uxth	r2, r2
 8006964:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696e:	b29b      	uxth	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	4413      	add	r3, r2
 800697a:	3306      	adds	r3, #6
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6812      	ldr	r2, [r2, #0]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d019      	beq.n	80069ce <PCD_EP_ISR_Handler+0x1ee>
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d015      	beq.n	80069ce <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	6959      	ldr	r1, [r3, #20]
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f004 f896 	bl	800aae4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	695a      	ldr	r2, [r3, #20]
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	441a      	add	r2, r3
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80069c6:	2100      	movs	r1, #0
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f005 fe87 	bl	800c6dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 81f2 	bne.w	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	4413      	add	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d112      	bne.n	8006a2e <PCD_EP_ISR_Handler+0x24e>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	801a      	strh	r2, [r3, #0]
 8006a2c:	e02f      	b.n	8006a8e <PCD_EP_ISR_Handler+0x2ae>
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b3e      	cmp	r3, #62	; 0x3e
 8006a34:	d813      	bhi.n	8006a5e <PCD_EP_ISR_Handler+0x27e>
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	085b      	lsrs	r3, r3, #1
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <PCD_EP_ISR_Handler+0x270>
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	029b      	lsls	r3, r3, #10
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	e017      	b.n	8006a8e <PCD_EP_ISR_Handler+0x2ae>
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <PCD_EP_ISR_Handler+0x298>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	3b01      	subs	r3, #1
 8006a76:	633b      	str	r3, [r7, #48]	; 0x30
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	029b      	lsls	r3, r3, #10
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	827b      	strh	r3, [r7, #18]
 8006aa0:	8a7b      	ldrh	r3, [r7, #18]
 8006aa2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006aa6:	827b      	strh	r3, [r7, #18]
 8006aa8:	8a7b      	ldrh	r3, [r7, #18]
 8006aaa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006aae:	827b      	strh	r3, [r7, #18]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	8a7b      	ldrh	r3, [r7, #18]
 8006ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	8013      	strh	r3, [r2, #0]
 8006aca:	e17b      	b.n	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ade:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f280 80ea 	bge.w	8006cbc <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006afe:	4013      	ands	r3, r2
 8006b00:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006b12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b16:	b292      	uxth	r2, r2
 8006b18:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006b1a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	7b1b      	ldrb	r3, [r3, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d122      	bne.n	8006b7e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	3306      	adds	r3, #6
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b60:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006b62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8087 	beq.w	8006c78 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	6959      	ldr	r1, [r3, #20]
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	88da      	ldrh	r2, [r3, #6]
 8006b76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b78:	f003 ffb4 	bl	800aae4 <USB_ReadPMA>
 8006b7c:	e07c      	b.n	8006c78 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	78db      	ldrb	r3, [r3, #3]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d108      	bne.n	8006b98 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006b86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f927 	bl	8006de0 <HAL_PCD_EP_DB_Receive>
 8006b92:	4603      	mov	r3, r0
 8006b94:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006b96:	e06f      	b.n	8006c78 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	441a      	add	r2, r3
 8006bc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d021      	beq.n	8006c36 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	4413      	add	r3, r2
 8006c06:	3302      	adds	r3, #2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c1a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006c1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d02a      	beq.n	8006c78 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	6959      	ldr	r1, [r3, #20]
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	891a      	ldrh	r2, [r3, #8]
 8006c2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c30:	f003 ff58 	bl	800aae4 <USB_ReadPMA>
 8006c34:	e020      	b.n	8006c78 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	4413      	add	r3, r2
 8006c4a:	3306      	adds	r3, #6
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c5e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006c60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d008      	beq.n	8006c78 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	6959      	ldr	r1, [r3, #20]
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	895a      	ldrh	r2, [r3, #10]
 8006c72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c74:	f003 ff36 	bl	800aae4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c7e:	441a      	add	r2, r3
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	695a      	ldr	r2, [r3, #20]
 8006c88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c8a:	441a      	add	r2, r3
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <PCD_EP_ISR_Handler+0x4c2>
 8006c98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d206      	bcs.n	8006cb0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f005 fd17 	bl	800c6dc <HAL_PCD_DataOutStageCallback>
 8006cae:	e005      	b.n	8006cbc <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f002 fa9a 	bl	80091f0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006cbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d07e      	beq.n	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8006cc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf4:	843b      	strh	r3, [r7, #32]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	441a      	add	r2, r3
 8006d04:	8c3b      	ldrh	r3, [r7, #32]
 8006d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	78db      	ldrb	r3, [r3, #3]
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d00c      	beq.n	8006d34 <PCD_EP_ISR_Handler+0x554>
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	78db      	ldrb	r3, [r3, #3]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d008      	beq.n	8006d34 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d146      	bne.n	8006db8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006d2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d141      	bne.n	8006db8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	4413      	add	r3, r2
 8006d48:	3302      	adds	r3, #2
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6812      	ldr	r2, [r2, #0]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d5c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	8bfb      	ldrh	r3, [r7, #30]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d906      	bls.n	8006d76 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	8bfb      	ldrh	r3, [r7, #30]
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	619a      	str	r2, [r3, #24]
 8006d74:	e002      	b.n	8006d7c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	2200      	movs	r2, #0
 8006d7a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d106      	bne.n	8006d92 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f005 fcc1 	bl	800c712 <HAL_PCD_DataInStageCallback>
 8006d90:	e018      	b.n	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	695a      	ldr	r2, [r3, #20]
 8006d96:	8bfb      	ldrh	r3, [r7, #30]
 8006d98:	441a      	add	r2, r3
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	69da      	ldr	r2, [r3, #28]
 8006da2:	8bfb      	ldrh	r3, [r7, #30]
 8006da4:	441a      	add	r2, r3
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006db0:	4618      	mov	r0, r3
 8006db2:	f002 fa1d 	bl	80091f0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006db6:	e005      	b.n	8006dc4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006db8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f91b 	bl	8006ffa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	b21b      	sxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f6ff ad0a 	blt.w	80067ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3738      	adds	r7, #56	; 0x38
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	4613      	mov	r3, r2
 8006dec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d07e      	beq.n	8006ef6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	699a      	ldr	r2, [r3, #24]
 8006e26:	8b7b      	ldrh	r3, [r7, #26]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d306      	bcc.n	8006e3a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	699a      	ldr	r2, [r3, #24]
 8006e30:	8b7b      	ldrh	r3, [r7, #26]
 8006e32:	1ad2      	subs	r2, r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	619a      	str	r2, [r3, #24]
 8006e38:	e002      	b.n	8006e40 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d123      	bne.n	8006e90 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e62:	833b      	strh	r3, [r7, #24]
 8006e64:	8b3b      	ldrh	r3, [r7, #24]
 8006e66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e6a:	833b      	strh	r3, [r7, #24]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	441a      	add	r2, r3
 8006e7a:	8b3b      	ldrh	r3, [r7, #24]
 8006e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e90:	88fb      	ldrh	r3, [r7, #6]
 8006e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d01f      	beq.n	8006eda <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb4:	82fb      	strh	r3, [r7, #22]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	441a      	add	r2, r3
 8006ec4:	8afb      	ldrh	r3, [r7, #22]
 8006ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006eda:	8b7b      	ldrh	r3, [r7, #26]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8087 	beq.w	8006ff0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	6959      	ldr	r1, [r3, #20]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	891a      	ldrh	r2, [r3, #8]
 8006eee:	8b7b      	ldrh	r3, [r7, #26]
 8006ef0:	f003 fdf8 	bl	800aae4 <USB_ReadPMA>
 8006ef4:	e07c      	b.n	8006ff0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	4413      	add	r3, r2
 8006f0a:	3306      	adds	r3, #6
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	699a      	ldr	r2, [r3, #24]
 8006f24:	8b7b      	ldrh	r3, [r7, #26]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d306      	bcc.n	8006f38 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	8b7b      	ldrh	r3, [r7, #26]
 8006f30:	1ad2      	subs	r2, r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	619a      	str	r2, [r3, #24]
 8006f36:	e002      	b.n	8006f3e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d123      	bne.n	8006f8e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f60:	83fb      	strh	r3, [r7, #30]
 8006f62:	8bfb      	ldrh	r3, [r7, #30]
 8006f64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f68:	83fb      	strh	r3, [r7, #30]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	8bfb      	ldrh	r3, [r7, #30]
 8006f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11f      	bne.n	8006fd8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	83bb      	strh	r3, [r7, #28]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	8bbb      	ldrh	r3, [r7, #28]
 8006fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006fd8:	8b7b      	ldrh	r3, [r7, #26]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d008      	beq.n	8006ff0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6959      	ldr	r1, [r3, #20]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	895a      	ldrh	r2, [r3, #10]
 8006fea:	8b7b      	ldrh	r3, [r7, #26]
 8006fec:	f003 fd7a 	bl	800aae4 <USB_ReadPMA>
    }
  }

  return count;
 8006ff0:	8b7b      	ldrh	r3, [r7, #26]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b0a2      	sub	sp, #136	; 0x88
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	4613      	mov	r3, r2
 8007006:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 81c7 	beq.w	80073a2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800701c:	b29b      	uxth	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	4413      	add	r3, r2
 8007028:	3302      	adds	r3, #2
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	6812      	ldr	r2, [r2, #0]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800703c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	699a      	ldr	r2, [r3, #24]
 8007044:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007048:	429a      	cmp	r2, r3
 800704a:	d907      	bls.n	800705c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	699a      	ldr	r2, [r3, #24]
 8007050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007054:	1ad2      	subs	r2, r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	619a      	str	r2, [r3, #24]
 800705a:	e002      	b.n	8007062 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f040 80b9 	bne.w	80071de <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	785b      	ldrb	r3, [r3, #1]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d126      	bne.n	80070c2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007082:	b29b      	uxth	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	4413      	add	r3, r2
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	011a      	lsls	r2, r3, #4
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	4413      	add	r3, r2
 8007096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	801a      	strh	r2, [r3, #0]
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	e01a      	b.n	80070f8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	785b      	ldrb	r3, [r3, #1]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d116      	bne.n	80070f8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	633b      	str	r3, [r7, #48]	; 0x30
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070d8:	b29b      	uxth	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	4413      	add	r3, r2
 80070e0:	633b      	str	r3, [r7, #48]	; 0x30
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	011a      	lsls	r2, r3, #4
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	4413      	add	r3, r2
 80070ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	2200      	movs	r2, #0
 80070f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	623b      	str	r3, [r7, #32]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d126      	bne.n	8007154 <HAL_PCD_EP_DB_Transmit+0x15a>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007114:	b29b      	uxth	r3, r3
 8007116:	461a      	mov	r2, r3
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	4413      	add	r3, r2
 800711c:	61bb      	str	r3, [r7, #24]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	011a      	lsls	r2, r3, #4
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	4413      	add	r3, r2
 8007128:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007138:	b29a      	uxth	r2, r3
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	801a      	strh	r2, [r3, #0]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	b29b      	uxth	r3, r3
 8007144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714c:	b29a      	uxth	r2, r3
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	e017      	b.n	8007184 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d113      	bne.n	8007184 <HAL_PCD_EP_DB_Transmit+0x18a>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007164:	b29b      	uxth	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	4413      	add	r3, r2
 800716c:	623b      	str	r3, [r7, #32]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	011a      	lsls	r2, r3, #4
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	4413      	add	r3, r2
 8007178:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800717c:	61fb      	str	r3, [r7, #28]
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	2200      	movs	r2, #0
 8007182:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	4619      	mov	r1, r3
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f005 fac1 	bl	800c712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 82d4 	beq.w	8007744 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b6:	827b      	strh	r3, [r7, #18]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	441a      	add	r2, r3
 80071c6:	8a7b      	ldrh	r3, [r7, #18]
 80071c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d8:	b29b      	uxth	r3, r3
 80071da:	8013      	strh	r3, [r2, #0]
 80071dc:	e2b2      	b.n	8007744 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d021      	beq.n	800722c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	441a      	add	r2, r3
 8007214:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800721c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007228:	b29b      	uxth	r3, r3
 800722a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007232:	2b01      	cmp	r3, #1
 8007234:	f040 8286 	bne.w	8007744 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	695a      	ldr	r2, [r3, #20]
 800723c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007240:	441a      	add	r2, r3
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800724e:	441a      	add	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	6a1a      	ldr	r2, [r3, #32]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	429a      	cmp	r2, r3
 800725e:	d309      	bcc.n	8007274 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6a1a      	ldr	r2, [r3, #32]
 800726a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800726c:	1ad2      	subs	r2, r2, r3
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	621a      	str	r2, [r3, #32]
 8007272:	e015      	b.n	80072a0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d107      	bne.n	800728c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800727c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007280:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800728a:	e009      	b.n	80072a0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2200      	movs	r2, #0
 800729e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d155      	bne.n	8007354 <HAL_PCD_EP_DB_Transmit+0x35a>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	4413      	add	r3, r2
 80072be:	63bb      	str	r3, [r7, #56]	; 0x38
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	011a      	lsls	r2, r3, #4
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	4413      	add	r3, r2
 80072ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
 80072d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d112      	bne.n	80072fc <HAL_PCD_EP_DB_Transmit+0x302>
 80072d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	e047      	b.n	800738c <HAL_PCD_EP_DB_Transmit+0x392>
 80072fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007300:	d811      	bhi.n	8007326 <HAL_PCD_EP_DB_Transmit+0x32c>
 8007302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	64bb      	str	r3, [r7, #72]	; 0x48
 8007308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <HAL_PCD_EP_DB_Transmit+0x31e>
 8007312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007314:	3301      	adds	r3, #1
 8007316:	64bb      	str	r3, [r7, #72]	; 0x48
 8007318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800731a:	b29b      	uxth	r3, r3
 800731c:	029b      	lsls	r3, r3, #10
 800731e:	b29a      	uxth	r2, r3
 8007320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e032      	b.n	800738c <HAL_PCD_EP_DB_Transmit+0x392>
 8007326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007328:	095b      	lsrs	r3, r3, #5
 800732a:	64bb      	str	r3, [r7, #72]	; 0x48
 800732c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2b00      	cmp	r3, #0
 8007334:	d102      	bne.n	800733c <HAL_PCD_EP_DB_Transmit+0x342>
 8007336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007338:	3b01      	subs	r3, #1
 800733a:	64bb      	str	r3, [r7, #72]	; 0x48
 800733c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733e:	b29b      	uxth	r3, r3
 8007340:	029b      	lsls	r3, r3, #10
 8007342:	b29b      	uxth	r3, r3
 8007344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734c:	b29a      	uxth	r2, r3
 800734e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	e01b      	b.n	800738c <HAL_PCD_EP_DB_Transmit+0x392>
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d117      	bne.n	800738c <HAL_PCD_EP_DB_Transmit+0x392>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	643b      	str	r3, [r7, #64]	; 0x40
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800736a:	b29b      	uxth	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007370:	4413      	add	r3, r2
 8007372:	643b      	str	r3, [r7, #64]	; 0x40
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	011a      	lsls	r2, r3, #4
 800737a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800737c:	4413      	add	r3, r2
 800737e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007386:	b29a      	uxth	r2, r3
 8007388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6959      	ldr	r1, [r3, #20]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	891a      	ldrh	r2, [r3, #8]
 8007398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800739a:	b29b      	uxth	r3, r3
 800739c:	f003 fb5d 	bl	800aa5a <USB_WritePMA>
 80073a0:	e1d0      	b.n	8007744 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	4413      	add	r3, r2
 80073b6:	3306      	adds	r3, #6
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	699a      	ldr	r2, [r3, #24]
 80073d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d307      	bcc.n	80073ea <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073e2:	1ad2      	subs	r2, r2, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	619a      	str	r2, [r3, #24]
 80073e8:	e002      	b.n	80073f0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2200      	movs	r2, #0
 80073ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 80c4 	bne.w	8007582 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d126      	bne.n	8007450 <HAL_PCD_EP_DB_Transmit+0x456>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007410:	b29b      	uxth	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007416:	4413      	add	r3, r2
 8007418:	66fb      	str	r3, [r7, #108]	; 0x6c
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	011a      	lsls	r2, r3, #4
 8007420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007422:	4413      	add	r3, r2
 8007424:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007428:	66bb      	str	r3, [r7, #104]	; 0x68
 800742a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007434:	b29a      	uxth	r2, r3
 8007436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007438:	801a      	strh	r2, [r3, #0]
 800743a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007448:	b29a      	uxth	r2, r3
 800744a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	e01a      	b.n	8007486 <HAL_PCD_EP_DB_Transmit+0x48c>
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d116      	bne.n	8007486 <HAL_PCD_EP_DB_Transmit+0x48c>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	677b      	str	r3, [r7, #116]	; 0x74
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007466:	b29b      	uxth	r3, r3
 8007468:	461a      	mov	r2, r3
 800746a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800746c:	4413      	add	r3, r2
 800746e:	677b      	str	r3, [r7, #116]	; 0x74
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	011a      	lsls	r2, r3, #4
 8007476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007478:	4413      	add	r3, r2
 800747a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800747e:	673b      	str	r3, [r7, #112]	; 0x70
 8007480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007482:	2200      	movs	r2, #0
 8007484:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	67bb      	str	r3, [r7, #120]	; 0x78
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d12f      	bne.n	80074f4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074ac:	4413      	add	r3, r2
 80074ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	011a      	lsls	r2, r3, #4
 80074b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074bc:	4413      	add	r3, r2
 80074be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	e017      	b.n	8007524 <HAL_PCD_EP_DB_Transmit+0x52a>
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d113      	bne.n	8007524 <HAL_PCD_EP_DB_Transmit+0x52a>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007504:	b29b      	uxth	r3, r3
 8007506:	461a      	mov	r2, r3
 8007508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800750a:	4413      	add	r3, r2
 800750c:	67bb      	str	r3, [r7, #120]	; 0x78
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	011a      	lsls	r2, r3, #4
 8007514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007516:	4413      	add	r3, r2
 8007518:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800751c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800751e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007520:	2200      	movs	r2, #0
 8007522:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	4619      	mov	r1, r3
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f005 f8f1 	bl	800c712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007536:	2b00      	cmp	r3, #0
 8007538:	f040 8104 	bne.w	8007744 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007556:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	441a      	add	r2, r3
 8007568:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800756c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757c:	b29b      	uxth	r3, r3
 800757e:	8013      	strh	r3, [r2, #0]
 8007580:	e0e0      	b.n	8007744 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d121      	bne.n	80075d0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	441a      	add	r2, r3
 80075b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80075bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	f040 80b4 	bne.w	8007744 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	695a      	ldr	r2, [r3, #20]
 80075e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075e4:	441a      	add	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	69da      	ldr	r2, [r3, #28]
 80075ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075f2:	441a      	add	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6a1a      	ldr	r2, [r3, #32]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	429a      	cmp	r2, r3
 8007602:	d309      	bcc.n	8007618 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	6a1a      	ldr	r2, [r3, #32]
 800760e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007610:	1ad2      	subs	r2, r2, r3
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	621a      	str	r2, [r3, #32]
 8007616:	e015      	b.n	8007644 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d107      	bne.n	8007630 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8007620:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007624:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800762e:	e009      	b.n	8007644 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2200      	movs	r2, #0
 800763a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	667b      	str	r3, [r7, #100]	; 0x64
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	785b      	ldrb	r3, [r3, #1]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d155      	bne.n	80076fe <HAL_PCD_EP_DB_Transmit+0x704>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007666:	4413      	add	r3, r2
 8007668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	011a      	lsls	r2, r3, #4
 8007670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007672:	4413      	add	r3, r2
 8007674:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007678:	65bb      	str	r3, [r7, #88]	; 0x58
 800767a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800767c:	2b00      	cmp	r3, #0
 800767e:	d112      	bne.n	80076a6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800768a:	b29a      	uxth	r2, r3
 800768c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800769a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769e:	b29a      	uxth	r2, r3
 80076a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076a2:	801a      	strh	r2, [r3, #0]
 80076a4:	e044      	b.n	8007730 <HAL_PCD_EP_DB_Transmit+0x736>
 80076a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a8:	2b3e      	cmp	r3, #62	; 0x3e
 80076aa:	d811      	bhi.n	80076d0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80076ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	657b      	str	r3, [r7, #84]	; 0x54
 80076b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80076bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076be:	3301      	adds	r3, #1
 80076c0:	657b      	str	r3, [r7, #84]	; 0x54
 80076c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	029b      	lsls	r3, r3, #10
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076cc:	801a      	strh	r2, [r3, #0]
 80076ce:	e02f      	b.n	8007730 <HAL_PCD_EP_DB_Transmit+0x736>
 80076d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d2:	095b      	lsrs	r3, r3, #5
 80076d4:	657b      	str	r3, [r7, #84]	; 0x54
 80076d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d102      	bne.n	80076e6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80076e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076e2:	3b01      	subs	r3, #1
 80076e4:	657b      	str	r3, [r7, #84]	; 0x54
 80076e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	029b      	lsls	r3, r3, #10
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076fa:	801a      	strh	r2, [r3, #0]
 80076fc:	e018      	b.n	8007730 <HAL_PCD_EP_DB_Transmit+0x736>
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d114      	bne.n	8007730 <HAL_PCD_EP_DB_Transmit+0x736>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770e:	b29b      	uxth	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007714:	4413      	add	r3, r2
 8007716:	667b      	str	r3, [r7, #100]	; 0x64
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	011a      	lsls	r2, r3, #4
 800771e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007720:	4413      	add	r3, r2
 8007722:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007726:	663b      	str	r3, [r7, #96]	; 0x60
 8007728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800772a:	b29a      	uxth	r2, r3
 800772c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800772e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	6959      	ldr	r1, [r3, #20]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	895a      	ldrh	r2, [r3, #10]
 800773c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800773e:	b29b      	uxth	r3, r3
 8007740:	f003 f98b 	bl	800aa5a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800775a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800775e:	823b      	strh	r3, [r7, #16]
 8007760:	8a3b      	ldrh	r3, [r7, #16]
 8007762:	f083 0310 	eor.w	r3, r3, #16
 8007766:	823b      	strh	r3, [r7, #16]
 8007768:	8a3b      	ldrh	r3, [r7, #16]
 800776a:	f083 0320 	eor.w	r3, r3, #32
 800776e:	823b      	strh	r3, [r7, #16]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	441a      	add	r2, r3
 800777e:	8a3b      	ldrh	r3, [r7, #16]
 8007780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007790:	b29b      	uxth	r3, r3
 8007792:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3788      	adds	r7, #136	; 0x88
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800779e:	b480      	push	{r7}
 80077a0:	b087      	sub	sp, #28
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	607b      	str	r3, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	817b      	strh	r3, [r7, #10]
 80077ac:	4613      	mov	r3, r2
 80077ae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80077b0:	897b      	ldrh	r3, [r7, #10]
 80077b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077bc:	897b      	ldrh	r3, [r7, #10]
 80077be:	f003 0307 	and.w	r3, r3, #7
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e009      	b.n	80077e8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80077d4:	897a      	ldrh	r2, [r7, #10]
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4413      	add	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80077e8:	893b      	ldrh	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d107      	bne.n	80077fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2200      	movs	r2, #0
 80077f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	80da      	strh	r2, [r3, #6]
 80077fc:	e00b      	b.n	8007816 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2201      	movs	r2, #1
 8007802:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	b29a      	uxth	r2, r3
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	0c1b      	lsrs	r3, r3, #16
 8007810:	b29a      	uxth	r2, r3
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr
	...

08007824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e26c      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 8087 	beq.w	8007952 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007844:	4b92      	ldr	r3, [pc, #584]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f003 030c 	and.w	r3, r3, #12
 800784c:	2b04      	cmp	r3, #4
 800784e:	d00c      	beq.n	800786a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007850:	4b8f      	ldr	r3, [pc, #572]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f003 030c 	and.w	r3, r3, #12
 8007858:	2b08      	cmp	r3, #8
 800785a:	d112      	bne.n	8007882 <HAL_RCC_OscConfig+0x5e>
 800785c:	4b8c      	ldr	r3, [pc, #560]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007868:	d10b      	bne.n	8007882 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786a:	4b89      	ldr	r3, [pc, #548]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d06c      	beq.n	8007950 <HAL_RCC_OscConfig+0x12c>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d168      	bne.n	8007950 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e246      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800788a:	d106      	bne.n	800789a <HAL_RCC_OscConfig+0x76>
 800788c:	4b80      	ldr	r3, [pc, #512]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a7f      	ldr	r2, [pc, #508]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 8007892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	e02e      	b.n	80078f8 <HAL_RCC_OscConfig+0xd4>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10c      	bne.n	80078bc <HAL_RCC_OscConfig+0x98>
 80078a2:	4b7b      	ldr	r3, [pc, #492]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a7a      	ldr	r2, [pc, #488]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	4b78      	ldr	r3, [pc, #480]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a77      	ldr	r2, [pc, #476]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	e01d      	b.n	80078f8 <HAL_RCC_OscConfig+0xd4>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078c4:	d10c      	bne.n	80078e0 <HAL_RCC_OscConfig+0xbc>
 80078c6:	4b72      	ldr	r3, [pc, #456]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a71      	ldr	r2, [pc, #452]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	4b6f      	ldr	r3, [pc, #444]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a6e      	ldr	r2, [pc, #440]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	e00b      	b.n	80078f8 <HAL_RCC_OscConfig+0xd4>
 80078e0:	4b6b      	ldr	r3, [pc, #428]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a6a      	ldr	r2, [pc, #424]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	4b68      	ldr	r3, [pc, #416]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a67      	ldr	r2, [pc, #412]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80078f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d013      	beq.n	8007928 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007900:	f7fc ffc2 	bl	8004888 <HAL_GetTick>
 8007904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007908:	f7fc ffbe 	bl	8004888 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b64      	cmp	r3, #100	; 0x64
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e1fa      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800791a:	4b5d      	ldr	r3, [pc, #372]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0f0      	beq.n	8007908 <HAL_RCC_OscConfig+0xe4>
 8007926:	e014      	b.n	8007952 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007928:	f7fc ffae 	bl	8004888 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007930:	f7fc ffaa 	bl	8004888 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b64      	cmp	r3, #100	; 0x64
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e1e6      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007942:	4b53      	ldr	r3, [pc, #332]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f0      	bne.n	8007930 <HAL_RCC_OscConfig+0x10c>
 800794e:	e000      	b.n	8007952 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d063      	beq.n	8007a26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800795e:	4b4c      	ldr	r3, [pc, #304]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f003 030c 	and.w	r3, r3, #12
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00b      	beq.n	8007982 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800796a:	4b49      	ldr	r3, [pc, #292]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f003 030c 	and.w	r3, r3, #12
 8007972:	2b08      	cmp	r3, #8
 8007974:	d11c      	bne.n	80079b0 <HAL_RCC_OscConfig+0x18c>
 8007976:	4b46      	ldr	r3, [pc, #280]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d116      	bne.n	80079b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007982:	4b43      	ldr	r3, [pc, #268]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d005      	beq.n	800799a <HAL_RCC_OscConfig+0x176>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d001      	beq.n	800799a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e1ba      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800799a:	4b3d      	ldr	r3, [pc, #244]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	4939      	ldr	r1, [pc, #228]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ae:	e03a      	b.n	8007a26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d020      	beq.n	80079fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079b8:	4b36      	ldr	r3, [pc, #216]	; (8007a94 <HAL_RCC_OscConfig+0x270>)
 80079ba:	2201      	movs	r2, #1
 80079bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079be:	f7fc ff63 	bl	8004888 <HAL_GetTick>
 80079c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079c4:	e008      	b.n	80079d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079c6:	f7fc ff5f 	bl	8004888 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d901      	bls.n	80079d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e19b      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079d8:	4b2d      	ldr	r3, [pc, #180]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0f0      	beq.n	80079c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079e4:	4b2a      	ldr	r3, [pc, #168]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	4927      	ldr	r1, [pc, #156]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	600b      	str	r3, [r1, #0]
 80079f8:	e015      	b.n	8007a26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079fa:	4b26      	ldr	r3, [pc, #152]	; (8007a94 <HAL_RCC_OscConfig+0x270>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a00:	f7fc ff42 	bl	8004888 <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a08:	f7fc ff3e 	bl	8004888 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e17a      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a1a:	4b1d      	ldr	r3, [pc, #116]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f0      	bne.n	8007a08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0308 	and.w	r3, r3, #8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d03a      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d019      	beq.n	8007a6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a3a:	4b17      	ldr	r3, [pc, #92]	; (8007a98 <HAL_RCC_OscConfig+0x274>)
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a40:	f7fc ff22 	bl	8004888 <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a48:	f7fc ff1e 	bl	8004888 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e15a      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <HAL_RCC_OscConfig+0x26c>)
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007a66:	2001      	movs	r0, #1
 8007a68:	f000 fac6 	bl	8007ff8 <RCC_Delay>
 8007a6c:	e01c      	b.n	8007aa8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <HAL_RCC_OscConfig+0x274>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a74:	f7fc ff08 	bl	8004888 <HAL_GetTick>
 8007a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a7a:	e00f      	b.n	8007a9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a7c:	f7fc ff04 	bl	8004888 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d908      	bls.n	8007a9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e140      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
 8007a8e:	bf00      	nop
 8007a90:	40021000 	.word	0x40021000
 8007a94:	42420000 	.word	0x42420000
 8007a98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a9c:	4b9e      	ldr	r3, [pc, #632]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e9      	bne.n	8007a7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 80a6 	beq.w	8007c02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aba:	4b97      	ldr	r3, [pc, #604]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10d      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ac6:	4b94      	ldr	r3, [pc, #592]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	4a93      	ldr	r2, [pc, #588]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ad0:	61d3      	str	r3, [r2, #28]
 8007ad2:	4b91      	ldr	r3, [pc, #580]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ada:	60bb      	str	r3, [r7, #8]
 8007adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae2:	4b8e      	ldr	r3, [pc, #568]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d118      	bne.n	8007b20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007aee:	4b8b      	ldr	r3, [pc, #556]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a8a      	ldr	r2, [pc, #552]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007afa:	f7fc fec5 	bl	8004888 <HAL_GetTick>
 8007afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b00:	e008      	b.n	8007b14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b02:	f7fc fec1 	bl	8004888 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b64      	cmp	r3, #100	; 0x64
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e0fd      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b14:	4b81      	ldr	r3, [pc, #516]	; (8007d1c <HAL_RCC_OscConfig+0x4f8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0f0      	beq.n	8007b02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d106      	bne.n	8007b36 <HAL_RCC_OscConfig+0x312>
 8007b28:	4b7b      	ldr	r3, [pc, #492]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	4a7a      	ldr	r2, [pc, #488]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b2e:	f043 0301 	orr.w	r3, r3, #1
 8007b32:	6213      	str	r3, [r2, #32]
 8007b34:	e02d      	b.n	8007b92 <HAL_RCC_OscConfig+0x36e>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10c      	bne.n	8007b58 <HAL_RCC_OscConfig+0x334>
 8007b3e:	4b76      	ldr	r3, [pc, #472]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	4a75      	ldr	r2, [pc, #468]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b44:	f023 0301 	bic.w	r3, r3, #1
 8007b48:	6213      	str	r3, [r2, #32]
 8007b4a:	4b73      	ldr	r3, [pc, #460]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	4a72      	ldr	r2, [pc, #456]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b50:	f023 0304 	bic.w	r3, r3, #4
 8007b54:	6213      	str	r3, [r2, #32]
 8007b56:	e01c      	b.n	8007b92 <HAL_RCC_OscConfig+0x36e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	2b05      	cmp	r3, #5
 8007b5e:	d10c      	bne.n	8007b7a <HAL_RCC_OscConfig+0x356>
 8007b60:	4b6d      	ldr	r3, [pc, #436]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	4a6c      	ldr	r2, [pc, #432]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b66:	f043 0304 	orr.w	r3, r3, #4
 8007b6a:	6213      	str	r3, [r2, #32]
 8007b6c:	4b6a      	ldr	r3, [pc, #424]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	4a69      	ldr	r2, [pc, #420]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	6213      	str	r3, [r2, #32]
 8007b78:	e00b      	b.n	8007b92 <HAL_RCC_OscConfig+0x36e>
 8007b7a:	4b67      	ldr	r3, [pc, #412]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	4a66      	ldr	r2, [pc, #408]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b80:	f023 0301 	bic.w	r3, r3, #1
 8007b84:	6213      	str	r3, [r2, #32]
 8007b86:	4b64      	ldr	r3, [pc, #400]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	4a63      	ldr	r2, [pc, #396]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007b8c:	f023 0304 	bic.w	r3, r3, #4
 8007b90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d015      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b9a:	f7fc fe75 	bl	8004888 <HAL_GetTick>
 8007b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ba0:	e00a      	b.n	8007bb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba2:	f7fc fe71 	bl	8004888 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e0ab      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bb8:	4b57      	ldr	r3, [pc, #348]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0ee      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x37e>
 8007bc4:	e014      	b.n	8007bf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bc6:	f7fc fe5f 	bl	8004888 <HAL_GetTick>
 8007bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bcc:	e00a      	b.n	8007be4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bce:	f7fc fe5b 	bl	8004888 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d901      	bls.n	8007be4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e095      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007be4:	4b4c      	ldr	r3, [pc, #304]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1ee      	bne.n	8007bce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d105      	bne.n	8007c02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bf6:	4b48      	ldr	r3, [pc, #288]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	4a47      	ldr	r2, [pc, #284]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 8081 	beq.w	8007d0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c0c:	4b42      	ldr	r3, [pc, #264]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f003 030c 	and.w	r3, r3, #12
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d061      	beq.n	8007cdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d146      	bne.n	8007cae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c20:	4b3f      	ldr	r3, [pc, #252]	; (8007d20 <HAL_RCC_OscConfig+0x4fc>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c26:	f7fc fe2f 	bl	8004888 <HAL_GetTick>
 8007c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c2c:	e008      	b.n	8007c40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c2e:	f7fc fe2b 	bl	8004888 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d901      	bls.n	8007c40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e067      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c40:	4b35      	ldr	r3, [pc, #212]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f0      	bne.n	8007c2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c54:	d108      	bne.n	8007c68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007c56:	4b30      	ldr	r3, [pc, #192]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	492d      	ldr	r1, [pc, #180]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c68:	4b2b      	ldr	r3, [pc, #172]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a19      	ldr	r1, [r3, #32]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	430b      	orrs	r3, r1
 8007c7a:	4927      	ldr	r1, [pc, #156]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c80:	4b27      	ldr	r3, [pc, #156]	; (8007d20 <HAL_RCC_OscConfig+0x4fc>)
 8007c82:	2201      	movs	r2, #1
 8007c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c86:	f7fc fdff 	bl	8004888 <HAL_GetTick>
 8007c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c8c:	e008      	b.n	8007ca0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c8e:	f7fc fdfb 	bl	8004888 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e037      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0f0      	beq.n	8007c8e <HAL_RCC_OscConfig+0x46a>
 8007cac:	e02f      	b.n	8007d0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cae:	4b1c      	ldr	r3, [pc, #112]	; (8007d20 <HAL_RCC_OscConfig+0x4fc>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb4:	f7fc fde8 	bl	8004888 <HAL_GetTick>
 8007cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cbc:	f7fc fde4 	bl	8004888 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e020      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cce:	4b12      	ldr	r3, [pc, #72]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1f0      	bne.n	8007cbc <HAL_RCC_OscConfig+0x498>
 8007cda:	e018      	b.n	8007d0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e013      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <HAL_RCC_OscConfig+0x4f4>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d106      	bne.n	8007d0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d001      	beq.n	8007d0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e000      	b.n	8007d10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	40021000 	.word	0x40021000
 8007d1c:	40007000 	.word	0x40007000
 8007d20:	42420060 	.word	0x42420060

08007d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e0d0      	b.n	8007eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d38:	4b6a      	ldr	r3, [pc, #424]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d910      	bls.n	8007d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d46:	4b67      	ldr	r3, [pc, #412]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f023 0207 	bic.w	r2, r3, #7
 8007d4e:	4965      	ldr	r1, [pc, #404]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d56:	4b63      	ldr	r3, [pc, #396]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d001      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e0b8      	b.n	8007eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d020      	beq.n	8007db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d005      	beq.n	8007d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d80:	4b59      	ldr	r3, [pc, #356]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	4a58      	ldr	r2, [pc, #352]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d98:	4b53      	ldr	r3, [pc, #332]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	4a52      	ldr	r2, [pc, #328]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007d9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007da4:	4b50      	ldr	r3, [pc, #320]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	494d      	ldr	r1, [pc, #308]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d040      	beq.n	8007e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d107      	bne.n	8007dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dca:	4b47      	ldr	r3, [pc, #284]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d115      	bne.n	8007e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e07f      	b.n	8007eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d107      	bne.n	8007df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007de2:	4b41      	ldr	r3, [pc, #260]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d109      	bne.n	8007e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e073      	b.n	8007eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007df2:	4b3d      	ldr	r3, [pc, #244]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e06b      	b.n	8007eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e02:	4b39      	ldr	r3, [pc, #228]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f023 0203 	bic.w	r2, r3, #3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	4936      	ldr	r1, [pc, #216]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e14:	f7fc fd38 	bl	8004888 <HAL_GetTick>
 8007e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e1a:	e00a      	b.n	8007e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e1c:	f7fc fd34 	bl	8004888 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e053      	b.n	8007eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e32:	4b2d      	ldr	r3, [pc, #180]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f003 020c 	and.w	r2, r3, #12
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d1eb      	bne.n	8007e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e44:	4b27      	ldr	r3, [pc, #156]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d210      	bcs.n	8007e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e52:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f023 0207 	bic.w	r2, r3, #7
 8007e5a:	4922      	ldr	r1, [pc, #136]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e62:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d001      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e032      	b.n	8007eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d008      	beq.n	8007e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e80:	4b19      	ldr	r3, [pc, #100]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	4916      	ldr	r1, [pc, #88]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0308 	and.w	r3, r3, #8
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e9e:	4b12      	ldr	r3, [pc, #72]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	490e      	ldr	r1, [pc, #56]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007eb2:	f000 f821 	bl	8007ef8 <HAL_RCC_GetSysClockFreq>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4b0b      	ldr	r3, [pc, #44]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	091b      	lsrs	r3, r3, #4
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	490a      	ldr	r1, [pc, #40]	; (8007eec <HAL_RCC_ClockConfig+0x1c8>)
 8007ec4:	5ccb      	ldrb	r3, [r1, r3]
 8007ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eca:	4a09      	ldr	r2, [pc, #36]	; (8007ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8007ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ece:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fc fc96 	bl	8004804 <HAL_InitTick>

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40022000 	.word	0x40022000
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	0800db90 	.word	0x0800db90
 8007ef0:	20000010 	.word	0x20000010
 8007ef4:	20000014 	.word	0x20000014

08007ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ef8:	b490      	push	{r4, r7}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007efe:	4b2a      	ldr	r3, [pc, #168]	; (8007fa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007f00:	1d3c      	adds	r4, r7, #4
 8007f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007f08:	f240 2301 	movw	r3, #513	; 0x201
 8007f0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	2300      	movs	r3, #0
 8007f14:	61bb      	str	r3, [r7, #24]
 8007f16:	2300      	movs	r3, #0
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007f22:	4b22      	ldr	r3, [pc, #136]	; (8007fac <HAL_RCC_GetSysClockFreq+0xb4>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	f003 030c 	and.w	r3, r3, #12
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d002      	beq.n	8007f38 <HAL_RCC_GetSysClockFreq+0x40>
 8007f32:	2b08      	cmp	r3, #8
 8007f34:	d003      	beq.n	8007f3e <HAL_RCC_GetSysClockFreq+0x46>
 8007f36:	e02d      	b.n	8007f94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007f38:	4b1d      	ldr	r3, [pc, #116]	; (8007fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f3a:	623b      	str	r3, [r7, #32]
      break;
 8007f3c:	e02d      	b.n	8007f9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	0c9b      	lsrs	r3, r3, #18
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007f50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d013      	beq.n	8007f84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007f5c:	4b13      	ldr	r3, [pc, #76]	; (8007fac <HAL_RCC_GetSysClockFreq+0xb4>)
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	0c5b      	lsrs	r3, r3, #17
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007f70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	4a0e      	ldr	r2, [pc, #56]	; (8007fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f76:	fb02 f203 	mul.w	r2, r2, r3
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
 8007f82:	e004      	b.n	8007f8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	4a0b      	ldr	r2, [pc, #44]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f88:	fb02 f303 	mul.w	r3, r2, r3
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	623b      	str	r3, [r7, #32]
      break;
 8007f92:	e002      	b.n	8007f9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007f94:	4b08      	ldr	r3, [pc, #32]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007f96:	623b      	str	r3, [r7, #32]
      break;
 8007f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3728      	adds	r7, #40	; 0x28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bc90      	pop	{r4, r7}
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	0800d708 	.word	0x0800d708
 8007fac:	40021000 	.word	0x40021000
 8007fb0:	00f42400 	.word	0x00f42400
 8007fb4:	003d0900 	.word	0x003d0900
 8007fb8:	007a1200 	.word	0x007a1200

08007fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fc0:	4b02      	ldr	r3, [pc, #8]	; (8007fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr
 8007fcc:	20000010 	.word	0x20000010

08007fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007fd4:	f7ff fff2 	bl	8007fbc <HAL_RCC_GetHCLKFreq>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	4903      	ldr	r1, [pc, #12]	; (8007ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fe6:	5ccb      	ldrb	r3, [r1, r3]
 8007fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	40021000 	.word	0x40021000
 8007ff4:	0800dba0 	.word	0x0800dba0

08007ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008000:	4b0a      	ldr	r3, [pc, #40]	; (800802c <RCC_Delay+0x34>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a0a      	ldr	r2, [pc, #40]	; (8008030 <RCC_Delay+0x38>)
 8008006:	fba2 2303 	umull	r2, r3, r2, r3
 800800a:	0a5b      	lsrs	r3, r3, #9
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	fb02 f303 	mul.w	r3, r2, r3
 8008012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008014:	bf00      	nop
  }
  while (Delay --);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	1e5a      	subs	r2, r3, #1
 800801a:	60fa      	str	r2, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f9      	bne.n	8008014 <RCC_Delay+0x1c>
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr
 800802c:	20000010 	.word	0x20000010
 8008030:	10624dd3 	.word	0x10624dd3

08008034 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	613b      	str	r3, [r7, #16]
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d07d      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008050:	2300      	movs	r3, #0
 8008052:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008054:	4b4f      	ldr	r3, [pc, #316]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10d      	bne.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008060:	4b4c      	ldr	r3, [pc, #304]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	4a4b      	ldr	r2, [pc, #300]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800806a:	61d3      	str	r3, [r2, #28]
 800806c:	4b49      	ldr	r3, [pc, #292]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008074:	60bb      	str	r3, [r7, #8]
 8008076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800807c:	4b46      	ldr	r3, [pc, #280]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008084:	2b00      	cmp	r3, #0
 8008086:	d118      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008088:	4b43      	ldr	r3, [pc, #268]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a42      	ldr	r2, [pc, #264]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800808e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008094:	f7fc fbf8 	bl	8004888 <HAL_GetTick>
 8008098:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800809a:	e008      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800809c:	f7fc fbf4 	bl	8004888 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b64      	cmp	r3, #100	; 0x64
 80080a8:	d901      	bls.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e06d      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080ae:	4b3a      	ldr	r3, [pc, #232]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0f0      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80080ba:	4b36      	ldr	r3, [pc, #216]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d02e      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d027      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080d8:	4b2e      	ldr	r3, [pc, #184]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80080e2:	4b2e      	ldr	r3, [pc, #184]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080e8:	4b2c      	ldr	r3, [pc, #176]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80080ee:	4a29      	ldr	r2, [pc, #164]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d014      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080fe:	f7fc fbc3 	bl	8004888 <HAL_GetTick>
 8008102:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008104:	e00a      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008106:	f7fc fbbf 	bl	8004888 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	f241 3288 	movw	r2, #5000	; 0x1388
 8008114:	4293      	cmp	r3, r2
 8008116:	d901      	bls.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e036      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800811c:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0ee      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008128:	4b1a      	ldr	r3, [pc, #104]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	4917      	ldr	r1, [pc, #92]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008136:	4313      	orrs	r3, r2
 8008138:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d105      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008140:	4b14      	ldr	r3, [pc, #80]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	4a13      	ldr	r2, [pc, #76]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800814a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008158:	4b0e      	ldr	r3, [pc, #56]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	490b      	ldr	r1, [pc, #44]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008166:	4313      	orrs	r3, r2
 8008168:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0310 	and.w	r3, r3, #16
 8008172:	2b00      	cmp	r3, #0
 8008174:	d008      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008176:	4b07      	ldr	r3, [pc, #28]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	4904      	ldr	r1, [pc, #16]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008184:	4313      	orrs	r3, r2
 8008186:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40021000 	.word	0x40021000
 8008198:	40007000 	.word	0x40007000
 800819c:	42420440 	.word	0x42420440

080081a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e076      	b.n	80082a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d108      	bne.n	80081cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081c2:	d009      	beq.n	80081d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	61da      	str	r2, [r3, #28]
 80081ca:	e005      	b.n	80081d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7fc f834 	bl	8004260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800820e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008220:	431a      	orrs	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800822a:	431a      	orrs	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008248:	431a      	orrs	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825c:	ea42 0103 	orr.w	r1, r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	430a      	orrs	r2, r1
 800826e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	0c1a      	lsrs	r2, r3, #16
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f002 0204 	and.w	r2, r2, #4
 800827e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69da      	ldr	r2, [r3, #28]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800828e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	4613      	mov	r3, r2
 80082b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <HAL_SPI_Transmit+0x22>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e126      	b.n	8008518 <HAL_SPI_Transmit+0x270>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082d2:	f7fc fad9 	bl	8004888 <HAL_GetTick>
 80082d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80082d8:	88fb      	ldrh	r3, [r7, #6]
 80082da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d002      	beq.n	80082ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80082e8:	2302      	movs	r3, #2
 80082ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082ec:	e10b      	b.n	8008506 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <HAL_SPI_Transmit+0x52>
 80082f4:	88fb      	ldrh	r3, [r7, #6]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d102      	bne.n	8008300 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082fe:	e102      	b.n	8008506 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2203      	movs	r2, #3
 8008304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	88fa      	ldrh	r2, [r7, #6]
 8008318:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	88fa      	ldrh	r2, [r7, #6]
 800831e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008346:	d10f      	bne.n	8008368 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008356:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008366:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008372:	2b40      	cmp	r3, #64	; 0x40
 8008374:	d007      	beq.n	8008386 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008384:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800838e:	d14b      	bne.n	8008428 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <HAL_SPI_Transmit+0xf6>
 8008398:	8afb      	ldrh	r3, [r7, #22]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d13e      	bne.n	800841c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a2:	881a      	ldrh	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ae:	1c9a      	adds	r2, r3, #2
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b29a      	uxth	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80083c2:	e02b      	b.n	800841c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d112      	bne.n	80083f8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d6:	881a      	ldrh	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e2:	1c9a      	adds	r2, r3, #2
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	3b01      	subs	r3, #1
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80083f6:	e011      	b.n	800841c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083f8:	f7fc fa46 	bl	8004888 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d803      	bhi.n	8008410 <HAL_SPI_Transmit+0x168>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840e:	d102      	bne.n	8008416 <HAL_SPI_Transmit+0x16e>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d102      	bne.n	800841c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	77fb      	strb	r3, [r7, #31]
          goto error;
 800841a:	e074      	b.n	8008506 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1ce      	bne.n	80083c4 <HAL_SPI_Transmit+0x11c>
 8008426:	e04c      	b.n	80084c2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <HAL_SPI_Transmit+0x18e>
 8008430:	8afb      	ldrh	r3, [r7, #22]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d140      	bne.n	80084b8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	330c      	adds	r3, #12
 8008440:	7812      	ldrb	r2, [r2, #0]
 8008442:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008452:	b29b      	uxth	r3, r3
 8008454:	3b01      	subs	r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800845c:	e02c      	b.n	80084b8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b02      	cmp	r3, #2
 800846a:	d113      	bne.n	8008494 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	330c      	adds	r3, #12
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008488:	b29b      	uxth	r3, r3
 800848a:	3b01      	subs	r3, #1
 800848c:	b29a      	uxth	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	86da      	strh	r2, [r3, #54]	; 0x36
 8008492:	e011      	b.n	80084b8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008494:	f7fc f9f8 	bl	8004888 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d803      	bhi.n	80084ac <HAL_SPI_Transmit+0x204>
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084aa:	d102      	bne.n	80084b2 <HAL_SPI_Transmit+0x20a>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d102      	bne.n	80084b8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80084b6:	e026      	b.n	8008506 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1cd      	bne.n	800845e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 f8b2 	bl	8008630 <SPI_EndRxTxTransaction>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d002      	beq.n	80084d8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10a      	bne.n	80084f6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084e0:	2300      	movs	r3, #0
 80084e2:	613b      	str	r3, [r7, #16]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	613b      	str	r3, [r7, #16]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	613b      	str	r3, [r7, #16]
 80084f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	77fb      	strb	r3, [r7, #31]
 8008502:	e000      	b.n	8008506 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008504:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008516:	7ffb      	ldrb	r3, [r7, #31]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3720      	adds	r7, #32
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	4613      	mov	r3, r2
 800852e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008530:	f7fc f9aa 	bl	8004888 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	1a9b      	subs	r3, r3, r2
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	4413      	add	r3, r2
 800853e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008540:	f7fc f9a2 	bl	8004888 <HAL_GetTick>
 8008544:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008546:	4b39      	ldr	r3, [pc, #228]	; (800862c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	015b      	lsls	r3, r3, #5
 800854c:	0d1b      	lsrs	r3, r3, #20
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	fb02 f303 	mul.w	r3, r2, r3
 8008554:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008556:	e054      	b.n	8008602 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855e:	d050      	beq.n	8008602 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008560:	f7fc f992 	bl	8004888 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	429a      	cmp	r2, r3
 800856e:	d902      	bls.n	8008576 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d13d      	bne.n	80085f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008584:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800858e:	d111      	bne.n	80085b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008598:	d004      	beq.n	80085a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a2:	d107      	bne.n	80085b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085bc:	d10f      	bne.n	80085de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e017      	b.n	8008622 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	3b01      	subs	r3, #1
 8008600:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4013      	ands	r3, r2
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	429a      	cmp	r2, r3
 8008610:	bf0c      	ite	eq
 8008612:	2301      	moveq	r3, #1
 8008614:	2300      	movne	r3, #0
 8008616:	b2db      	uxtb	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	429a      	cmp	r2, r3
 800861e:	d19b      	bne.n	8008558 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3720      	adds	r7, #32
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000010 	.word	0x20000010

08008630 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af02      	add	r7, sp, #8
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2200      	movs	r2, #0
 8008644:	2180      	movs	r1, #128	; 0x80
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff ff6a 	bl	8008520 <SPI_WaitFlagStateUntilTimeout>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d007      	beq.n	8008662 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008656:	f043 0220 	orr.w	r2, r3, #32
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e000      	b.n	8008664 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800866c:	b084      	sub	sp, #16
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	f107 0014 	add.w	r0, r7, #20
 800867a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	bc80      	pop	{r7}
 8008688:	b004      	add	sp, #16
 800868a:	4770      	bx	lr

0800868c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800869c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80086a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bc80      	pop	{r7}
 80086b6:	4770      	bx	lr

080086b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80086c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	43db      	mvns	r3, r3
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	4013      	ands	r3, r2
 80086d8:	b29a      	uxth	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	bc80      	pop	{r7}
 8008702:	4770      	bx	lr

08008704 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008704:	b084      	sub	sp, #16
 8008706:	b480      	push	{r7}
 8008708:	b083      	sub	sp, #12
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	f107 0014 	add.w	r0, r7, #20
 8008712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	b004      	add	sp, #16
 8008742:	4770      	bx	lr

08008744 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008744:	b480      	push	{r7}
 8008746:	b09b      	sub	sp, #108	; 0x6c
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b29b      	uxth	r3, r3
 8008762:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	78db      	ldrb	r3, [r3, #3]
 8008772:	2b03      	cmp	r3, #3
 8008774:	d81f      	bhi.n	80087b6 <USB_ActivateEndpoint+0x72>
 8008776:	a201      	add	r2, pc, #4	; (adr r2, 800877c <USB_ActivateEndpoint+0x38>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	0800878d 	.word	0x0800878d
 8008780:	080087a9 	.word	0x080087a9
 8008784:	080087bf 	.word	0x080087bf
 8008788:	0800879b 	.word	0x0800879b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800878c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008790:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008794:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008798:	e012      	b.n	80087c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800879a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800879e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80087a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80087a6:	e00b      	b.n	80087c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80087a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80087ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80087b4:	e004      	b.n	80087c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80087bc:	e000      	b.n	80087c0 <USB_ActivateEndpoint+0x7c>
      break;
 80087be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	441a      	add	r2, r3
 80087ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80087ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087de:	b29b      	uxth	r3, r3
 80087e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	4313      	orrs	r3, r2
 8008802:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	441a      	add	r2, r3
 8008810:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800881c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008824:	b29b      	uxth	r3, r3
 8008826:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	7b1b      	ldrb	r3, [r3, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f040 8149 	bne.w	8008ac4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 8084 	beq.w	8008944 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	617b      	str	r3, [r7, #20]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008846:	b29b      	uxth	r3, r3
 8008848:	461a      	mov	r2, r3
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	4413      	add	r3, r2
 800884e:	617b      	str	r3, [r7, #20]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	011a      	lsls	r2, r3, #4
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800885e:	613b      	str	r3, [r7, #16]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	88db      	ldrh	r3, [r3, #6]
 8008864:	085b      	lsrs	r3, r3, #1
 8008866:	b29b      	uxth	r3, r3
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	81fb      	strh	r3, [r7, #14]
 800887e:	89fb      	ldrh	r3, [r7, #14]
 8008880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01b      	beq.n	80088c0 <USB_ActivateEndpoint+0x17c>
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800889a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889e:	81bb      	strh	r3, [r7, #12]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	441a      	add	r2, r3
 80088aa:	89bb      	ldrh	r3, [r7, #12]
 80088ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088bc:	b29b      	uxth	r3, r3
 80088be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	78db      	ldrb	r3, [r3, #3]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d020      	beq.n	800890a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088de:	813b      	strh	r3, [r7, #8]
 80088e0:	893b      	ldrh	r3, [r7, #8]
 80088e2:	f083 0320 	eor.w	r3, r3, #32
 80088e6:	813b      	strh	r3, [r7, #8]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	441a      	add	r2, r3
 80088f2:	893b      	ldrh	r3, [r7, #8]
 80088f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008904:	b29b      	uxth	r3, r3
 8008906:	8013      	strh	r3, [r2, #0]
 8008908:	e27f      	b.n	8008e0a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	b29b      	uxth	r3, r3
 8008918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008920:	817b      	strh	r3, [r7, #10]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	441a      	add	r2, r3
 800892c:	897b      	ldrh	r3, [r7, #10]
 800892e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800893a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893e:	b29b      	uxth	r3, r3
 8008940:	8013      	strh	r3, [r2, #0]
 8008942:	e262      	b.n	8008e0a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800894e:	b29b      	uxth	r3, r3
 8008950:	461a      	mov	r2, r3
 8008952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008954:	4413      	add	r3, r2
 8008956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	011a      	lsls	r2, r3, #4
 800895e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008960:	4413      	add	r3, r2
 8008962:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008966:	62bb      	str	r3, [r7, #40]	; 0x28
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	88db      	ldrh	r3, [r3, #6]
 800896c:	085b      	lsrs	r3, r3, #1
 800896e:	b29b      	uxth	r3, r3
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	627b      	str	r3, [r7, #36]	; 0x24
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008982:	b29b      	uxth	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	4413      	add	r3, r2
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	011a      	lsls	r2, r3, #4
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	4413      	add	r3, r2
 8008996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800899a:	623b      	str	r3, [r7, #32]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d112      	bne.n	80089ca <USB_ActivateEndpoint+0x286>
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	801a      	strh	r2, [r3, #0]
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	801a      	strh	r2, [r3, #0]
 80089c8:	e02f      	b.n	8008a2a <USB_ActivateEndpoint+0x2e6>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	2b3e      	cmp	r3, #62	; 0x3e
 80089d0:	d813      	bhi.n	80089fa <USB_ActivateEndpoint+0x2b6>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	085b      	lsrs	r3, r3, #1
 80089d8:	663b      	str	r3, [r7, #96]	; 0x60
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <USB_ActivateEndpoint+0x2a8>
 80089e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089e8:	3301      	adds	r3, #1
 80089ea:	663b      	str	r3, [r7, #96]	; 0x60
 80089ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	029b      	lsls	r3, r3, #10
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	801a      	strh	r2, [r3, #0]
 80089f8:	e017      	b.n	8008a2a <USB_ActivateEndpoint+0x2e6>
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	095b      	lsrs	r3, r3, #5
 8008a00:	663b      	str	r3, [r7, #96]	; 0x60
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 031f 	and.w	r3, r3, #31
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d102      	bne.n	8008a14 <USB_ActivateEndpoint+0x2d0>
 8008a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a10:	3b01      	subs	r3, #1
 8008a12:	663b      	str	r3, [r7, #96]	; 0x60
 8008a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	029b      	lsls	r3, r3, #10
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	83fb      	strh	r3, [r7, #30]
 8008a38:	8bfb      	ldrh	r3, [r7, #30]
 8008a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d01b      	beq.n	8008a7a <USB_ActivateEndpoint+0x336>
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a58:	83bb      	strh	r3, [r7, #28]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	441a      	add	r2, r3
 8008a64:	8bbb      	ldrh	r3, [r7, #28]
 8008a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a90:	837b      	strh	r3, [r7, #26]
 8008a92:	8b7b      	ldrh	r3, [r7, #26]
 8008a94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a98:	837b      	strh	r3, [r7, #26]
 8008a9a:	8b7b      	ldrh	r3, [r7, #26]
 8008a9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008aa0:	837b      	strh	r3, [r7, #26]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	441a      	add	r2, r3
 8008aac:	8b7b      	ldrh	r3, [r7, #26]
 8008aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	8013      	strh	r3, [r2, #0]
 8008ac2:	e1a2      	b.n	8008e0a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ada:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	441a      	add	r2, r3
 8008ae8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b10:	4413      	add	r3, r2
 8008b12:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	011a      	lsls	r2, r3, #4
 8008b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b22:	657b      	str	r3, [r7, #84]	; 0x54
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	891b      	ldrh	r3, [r3, #8]
 8008b28:	085b      	lsrs	r3, r3, #1
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b32:	801a      	strh	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	653b      	str	r3, [r7, #80]	; 0x50
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	461a      	mov	r2, r3
 8008b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b44:	4413      	add	r3, r2
 8008b46:	653b      	str	r3, [r7, #80]	; 0x50
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	011a      	lsls	r2, r3, #4
 8008b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	895b      	ldrh	r3, [r3, #10]
 8008b5c:	085b      	lsrs	r3, r3, #1
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b66:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	785b      	ldrb	r3, [r3, #1]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f040 8091 	bne.w	8008c94 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008b80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d01b      	beq.n	8008bc2 <USB_ActivateEndpoint+0x47e>
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	441a      	add	r2, r3
 8008bac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	873b      	strh	r3, [r7, #56]	; 0x38
 8008bd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d01b      	beq.n	8008c12 <USB_ActivateEndpoint+0x4ce>
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	441a      	add	r2, r3
 8008bfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008c2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008c2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008c32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008c34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	441a      	add	r2, r3
 8008c44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c70:	867b      	strh	r3, [r7, #50]	; 0x32
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	441a      	add	r2, r3
 8008c7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	8013      	strh	r3, [r2, #0]
 8008c92:	e0ba      	b.n	8008e0a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008ca4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01d      	beq.n	8008cec <USB_ActivateEndpoint+0x5a8>
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	441a      	add	r2, r3
 8008cd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008cfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01d      	beq.n	8008d44 <USB_ActivateEndpoint+0x600>
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	441a      	add	r2, r3
 8008d2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	78db      	ldrb	r3, [r3, #3]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d024      	beq.n	8008d96 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008d6a:	f083 0320 	eor.w	r3, r3, #32
 8008d6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	441a      	add	r2, r3
 8008d7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	8013      	strh	r3, [r2, #0]
 8008d94:	e01d      	b.n	8008dd2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	441a      	add	r2, r3
 8008dba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	441a      	add	r2, r3
 8008df4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008e0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	376c      	adds	r7, #108	; 0x6c
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bc80      	pop	{r7}
 8008e16:	4770      	bx	lr

08008e18 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b08d      	sub	sp, #52	; 0x34
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	7b1b      	ldrb	r3, [r3, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f040 808e 	bne.w	8008f48 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d044      	beq.n	8008ebe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	81bb      	strh	r3, [r7, #12]
 8008e42:	89bb      	ldrh	r3, [r7, #12]
 8008e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d01b      	beq.n	8008e84 <USB_DeactivateEndpoint+0x6c>
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e62:	817b      	strh	r3, [r7, #10]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	441a      	add	r2, r3
 8008e6e:	897b      	ldrh	r3, [r7, #10]
 8008e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e9a:	813b      	strh	r3, [r7, #8]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	441a      	add	r2, r3
 8008ea6:	893b      	ldrh	r3, [r7, #8]
 8008ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	8013      	strh	r3, [r2, #0]
 8008ebc:	e192      	b.n	80091e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	827b      	strh	r3, [r7, #18]
 8008ecc:	8a7b      	ldrh	r3, [r7, #18]
 8008ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d01b      	beq.n	8008f0e <USB_DeactivateEndpoint+0xf6>
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eec:	823b      	strh	r3, [r7, #16]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	441a      	add	r2, r3
 8008ef8:	8a3b      	ldrh	r3, [r7, #16]
 8008efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f24:	81fb      	strh	r3, [r7, #14]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	441a      	add	r2, r3
 8008f30:	89fb      	ldrh	r3, [r7, #14]
 8008f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	8013      	strh	r3, [r2, #0]
 8008f46:	e14d      	b.n	80091e4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	785b      	ldrb	r3, [r3, #1]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f040 80a5 	bne.w	800909c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	843b      	strh	r3, [r7, #32]
 8008f60:	8c3b      	ldrh	r3, [r7, #32]
 8008f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d01b      	beq.n	8008fa2 <USB_DeactivateEndpoint+0x18a>
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f80:	83fb      	strh	r3, [r7, #30]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	441a      	add	r2, r3
 8008f8c:	8bfb      	ldrh	r3, [r7, #30]
 8008f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	83bb      	strh	r3, [r7, #28]
 8008fb0:	8bbb      	ldrh	r3, [r7, #28]
 8008fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d01b      	beq.n	8008ff2 <USB_DeactivateEndpoint+0x1da>
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd0:	837b      	strh	r3, [r7, #26]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	441a      	add	r2, r3
 8008fdc:	8b7b      	ldrh	r3, [r7, #26]
 8008fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009008:	833b      	strh	r3, [r7, #24]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	441a      	add	r2, r3
 8009014:	8b3b      	ldrh	r3, [r7, #24]
 8009016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800901a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800901e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009022:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009026:	b29b      	uxth	r3, r3
 8009028:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	b29b      	uxth	r3, r3
 8009038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800903c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009040:	82fb      	strh	r3, [r7, #22]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	441a      	add	r2, r3
 800904c:	8afb      	ldrh	r3, [r7, #22]
 800904e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800905a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905e:	b29b      	uxth	r3, r3
 8009060:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009078:	82bb      	strh	r3, [r7, #20]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	441a      	add	r2, r3
 8009084:	8abb      	ldrh	r3, [r7, #20]
 8009086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800908a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800908e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009096:	b29b      	uxth	r3, r3
 8009098:	8013      	strh	r3, [r2, #0]
 800909a:	e0a3      	b.n	80091e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80090aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d01b      	beq.n	80090ec <USB_DeactivateEndpoint+0x2d4>
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	441a      	add	r2, r3
 80090d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80090d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80090fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80090fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01b      	beq.n	800913c <USB_DeactivateEndpoint+0x324>
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	881b      	ldrh	r3, [r3, #0]
 8009110:	b29b      	uxth	r3, r3
 8009112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800911a:	853b      	strh	r3, [r7, #40]	; 0x28
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	441a      	add	r2, r3
 8009126:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800912c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009138:	b29b      	uxth	r3, r3
 800913a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800914e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009152:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	441a      	add	r2, r3
 800915e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800916c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009170:	b29b      	uxth	r3, r3
 8009172:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	b29b      	uxth	r3, r3
 8009182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800918a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	441a      	add	r2, r3
 8009196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800919c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	441a      	add	r2, r3
 80091ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3734      	adds	r7, #52	; 0x34
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bc80      	pop	{r7}
 80091ee:	4770      	bx	lr

080091f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b0cc      	sub	sp, #304	; 0x130
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	1d3b      	adds	r3, r7, #4
 80091f8:	6018      	str	r0, [r3, #0]
 80091fa:	463b      	mov	r3, r7
 80091fc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091fe:	463b      	mov	r3, r7
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	785b      	ldrb	r3, [r3, #1]
 8009204:	2b01      	cmp	r3, #1
 8009206:	f040 872e 	bne.w	800a066 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800920a:	463b      	mov	r3, r7
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	699a      	ldr	r2, [r3, #24]
 8009210:	463b      	mov	r3, r7
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	429a      	cmp	r2, r3
 8009218:	d905      	bls.n	8009226 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800921a:	463b      	mov	r3, r7
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009224:	e004      	b.n	8009230 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009226:	463b      	mov	r3, r7
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009230:	463b      	mov	r3, r7
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	7b1b      	ldrb	r3, [r3, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d134      	bne.n	80092a4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800923a:	463b      	mov	r3, r7
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6959      	ldr	r1, [r3, #20]
 8009240:	463b      	mov	r3, r7
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	88da      	ldrh	r2, [r3, #6]
 8009246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800924a:	b29b      	uxth	r3, r3
 800924c:	1d38      	adds	r0, r7, #4
 800924e:	6800      	ldr	r0, [r0, #0]
 8009250:	f001 fc03 	bl	800aa5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009254:	f107 0310 	add.w	r3, r7, #16
 8009258:	1d3a      	adds	r2, r7, #4
 800925a:	6812      	ldr	r2, [r2, #0]
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	1d3b      	adds	r3, r7, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009266:	b29b      	uxth	r3, r3
 8009268:	4619      	mov	r1, r3
 800926a:	f107 0310 	add.w	r3, r7, #16
 800926e:	f107 0210 	add.w	r2, r7, #16
 8009272:	6812      	ldr	r2, [r2, #0]
 8009274:	440a      	add	r2, r1
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	463b      	mov	r3, r7
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	011a      	lsls	r2, r3, #4
 8009280:	f107 0310 	add.w	r3, r7, #16
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4413      	add	r3, r2
 8009288:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800928c:	f107 030c 	add.w	r3, r7, #12
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009296:	b29a      	uxth	r2, r3
 8009298:	f107 030c 	add.w	r3, r7, #12
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	801a      	strh	r2, [r3, #0]
 80092a0:	f000 beac 	b.w	8009ffc <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80092a4:	463b      	mov	r3, r7
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	78db      	ldrb	r3, [r3, #3]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	f040 838c 	bne.w	80099c8 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80092b0:	463b      	mov	r3, r7
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6a1a      	ldr	r2, [r3, #32]
 80092b6:	463b      	mov	r3, r7
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	429a      	cmp	r2, r3
 80092be:	f240 8330 	bls.w	8009922 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80092c2:	1d3b      	adds	r3, r7, #4
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	463b      	mov	r3, r7
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80092e0:	1d3b      	adds	r3, r7, #4
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	463b      	mov	r3, r7
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	441a      	add	r2, r3
 80092ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80092f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80092fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009302:	b29b      	uxth	r3, r3
 8009304:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009306:	463b      	mov	r3, r7
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6a1a      	ldr	r2, [r3, #32]
 800930c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009310:	1ad2      	subs	r2, r2, r3
 8009312:	463b      	mov	r3, r7
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009318:	1d3b      	adds	r3, r7, #4
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	463b      	mov	r3, r7
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 819e 	beq.w	8009670 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009334:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009338:	1d3a      	adds	r2, r7, #4
 800933a:	6812      	ldr	r2, [r2, #0]
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	463b      	mov	r3, r7
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	785b      	ldrb	r3, [r3, #1]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d17a      	bne.n	800943e <USB_EPStartXfer+0x24e>
 8009348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800934c:	1d3a      	adds	r2, r7, #4
 800934e:	6812      	ldr	r2, [r2, #0]
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	1d3b      	adds	r3, r7, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800935a:	b29b      	uxth	r3, r3
 800935c:	4619      	mov	r1, r3
 800935e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009362:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009366:	6812      	ldr	r2, [r2, #0]
 8009368:	440a      	add	r2, r1
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	463b      	mov	r3, r7
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	011a      	lsls	r2, r3, #4
 8009374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4413      	add	r3, r2
 800937c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d11a      	bne.n	80093c4 <USB_EPStartXfer+0x1d4>
 800938e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	b29b      	uxth	r3, r3
 8009398:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800939c:	b29a      	uxth	r2, r3
 800939e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	801a      	strh	r2, [r3, #0]
 80093a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	801a      	strh	r2, [r3, #0]
 80093c2:	e062      	b.n	800948a <USB_EPStartXfer+0x29a>
 80093c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093c8:	2b3e      	cmp	r3, #62	; 0x3e
 80093ca:	d819      	bhi.n	8009400 <USB_EPStartXfer+0x210>
 80093cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d0:	085b      	lsrs	r3, r3, #1
 80093d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80093d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d004      	beq.n	80093ec <USB_EPStartXfer+0x1fc>
 80093e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093e6:	3301      	adds	r3, #1
 80093e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80093ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	029b      	lsls	r3, r3, #10
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	801a      	strh	r2, [r3, #0]
 80093fe:	e044      	b.n	800948a <USB_EPStartXfer+0x29a>
 8009400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800940a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940e:	f003 031f 	and.w	r3, r3, #31
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <USB_EPStartXfer+0x230>
 8009416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800941a:	3b01      	subs	r3, #1
 800941c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009424:	b29b      	uxth	r3, r3
 8009426:	029b      	lsls	r3, r3, #10
 8009428:	b29b      	uxth	r3, r3
 800942a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800942e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009432:	b29a      	uxth	r2, r3
 8009434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	801a      	strh	r2, [r3, #0]
 800943c:	e025      	b.n	800948a <USB_EPStartXfer+0x29a>
 800943e:	463b      	mov	r3, r7
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d120      	bne.n	800948a <USB_EPStartXfer+0x29a>
 8009448:	1d3b      	adds	r3, r7, #4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009450:	b29b      	uxth	r3, r3
 8009452:	4619      	mov	r1, r3
 8009454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009458:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800945c:	6812      	ldr	r2, [r2, #0]
 800945e:	440a      	add	r2, r1
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	463b      	mov	r3, r7
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	011a      	lsls	r2, r3, #4
 800946a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4413      	add	r3, r2
 8009472:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009480:	b29a      	uxth	r2, r3
 8009482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800948a:	463b      	mov	r3, r7
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	895b      	ldrh	r3, [r3, #10]
 8009490:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009494:	463b      	mov	r3, r7
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6959      	ldr	r1, [r3, #20]
 800949a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800949e:	b29b      	uxth	r3, r3
 80094a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80094a4:	1d38      	adds	r0, r7, #4
 80094a6:	6800      	ldr	r0, [r0, #0]
 80094a8:	f001 fad7 	bl	800aa5a <USB_WritePMA>
            ep->xfer_buff += len;
 80094ac:	463b      	mov	r3, r7
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	695a      	ldr	r2, [r3, #20]
 80094b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b6:	441a      	add	r2, r3
 80094b8:	463b      	mov	r3, r7
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80094be:	463b      	mov	r3, r7
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6a1a      	ldr	r2, [r3, #32]
 80094c4:	463b      	mov	r3, r7
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d909      	bls.n	80094e2 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80094ce:	463b      	mov	r3, r7
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6a1a      	ldr	r2, [r3, #32]
 80094d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d8:	1ad2      	subs	r2, r2, r3
 80094da:	463b      	mov	r3, r7
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	621a      	str	r2, [r3, #32]
 80094e0:	e008      	b.n	80094f4 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80094e2:	463b      	mov	r3, r7
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80094ec:	463b      	mov	r3, r7
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2200      	movs	r2, #0
 80094f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094f4:	463b      	mov	r3, r7
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	785b      	ldrb	r3, [r3, #1]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d17a      	bne.n	80095f4 <USB_EPStartXfer+0x404>
 80094fe:	f107 0318 	add.w	r3, r7, #24
 8009502:	1d3a      	adds	r2, r7, #4
 8009504:	6812      	ldr	r2, [r2, #0]
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	1d3b      	adds	r3, r7, #4
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009510:	b29b      	uxth	r3, r3
 8009512:	4619      	mov	r1, r3
 8009514:	f107 0318 	add.w	r3, r7, #24
 8009518:	f107 0218 	add.w	r2, r7, #24
 800951c:	6812      	ldr	r2, [r2, #0]
 800951e:	440a      	add	r2, r1
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	463b      	mov	r3, r7
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	011a      	lsls	r2, r3, #4
 800952a:	f107 0318 	add.w	r3, r7, #24
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4413      	add	r3, r2
 8009532:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009536:	f107 0314 	add.w	r3, r7, #20
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009540:	2b00      	cmp	r3, #0
 8009542:	d11a      	bne.n	800957a <USB_EPStartXfer+0x38a>
 8009544:	f107 0314 	add.w	r3, r7, #20
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	b29b      	uxth	r3, r3
 800954e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009552:	b29a      	uxth	r2, r3
 8009554:	f107 0314 	add.w	r3, r7, #20
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	f107 0314 	add.w	r3, r7, #20
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	b29b      	uxth	r3, r3
 8009566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800956a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800956e:	b29a      	uxth	r2, r3
 8009570:	f107 0314 	add.w	r3, r7, #20
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	801a      	strh	r2, [r3, #0]
 8009578:	e067      	b.n	800964a <USB_EPStartXfer+0x45a>
 800957a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800957e:	2b3e      	cmp	r3, #62	; 0x3e
 8009580:	d819      	bhi.n	80095b6 <USB_EPStartXfer+0x3c6>
 8009582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009586:	085b      	lsrs	r3, r3, #1
 8009588:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800958c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	2b00      	cmp	r3, #0
 8009596:	d004      	beq.n	80095a2 <USB_EPStartXfer+0x3b2>
 8009598:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800959c:	3301      	adds	r3, #1
 800959e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80095a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	029b      	lsls	r3, r3, #10
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	f107 0314 	add.w	r3, r7, #20
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	e049      	b.n	800964a <USB_EPStartXfer+0x45a>
 80095b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ba:	095b      	lsrs	r3, r3, #5
 80095bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80095c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c4:	f003 031f 	and.w	r3, r3, #31
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d104      	bne.n	80095d6 <USB_EPStartXfer+0x3e6>
 80095cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80095d0:	3b01      	subs	r3, #1
 80095d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80095d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80095da:	b29b      	uxth	r3, r3
 80095dc:	029b      	lsls	r3, r3, #10
 80095de:	b29b      	uxth	r3, r3
 80095e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	f107 0314 	add.w	r3, r7, #20
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	801a      	strh	r2, [r3, #0]
 80095f2:	e02a      	b.n	800964a <USB_EPStartXfer+0x45a>
 80095f4:	463b      	mov	r3, r7
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	785b      	ldrb	r3, [r3, #1]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d125      	bne.n	800964a <USB_EPStartXfer+0x45a>
 80095fe:	f107 0320 	add.w	r3, r7, #32
 8009602:	1d3a      	adds	r2, r7, #4
 8009604:	6812      	ldr	r2, [r2, #0]
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	1d3b      	adds	r3, r7, #4
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009610:	b29b      	uxth	r3, r3
 8009612:	4619      	mov	r1, r3
 8009614:	f107 0320 	add.w	r3, r7, #32
 8009618:	f107 0220 	add.w	r2, r7, #32
 800961c:	6812      	ldr	r2, [r2, #0]
 800961e:	440a      	add	r2, r1
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	463b      	mov	r3, r7
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	011a      	lsls	r2, r3, #4
 800962a:	f107 0320 	add.w	r3, r7, #32
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4413      	add	r3, r2
 8009632:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009636:	f107 031c 	add.w	r3, r7, #28
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009640:	b29a      	uxth	r2, r3
 8009642:	f107 031c 	add.w	r3, r7, #28
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800964a:	463b      	mov	r3, r7
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	891b      	ldrh	r3, [r3, #8]
 8009650:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009654:	463b      	mov	r3, r7
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6959      	ldr	r1, [r3, #20]
 800965a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800965e:	b29b      	uxth	r3, r3
 8009660:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009664:	1d38      	adds	r0, r7, #4
 8009666:	6800      	ldr	r0, [r0, #0]
 8009668:	f001 f9f7 	bl	800aa5a <USB_WritePMA>
 800966c:	f000 bcc6 	b.w	8009ffc <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009670:	463b      	mov	r3, r7
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	785b      	ldrb	r3, [r3, #1]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d164      	bne.n	8009744 <USB_EPStartXfer+0x554>
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009680:	1d3b      	adds	r3, r7, #4
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009688:	b29b      	uxth	r3, r3
 800968a:	461a      	mov	r2, r3
 800968c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800968e:	4413      	add	r3, r2
 8009690:	64bb      	str	r3, [r7, #72]	; 0x48
 8009692:	463b      	mov	r3, r7
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	011a      	lsls	r2, r3, #4
 800969a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800969c:	4413      	add	r3, r2
 800969e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096a2:	647b      	str	r3, [r7, #68]	; 0x44
 80096a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d112      	bne.n	80096d2 <USB_EPStartXfer+0x4e2>
 80096ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ba:	801a      	strh	r2, [r3, #0]
 80096bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ce:	801a      	strh	r2, [r3, #0]
 80096d0:	e057      	b.n	8009782 <USB_EPStartXfer+0x592>
 80096d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d6:	2b3e      	cmp	r3, #62	; 0x3e
 80096d8:	d817      	bhi.n	800970a <USB_EPStartXfer+0x51a>
 80096da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096de:	085b      	lsrs	r3, r3, #1
 80096e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80096e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096e8:	f003 0301 	and.w	r3, r3, #1
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d004      	beq.n	80096fa <USB_EPStartXfer+0x50a>
 80096f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80096f4:	3301      	adds	r3, #1
 80096f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80096fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80096fe:	b29b      	uxth	r3, r3
 8009700:	029b      	lsls	r3, r3, #10
 8009702:	b29a      	uxth	r2, r3
 8009704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009706:	801a      	strh	r2, [r3, #0]
 8009708:	e03b      	b.n	8009782 <USB_EPStartXfer+0x592>
 800970a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800970e:	095b      	lsrs	r3, r3, #5
 8009710:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009718:	f003 031f 	and.w	r3, r3, #31
 800971c:	2b00      	cmp	r3, #0
 800971e:	d104      	bne.n	800972a <USB_EPStartXfer+0x53a>
 8009720:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009724:	3b01      	subs	r3, #1
 8009726:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800972a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800972e:	b29b      	uxth	r3, r3
 8009730:	029b      	lsls	r3, r3, #10
 8009732:	b29b      	uxth	r3, r3
 8009734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973c:	b29a      	uxth	r2, r3
 800973e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009740:	801a      	strh	r2, [r3, #0]
 8009742:	e01e      	b.n	8009782 <USB_EPStartXfer+0x592>
 8009744:	463b      	mov	r3, r7
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	785b      	ldrb	r3, [r3, #1]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d119      	bne.n	8009782 <USB_EPStartXfer+0x592>
 800974e:	1d3b      	adds	r3, r7, #4
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	653b      	str	r3, [r7, #80]	; 0x50
 8009754:	1d3b      	adds	r3, r7, #4
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800975c:	b29b      	uxth	r3, r3
 800975e:	461a      	mov	r2, r3
 8009760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009762:	4413      	add	r3, r2
 8009764:	653b      	str	r3, [r7, #80]	; 0x50
 8009766:	463b      	mov	r3, r7
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	011a      	lsls	r2, r3, #4
 800976e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009770:	4413      	add	r3, r2
 8009772:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800977c:	b29a      	uxth	r2, r3
 800977e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009780:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009782:	463b      	mov	r3, r7
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	891b      	ldrh	r3, [r3, #8]
 8009788:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800978c:	463b      	mov	r3, r7
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6959      	ldr	r1, [r3, #20]
 8009792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009796:	b29b      	uxth	r3, r3
 8009798:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800979c:	1d38      	adds	r0, r7, #4
 800979e:	6800      	ldr	r0, [r0, #0]
 80097a0:	f001 f95b 	bl	800aa5a <USB_WritePMA>
            ep->xfer_buff += len;
 80097a4:	463b      	mov	r3, r7
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	695a      	ldr	r2, [r3, #20]
 80097aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ae:	441a      	add	r2, r3
 80097b0:	463b      	mov	r3, r7
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80097b6:	463b      	mov	r3, r7
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	6a1a      	ldr	r2, [r3, #32]
 80097bc:	463b      	mov	r3, r7
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d909      	bls.n	80097da <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80097c6:	463b      	mov	r3, r7
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6a1a      	ldr	r2, [r3, #32]
 80097cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d0:	1ad2      	subs	r2, r2, r3
 80097d2:	463b      	mov	r3, r7
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	621a      	str	r2, [r3, #32]
 80097d8:	e008      	b.n	80097ec <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80097da:	463b      	mov	r3, r7
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80097e4:	463b      	mov	r3, r7
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2200      	movs	r2, #0
 80097ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80097ec:	1d3b      	adds	r3, r7, #4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	643b      	str	r3, [r7, #64]	; 0x40
 80097f2:	463b      	mov	r3, r7
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	785b      	ldrb	r3, [r3, #1]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d164      	bne.n	80098c6 <USB_EPStartXfer+0x6d6>
 80097fc:	1d3b      	adds	r3, r7, #4
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	63bb      	str	r3, [r7, #56]	; 0x38
 8009802:	1d3b      	adds	r3, r7, #4
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800980a:	b29b      	uxth	r3, r3
 800980c:	461a      	mov	r2, r3
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	4413      	add	r3, r2
 8009812:	63bb      	str	r3, [r7, #56]	; 0x38
 8009814:	463b      	mov	r3, r7
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	011a      	lsls	r2, r3, #4
 800981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981e:	4413      	add	r3, r2
 8009820:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009824:	637b      	str	r3, [r7, #52]	; 0x34
 8009826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d112      	bne.n	8009854 <USB_EPStartXfer+0x664>
 800982e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	b29b      	uxth	r3, r3
 8009834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009838:	b29a      	uxth	r2, r3
 800983a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983c:	801a      	strh	r2, [r3, #0]
 800983e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	b29b      	uxth	r3, r3
 8009844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800984c:	b29a      	uxth	r2, r3
 800984e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009850:	801a      	strh	r2, [r3, #0]
 8009852:	e054      	b.n	80098fe <USB_EPStartXfer+0x70e>
 8009854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009858:	2b3e      	cmp	r3, #62	; 0x3e
 800985a:	d817      	bhi.n	800988c <USB_EPStartXfer+0x69c>
 800985c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009860:	085b      	lsrs	r3, r3, #1
 8009862:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d004      	beq.n	800987c <USB_EPStartXfer+0x68c>
 8009872:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009876:	3301      	adds	r3, #1
 8009878:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800987c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009880:	b29b      	uxth	r3, r3
 8009882:	029b      	lsls	r3, r3, #10
 8009884:	b29a      	uxth	r2, r3
 8009886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009888:	801a      	strh	r2, [r3, #0]
 800988a:	e038      	b.n	80098fe <USB_EPStartXfer+0x70e>
 800988c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009890:	095b      	lsrs	r3, r3, #5
 8009892:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800989a:	f003 031f 	and.w	r3, r3, #31
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d104      	bne.n	80098ac <USB_EPStartXfer+0x6bc>
 80098a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80098a6:	3b01      	subs	r3, #1
 80098a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80098ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	029b      	lsls	r3, r3, #10
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098be:	b29a      	uxth	r2, r3
 80098c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c2:	801a      	strh	r2, [r3, #0]
 80098c4:	e01b      	b.n	80098fe <USB_EPStartXfer+0x70e>
 80098c6:	463b      	mov	r3, r7
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	785b      	ldrb	r3, [r3, #1]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d116      	bne.n	80098fe <USB_EPStartXfer+0x70e>
 80098d0:	1d3b      	adds	r3, r7, #4
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098d8:	b29b      	uxth	r3, r3
 80098da:	461a      	mov	r2, r3
 80098dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098de:	4413      	add	r3, r2
 80098e0:	643b      	str	r3, [r7, #64]	; 0x40
 80098e2:	463b      	mov	r3, r7
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	011a      	lsls	r2, r3, #4
 80098ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ec:	4413      	add	r3, r2
 80098ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80098fe:	463b      	mov	r3, r7
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	895b      	ldrh	r3, [r3, #10]
 8009904:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009908:	463b      	mov	r3, r7
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6959      	ldr	r1, [r3, #20]
 800990e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009912:	b29b      	uxth	r3, r3
 8009914:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009918:	1d38      	adds	r0, r7, #4
 800991a:	6800      	ldr	r0, [r0, #0]
 800991c:	f001 f89d 	bl	800aa5a <USB_WritePMA>
 8009920:	e36c      	b.n	8009ffc <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009922:	463b      	mov	r3, r7
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6a1b      	ldr	r3, [r3, #32]
 8009928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800992c:	1d3b      	adds	r3, r7, #4
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	463b      	mov	r3, r7
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	b29b      	uxth	r3, r3
 800993e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009946:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800994a:	1d3b      	adds	r3, r7, #4
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	463b      	mov	r3, r7
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	441a      	add	r2, r3
 8009958:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800995c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800996c:	b29b      	uxth	r3, r3
 800996e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009970:	1d3b      	adds	r3, r7, #4
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009976:	1d3b      	adds	r3, r7, #4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800997e:	b29b      	uxth	r3, r3
 8009980:	461a      	mov	r2, r3
 8009982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009984:	4413      	add	r3, r2
 8009986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009988:	463b      	mov	r3, r7
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	011a      	lsls	r2, r3, #4
 8009990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009992:	4413      	add	r3, r2
 8009994:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009998:	65bb      	str	r3, [r7, #88]	; 0x58
 800999a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800999e:	b29a      	uxth	r2, r3
 80099a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80099a4:	463b      	mov	r3, r7
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	891b      	ldrh	r3, [r3, #8]
 80099aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099ae:	463b      	mov	r3, r7
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6959      	ldr	r1, [r3, #20]
 80099b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80099be:	1d38      	adds	r0, r7, #4
 80099c0:	6800      	ldr	r0, [r0, #0]
 80099c2:	f001 f84a 	bl	800aa5a <USB_WritePMA>
 80099c6:	e319      	b.n	8009ffc <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80099c8:	1d3b      	adds	r3, r7, #4
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	463b      	mov	r3, r7
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e2:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80099e6:	1d3b      	adds	r3, r7, #4
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	463b      	mov	r3, r7
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	441a      	add	r2, r3
 80099f4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80099f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a00:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009a0c:	463b      	mov	r3, r7
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6a1a      	ldr	r2, [r3, #32]
 8009a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a16:	1ad2      	subs	r2, r2, r3
 8009a18:	463b      	mov	r3, r7
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009a1e:	1d3b      	adds	r3, r7, #4
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	463b      	mov	r3, r7
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 8162 	beq.w	8009cfe <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a3a:	1d3b      	adds	r3, r7, #4
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a42:	463b      	mov	r3, r7
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d164      	bne.n	8009b16 <USB_EPStartXfer+0x926>
 8009a4c:	1d3b      	adds	r3, r7, #4
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a52:	1d3b      	adds	r3, r7, #4
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a60:	4413      	add	r3, r2
 8009a62:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a64:	463b      	mov	r3, r7
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	011a      	lsls	r2, r3, #4
 8009a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a6e:	4413      	add	r3, r2
 8009a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a74:	677b      	str	r3, [r7, #116]	; 0x74
 8009a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d112      	bne.n	8009aa4 <USB_EPStartXfer+0x8b4>
 8009a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009aa0:	801a      	strh	r2, [r3, #0]
 8009aa2:	e057      	b.n	8009b54 <USB_EPStartXfer+0x964>
 8009aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa8:	2b3e      	cmp	r3, #62	; 0x3e
 8009aaa:	d817      	bhi.n	8009adc <USB_EPStartXfer+0x8ec>
 8009aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab0:	085b      	lsrs	r3, r3, #1
 8009ab2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d004      	beq.n	8009acc <USB_EPStartXfer+0x8dc>
 8009ac2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009acc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	029b      	lsls	r3, r3, #10
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ad8:	801a      	strh	r2, [r3, #0]
 8009ada:	e03b      	b.n	8009b54 <USB_EPStartXfer+0x964>
 8009adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ae0:	095b      	lsrs	r3, r3, #5
 8009ae2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aea:	f003 031f 	and.w	r3, r3, #31
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <USB_EPStartXfer+0x90c>
 8009af2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009af6:	3b01      	subs	r3, #1
 8009af8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009afc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	029b      	lsls	r3, r3, #10
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b12:	801a      	strh	r2, [r3, #0]
 8009b14:	e01e      	b.n	8009b54 <USB_EPStartXfer+0x964>
 8009b16:	463b      	mov	r3, r7
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	785b      	ldrb	r3, [r3, #1]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d119      	bne.n	8009b54 <USB_EPStartXfer+0x964>
 8009b20:	1d3b      	adds	r3, r7, #4
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b30:	4413      	add	r3, r2
 8009b32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b36:	463b      	mov	r3, r7
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	011a      	lsls	r2, r3, #4
 8009b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b42:	4413      	add	r3, r2
 8009b44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009b54:	463b      	mov	r3, r7
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	895b      	ldrh	r3, [r3, #10]
 8009b5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b5e:	463b      	mov	r3, r7
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6959      	ldr	r1, [r3, #20]
 8009b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b6e:	1d38      	adds	r0, r7, #4
 8009b70:	6800      	ldr	r0, [r0, #0]
 8009b72:	f000 ff72 	bl	800aa5a <USB_WritePMA>
          ep->xfer_buff += len;
 8009b76:	463b      	mov	r3, r7
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	695a      	ldr	r2, [r3, #20]
 8009b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b80:	441a      	add	r2, r3
 8009b82:	463b      	mov	r3, r7
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009b88:	463b      	mov	r3, r7
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6a1a      	ldr	r2, [r3, #32]
 8009b8e:	463b      	mov	r3, r7
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d909      	bls.n	8009bac <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8009b98:	463b      	mov	r3, r7
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6a1a      	ldr	r2, [r3, #32]
 8009b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba2:	1ad2      	subs	r2, r2, r3
 8009ba4:	463b      	mov	r3, r7
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	621a      	str	r2, [r3, #32]
 8009baa:	e008      	b.n	8009bbe <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8009bac:	463b      	mov	r3, r7
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009bb6:	463b      	mov	r3, r7
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 821a 	beq.w	8009ffc <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009bc8:	463b      	mov	r3, r7
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	785b      	ldrb	r3, [r3, #1]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d164      	bne.n	8009c9c <USB_EPStartXfer+0xaac>
 8009bd2:	1d3b      	adds	r3, r7, #4
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bd8:	1d3b      	adds	r3, r7, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	461a      	mov	r2, r3
 8009be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009be6:	4413      	add	r3, r2
 8009be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bea:	463b      	mov	r3, r7
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	011a      	lsls	r2, r3, #4
 8009bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8009bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d112      	bne.n	8009c2a <USB_EPStartXfer+0xa3a>
 8009c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c12:	801a      	strh	r2, [r3, #0]
 8009c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c26:	801a      	strh	r2, [r3, #0]
 8009c28:	e057      	b.n	8009cda <USB_EPStartXfer+0xaea>
 8009c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8009c30:	d817      	bhi.n	8009c62 <USB_EPStartXfer+0xa72>
 8009c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c36:	085b      	lsrs	r3, r3, #1
 8009c38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <USB_EPStartXfer+0xa62>
 8009c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	029b      	lsls	r3, r3, #10
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	e03b      	b.n	8009cda <USB_EPStartXfer+0xaea>
 8009c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c66:	095b      	lsrs	r3, r3, #5
 8009c68:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c70:	f003 031f 	and.w	r3, r3, #31
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d104      	bne.n	8009c82 <USB_EPStartXfer+0xa92>
 8009c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	029b      	lsls	r3, r3, #10
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c98:	801a      	strh	r2, [r3, #0]
 8009c9a:	e01e      	b.n	8009cda <USB_EPStartXfer+0xaea>
 8009c9c:	463b      	mov	r3, r7
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	785b      	ldrb	r3, [r3, #1]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d119      	bne.n	8009cda <USB_EPStartXfer+0xaea>
 8009ca6:	1d3b      	adds	r3, r7, #4
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	673b      	str	r3, [r7, #112]	; 0x70
 8009cac:	1d3b      	adds	r3, r7, #4
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cba:	4413      	add	r3, r2
 8009cbc:	673b      	str	r3, [r7, #112]	; 0x70
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	011a      	lsls	r2, r3, #4
 8009cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cc8:	4413      	add	r3, r2
 8009cca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009cda:	463b      	mov	r3, r7
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	891b      	ldrh	r3, [r3, #8]
 8009ce0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ce4:	463b      	mov	r3, r7
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6959      	ldr	r1, [r3, #20]
 8009cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009cf4:	1d38      	adds	r0, r7, #4
 8009cf6:	6800      	ldr	r0, [r0, #0]
 8009cf8:	f000 feaf 	bl	800aa5a <USB_WritePMA>
 8009cfc:	e17e      	b.n	8009ffc <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009cfe:	463b      	mov	r3, r7
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	785b      	ldrb	r3, [r3, #1]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d16f      	bne.n	8009de8 <USB_EPStartXfer+0xbf8>
 8009d08:	1d3b      	adds	r3, r7, #4
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d10:	1d3b      	adds	r3, r7, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d20:	4413      	add	r3, r2
 8009d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d26:	463b      	mov	r3, r7
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	011a      	lsls	r2, r3, #4
 8009d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d32:	4413      	add	r3, r2
 8009d34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d116      	bne.n	8009d72 <USB_EPStartXfer+0xb82>
 8009d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d56:	801a      	strh	r2, [r3, #0]
 8009d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d6e:	801a      	strh	r2, [r3, #0]
 8009d70:	e05f      	b.n	8009e32 <USB_EPStartXfer+0xc42>
 8009d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d76:	2b3e      	cmp	r3, #62	; 0x3e
 8009d78:	d818      	bhi.n	8009dac <USB_EPStartXfer+0xbbc>
 8009d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d7e:	085b      	lsrs	r3, r3, #1
 8009d80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d004      	beq.n	8009d9a <USB_EPStartXfer+0xbaa>
 8009d90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d94:	3301      	adds	r3, #1
 8009d96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	029b      	lsls	r3, r3, #10
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009da8:	801a      	strh	r2, [r3, #0]
 8009daa:	e042      	b.n	8009e32 <USB_EPStartXfer+0xc42>
 8009dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009db0:	095b      	lsrs	r3, r3, #5
 8009db2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dba:	f003 031f 	and.w	r3, r3, #31
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d104      	bne.n	8009dcc <USB_EPStartXfer+0xbdc>
 8009dc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009dcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	029b      	lsls	r3, r3, #10
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009de4:	801a      	strh	r2, [r3, #0]
 8009de6:	e024      	b.n	8009e32 <USB_EPStartXfer+0xc42>
 8009de8:	463b      	mov	r3, r7
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d11f      	bne.n	8009e32 <USB_EPStartXfer+0xc42>
 8009df2:	1d3b      	adds	r3, r7, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009dfa:	1d3b      	adds	r3, r7, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	461a      	mov	r2, r3
 8009e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009e10:	463b      	mov	r3, r7
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	011a      	lsls	r2, r3, #4
 8009e18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e32:	463b      	mov	r3, r7
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	891b      	ldrh	r3, [r3, #8]
 8009e38:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e3c:	463b      	mov	r3, r7
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6959      	ldr	r1, [r3, #20]
 8009e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009e4c:	1d38      	adds	r0, r7, #4
 8009e4e:	6800      	ldr	r0, [r0, #0]
 8009e50:	f000 fe03 	bl	800aa5a <USB_WritePMA>
          ep->xfer_buff += len;
 8009e54:	463b      	mov	r3, r7
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	695a      	ldr	r2, [r3, #20]
 8009e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e5e:	441a      	add	r2, r3
 8009e60:	463b      	mov	r3, r7
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009e66:	463b      	mov	r3, r7
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6a1a      	ldr	r2, [r3, #32]
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d909      	bls.n	8009e8a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8009e76:	463b      	mov	r3, r7
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6a1a      	ldr	r2, [r3, #32]
 8009e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e80:	1ad2      	subs	r2, r2, r3
 8009e82:	463b      	mov	r3, r7
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	621a      	str	r2, [r3, #32]
 8009e88:	e008      	b.n	8009e9c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009e94:	463b      	mov	r3, r7
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 80ab 	beq.w	8009ffc <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ea6:	1d3b      	adds	r3, r7, #4
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009eae:	463b      	mov	r3, r7
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	785b      	ldrb	r3, [r3, #1]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d16f      	bne.n	8009f98 <USB_EPStartXfer+0xda8>
 8009eb8:	1d3b      	adds	r3, r7, #4
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ec0:	1d3b      	adds	r3, r7, #4
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ed6:	463b      	mov	r3, r7
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	011a      	lsls	r2, r3, #4
 8009ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d116      	bne.n	8009f22 <USB_EPStartXfer+0xd32>
 8009ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f06:	801a      	strh	r2, [r3, #0]
 8009f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f0c:	881b      	ldrh	r3, [r3, #0]
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f1e:	801a      	strh	r2, [r3, #0]
 8009f20:	e05b      	b.n	8009fda <USB_EPStartXfer+0xdea>
 8009f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f26:	2b3e      	cmp	r3, #62	; 0x3e
 8009f28:	d818      	bhi.n	8009f5c <USB_EPStartXfer+0xd6c>
 8009f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f2e:	085b      	lsrs	r3, r3, #1
 8009f30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d004      	beq.n	8009f4a <USB_EPStartXfer+0xd5a>
 8009f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f44:	3301      	adds	r3, #1
 8009f46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	029b      	lsls	r3, r3, #10
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f58:	801a      	strh	r2, [r3, #0]
 8009f5a:	e03e      	b.n	8009fda <USB_EPStartXfer+0xdea>
 8009f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f60:	095b      	lsrs	r3, r3, #5
 8009f62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f6a:	f003 031f 	and.w	r3, r3, #31
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d104      	bne.n	8009f7c <USB_EPStartXfer+0xd8c>
 8009f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f76:	3b01      	subs	r3, #1
 8009f78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	029b      	lsls	r3, r3, #10
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f94:	801a      	strh	r2, [r3, #0]
 8009f96:	e020      	b.n	8009fda <USB_EPStartXfer+0xdea>
 8009f98:	463b      	mov	r3, r7
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	785b      	ldrb	r3, [r3, #1]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d11b      	bne.n	8009fda <USB_EPStartXfer+0xdea>
 8009fa2:	1d3b      	adds	r3, r7, #4
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	461a      	mov	r2, r3
 8009fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fb8:	463b      	mov	r3, r7
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	011a      	lsls	r2, r3, #4
 8009fc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009fda:	463b      	mov	r3, r7
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	895b      	ldrh	r3, [r3, #10]
 8009fe0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6959      	ldr	r1, [r3, #20]
 8009fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009ff4:	1d38      	adds	r0, r7, #4
 8009ff6:	6800      	ldr	r0, [r0, #0]
 8009ff8:	f000 fd2f 	bl	800aa5a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009ffc:	1d3b      	adds	r3, r7, #4
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	463b      	mov	r3, r7
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	f107 020a 	add.w	r2, r7, #10
 800a012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a01a:	8013      	strh	r3, [r2, #0]
 800a01c:	f107 030a 	add.w	r3, r7, #10
 800a020:	f107 020a 	add.w	r2, r7, #10
 800a024:	8812      	ldrh	r2, [r2, #0]
 800a026:	f082 0210 	eor.w	r2, r2, #16
 800a02a:	801a      	strh	r2, [r3, #0]
 800a02c:	f107 030a 	add.w	r3, r7, #10
 800a030:	f107 020a 	add.w	r2, r7, #10
 800a034:	8812      	ldrh	r2, [r2, #0]
 800a036:	f082 0220 	eor.w	r2, r2, #32
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	1d3b      	adds	r3, r7, #4
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	463b      	mov	r3, r7
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	441a      	add	r2, r3
 800a04a:	f107 030a 	add.w	r3, r7, #10
 800a04e:	881b      	ldrh	r3, [r3, #0]
 800a050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a060:	b29b      	uxth	r3, r3
 800a062:	8013      	strh	r3, [r2, #0]
 800a064:	e3b5      	b.n	800a7d2 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a066:	463b      	mov	r3, r7
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	7b1b      	ldrb	r3, [r3, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f040 8090 	bne.w	800a192 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a072:	463b      	mov	r3, r7
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	699a      	ldr	r2, [r3, #24]
 800a078:	463b      	mov	r3, r7
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d90e      	bls.n	800a0a0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800a082:	463b      	mov	r3, r7
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a08c:	463b      	mov	r3, r7
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699a      	ldr	r2, [r3, #24]
 800a092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a096:	1ad2      	subs	r2, r2, r3
 800a098:	463b      	mov	r3, r7
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	619a      	str	r2, [r3, #24]
 800a09e:	e008      	b.n	800a0b2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a0aa:	463b      	mov	r3, r7
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a0b2:	1d3b      	adds	r3, r7, #4
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0ba:	1d3b      	adds	r3, r7, #4
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0d0:	463b      	mov	r3, r7
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	011a      	lsls	r2, r3, #4
 800a0d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a0dc:	4413      	add	r3, r2
 800a0de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d116      	bne.n	800a11c <USB_EPStartXfer+0xf2c>
 800a0ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a100:	801a      	strh	r2, [r3, #0]
 800a102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a10e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a112:	b29a      	uxth	r2, r3
 800a114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a118:	801a      	strh	r2, [r3, #0]
 800a11a:	e32c      	b.n	800a776 <USB_EPStartXfer+0x1586>
 800a11c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a120:	2b3e      	cmp	r3, #62	; 0x3e
 800a122:	d818      	bhi.n	800a156 <USB_EPStartXfer+0xf66>
 800a124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a128:	085b      	lsrs	r3, r3, #1
 800a12a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a12e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	d004      	beq.n	800a144 <USB_EPStartXfer+0xf54>
 800a13a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a13e:	3301      	adds	r3, #1
 800a140:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a144:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a148:	b29b      	uxth	r3, r3
 800a14a:	029b      	lsls	r3, r3, #10
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a152:	801a      	strh	r2, [r3, #0]
 800a154:	e30f      	b.n	800a776 <USB_EPStartXfer+0x1586>
 800a156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a15a:	095b      	lsrs	r3, r3, #5
 800a15c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a164:	f003 031f 	and.w	r3, r3, #31
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d104      	bne.n	800a176 <USB_EPStartXfer+0xf86>
 800a16c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a170:	3b01      	subs	r3, #1
 800a172:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a176:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	029b      	lsls	r3, r3, #10
 800a17e:	b29b      	uxth	r3, r3
 800a180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a188:	b29a      	uxth	r2, r3
 800a18a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a18e:	801a      	strh	r2, [r3, #0]
 800a190:	e2f1      	b.n	800a776 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a192:	463b      	mov	r3, r7
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	78db      	ldrb	r3, [r3, #3]
 800a198:	2b02      	cmp	r3, #2
 800a19a:	f040 818f 	bne.w	800a4bc <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a19e:	463b      	mov	r3, r7
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	785b      	ldrb	r3, [r3, #1]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d175      	bne.n	800a294 <USB_EPStartXfer+0x10a4>
 800a1a8:	1d3b      	adds	r3, r7, #4
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a1b0:	1d3b      	adds	r3, r7, #4
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a1c6:	463b      	mov	r3, r7
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	011a      	lsls	r2, r3, #4
 800a1ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a1d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1dc:	463b      	mov	r3, r7
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d116      	bne.n	800a214 <USB_EPStartXfer+0x1024>
 800a1e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1f8:	801a      	strh	r2, [r3, #0]
 800a1fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	b29b      	uxth	r3, r3
 800a202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a210:	801a      	strh	r2, [r3, #0]
 800a212:	e065      	b.n	800a2e0 <USB_EPStartXfer+0x10f0>
 800a214:	463b      	mov	r3, r7
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	2b3e      	cmp	r3, #62	; 0x3e
 800a21c:	d81a      	bhi.n	800a254 <USB_EPStartXfer+0x1064>
 800a21e:	463b      	mov	r3, r7
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	085b      	lsrs	r3, r3, #1
 800a226:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a22a:	463b      	mov	r3, r7
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b00      	cmp	r3, #0
 800a236:	d004      	beq.n	800a242 <USB_EPStartXfer+0x1052>
 800a238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a23c:	3301      	adds	r3, #1
 800a23e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a246:	b29b      	uxth	r3, r3
 800a248:	029b      	lsls	r3, r3, #10
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a250:	801a      	strh	r2, [r3, #0]
 800a252:	e045      	b.n	800a2e0 <USB_EPStartXfer+0x10f0>
 800a254:	463b      	mov	r3, r7
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	095b      	lsrs	r3, r3, #5
 800a25c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a260:	463b      	mov	r3, r7
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	f003 031f 	and.w	r3, r3, #31
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d104      	bne.n	800a278 <USB_EPStartXfer+0x1088>
 800a26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a272:	3b01      	subs	r3, #1
 800a274:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	029b      	lsls	r3, r3, #10
 800a280:	b29b      	uxth	r3, r3
 800a282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a290:	801a      	strh	r2, [r3, #0]
 800a292:	e025      	b.n	800a2e0 <USB_EPStartXfer+0x10f0>
 800a294:	463b      	mov	r3, r7
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	785b      	ldrb	r3, [r3, #1]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d120      	bne.n	800a2e0 <USB_EPStartXfer+0x10f0>
 800a29e:	1d3b      	adds	r3, r7, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a2a6:	1d3b      	adds	r3, r7, #4
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a2bc:	463b      	mov	r3, r7
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	011a      	lsls	r2, r3, #4
 800a2c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a2ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2d2:	463b      	mov	r3, r7
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a2de:	801a      	strh	r2, [r3, #0]
 800a2e0:	1d3b      	adds	r3, r7, #4
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2e8:	463b      	mov	r3, r7
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d175      	bne.n	800a3de <USB_EPStartXfer+0x11ee>
 800a2f2:	1d3b      	adds	r3, r7, #4
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a2fa:	1d3b      	adds	r3, r7, #4
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a302:	b29b      	uxth	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a30a:	4413      	add	r3, r2
 800a30c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a310:	463b      	mov	r3, r7
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	011a      	lsls	r2, r3, #4
 800a318:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a31c:	4413      	add	r3, r2
 800a31e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a322:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a326:	463b      	mov	r3, r7
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d116      	bne.n	800a35e <USB_EPStartXfer+0x116e>
 800a330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a334:	881b      	ldrh	r3, [r3, #0]
 800a336:	b29b      	uxth	r3, r3
 800a338:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a342:	801a      	strh	r2, [r3, #0]
 800a344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a354:	b29a      	uxth	r2, r3
 800a356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a35a:	801a      	strh	r2, [r3, #0]
 800a35c:	e061      	b.n	800a422 <USB_EPStartXfer+0x1232>
 800a35e:	463b      	mov	r3, r7
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	2b3e      	cmp	r3, #62	; 0x3e
 800a366:	d81a      	bhi.n	800a39e <USB_EPStartXfer+0x11ae>
 800a368:	463b      	mov	r3, r7
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	085b      	lsrs	r3, r3, #1
 800a370:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a374:	463b      	mov	r3, r7
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d004      	beq.n	800a38c <USB_EPStartXfer+0x119c>
 800a382:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a386:	3301      	adds	r3, #1
 800a388:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a38c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a390:	b29b      	uxth	r3, r3
 800a392:	029b      	lsls	r3, r3, #10
 800a394:	b29a      	uxth	r2, r3
 800a396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a39a:	801a      	strh	r2, [r3, #0]
 800a39c:	e041      	b.n	800a422 <USB_EPStartXfer+0x1232>
 800a39e:	463b      	mov	r3, r7
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	095b      	lsrs	r3, r3, #5
 800a3a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3aa:	463b      	mov	r3, r7
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	f003 031f 	and.w	r3, r3, #31
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d104      	bne.n	800a3c2 <USB_EPStartXfer+0x11d2>
 800a3b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	029b      	lsls	r3, r3, #10
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a3da:	801a      	strh	r2, [r3, #0]
 800a3dc:	e021      	b.n	800a422 <USB_EPStartXfer+0x1232>
 800a3de:	463b      	mov	r3, r7
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	785b      	ldrb	r3, [r3, #1]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d11c      	bne.n	800a422 <USB_EPStartXfer+0x1232>
 800a3e8:	1d3b      	adds	r3, r7, #4
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3fe:	463b      	mov	r3, r7
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	011a      	lsls	r2, r3, #4
 800a406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a40a:	4413      	add	r3, r2
 800a40c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a414:	463b      	mov	r3, r7
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a420:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a422:	463b      	mov	r3, r7
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	69db      	ldr	r3, [r3, #28]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 81a4 	beq.w	800a776 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a42e:	1d3b      	adds	r3, r7, #4
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	463b      	mov	r3, r7
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a442:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d005      	beq.n	800a45a <USB_EPStartXfer+0x126a>
 800a44e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10d      	bne.n	800a476 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a45a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a45e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a462:	2b00      	cmp	r3, #0
 800a464:	f040 8187 	bne.w	800a776 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a468:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a470:	2b00      	cmp	r3, #0
 800a472:	f040 8180 	bne.w	800a776 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a476:	1d3b      	adds	r3, r7, #4
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	463b      	mov	r3, r7
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	b29b      	uxth	r3, r3
 800a488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a48c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a490:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a494:	1d3b      	adds	r3, r7, #4
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	463b      	mov	r3, r7
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	441a      	add	r2, r3
 800a4a2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a4a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	8013      	strh	r3, [r2, #0]
 800a4ba:	e15c      	b.n	800a776 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a4bc:	463b      	mov	r3, r7
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	78db      	ldrb	r3, [r3, #3]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	f040 8155 	bne.w	800a772 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a4c8:	463b      	mov	r3, r7
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	699a      	ldr	r2, [r3, #24]
 800a4ce:	463b      	mov	r3, r7
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d90e      	bls.n	800a4f6 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800a4d8:	463b      	mov	r3, r7
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	699a      	ldr	r2, [r3, #24]
 800a4e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4ec:	1ad2      	subs	r2, r2, r3
 800a4ee:	463b      	mov	r3, r7
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	619a      	str	r2, [r3, #24]
 800a4f4:	e008      	b.n	800a508 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a500:	463b      	mov	r3, r7
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2200      	movs	r2, #0
 800a506:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a508:	463b      	mov	r3, r7
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d16f      	bne.n	800a5f2 <USB_EPStartXfer+0x1402>
 800a512:	1d3b      	adds	r3, r7, #4
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a51a:	1d3b      	adds	r3, r7, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a522:	b29b      	uxth	r3, r3
 800a524:	461a      	mov	r2, r3
 800a526:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a52a:	4413      	add	r3, r2
 800a52c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a530:	463b      	mov	r3, r7
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	011a      	lsls	r2, r3, #4
 800a538:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a53c:	4413      	add	r3, r2
 800a53e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a542:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d116      	bne.n	800a57c <USB_EPStartXfer+0x138c>
 800a54e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	b29b      	uxth	r3, r3
 800a556:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a560:	801a      	strh	r2, [r3, #0]
 800a562:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	b29b      	uxth	r3, r3
 800a56a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a56e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a572:	b29a      	uxth	r2, r3
 800a574:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a578:	801a      	strh	r2, [r3, #0]
 800a57a:	e05f      	b.n	800a63c <USB_EPStartXfer+0x144c>
 800a57c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a580:	2b3e      	cmp	r3, #62	; 0x3e
 800a582:	d818      	bhi.n	800a5b6 <USB_EPStartXfer+0x13c6>
 800a584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a588:	085b      	lsrs	r3, r3, #1
 800a58a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a58e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	d004      	beq.n	800a5a4 <USB_EPStartXfer+0x13b4>
 800a59a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a59e:	3301      	adds	r3, #1
 800a5a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	029b      	lsls	r3, r3, #10
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a5b2:	801a      	strh	r2, [r3, #0]
 800a5b4:	e042      	b.n	800a63c <USB_EPStartXfer+0x144c>
 800a5b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5ba:	095b      	lsrs	r3, r3, #5
 800a5bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5c4:	f003 031f 	and.w	r3, r3, #31
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d104      	bne.n	800a5d6 <USB_EPStartXfer+0x13e6>
 800a5cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	029b      	lsls	r3, r3, #10
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a5ee:	801a      	strh	r2, [r3, #0]
 800a5f0:	e024      	b.n	800a63c <USB_EPStartXfer+0x144c>
 800a5f2:	463b      	mov	r3, r7
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	785b      	ldrb	r3, [r3, #1]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d11f      	bne.n	800a63c <USB_EPStartXfer+0x144c>
 800a5fc:	1d3b      	adds	r3, r7, #4
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a604:	1d3b      	adds	r3, r7, #4
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	461a      	mov	r2, r3
 800a610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a614:	4413      	add	r3, r2
 800a616:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a61a:	463b      	mov	r3, r7
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	011a      	lsls	r2, r3, #4
 800a622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a626:	4413      	add	r3, r2
 800a628:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a62c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a634:	b29a      	uxth	r2, r3
 800a636:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a63a:	801a      	strh	r2, [r3, #0]
 800a63c:	1d3b      	adds	r3, r7, #4
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a644:	463b      	mov	r3, r7
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	785b      	ldrb	r3, [r3, #1]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d16f      	bne.n	800a72e <USB_EPStartXfer+0x153e>
 800a64e:	1d3b      	adds	r3, r7, #4
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a656:	1d3b      	adds	r3, r7, #4
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a65e:	b29b      	uxth	r3, r3
 800a660:	461a      	mov	r2, r3
 800a662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a666:	4413      	add	r3, r2
 800a668:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a66c:	463b      	mov	r3, r7
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	011a      	lsls	r2, r3, #4
 800a674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a678:	4413      	add	r3, r2
 800a67a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a67e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d116      	bne.n	800a6b8 <USB_EPStartXfer+0x14c8>
 800a68a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	b29b      	uxth	r3, r3
 800a692:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a696:	b29a      	uxth	r2, r3
 800a698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a69c:	801a      	strh	r2, [r3, #0]
 800a69e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6b4:	801a      	strh	r2, [r3, #0]
 800a6b6:	e05e      	b.n	800a776 <USB_EPStartXfer+0x1586>
 800a6b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6bc:	2b3e      	cmp	r3, #62	; 0x3e
 800a6be:	d818      	bhi.n	800a6f2 <USB_EPStartXfer+0x1502>
 800a6c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6c4:	085b      	lsrs	r3, r3, #1
 800a6c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d004      	beq.n	800a6e0 <USB_EPStartXfer+0x14f0>
 800a6d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6da:	3301      	adds	r3, #1
 800a6dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	029b      	lsls	r3, r3, #10
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6ee:	801a      	strh	r2, [r3, #0]
 800a6f0:	e041      	b.n	800a776 <USB_EPStartXfer+0x1586>
 800a6f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6f6:	095b      	lsrs	r3, r3, #5
 800a6f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a700:	f003 031f 	and.w	r3, r3, #31
 800a704:	2b00      	cmp	r3, #0
 800a706:	d104      	bne.n	800a712 <USB_EPStartXfer+0x1522>
 800a708:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a70c:	3b01      	subs	r3, #1
 800a70e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a716:	b29b      	uxth	r3, r3
 800a718:	029b      	lsls	r3, r3, #10
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a724:	b29a      	uxth	r2, r3
 800a726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a72a:	801a      	strh	r2, [r3, #0]
 800a72c:	e023      	b.n	800a776 <USB_EPStartXfer+0x1586>
 800a72e:	463b      	mov	r3, r7
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	785b      	ldrb	r3, [r3, #1]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d11e      	bne.n	800a776 <USB_EPStartXfer+0x1586>
 800a738:	1d3b      	adds	r3, r7, #4
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a740:	b29b      	uxth	r3, r3
 800a742:	461a      	mov	r2, r3
 800a744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a748:	4413      	add	r3, r2
 800a74a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a74e:	463b      	mov	r3, r7
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	011a      	lsls	r2, r3, #4
 800a756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a75a:	4413      	add	r3, r2
 800a75c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a768:	b29a      	uxth	r2, r3
 800a76a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a76e:	801a      	strh	r2, [r3, #0]
 800a770:	e001      	b.n	800a776 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e02e      	b.n	800a7d4 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a776:	1d3b      	adds	r3, r7, #4
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	463b      	mov	r3, r7
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	b29b      	uxth	r3, r3
 800a788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a78c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a790:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a794:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a798:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a79c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a7a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a7a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a7a8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a7ac:	1d3b      	adds	r3, r7, #4
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	463b      	mov	r3, r7
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	441a      	add	r2, r3
 800a7ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a7be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b085      	sub	sp, #20
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	785b      	ldrb	r3, [r3, #1]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d020      	beq.n	800a832 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a806:	81bb      	strh	r3, [r7, #12]
 800a808:	89bb      	ldrh	r3, [r7, #12]
 800a80a:	f083 0310 	eor.w	r3, r3, #16
 800a80e:	81bb      	strh	r3, [r7, #12]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	441a      	add	r2, r3
 800a81a:	89bb      	ldrh	r3, [r7, #12]
 800a81c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	8013      	strh	r3, [r2, #0]
 800a830:	e01f      	b.n	800a872 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a848:	81fb      	strh	r3, [r7, #14]
 800a84a:	89fb      	ldrh	r3, [r7, #14]
 800a84c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a850:	81fb      	strh	r3, [r7, #14]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	441a      	add	r2, r3
 800a85c:	89fb      	ldrh	r3, [r7, #14]
 800a85e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a86a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a86e:	b29b      	uxth	r3, r3
 800a870:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	bc80      	pop	{r7}
 800a87c:	4770      	bx	lr

0800a87e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a87e:	b480      	push	{r7}
 800a880:	b087      	sub	sp, #28
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	7b1b      	ldrb	r3, [r3, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f040 809d 	bne.w	800a9cc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	785b      	ldrb	r3, [r3, #1]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d04c      	beq.n	800a934 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	823b      	strh	r3, [r7, #16]
 800a8a8:	8a3b      	ldrh	r3, [r7, #16]
 800a8aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d01b      	beq.n	800a8ea <USB_EPClearStall+0x6c>
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c8:	81fb      	strh	r3, [r7, #14]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	441a      	add	r2, r3
 800a8d4:	89fb      	ldrh	r3, [r7, #14]
 800a8d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	78db      	ldrb	r3, [r3, #3]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d06c      	beq.n	800a9cc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a908:	81bb      	strh	r3, [r7, #12]
 800a90a:	89bb      	ldrh	r3, [r7, #12]
 800a90c:	f083 0320 	eor.w	r3, r3, #32
 800a910:	81bb      	strh	r3, [r7, #12]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	441a      	add	r2, r3
 800a91c:	89bb      	ldrh	r3, [r7, #12]
 800a91e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a92e:	b29b      	uxth	r3, r3
 800a930:	8013      	strh	r3, [r2, #0]
 800a932:	e04b      	b.n	800a9cc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	82fb      	strh	r3, [r7, #22]
 800a942:	8afb      	ldrh	r3, [r7, #22]
 800a944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d01b      	beq.n	800a984 <USB_EPClearStall+0x106>
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a95e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a962:	82bb      	strh	r3, [r7, #20]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	441a      	add	r2, r3
 800a96e:	8abb      	ldrh	r3, [r7, #20]
 800a970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a980:	b29b      	uxth	r3, r3
 800a982:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	b29b      	uxth	r3, r3
 800a992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a99a:	827b      	strh	r3, [r7, #18]
 800a99c:	8a7b      	ldrh	r3, [r7, #18]
 800a99e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9a2:	827b      	strh	r3, [r7, #18]
 800a9a4:	8a7b      	ldrh	r3, [r7, #18]
 800a9a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a9aa:	827b      	strh	r3, [r7, #18]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	441a      	add	r2, r3
 800a9b6:	8a7b      	ldrh	r3, [r7, #18]
 800a9b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	371c      	adds	r7, #28
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bc80      	pop	{r7}
 800a9d6:	4770      	bx	lr

0800a9d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d103      	bne.n	800a9f2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2280      	movs	r2, #128	; 0x80
 800a9ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bc80      	pop	{r7}
 800a9fc:	4770      	bx	lr

0800a9fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bc80      	pop	{r7}
 800aa10:	4770      	bx	lr

0800aa12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b083      	sub	sp, #12
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bc80      	pop	{r7}
 800aa24:	4770      	bx	lr

0800aa26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b085      	sub	sp, #20
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aa38:	68fb      	ldr	r3, [r7, #12]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bc80      	pop	{r7}
 800aa42:	4770      	bx	lr

0800aa44 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bc80      	pop	{r7}
 800aa58:	4770      	bx	lr

0800aa5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b08d      	sub	sp, #52	; 0x34
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	4611      	mov	r1, r2
 800aa66:	461a      	mov	r2, r3
 800aa68:	460b      	mov	r3, r1
 800aa6a:	80fb      	strh	r3, [r7, #6]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aa70:	88bb      	ldrh	r3, [r7, #4]
 800aa72:	3301      	adds	r3, #1
 800aa74:	085b      	lsrs	r3, r3, #1
 800aa76:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa80:	88fb      	ldrh	r3, [r7, #6]
 800aa82:	005a      	lsls	r2, r3, #1
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa8c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800aa8e:	6a3b      	ldr	r3, [r7, #32]
 800aa90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa92:	e01e      	b.n	800aad2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	021b      	lsls	r3, r3, #8
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	461a      	mov	r2, r3
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabc:	3302      	adds	r3, #2
 800aabe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	3302      	adds	r3, #2
 800aac4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	3301      	adds	r3, #1
 800aaca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800aacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aace:	3b01      	subs	r3, #1
 800aad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1dd      	bne.n	800aa94 <USB_WritePMA+0x3a>
  }
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	3734      	adds	r7, #52	; 0x34
 800aade:	46bd      	mov	sp, r7
 800aae0:	bc80      	pop	{r7}
 800aae2:	4770      	bx	lr

0800aae4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b08b      	sub	sp, #44	; 0x2c
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	4611      	mov	r1, r2
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	80fb      	strh	r3, [r7, #6]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aafa:	88bb      	ldrh	r3, [r7, #4]
 800aafc:	085b      	lsrs	r3, r3, #1
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab0a:	88fb      	ldrh	r3, [r7, #6]
 800ab0c:	005a      	lsls	r2, r3, #1
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab16:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab1c:	e01b      	b.n	800ab56 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ab1e:	6a3b      	ldr	r3, [r7, #32]
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	3302      	adds	r3, #2
 800ab2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	3301      	adds	r3, #1
 800ab38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	0a1b      	lsrs	r3, r3, #8
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	3301      	adds	r3, #1
 800ab48:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	3302      	adds	r3, #2
 800ab4e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	3b01      	subs	r3, #1
 800ab54:	627b      	str	r3, [r7, #36]	; 0x24
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1e0      	bne.n	800ab1e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ab5c:	88bb      	ldrh	r3, [r7, #4]
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d007      	beq.n	800ab78 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	701a      	strb	r2, [r3, #0]
  }
}
 800ab78:	bf00      	nop
 800ab7a:	372c      	adds	r7, #44	; 0x2c
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bc80      	pop	{r7}
 800ab80:	4770      	bx	lr

0800ab82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	7c1b      	ldrb	r3, [r3, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d115      	bne.n	800abc6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab9e:	2202      	movs	r2, #2
 800aba0:	2181      	movs	r1, #129	; 0x81
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f001 fe99 	bl	800c8da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800abae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abb2:	2202      	movs	r2, #2
 800abb4:	2101      	movs	r1, #1
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f001 fe8f 	bl	800c8da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800abc4:	e012      	b.n	800abec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800abc6:	2340      	movs	r3, #64	; 0x40
 800abc8:	2202      	movs	r2, #2
 800abca:	2181      	movs	r1, #129	; 0x81
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f001 fe84 	bl	800c8da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2201      	movs	r2, #1
 800abd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	2202      	movs	r2, #2
 800abdc:	2101      	movs	r1, #1
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f001 fe7b 	bl	800c8da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800abec:	2308      	movs	r3, #8
 800abee:	2203      	movs	r2, #3
 800abf0:	2182      	movs	r1, #130	; 0x82
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f001 fe71 	bl	800c8da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abfe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ac02:	f001 ff91 	bl	800cb28 <USBD_static_malloc>
 800ac06:	4602      	mov	r2, r0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d102      	bne.n	800ac1e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]
 800ac1c:	e026      	b.n	800ac6c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac24:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	7c1b      	ldrb	r3, [r3, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d109      	bne.n	800ac5c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac52:	2101      	movs	r1, #1
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f001 ff31 	bl	800cabc <USBD_LL_PrepareReceive>
 800ac5a:	e007      	b.n	800ac6c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac62:	2340      	movs	r3, #64	; 0x40
 800ac64:	2101      	movs	r1, #1
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f001 ff28 	bl	800cabc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b084      	sub	sp, #16
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	460b      	mov	r3, r1
 800ac80:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ac86:	2181      	movs	r1, #129	; 0x81
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f001 fe4c 	bl	800c926 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ac94:	2101      	movs	r1, #1
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f001 fe45 	bl	800c926 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aca4:	2182      	movs	r1, #130	; 0x82
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f001 fe3d 	bl	800c926 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00e      	beq.n	800acda <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800accc:	4618      	mov	r0, r3
 800acce:	f001 ff37 	bl	800cb40 <USBD_static_free>
    pdev->pClassData = NULL;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800acda:	7bfb      	ldrb	r3, [r7, #15]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800acfa:	2300      	movs	r3, #0
 800acfc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d039      	beq.n	800ad82 <USBD_CDC_Setup+0x9e>
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	d17f      	bne.n	800ae12 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	88db      	ldrh	r3, [r3, #6]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d029      	beq.n	800ad6e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	b25b      	sxtb	r3, r3
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	da11      	bge.n	800ad48 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ad30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	88d2      	ldrh	r2, [r2, #6]
 800ad36:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ad38:	6939      	ldr	r1, [r7, #16]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	88db      	ldrh	r3, [r3, #6]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f001 fa0a 	bl	800c15a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ad46:	e06b      	b.n	800ae20 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	785a      	ldrb	r2, [r3, #1]
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	88db      	ldrh	r3, [r3, #6]
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ad5e:	6939      	ldr	r1, [r7, #16]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	88db      	ldrh	r3, [r3, #6]
 800ad64:	461a      	mov	r2, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 fa25 	bl	800c1b6 <USBD_CtlPrepareRx>
      break;
 800ad6c:	e058      	b.n	800ae20 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	7850      	ldrb	r0, [r2, #1]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	4798      	blx	r3
      break;
 800ad80:	e04e      	b.n	800ae20 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	785b      	ldrb	r3, [r3, #1]
 800ad86:	2b0b      	cmp	r3, #11
 800ad88:	d02e      	beq.n	800ade8 <USBD_CDC_Setup+0x104>
 800ad8a:	2b0b      	cmp	r3, #11
 800ad8c:	dc38      	bgt.n	800ae00 <USBD_CDC_Setup+0x11c>
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <USBD_CDC_Setup+0xb4>
 800ad92:	2b0a      	cmp	r3, #10
 800ad94:	d014      	beq.n	800adc0 <USBD_CDC_Setup+0xdc>
 800ad96:	e033      	b.n	800ae00 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d107      	bne.n	800adb2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ada2:	f107 030c 	add.w	r3, r7, #12
 800ada6:	2202      	movs	r2, #2
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f001 f9d5 	bl	800c15a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800adb0:	e02e      	b.n	800ae10 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 f966 	bl	800c086 <USBD_CtlError>
            ret = USBD_FAIL;
 800adba:	2302      	movs	r3, #2
 800adbc:	75fb      	strb	r3, [r7, #23]
          break;
 800adbe:	e027      	b.n	800ae10 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d107      	bne.n	800adda <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800adca:	f107 030f 	add.w	r3, r7, #15
 800adce:	2201      	movs	r2, #1
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f001 f9c1 	bl	800c15a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800add8:	e01a      	b.n	800ae10 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f001 f952 	bl	800c086 <USBD_CtlError>
            ret = USBD_FAIL;
 800ade2:	2302      	movs	r3, #2
 800ade4:	75fb      	strb	r3, [r7, #23]
          break;
 800ade6:	e013      	b.n	800ae10 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d00d      	beq.n	800ae0e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f001 f946 	bl	800c086 <USBD_CtlError>
            ret = USBD_FAIL;
 800adfa:	2302      	movs	r3, #2
 800adfc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800adfe:	e006      	b.n	800ae0e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f001 f93f 	bl	800c086 <USBD_CtlError>
          ret = USBD_FAIL;
 800ae08:	2302      	movs	r3, #2
 800ae0a:	75fb      	strb	r3, [r7, #23]
          break;
 800ae0c:	e000      	b.n	800ae10 <USBD_CDC_Setup+0x12c>
          break;
 800ae0e:	bf00      	nop
      }
      break;
 800ae10:	e006      	b.n	800ae20 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f001 f936 	bl	800c086 <USBD_CtlError>
      ret = USBD_FAIL;
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae1e:	bf00      	nop
  }

  return ret;
 800ae20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	460b      	mov	r3, r1
 800ae34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae3c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae44:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d03a      	beq.n	800aec6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ae50:	78fa      	ldrb	r2, [r7, #3]
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	4613      	mov	r3, r2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	440b      	add	r3, r1
 800ae5e:	331c      	adds	r3, #28
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d029      	beq.n	800aeba <USBD_CDC_DataIn+0x90>
 800ae66:	78fa      	ldrb	r2, [r7, #3]
 800ae68:	6879      	ldr	r1, [r7, #4]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	440b      	add	r3, r1
 800ae74:	331c      	adds	r3, #28
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	78f9      	ldrb	r1, [r7, #3]
 800ae7a:	68b8      	ldr	r0, [r7, #8]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	440b      	add	r3, r1
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	4403      	add	r3, r0
 800ae86:	3338      	adds	r3, #56	; 0x38
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae8e:	fb03 f301 	mul.w	r3, r3, r1
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d110      	bne.n	800aeba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ae98:	78fa      	ldrb	r2, [r7, #3]
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	440b      	add	r3, r1
 800aea6:	331c      	adds	r3, #28
 800aea8:	2200      	movs	r2, #0
 800aeaa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aeac:	78f9      	ldrb	r1, [r7, #3]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 fddf 	bl	800ca76 <USBD_LL_Transmit>
 800aeb8:	e003      	b.n	800aec2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	e000      	b.n	800aec8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800aec6:	2302      	movs	r3, #2
  }
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	4619      	mov	r1, r3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f001 fe0a 	bl	800cb02 <USBD_LL_GetRxDataSize>
 800aeee:	4602      	mov	r2, r0
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00d      	beq.n	800af1c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800af14:	4611      	mov	r1, r2
 800af16:	4798      	blx	r3

    return USBD_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	e000      	b.n	800af1e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800af1c:	2302      	movs	r3, #2
  }
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b084      	sub	sp, #16
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af34:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d015      	beq.n	800af6c <USBD_CDC_EP0_RxReady+0x46>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800af46:	2bff      	cmp	r3, #255	; 0xff
 800af48:	d010      	beq.n	800af6c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800af58:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800af60:	b292      	uxth	r2, r2
 800af62:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	22ff      	movs	r2, #255	; 0xff
 800af68:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2243      	movs	r2, #67	; 0x43
 800af84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800af86:	4b03      	ldr	r3, [pc, #12]	; (800af94 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bc80      	pop	{r7}
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	200000a4 	.word	0x200000a4

0800af98 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2243      	movs	r2, #67	; 0x43
 800afa4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800afa6:	4b03      	ldr	r3, [pc, #12]	; (800afb4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	bc80      	pop	{r7}
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	20000060 	.word	0x20000060

0800afb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2243      	movs	r2, #67	; 0x43
 800afc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800afc6:	4b03      	ldr	r3, [pc, #12]	; (800afd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800afc8:	4618      	mov	r0, r3
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	bc80      	pop	{r7}
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	200000e8 	.word	0x200000e8

0800afd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	220a      	movs	r2, #10
 800afe4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800afe6:	4b03      	ldr	r3, [pc, #12]	; (800aff4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	bc80      	pop	{r7}
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	2000001c 	.word	0x2000001c

0800aff8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b002:	2302      	movs	r3, #2
 800b004:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d005      	beq.n	800b018 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b018:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	bc80      	pop	{r7}
 800b022:	4770      	bx	lr

0800b024 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b024:	b480      	push	{r7}
 800b026:	b087      	sub	sp, #28
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b038:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b042:	88fa      	ldrh	r2, [r7, #6]
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	371c      	adds	r7, #28
 800b050:	46bd      	mov	sp, r7
 800b052:	bc80      	pop	{r7}
 800b054:	4770      	bx	lr

0800b056 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b056:	b480      	push	{r7}
 800b058:	b085      	sub	sp, #20
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b066:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	bc80      	pop	{r7}
 800b07a:	4770      	bx	lr

0800b07c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b08a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b092:	2b00      	cmp	r3, #0
 800b094:	d01c      	beq.n	800b0d0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d115      	bne.n	800b0cc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	2181      	movs	r1, #129	; 0x81
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f001 fcd7 	bl	800ca76 <USBD_LL_Transmit>

      return USBD_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	e002      	b.n	800b0d2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e000      	b.n	800b0d2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b0d0:	2302      	movs	r3, #2
  }
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0e8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d017      	beq.n	800b124 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	7c1b      	ldrb	r3, [r3, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d109      	bne.n	800b110 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b102:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b106:	2101      	movs	r1, #1
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f001 fcd7 	bl	800cabc <USBD_LL_PrepareReceive>
 800b10e:	e007      	b.n	800b120 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b116:	2340      	movs	r3, #64	; 0x40
 800b118:	2101      	movs	r1, #1
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f001 fcce 	bl	800cabc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	e000      	b.n	800b126 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b124:	2302      	movs	r3, #2
  }
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	4613      	mov	r3, r2
 800b13a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b142:	2302      	movs	r3, #2
 800b144:	e01a      	b.n	800b17c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2201      	movs	r2, #1
 800b16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	79fa      	ldrb	r2, [r7, #7]
 800b172:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f001 fb3b 	bl	800c7f0 <USBD_LL_Init>

  return USBD_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d006      	beq.n	800b1a6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	73fb      	strb	r3, [r7, #15]
 800b1a4:	e001      	b.n	800b1aa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3714      	adds	r7, #20
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bc80      	pop	{r7}
 800b1b4:	4770      	bx	lr

0800b1b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b082      	sub	sp, #8
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f001 fb70 	bl	800c8a4 <USBD_LL_Start>

  return USBD_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b083      	sub	sp, #12
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bc80      	pop	{r7}
 800b1e0:	4770      	bx	lr

0800b1e2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00c      	beq.n	800b216 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	78fa      	ldrb	r2, [r7, #3]
 800b206:	4611      	mov	r1, r2
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	4798      	blx	r3
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b216:	7bfb      	ldrb	r3, [r7, #15]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	460b      	mov	r3, r1
 800b22a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	78fa      	ldrb	r2, [r7, #3]
 800b236:	4611      	mov	r1, r2
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	4798      	blx	r3

  return USBD_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b082      	sub	sp, #8
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 fed8 	bl	800c00e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b26c:	461a      	mov	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b27a:	f003 031f 	and.w	r3, r3, #31
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d016      	beq.n	800b2b0 <USBD_LL_SetupStage+0x6a>
 800b282:	2b02      	cmp	r3, #2
 800b284:	d81c      	bhi.n	800b2c0 <USBD_LL_SetupStage+0x7a>
 800b286:	2b00      	cmp	r3, #0
 800b288:	d002      	beq.n	800b290 <USBD_LL_SetupStage+0x4a>
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d008      	beq.n	800b2a0 <USBD_LL_SetupStage+0x5a>
 800b28e:	e017      	b.n	800b2c0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f9cb 	bl	800b634 <USBD_StdDevReq>
      break;
 800b29e:	e01a      	b.n	800b2d6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fa2d 	bl	800b708 <USBD_StdItfReq>
      break;
 800b2ae:	e012      	b.n	800b2d6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fa6d 	bl	800b798 <USBD_StdEPReq>
      break;
 800b2be:	e00a      	b.n	800b2d6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b2c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f001 fb48 	bl	800c964 <USBD_LL_StallEP>
      break;
 800b2d4:	bf00      	nop
  }

  return USBD_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b2ee:	7afb      	ldrb	r3, [r7, #11]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d14b      	bne.n	800b38c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b2fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b302:	2b03      	cmp	r3, #3
 800b304:	d134      	bne.n	800b370 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	68da      	ldr	r2, [r3, #12]
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d919      	bls.n	800b346 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	68da      	ldr	r2, [r3, #12]
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	1ad2      	subs	r2, r2, r3
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	68da      	ldr	r2, [r3, #12]
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b328:	429a      	cmp	r2, r3
 800b32a:	d203      	bcs.n	800b334 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b330:	b29b      	uxth	r3, r3
 800b332:	e002      	b.n	800b33a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b338:	b29b      	uxth	r3, r3
 800b33a:	461a      	mov	r2, r3
 800b33c:	6879      	ldr	r1, [r7, #4]
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 ff57 	bl	800c1f2 <USBD_CtlContinueRx>
 800b344:	e038      	b.n	800b3b8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b358:	2b03      	cmp	r3, #3
 800b35a:	d105      	bne.n	800b368 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f000 ff54 	bl	800c216 <USBD_CtlSendStatus>
 800b36e:	e023      	b.n	800b3b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b376:	2b05      	cmp	r3, #5
 800b378:	d11e      	bne.n	800b3b8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b382:	2100      	movs	r1, #0
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f001 faed 	bl	800c964 <USBD_LL_StallEP>
 800b38a:	e015      	b.n	800b3b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00d      	beq.n	800b3b4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d108      	bne.n	800b3b4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a8:	699b      	ldr	r3, [r3, #24]
 800b3aa:	7afa      	ldrb	r2, [r7, #11]
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	4798      	blx	r3
 800b3b2:	e001      	b.n	800b3b8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b3b4:	2302      	movs	r3, #2
 800b3b6:	e000      	b.n	800b3ba <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b086      	sub	sp, #24
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	607a      	str	r2, [r7, #4]
 800b3ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b3d0:	7afb      	ldrb	r3, [r7, #11]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d17f      	bne.n	800b4d6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3314      	adds	r3, #20
 800b3da:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d15c      	bne.n	800b4a0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	68da      	ldr	r2, [r3, #12]
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d915      	bls.n	800b41e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	68da      	ldr	r2, [r3, #12]
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	1ad2      	subs	r2, r2, r3
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	b29b      	uxth	r3, r3
 800b406:	461a      	mov	r2, r3
 800b408:	6879      	ldr	r1, [r7, #4]
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f000 fec1 	bl	800c192 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b410:	2300      	movs	r3, #0
 800b412:	2200      	movs	r2, #0
 800b414:	2100      	movs	r1, #0
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f001 fb50 	bl	800cabc <USBD_LL_PrepareReceive>
 800b41c:	e04e      	b.n	800b4bc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	6912      	ldr	r2, [r2, #16]
 800b426:	fbb3 f1f2 	udiv	r1, r3, r2
 800b42a:	fb02 f201 	mul.w	r2, r2, r1
 800b42e:	1a9b      	subs	r3, r3, r2
 800b430:	2b00      	cmp	r3, #0
 800b432:	d11c      	bne.n	800b46e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	689a      	ldr	r2, [r3, #8]
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d316      	bcc.n	800b46e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	689a      	ldr	r2, [r3, #8]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d20f      	bcs.n	800b46e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b44e:	2200      	movs	r2, #0
 800b450:	2100      	movs	r1, #0
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f000 fe9d 	bl	800c192 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b460:	2300      	movs	r3, #0
 800b462:	2200      	movs	r2, #0
 800b464:	2100      	movs	r1, #0
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f001 fb28 	bl	800cabc <USBD_LL_PrepareReceive>
 800b46c:	e026      	b.n	800b4bc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b480:	2b03      	cmp	r3, #3
 800b482:	d105      	bne.n	800b490 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b490:	2180      	movs	r1, #128	; 0x80
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f001 fa66 	bl	800c964 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f000 fecf 	bl	800c23c <USBD_CtlReceiveStatus>
 800b49e:	e00d      	b.n	800b4bc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	d004      	beq.n	800b4b4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d103      	bne.n	800b4bc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b4b4:	2180      	movs	r1, #128	; 0x80
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f001 fa54 	bl	800c964 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d11d      	bne.n	800b502 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f7ff fe81 	bl	800b1ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b4d4:	e015      	b.n	800b502 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00d      	beq.n	800b4fe <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4e8:	2b03      	cmp	r3, #3
 800b4ea:	d108      	bne.n	800b4fe <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	7afa      	ldrb	r2, [r7, #11]
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	4798      	blx	r3
 800b4fc:	e001      	b.n	800b502 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4fe:	2302      	movs	r3, #2
 800b500:	e000      	b.n	800b504 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b514:	2340      	movs	r3, #64	; 0x40
 800b516:	2200      	movs	r2, #0
 800b518:	2100      	movs	r1, #0
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f001 f9dd 	bl	800c8da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2240      	movs	r2, #64	; 0x40
 800b52c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b530:	2340      	movs	r3, #64	; 0x40
 800b532:	2200      	movs	r2, #0
 800b534:	2180      	movs	r1, #128	; 0x80
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f001 f9cf 	bl	800c8da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2240      	movs	r2, #64	; 0x40
 800b546:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d009      	beq.n	800b584 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	6852      	ldr	r2, [r2, #4]
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	4611      	mov	r1, r2
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	4798      	blx	r3
  }

  return USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	460b      	mov	r3, r1
 800b598:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	78fa      	ldrb	r2, [r7, #3]
 800b59e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bc80      	pop	{r7}
 800b5aa:	4770      	bx	lr

0800b5ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2204      	movs	r2, #4
 800b5c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bc80      	pop	{r7}
 800b5d2:	4770      	bx	lr

0800b5d4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e2:	2b04      	cmp	r3, #4
 800b5e4:	d105      	bne.n	800b5f2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bc80      	pop	{r7}
 800b5fc:	4770      	bx	lr

0800b5fe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d10b      	bne.n	800b628 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b616:	69db      	ldr	r3, [r3, #28]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d005      	beq.n	800b628 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b622:	69db      	ldr	r3, [r3, #28]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
	...

0800b634 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b64a:	2b40      	cmp	r3, #64	; 0x40
 800b64c:	d005      	beq.n	800b65a <USBD_StdDevReq+0x26>
 800b64e:	2b40      	cmp	r3, #64	; 0x40
 800b650:	d84f      	bhi.n	800b6f2 <USBD_StdDevReq+0xbe>
 800b652:	2b00      	cmp	r3, #0
 800b654:	d009      	beq.n	800b66a <USBD_StdDevReq+0x36>
 800b656:	2b20      	cmp	r3, #32
 800b658:	d14b      	bne.n	800b6f2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	4798      	blx	r3
      break;
 800b668:	e048      	b.n	800b6fc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	785b      	ldrb	r3, [r3, #1]
 800b66e:	2b09      	cmp	r3, #9
 800b670:	d839      	bhi.n	800b6e6 <USBD_StdDevReq+0xb2>
 800b672:	a201      	add	r2, pc, #4	; (adr r2, 800b678 <USBD_StdDevReq+0x44>)
 800b674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b678:	0800b6c9 	.word	0x0800b6c9
 800b67c:	0800b6dd 	.word	0x0800b6dd
 800b680:	0800b6e7 	.word	0x0800b6e7
 800b684:	0800b6d3 	.word	0x0800b6d3
 800b688:	0800b6e7 	.word	0x0800b6e7
 800b68c:	0800b6ab 	.word	0x0800b6ab
 800b690:	0800b6a1 	.word	0x0800b6a1
 800b694:	0800b6e7 	.word	0x0800b6e7
 800b698:	0800b6bf 	.word	0x0800b6bf
 800b69c:	0800b6b5 	.word	0x0800b6b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f9dc 	bl	800ba60 <USBD_GetDescriptor>
          break;
 800b6a8:	e022      	b.n	800b6f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fb3f 	bl	800bd30 <USBD_SetAddress>
          break;
 800b6b2:	e01d      	b.n	800b6f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fb7e 	bl	800bdb8 <USBD_SetConfig>
          break;
 800b6bc:	e018      	b.n	800b6f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 fc07 	bl	800bed4 <USBD_GetConfig>
          break;
 800b6c6:	e013      	b.n	800b6f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fc37 	bl	800bf3e <USBD_GetStatus>
          break;
 800b6d0:	e00e      	b.n	800b6f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fc65 	bl	800bfa4 <USBD_SetFeature>
          break;
 800b6da:	e009      	b.n	800b6f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fc74 	bl	800bfcc <USBD_ClrFeature>
          break;
 800b6e4:	e004      	b.n	800b6f0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b6e6:	6839      	ldr	r1, [r7, #0]
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fccc 	bl	800c086 <USBD_CtlError>
          break;
 800b6ee:	bf00      	nop
      }
      break;
 800b6f0:	e004      	b.n	800b6fc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fcc6 	bl	800c086 <USBD_CtlError>
      break;
 800b6fa:	bf00      	nop
  }

  return ret;
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop

0800b708 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b712:	2300      	movs	r3, #0
 800b714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b71e:	2b40      	cmp	r3, #64	; 0x40
 800b720:	d005      	beq.n	800b72e <USBD_StdItfReq+0x26>
 800b722:	2b40      	cmp	r3, #64	; 0x40
 800b724:	d82e      	bhi.n	800b784 <USBD_StdItfReq+0x7c>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <USBD_StdItfReq+0x26>
 800b72a:	2b20      	cmp	r3, #32
 800b72c:	d12a      	bne.n	800b784 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b734:	3b01      	subs	r3, #1
 800b736:	2b02      	cmp	r3, #2
 800b738:	d81d      	bhi.n	800b776 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	889b      	ldrh	r3, [r3, #4]
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b01      	cmp	r3, #1
 800b742:	d813      	bhi.n	800b76c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	4798      	blx	r3
 800b752:	4603      	mov	r3, r0
 800b754:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	88db      	ldrh	r3, [r3, #6]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d110      	bne.n	800b780 <USBD_StdItfReq+0x78>
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10d      	bne.n	800b780 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fd56 	bl	800c216 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b76a:	e009      	b.n	800b780 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fc89 	bl	800c086 <USBD_CtlError>
          break;
 800b774:	e004      	b.n	800b780 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fc84 	bl	800c086 <USBD_CtlError>
          break;
 800b77e:	e000      	b.n	800b782 <USBD_StdItfReq+0x7a>
          break;
 800b780:	bf00      	nop
      }
      break;
 800b782:	e004      	b.n	800b78e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b784:	6839      	ldr	r1, [r7, #0]
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fc7d 	bl	800c086 <USBD_CtlError>
      break;
 800b78c:	bf00      	nop
  }

  return USBD_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	889b      	ldrh	r3, [r3, #4]
 800b7aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7b4:	2b40      	cmp	r3, #64	; 0x40
 800b7b6:	d007      	beq.n	800b7c8 <USBD_StdEPReq+0x30>
 800b7b8:	2b40      	cmp	r3, #64	; 0x40
 800b7ba:	f200 8146 	bhi.w	800ba4a <USBD_StdEPReq+0x2b2>
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00a      	beq.n	800b7d8 <USBD_StdEPReq+0x40>
 800b7c2:	2b20      	cmp	r3, #32
 800b7c4:	f040 8141 	bne.w	800ba4a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	4798      	blx	r3
      break;
 800b7d6:	e13d      	b.n	800ba54 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7e0:	2b20      	cmp	r3, #32
 800b7e2:	d10a      	bne.n	800b7fa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	6839      	ldr	r1, [r7, #0]
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	4798      	blx	r3
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
 800b7f8:	e12d      	b.n	800ba56 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	785b      	ldrb	r3, [r3, #1]
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d007      	beq.n	800b812 <USBD_StdEPReq+0x7a>
 800b802:	2b03      	cmp	r3, #3
 800b804:	f300 811b 	bgt.w	800ba3e <USBD_StdEPReq+0x2a6>
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d072      	beq.n	800b8f2 <USBD_StdEPReq+0x15a>
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d03a      	beq.n	800b886 <USBD_StdEPReq+0xee>
 800b810:	e115      	b.n	800ba3e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d002      	beq.n	800b822 <USBD_StdEPReq+0x8a>
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	d015      	beq.n	800b84c <USBD_StdEPReq+0xb4>
 800b820:	e02b      	b.n	800b87a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b822:	7bbb      	ldrb	r3, [r7, #14]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00c      	beq.n	800b842 <USBD_StdEPReq+0xaa>
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	2b80      	cmp	r3, #128	; 0x80
 800b82c:	d009      	beq.n	800b842 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b82e:	7bbb      	ldrb	r3, [r7, #14]
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f001 f896 	bl	800c964 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b838:	2180      	movs	r1, #128	; 0x80
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f001 f892 	bl	800c964 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b840:	e020      	b.n	800b884 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fc1e 	bl	800c086 <USBD_CtlError>
              break;
 800b84a:	e01b      	b.n	800b884 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	885b      	ldrh	r3, [r3, #2]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10e      	bne.n	800b872 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b854:	7bbb      	ldrb	r3, [r7, #14]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00b      	beq.n	800b872 <USBD_StdEPReq+0xda>
 800b85a:	7bbb      	ldrb	r3, [r7, #14]
 800b85c:	2b80      	cmp	r3, #128	; 0x80
 800b85e:	d008      	beq.n	800b872 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	88db      	ldrh	r3, [r3, #6]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d104      	bne.n	800b872 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b868:	7bbb      	ldrb	r3, [r7, #14]
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f001 f879 	bl	800c964 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fccf 	bl	800c216 <USBD_CtlSendStatus>

              break;
 800b878:	e004      	b.n	800b884 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b87a:	6839      	ldr	r1, [r7, #0]
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 fc02 	bl	800c086 <USBD_CtlError>
              break;
 800b882:	bf00      	nop
          }
          break;
 800b884:	e0e0      	b.n	800ba48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d002      	beq.n	800b896 <USBD_StdEPReq+0xfe>
 800b890:	2b03      	cmp	r3, #3
 800b892:	d015      	beq.n	800b8c0 <USBD_StdEPReq+0x128>
 800b894:	e026      	b.n	800b8e4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b896:	7bbb      	ldrb	r3, [r7, #14]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00c      	beq.n	800b8b6 <USBD_StdEPReq+0x11e>
 800b89c:	7bbb      	ldrb	r3, [r7, #14]
 800b89e:	2b80      	cmp	r3, #128	; 0x80
 800b8a0:	d009      	beq.n	800b8b6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f001 f85c 	bl	800c964 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b8ac:	2180      	movs	r1, #128	; 0x80
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f001 f858 	bl	800c964 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8b4:	e01c      	b.n	800b8f0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fbe4 	bl	800c086 <USBD_CtlError>
              break;
 800b8be:	e017      	b.n	800b8f0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	885b      	ldrh	r3, [r3, #2]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d112      	bne.n	800b8ee <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b8c8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d004      	beq.n	800b8dc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f001 f863 	bl	800c9a2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fc9a 	bl	800c216 <USBD_CtlSendStatus>
              }
              break;
 800b8e2:	e004      	b.n	800b8ee <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fbcd 	bl	800c086 <USBD_CtlError>
              break;
 800b8ec:	e000      	b.n	800b8f0 <USBD_StdEPReq+0x158>
              break;
 800b8ee:	bf00      	nop
          }
          break;
 800b8f0:	e0aa      	b.n	800ba48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d002      	beq.n	800b902 <USBD_StdEPReq+0x16a>
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d032      	beq.n	800b966 <USBD_StdEPReq+0x1ce>
 800b900:	e097      	b.n	800ba32 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b902:	7bbb      	ldrb	r3, [r7, #14]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d007      	beq.n	800b918 <USBD_StdEPReq+0x180>
 800b908:	7bbb      	ldrb	r3, [r7, #14]
 800b90a:	2b80      	cmp	r3, #128	; 0x80
 800b90c:	d004      	beq.n	800b918 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fbb8 	bl	800c086 <USBD_CtlError>
                break;
 800b916:	e091      	b.n	800ba3c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	da0b      	bge.n	800b938 <USBD_StdEPReq+0x1a0>
 800b920:	7bbb      	ldrb	r3, [r7, #14]
 800b922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b926:	4613      	mov	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4413      	add	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	3310      	adds	r3, #16
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	4413      	add	r3, r2
 800b934:	3304      	adds	r3, #4
 800b936:	e00b      	b.n	800b950 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b938:	7bbb      	ldrb	r3, [r7, #14]
 800b93a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b93e:	4613      	mov	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	4413      	add	r3, r2
 800b94e:	3304      	adds	r3, #4
 800b950:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	2200      	movs	r2, #0
 800b956:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2202      	movs	r2, #2
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fbfb 	bl	800c15a <USBD_CtlSendData>
              break;
 800b964:	e06a      	b.n	800ba3c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	da11      	bge.n	800b992 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	f003 020f 	and.w	r2, r3, #15
 800b974:	6879      	ldr	r1, [r7, #4]
 800b976:	4613      	mov	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4413      	add	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	440b      	add	r3, r1
 800b980:	3318      	adds	r3, #24
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d117      	bne.n	800b9b8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fb7b 	bl	800c086 <USBD_CtlError>
                  break;
 800b990:	e054      	b.n	800ba3c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	f003 020f 	and.w	r2, r3, #15
 800b998:	6879      	ldr	r1, [r7, #4]
 800b99a:	4613      	mov	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	440b      	add	r3, r1
 800b9a4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d104      	bne.n	800b9b8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fb68 	bl	800c086 <USBD_CtlError>
                  break;
 800b9b6:	e041      	b.n	800ba3c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	da0b      	bge.n	800b9d8 <USBD_StdEPReq+0x240>
 800b9c0:	7bbb      	ldrb	r3, [r7, #14]
 800b9c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	3310      	adds	r3, #16
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	e00b      	b.n	800b9f0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9de:	4613      	mov	r3, r2
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	4413      	add	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <USBD_StdEPReq+0x266>
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	2b80      	cmp	r3, #128	; 0x80
 800b9fc:	d103      	bne.n	800ba06 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2200      	movs	r2, #0
 800ba02:	601a      	str	r2, [r3, #0]
 800ba04:	e00e      	b.n	800ba24 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ba06:	7bbb      	ldrb	r3, [r7, #14]
 800ba08:	4619      	mov	r1, r3
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 ffe8 	bl	800c9e0 <USBD_LL_IsStallEP>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	e002      	b.n	800ba24 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	2200      	movs	r2, #0
 800ba22:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2202      	movs	r2, #2
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fb95 	bl	800c15a <USBD_CtlSendData>
              break;
 800ba30:	e004      	b.n	800ba3c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 fb26 	bl	800c086 <USBD_CtlError>
              break;
 800ba3a:	bf00      	nop
          }
          break;
 800ba3c:	e004      	b.n	800ba48 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fb20 	bl	800c086 <USBD_CtlError>
          break;
 800ba46:	bf00      	nop
      }
      break;
 800ba48:	e004      	b.n	800ba54 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fb1a 	bl	800c086 <USBD_CtlError>
      break;
 800ba52:	bf00      	nop
  }

  return ret;
 800ba54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
	...

0800ba60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba72:	2300      	movs	r3, #0
 800ba74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	885b      	ldrh	r3, [r3, #2]
 800ba7a:	0a1b      	lsrs	r3, r3, #8
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	2b06      	cmp	r3, #6
 800ba82:	f200 8128 	bhi.w	800bcd6 <USBD_GetDescriptor+0x276>
 800ba86:	a201      	add	r2, pc, #4	; (adr r2, 800ba8c <USBD_GetDescriptor+0x2c>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800baa9 	.word	0x0800baa9
 800ba90:	0800bac1 	.word	0x0800bac1
 800ba94:	0800bb01 	.word	0x0800bb01
 800ba98:	0800bcd7 	.word	0x0800bcd7
 800ba9c:	0800bcd7 	.word	0x0800bcd7
 800baa0:	0800bc77 	.word	0x0800bc77
 800baa4:	0800bca3 	.word	0x0800bca3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	7c12      	ldrb	r2, [r2, #16]
 800bab4:	f107 0108 	add.w	r1, r7, #8
 800bab8:	4610      	mov	r0, r2
 800baba:	4798      	blx	r3
 800babc:	60f8      	str	r0, [r7, #12]
      break;
 800babe:	e112      	b.n	800bce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	7c1b      	ldrb	r3, [r3, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10d      	bne.n	800bae4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad0:	f107 0208 	add.w	r2, r7, #8
 800bad4:	4610      	mov	r0, r2
 800bad6:	4798      	blx	r3
 800bad8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3301      	adds	r3, #1
 800bade:	2202      	movs	r2, #2
 800bae0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bae2:	e100      	b.n	800bce6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baec:	f107 0208 	add.w	r2, r7, #8
 800baf0:	4610      	mov	r0, r2
 800baf2:	4798      	blx	r3
 800baf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3301      	adds	r3, #1
 800bafa:	2202      	movs	r2, #2
 800bafc:	701a      	strb	r2, [r3, #0]
      break;
 800bafe:	e0f2      	b.n	800bce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	885b      	ldrh	r3, [r3, #2]
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b05      	cmp	r3, #5
 800bb08:	f200 80ac 	bhi.w	800bc64 <USBD_GetDescriptor+0x204>
 800bb0c:	a201      	add	r2, pc, #4	; (adr r2, 800bb14 <USBD_GetDescriptor+0xb4>)
 800bb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb12:	bf00      	nop
 800bb14:	0800bb2d 	.word	0x0800bb2d
 800bb18:	0800bb61 	.word	0x0800bb61
 800bb1c:	0800bb95 	.word	0x0800bb95
 800bb20:	0800bbc9 	.word	0x0800bbc9
 800bb24:	0800bbfd 	.word	0x0800bbfd
 800bb28:	0800bc31 	.word	0x0800bc31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00b      	beq.n	800bb50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	7c12      	ldrb	r2, [r2, #16]
 800bb44:	f107 0108 	add.w	r1, r7, #8
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
 800bb4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb4e:	e091      	b.n	800bc74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fa97 	bl	800c086 <USBD_CtlError>
            err++;
 800bb58:	7afb      	ldrb	r3, [r7, #11]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb5e:	e089      	b.n	800bc74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00b      	beq.n	800bb84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	7c12      	ldrb	r2, [r2, #16]
 800bb78:	f107 0108 	add.w	r1, r7, #8
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	4798      	blx	r3
 800bb80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb82:	e077      	b.n	800bc74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fa7d 	bl	800c086 <USBD_CtlError>
            err++;
 800bb8c:	7afb      	ldrb	r3, [r7, #11]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	72fb      	strb	r3, [r7, #11]
          break;
 800bb92:	e06f      	b.n	800bc74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00b      	beq.n	800bbb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	7c12      	ldrb	r2, [r2, #16]
 800bbac:	f107 0108 	add.w	r1, r7, #8
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	4798      	blx	r3
 800bbb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbb6:	e05d      	b.n	800bc74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fa63 	bl	800c086 <USBD_CtlError>
            err++;
 800bbc0:	7afb      	ldrb	r3, [r7, #11]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	72fb      	strb	r3, [r7, #11]
          break;
 800bbc6:	e055      	b.n	800bc74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00b      	beq.n	800bbec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	7c12      	ldrb	r2, [r2, #16]
 800bbe0:	f107 0108 	add.w	r1, r7, #8
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	4798      	blx	r3
 800bbe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbea:	e043      	b.n	800bc74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fa49 	bl	800c086 <USBD_CtlError>
            err++;
 800bbf4:	7afb      	ldrb	r3, [r7, #11]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbfa:	e03b      	b.n	800bc74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc02:	695b      	ldr	r3, [r3, #20]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00b      	beq.n	800bc20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	7c12      	ldrb	r2, [r2, #16]
 800bc14:	f107 0108 	add.w	r1, r7, #8
 800bc18:	4610      	mov	r0, r2
 800bc1a:	4798      	blx	r3
 800bc1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc1e:	e029      	b.n	800bc74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fa2f 	bl	800c086 <USBD_CtlError>
            err++;
 800bc28:	7afb      	ldrb	r3, [r7, #11]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc2e:	e021      	b.n	800bc74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00b      	beq.n	800bc54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	7c12      	ldrb	r2, [r2, #16]
 800bc48:	f107 0108 	add.w	r1, r7, #8
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	4798      	blx	r3
 800bc50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc52:	e00f      	b.n	800bc74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fa15 	bl	800c086 <USBD_CtlError>
            err++;
 800bc5c:	7afb      	ldrb	r3, [r7, #11]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	72fb      	strb	r3, [r7, #11]
          break;
 800bc62:	e007      	b.n	800bc74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fa0d 	bl	800c086 <USBD_CtlError>
          err++;
 800bc6c:	7afb      	ldrb	r3, [r7, #11]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bc72:	e038      	b.n	800bce6 <USBD_GetDescriptor+0x286>
 800bc74:	e037      	b.n	800bce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	7c1b      	ldrb	r3, [r3, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d109      	bne.n	800bc92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc86:	f107 0208 	add.w	r2, r7, #8
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	4798      	blx	r3
 800bc8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc90:	e029      	b.n	800bce6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f9f6 	bl	800c086 <USBD_CtlError>
        err++;
 800bc9a:	7afb      	ldrb	r3, [r7, #11]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	72fb      	strb	r3, [r7, #11]
      break;
 800bca0:	e021      	b.n	800bce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	7c1b      	ldrb	r3, [r3, #16]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10d      	bne.n	800bcc6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb2:	f107 0208 	add.w	r2, r7, #8
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	4798      	blx	r3
 800bcba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	2207      	movs	r2, #7
 800bcc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcc4:	e00f      	b.n	800bce6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f9dc 	bl	800c086 <USBD_CtlError>
        err++;
 800bcce:	7afb      	ldrb	r3, [r7, #11]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	72fb      	strb	r3, [r7, #11]
      break;
 800bcd4:	e007      	b.n	800bce6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f9d4 	bl	800c086 <USBD_CtlError>
      err++;
 800bcde:	7afb      	ldrb	r3, [r7, #11]
 800bce0:	3301      	adds	r3, #1
 800bce2:	72fb      	strb	r3, [r7, #11]
      break;
 800bce4:	bf00      	nop
  }

  if (err != 0U)
 800bce6:	7afb      	ldrb	r3, [r7, #11]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d11c      	bne.n	800bd26 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bcec:	893b      	ldrh	r3, [r7, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d011      	beq.n	800bd16 <USBD_GetDescriptor+0x2b6>
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	88db      	ldrh	r3, [r3, #6]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00d      	beq.n	800bd16 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	88da      	ldrh	r2, [r3, #6]
 800bcfe:	893b      	ldrh	r3, [r7, #8]
 800bd00:	4293      	cmp	r3, r2
 800bd02:	bf28      	it	cs
 800bd04:	4613      	movcs	r3, r2
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd0a:	893b      	ldrh	r3, [r7, #8]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	68f9      	ldr	r1, [r7, #12]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fa22 	bl	800c15a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	88db      	ldrh	r3, [r3, #6]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d104      	bne.n	800bd28 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fa79 	bl	800c216 <USBD_CtlSendStatus>
 800bd24:	e000      	b.n	800bd28 <USBD_GetDescriptor+0x2c8>
    return;
 800bd26:	bf00      	nop
    }
  }
}
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop

0800bd30 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	889b      	ldrh	r3, [r3, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d130      	bne.n	800bda4 <USBD_SetAddress+0x74>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	88db      	ldrh	r3, [r3, #6]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d12c      	bne.n	800bda4 <USBD_SetAddress+0x74>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	885b      	ldrh	r3, [r3, #2]
 800bd4e:	2b7f      	cmp	r3, #127	; 0x7f
 800bd50:	d828      	bhi.n	800bda4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	885b      	ldrh	r3, [r3, #2]
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	d104      	bne.n	800bd72 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bd68:	6839      	ldr	r1, [r7, #0]
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f98b 	bl	800c086 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd70:	e01d      	b.n	800bdae <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	7bfa      	ldrb	r2, [r7, #15]
 800bd76:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fe5a 	bl	800ca38 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fa46 	bl	800c216 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d004      	beq.n	800bd9a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd98:	e009      	b.n	800bdae <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bda2:	e004      	b.n	800bdae <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bda4:	6839      	ldr	r1, [r7, #0]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f96d 	bl	800c086 <USBD_CtlError>
  }
}
 800bdac:	bf00      	nop
 800bdae:	bf00      	nop
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
	...

0800bdb8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	885b      	ldrh	r3, [r3, #2]
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	4b41      	ldr	r3, [pc, #260]	; (800bed0 <USBD_SetConfig+0x118>)
 800bdca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bdcc:	4b40      	ldr	r3, [pc, #256]	; (800bed0 <USBD_SetConfig+0x118>)
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d904      	bls.n	800bdde <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bdd4:	6839      	ldr	r1, [r7, #0]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f955 	bl	800c086 <USBD_CtlError>
 800bddc:	e075      	b.n	800beca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	d002      	beq.n	800bdee <USBD_SetConfig+0x36>
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d023      	beq.n	800be34 <USBD_SetConfig+0x7c>
 800bdec:	e062      	b.n	800beb4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bdee:	4b38      	ldr	r3, [pc, #224]	; (800bed0 <USBD_SetConfig+0x118>)
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d01a      	beq.n	800be2c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bdf6:	4b36      	ldr	r3, [pc, #216]	; (800bed0 <USBD_SetConfig+0x118>)
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2203      	movs	r2, #3
 800be04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800be08:	4b31      	ldr	r3, [pc, #196]	; (800bed0 <USBD_SetConfig+0x118>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7ff f9e7 	bl	800b1e2 <USBD_SetClassConfig>
 800be14:	4603      	mov	r3, r0
 800be16:	2b02      	cmp	r3, #2
 800be18:	d104      	bne.n	800be24 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 f932 	bl	800c086 <USBD_CtlError>
            return;
 800be22:	e052      	b.n	800beca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f9f6 	bl	800c216 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800be2a:	e04e      	b.n	800beca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f9f2 	bl	800c216 <USBD_CtlSendStatus>
        break;
 800be32:	e04a      	b.n	800beca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800be34:	4b26      	ldr	r3, [pc, #152]	; (800bed0 <USBD_SetConfig+0x118>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d112      	bne.n	800be62 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2202      	movs	r2, #2
 800be40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800be44:	4b22      	ldr	r3, [pc, #136]	; (800bed0 <USBD_SetConfig+0x118>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	461a      	mov	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800be4e:	4b20      	ldr	r3, [pc, #128]	; (800bed0 <USBD_SetConfig+0x118>)
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	4619      	mov	r1, r3
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff f9e3 	bl	800b220 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f9db 	bl	800c216 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800be60:	e033      	b.n	800beca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800be62:	4b1b      	ldr	r3, [pc, #108]	; (800bed0 <USBD_SetConfig+0x118>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	461a      	mov	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d01d      	beq.n	800beac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	b2db      	uxtb	r3, r3
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7ff f9d1 	bl	800b220 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800be7e:	4b14      	ldr	r3, [pc, #80]	; (800bed0 <USBD_SetConfig+0x118>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800be88:	4b11      	ldr	r3, [pc, #68]	; (800bed0 <USBD_SetConfig+0x118>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	4619      	mov	r1, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff f9a7 	bl	800b1e2 <USBD_SetClassConfig>
 800be94:	4603      	mov	r3, r0
 800be96:	2b02      	cmp	r3, #2
 800be98:	d104      	bne.n	800bea4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f8f2 	bl	800c086 <USBD_CtlError>
            return;
 800bea2:	e012      	b.n	800beca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 f9b6 	bl	800c216 <USBD_CtlSendStatus>
        break;
 800beaa:	e00e      	b.n	800beca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 f9b2 	bl	800c216 <USBD_CtlSendStatus>
        break;
 800beb2:	e00a      	b.n	800beca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f8e5 	bl	800c086 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bebc:	4b04      	ldr	r3, [pc, #16]	; (800bed0 <USBD_SetConfig+0x118>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7ff f9ac 	bl	800b220 <USBD_ClrClassConfig>
        break;
 800bec8:	bf00      	nop
    }
  }
}
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	20000240 	.word	0x20000240

0800bed4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	88db      	ldrh	r3, [r3, #6]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d004      	beq.n	800bef0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f8cc 	bl	800c086 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800beee:	e022      	b.n	800bf36 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	dc02      	bgt.n	800bf00 <USBD_GetConfig+0x2c>
 800befa:	2b00      	cmp	r3, #0
 800befc:	dc03      	bgt.n	800bf06 <USBD_GetConfig+0x32>
 800befe:	e015      	b.n	800bf2c <USBD_GetConfig+0x58>
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	d00b      	beq.n	800bf1c <USBD_GetConfig+0x48>
 800bf04:	e012      	b.n	800bf2c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	3308      	adds	r3, #8
 800bf10:	2201      	movs	r2, #1
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f920 	bl	800c15a <USBD_CtlSendData>
        break;
 800bf1a:	e00c      	b.n	800bf36 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	3304      	adds	r3, #4
 800bf20:	2201      	movs	r2, #1
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 f918 	bl	800c15a <USBD_CtlSendData>
        break;
 800bf2a:	e004      	b.n	800bf36 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f8a9 	bl	800c086 <USBD_CtlError>
        break;
 800bf34:	bf00      	nop
}
 800bf36:	bf00      	nop
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b082      	sub	sp, #8
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d81e      	bhi.n	800bf92 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	88db      	ldrh	r3, [r3, #6]
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	d004      	beq.n	800bf66 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f891 	bl	800c086 <USBD_CtlError>
        break;
 800bf64:	e01a      	b.n	800bf9c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d005      	beq.n	800bf82 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	f043 0202 	orr.w	r2, r3, #2
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	330c      	adds	r3, #12
 800bf86:	2202      	movs	r2, #2
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f8e5 	bl	800c15a <USBD_CtlSendData>
      break;
 800bf90:	e004      	b.n	800bf9c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bf92:	6839      	ldr	r1, [r7, #0]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 f876 	bl	800c086 <USBD_CtlError>
      break;
 800bf9a:	bf00      	nop
  }
}
 800bf9c:	bf00      	nop
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	885b      	ldrh	r3, [r3, #2]
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d106      	bne.n	800bfc4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f929 	bl	800c216 <USBD_CtlSendStatus>
  }
}
 800bfc4:	bf00      	nop
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d80b      	bhi.n	800bffa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	885b      	ldrh	r3, [r3, #2]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d10c      	bne.n	800c004 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f90f 	bl	800c216 <USBD_CtlSendStatus>
      }
      break;
 800bff8:	e004      	b.n	800c004 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f842 	bl	800c086 <USBD_CtlError>
      break;
 800c002:	e000      	b.n	800c006 <USBD_ClrFeature+0x3a>
      break;
 800c004:	bf00      	nop
  }
}
 800c006:	bf00      	nop
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c00e:	b480      	push	{r7}
 800c010:	b083      	sub	sp, #12
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	781a      	ldrb	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	785a      	ldrb	r2, [r3, #1]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	3302      	adds	r3, #2
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	b29a      	uxth	r2, r3
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	3303      	adds	r3, #3
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	b29b      	uxth	r3, r3
 800c038:	021b      	lsls	r3, r3, #8
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	4413      	add	r3, r2
 800c03e:	b29a      	uxth	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	3304      	adds	r3, #4
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	3305      	adds	r3, #5
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	b29b      	uxth	r3, r3
 800c054:	021b      	lsls	r3, r3, #8
 800c056:	b29b      	uxth	r3, r3
 800c058:	4413      	add	r3, r2
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	3306      	adds	r3, #6
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	b29a      	uxth	r2, r3
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	3307      	adds	r3, #7
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	b29b      	uxth	r3, r3
 800c070:	021b      	lsls	r3, r3, #8
 800c072:	b29b      	uxth	r3, r3
 800c074:	4413      	add	r3, r2
 800c076:	b29a      	uxth	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	80da      	strh	r2, [r3, #6]

}
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	bc80      	pop	{r7}
 800c084:	4770      	bx	lr

0800c086 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c090:	2180      	movs	r1, #128	; 0x80
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fc66 	bl	800c964 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c098:	2100      	movs	r1, #0
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fc62 	bl	800c964 <USBD_LL_StallEP>
}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d032      	beq.n	800c124 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f000 f834 	bl	800c12c <USBD_GetLen>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	005b      	lsls	r3, r3, #1
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c0d2:	7dfb      	ldrb	r3, [r7, #23]
 800c0d4:	1c5a      	adds	r2, r3, #1
 800c0d6:	75fa      	strb	r2, [r7, #23]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	4413      	add	r3, r2
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	7812      	ldrb	r2, [r2, #0]
 800c0e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
 800c0e6:	1c5a      	adds	r2, r3, #1
 800c0e8:	75fa      	strb	r2, [r7, #23]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c0f4:	e012      	b.n	800c11c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	1c5a      	adds	r2, r3, #1
 800c0fa:	60fa      	str	r2, [r7, #12]
 800c0fc:	7dfa      	ldrb	r2, [r7, #23]
 800c0fe:	1c51      	adds	r1, r2, #1
 800c100:	75f9      	strb	r1, [r7, #23]
 800c102:	4611      	mov	r1, r2
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	440a      	add	r2, r1
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c10c:	7dfb      	ldrb	r3, [r7, #23]
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	75fa      	strb	r2, [r7, #23]
 800c112:	461a      	mov	r2, r3
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	4413      	add	r3, r2
 800c118:	2200      	movs	r2, #0
 800c11a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1e8      	bne.n	800c0f6 <USBD_GetString+0x4e>
    }
  }
}
 800c124:	bf00      	nop
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c134:	2300      	movs	r3, #0
 800c136:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c138:	e005      	b.n	800c146 <USBD_GetLen+0x1a>
  {
    len++;
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
 800c13c:	3301      	adds	r3, #1
 800c13e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3301      	adds	r3, #1
 800c144:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1f5      	bne.n	800c13a <USBD_GetLen+0xe>
  }

  return len;
 800c14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	bc80      	pop	{r7}
 800c158:	4770      	bx	lr

0800c15a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b084      	sub	sp, #16
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	4613      	mov	r3, r2
 800c166:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2202      	movs	r2, #2
 800c16c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c170:	88fa      	ldrh	r2, [r7, #6]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c176:	88fa      	ldrh	r2, [r7, #6]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c17c:	88fb      	ldrh	r3, [r7, #6]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	2100      	movs	r1, #0
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f000 fc77 	bl	800ca76 <USBD_LL_Transmit>

  return USBD_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b084      	sub	sp, #16
 800c196:	af00      	add	r7, sp, #0
 800c198:	60f8      	str	r0, [r7, #12]
 800c19a:	60b9      	str	r1, [r7, #8]
 800c19c:	4613      	mov	r3, r2
 800c19e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1a0:	88fb      	ldrh	r3, [r7, #6]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f000 fc65 	bl	800ca76 <USBD_LL_Transmit>

  return USBD_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	60f8      	str	r0, [r7, #12]
 800c1be:	60b9      	str	r1, [r7, #8]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2203      	movs	r2, #3
 800c1c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c1cc:	88fa      	ldrh	r2, [r7, #6]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c1d4:	88fa      	ldrh	r2, [r7, #6]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1dc:	88fb      	ldrh	r3, [r7, #6]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f000 fc6a 	bl	800cabc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b084      	sub	sp, #16
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	60f8      	str	r0, [r7, #12]
 800c1fa:	60b9      	str	r1, [r7, #8]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c200:	88fb      	ldrh	r3, [r7, #6]
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	2100      	movs	r1, #0
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f000 fc58 	bl	800cabc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2204      	movs	r2, #4
 800c222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c226:	2300      	movs	r3, #0
 800c228:	2200      	movs	r2, #0
 800c22a:	2100      	movs	r1, #0
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 fc22 	bl	800ca76 <USBD_LL_Transmit>

  return USBD_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2205      	movs	r2, #5
 800c248:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c24c:	2300      	movs	r3, #0
 800c24e:	2200      	movs	r2, #0
 800c250:	2100      	movs	r1, #0
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fc32 	bl	800cabc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c268:	2200      	movs	r2, #0
 800c26a:	4912      	ldr	r1, [pc, #72]	; (800c2b4 <MX_USB_DEVICE_Init+0x50>)
 800c26c:	4812      	ldr	r0, [pc, #72]	; (800c2b8 <MX_USB_DEVICE_Init+0x54>)
 800c26e:	f7fe ff5e 	bl	800b12e <USBD_Init>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d001      	beq.n	800c27c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c278:	f7f6 f8f0 	bl	800245c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c27c:	490f      	ldr	r1, [pc, #60]	; (800c2bc <MX_USB_DEVICE_Init+0x58>)
 800c27e:	480e      	ldr	r0, [pc, #56]	; (800c2b8 <MX_USB_DEVICE_Init+0x54>)
 800c280:	f7fe ff80 	bl	800b184 <USBD_RegisterClass>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c28a:	f7f6 f8e7 	bl	800245c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c28e:	490c      	ldr	r1, [pc, #48]	; (800c2c0 <MX_USB_DEVICE_Init+0x5c>)
 800c290:	4809      	ldr	r0, [pc, #36]	; (800c2b8 <MX_USB_DEVICE_Init+0x54>)
 800c292:	f7fe feb1 	bl	800aff8 <USBD_CDC_RegisterInterface>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d001      	beq.n	800c2a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c29c:	f7f6 f8de 	bl	800245c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c2a0:	4805      	ldr	r0, [pc, #20]	; (800c2b8 <MX_USB_DEVICE_Init+0x54>)
 800c2a2:	f7fe ff88 	bl	800b1b6 <USBD_Start>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d001      	beq.n	800c2b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c2ac:	f7f6 f8d6 	bl	800245c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c2b0:	bf00      	nop
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	2000013c 	.word	0x2000013c
 800c2b8:	200008c4 	.word	0x200008c4
 800c2bc:	20000028 	.word	0x20000028
 800c2c0:	2000012c 	.word	0x2000012c

0800c2c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	4905      	ldr	r1, [pc, #20]	; (800c2e0 <CDC_Init_FS+0x1c>)
 800c2cc:	4805      	ldr	r0, [pc, #20]	; (800c2e4 <CDC_Init_FS+0x20>)
 800c2ce:	f7fe fea9 	bl	800b024 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c2d2:	4905      	ldr	r1, [pc, #20]	; (800c2e8 <CDC_Init_FS+0x24>)
 800c2d4:	4803      	ldr	r0, [pc, #12]	; (800c2e4 <CDC_Init_FS+0x20>)
 800c2d6:	f7fe febe 	bl	800b056 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c2da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	20000f70 	.word	0x20000f70
 800c2e4:	200008c4 	.word	0x200008c4
 800c2e8:	20000b88 	.word	0x20000b88

0800c2ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c2f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bc80      	pop	{r7}
 800c2f8:	4770      	bx	lr
	...

0800c2fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	4603      	mov	r3, r0
 800c304:	6039      	str	r1, [r7, #0]
 800c306:	71fb      	strb	r3, [r7, #7]
 800c308:	4613      	mov	r3, r2
 800c30a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c30c:	79fb      	ldrb	r3, [r7, #7]
 800c30e:	2b23      	cmp	r3, #35	; 0x23
 800c310:	d84a      	bhi.n	800c3a8 <CDC_Control_FS+0xac>
 800c312:	a201      	add	r2, pc, #4	; (adr r2, 800c318 <CDC_Control_FS+0x1c>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c3a9 	.word	0x0800c3a9
 800c31c:	0800c3a9 	.word	0x0800c3a9
 800c320:	0800c3a9 	.word	0x0800c3a9
 800c324:	0800c3a9 	.word	0x0800c3a9
 800c328:	0800c3a9 	.word	0x0800c3a9
 800c32c:	0800c3a9 	.word	0x0800c3a9
 800c330:	0800c3a9 	.word	0x0800c3a9
 800c334:	0800c3a9 	.word	0x0800c3a9
 800c338:	0800c3a9 	.word	0x0800c3a9
 800c33c:	0800c3a9 	.word	0x0800c3a9
 800c340:	0800c3a9 	.word	0x0800c3a9
 800c344:	0800c3a9 	.word	0x0800c3a9
 800c348:	0800c3a9 	.word	0x0800c3a9
 800c34c:	0800c3a9 	.word	0x0800c3a9
 800c350:	0800c3a9 	.word	0x0800c3a9
 800c354:	0800c3a9 	.word	0x0800c3a9
 800c358:	0800c3a9 	.word	0x0800c3a9
 800c35c:	0800c3a9 	.word	0x0800c3a9
 800c360:	0800c3a9 	.word	0x0800c3a9
 800c364:	0800c3a9 	.word	0x0800c3a9
 800c368:	0800c3a9 	.word	0x0800c3a9
 800c36c:	0800c3a9 	.word	0x0800c3a9
 800c370:	0800c3a9 	.word	0x0800c3a9
 800c374:	0800c3a9 	.word	0x0800c3a9
 800c378:	0800c3a9 	.word	0x0800c3a9
 800c37c:	0800c3a9 	.word	0x0800c3a9
 800c380:	0800c3a9 	.word	0x0800c3a9
 800c384:	0800c3a9 	.word	0x0800c3a9
 800c388:	0800c3a9 	.word	0x0800c3a9
 800c38c:	0800c3a9 	.word	0x0800c3a9
 800c390:	0800c3a9 	.word	0x0800c3a9
 800c394:	0800c3a9 	.word	0x0800c3a9
 800c398:	0800c3a9 	.word	0x0800c3a9
 800c39c:	0800c3a9 	.word	0x0800c3a9
 800c3a0:	0800c3a9 	.word	0x0800c3a9
 800c3a4:	0800c3a9 	.word	0x0800c3a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c3a8:	bf00      	nop
  }

  return (USBD_OK);
 800c3aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bc80      	pop	{r7}
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop

0800c3b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < (*Len); i++)
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	60fb      	str	r3, [r7, #12]
 800c3c6:	e009      	b.n	800c3dc <CDC_Receive_FS+0x24>
	  fifo_push(Buf[i]);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7f5 f839 	bl	8001448 <fifo_push>
  for (int i = 0; i < (*Len); i++)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	60fb      	str	r3, [r7, #12]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d8f0      	bhi.n	800c3c8 <CDC_Receive_FS+0x10>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c3e6:	6879      	ldr	r1, [r7, #4]
 800c3e8:	4805      	ldr	r0, [pc, #20]	; (800c400 <CDC_Receive_FS+0x48>)
 800c3ea:	f7fe fe34 	bl	800b056 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c3ee:	4804      	ldr	r0, [pc, #16]	; (800c400 <CDC_Receive_FS+0x48>)
 800c3f0:	f7fe fe73 	bl	800b0da <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c3f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	200008c4 	.word	0x200008c4

0800c404 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c414:	4b0d      	ldr	r3, [pc, #52]	; (800c44c <CDC_Transmit_FS+0x48>)
 800c416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c41a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c426:	2301      	movs	r3, #1
 800c428:	e00b      	b.n	800c442 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c42a:	887b      	ldrh	r3, [r7, #2]
 800c42c:	461a      	mov	r2, r3
 800c42e:	6879      	ldr	r1, [r7, #4]
 800c430:	4806      	ldr	r0, [pc, #24]	; (800c44c <CDC_Transmit_FS+0x48>)
 800c432:	f7fe fdf7 	bl	800b024 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c436:	4805      	ldr	r0, [pc, #20]	; (800c44c <CDC_Transmit_FS+0x48>)
 800c438:	f7fe fe20 	bl	800b07c <USBD_CDC_TransmitPacket>
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c440:	7bfb      	ldrb	r3, [r7, #15]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	200008c4 	.word	0x200008c4

0800c450 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	6039      	str	r1, [r7, #0]
 800c45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	2212      	movs	r2, #18
 800c460:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c462:	4b03      	ldr	r3, [pc, #12]	; (800c470 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c464:	4618      	mov	r0, r3
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	bc80      	pop	{r7}
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	20000158 	.word	0x20000158

0800c474 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	4603      	mov	r3, r0
 800c47c:	6039      	str	r1, [r7, #0]
 800c47e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	2204      	movs	r2, #4
 800c484:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c486:	4b03      	ldr	r3, [pc, #12]	; (800c494 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c488:	4618      	mov	r0, r3
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bc80      	pop	{r7}
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	2000016c 	.word	0x2000016c

0800c498 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	4603      	mov	r3, r0
 800c4a0:	6039      	str	r1, [r7, #0]
 800c4a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d105      	bne.n	800c4b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	4907      	ldr	r1, [pc, #28]	; (800c4cc <USBD_FS_ProductStrDescriptor+0x34>)
 800c4ae:	4808      	ldr	r0, [pc, #32]	; (800c4d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4b0:	f7ff fdfa 	bl	800c0a8 <USBD_GetString>
 800c4b4:	e004      	b.n	800c4c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	4904      	ldr	r1, [pc, #16]	; (800c4cc <USBD_FS_ProductStrDescriptor+0x34>)
 800c4ba:	4805      	ldr	r0, [pc, #20]	; (800c4d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c4bc:	f7ff fdf4 	bl	800c0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4c0:	4b02      	ldr	r3, [pc, #8]	; (800c4cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20001358 	.word	0x20001358
 800c4d0:	0800d718 	.word	0x0800d718

0800c4d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	6039      	str	r1, [r7, #0]
 800c4de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4e0:	683a      	ldr	r2, [r7, #0]
 800c4e2:	4904      	ldr	r1, [pc, #16]	; (800c4f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c4e4:	4804      	ldr	r0, [pc, #16]	; (800c4f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c4e6:	f7ff fddf 	bl	800c0a8 <USBD_GetString>
  return USBD_StrDesc;
 800c4ea:	4b02      	ldr	r3, [pc, #8]	; (800c4f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	20001358 	.word	0x20001358
 800c4f8:	0800d730 	.word	0x0800d730

0800c4fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	6039      	str	r1, [r7, #0]
 800c506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	221a      	movs	r2, #26
 800c50c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c50e:	f000 f843 	bl	800c598 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c512:	4b02      	ldr	r3, [pc, #8]	; (800c51c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c514:	4618      	mov	r0, r3
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	20000170 	.word	0x20000170

0800c520 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	4603      	mov	r3, r0
 800c528:	6039      	str	r1, [r7, #0]
 800c52a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c52c:	79fb      	ldrb	r3, [r7, #7]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d105      	bne.n	800c53e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	4907      	ldr	r1, [pc, #28]	; (800c554 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c536:	4808      	ldr	r0, [pc, #32]	; (800c558 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c538:	f7ff fdb6 	bl	800c0a8 <USBD_GetString>
 800c53c:	e004      	b.n	800c548 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	4904      	ldr	r1, [pc, #16]	; (800c554 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c542:	4805      	ldr	r0, [pc, #20]	; (800c558 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c544:	f7ff fdb0 	bl	800c0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c548:	4b02      	ldr	r3, [pc, #8]	; (800c554 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	20001358 	.word	0x20001358
 800c558:	0800d744 	.word	0x0800d744

0800c55c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	6039      	str	r1, [r7, #0]
 800c566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c568:	79fb      	ldrb	r3, [r7, #7]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d105      	bne.n	800c57a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c56e:	683a      	ldr	r2, [r7, #0]
 800c570:	4907      	ldr	r1, [pc, #28]	; (800c590 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c572:	4808      	ldr	r0, [pc, #32]	; (800c594 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c574:	f7ff fd98 	bl	800c0a8 <USBD_GetString>
 800c578:	e004      	b.n	800c584 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	4904      	ldr	r1, [pc, #16]	; (800c590 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c57e:	4805      	ldr	r0, [pc, #20]	; (800c594 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c580:	f7ff fd92 	bl	800c0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c584:	4b02      	ldr	r3, [pc, #8]	; (800c590 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c586:	4618      	mov	r0, r3
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20001358 	.word	0x20001358
 800c594:	0800d750 	.word	0x0800d750

0800c598 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c59e:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <Get_SerialNum+0x44>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c5a4:	4b0e      	ldr	r3, [pc, #56]	; (800c5e0 <Get_SerialNum+0x48>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c5aa:	4b0e      	ldr	r3, [pc, #56]	; (800c5e4 <Get_SerialNum+0x4c>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d009      	beq.n	800c5d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c5be:	2208      	movs	r2, #8
 800c5c0:	4909      	ldr	r1, [pc, #36]	; (800c5e8 <Get_SerialNum+0x50>)
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f000 f814 	bl	800c5f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c5c8:	2204      	movs	r2, #4
 800c5ca:	4908      	ldr	r1, [pc, #32]	; (800c5ec <Get_SerialNum+0x54>)
 800c5cc:	68b8      	ldr	r0, [r7, #8]
 800c5ce:	f000 f80f 	bl	800c5f0 <IntToUnicode>
  }
}
 800c5d2:	bf00      	nop
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	1ffff7e8 	.word	0x1ffff7e8
 800c5e0:	1ffff7ec 	.word	0x1ffff7ec
 800c5e4:	1ffff7f0 	.word	0x1ffff7f0
 800c5e8:	20000172 	.word	0x20000172
 800c5ec:	20000182 	.word	0x20000182

0800c5f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b087      	sub	sp, #28
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c602:	2300      	movs	r3, #0
 800c604:	75fb      	strb	r3, [r7, #23]
 800c606:	e027      	b.n	800c658 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	0f1b      	lsrs	r3, r3, #28
 800c60c:	2b09      	cmp	r3, #9
 800c60e:	d80b      	bhi.n	800c628 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	0f1b      	lsrs	r3, r3, #28
 800c614:	b2da      	uxtb	r2, r3
 800c616:	7dfb      	ldrb	r3, [r7, #23]
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	4619      	mov	r1, r3
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	440b      	add	r3, r1
 800c620:	3230      	adds	r2, #48	; 0x30
 800c622:	b2d2      	uxtb	r2, r2
 800c624:	701a      	strb	r2, [r3, #0]
 800c626:	e00a      	b.n	800c63e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	0f1b      	lsrs	r3, r3, #28
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	7dfb      	ldrb	r3, [r7, #23]
 800c630:	005b      	lsls	r3, r3, #1
 800c632:	4619      	mov	r1, r3
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	440b      	add	r3, r1
 800c638:	3237      	adds	r2, #55	; 0x37
 800c63a:	b2d2      	uxtb	r2, r2
 800c63c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	011b      	lsls	r3, r3, #4
 800c642:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c644:	7dfb      	ldrb	r3, [r7, #23]
 800c646:	005b      	lsls	r3, r3, #1
 800c648:	3301      	adds	r3, #1
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	4413      	add	r3, r2
 800c64e:	2200      	movs	r2, #0
 800c650:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c652:	7dfb      	ldrb	r3, [r7, #23]
 800c654:	3301      	adds	r3, #1
 800c656:	75fb      	strb	r3, [r7, #23]
 800c658:	7dfa      	ldrb	r2, [r7, #23]
 800c65a:	79fb      	ldrb	r3, [r7, #7]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d3d3      	bcc.n	800c608 <IntToUnicode+0x18>
  }
}
 800c660:	bf00      	nop
 800c662:	bf00      	nop
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	bc80      	pop	{r7}
 800c66a:	4770      	bx	lr

0800c66c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a0d      	ldr	r2, [pc, #52]	; (800c6b0 <HAL_PCD_MspInit+0x44>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d113      	bne.n	800c6a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c67e:	4b0d      	ldr	r3, [pc, #52]	; (800c6b4 <HAL_PCD_MspInit+0x48>)
 800c680:	69db      	ldr	r3, [r3, #28]
 800c682:	4a0c      	ldr	r2, [pc, #48]	; (800c6b4 <HAL_PCD_MspInit+0x48>)
 800c684:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c688:	61d3      	str	r3, [r2, #28]
 800c68a:	4b0a      	ldr	r3, [pc, #40]	; (800c6b4 <HAL_PCD_MspInit+0x48>)
 800c68c:	69db      	ldr	r3, [r3, #28]
 800c68e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c692:	60fb      	str	r3, [r7, #12]
 800c694:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c696:	2200      	movs	r2, #0
 800c698:	2100      	movs	r1, #0
 800c69a:	2014      	movs	r0, #20
 800c69c:	f7f8 f9f9 	bl	8004a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c6a0:	2014      	movs	r0, #20
 800c6a2:	f7f8 fa12 	bl	8004aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c6a6:	bf00      	nop
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	40005c00 	.word	0x40005c00
 800c6b4:	40021000 	.word	0x40021000

0800c6b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	4610      	mov	r0, r2
 800c6d0:	f7fe fdb9 	bl	800b246 <USBD_LL_SetupStage>
}
 800c6d4:	bf00      	nop
 800c6d6:	3708      	adds	r7, #8
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c6ee:	78fa      	ldrb	r2, [r7, #3]
 800c6f0:	6879      	ldr	r1, [r7, #4]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	4413      	add	r3, r2
 800c6f8:	00db      	lsls	r3, r3, #3
 800c6fa:	440b      	add	r3, r1
 800c6fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	78fb      	ldrb	r3, [r7, #3]
 800c704:	4619      	mov	r1, r3
 800c706:	f7fe fdeb 	bl	800b2e0 <USBD_LL_DataOutStage>
}
 800c70a:	bf00      	nop
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	460b      	mov	r3, r1
 800c71c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c724:	78fa      	ldrb	r2, [r7, #3]
 800c726:	6879      	ldr	r1, [r7, #4]
 800c728:	4613      	mov	r3, r2
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	4413      	add	r3, r2
 800c72e:	00db      	lsls	r3, r3, #3
 800c730:	440b      	add	r3, r1
 800c732:	333c      	adds	r3, #60	; 0x3c
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	78fb      	ldrb	r3, [r7, #3]
 800c738:	4619      	mov	r1, r3
 800c73a:	f7fe fe42 	bl	800b3c2 <USBD_LL_DataInStage>
}
 800c73e:	bf00      	nop
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b082      	sub	sp, #8
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c754:	4618      	mov	r0, r3
 800c756:	f7fe ff52 	bl	800b5fe <USBD_LL_SOF>
}
 800c75a:	bf00      	nop
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b084      	sub	sp, #16
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c76a:	2301      	movs	r3, #1
 800c76c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	2b02      	cmp	r3, #2
 800c774:	d001      	beq.n	800c77a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c776:	f7f5 fe71 	bl	800245c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c780:	7bfa      	ldrb	r2, [r7, #15]
 800c782:	4611      	mov	r1, r2
 800c784:	4618      	mov	r0, r3
 800c786:	f7fe ff02 	bl	800b58e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c790:	4618      	mov	r0, r3
 800c792:	f7fe febb 	bl	800b50c <USBD_LL_Reset>
}
 800c796:	bf00      	nop
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
	...

0800c7a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7fe fefc 	bl	800b5ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d005      	beq.n	800c7c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c7bc:	4b04      	ldr	r3, [pc, #16]	; (800c7d0 <HAL_PCD_SuspendCallback+0x30>)
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	4a03      	ldr	r2, [pc, #12]	; (800c7d0 <HAL_PCD_SuspendCallback+0x30>)
 800c7c2:	f043 0306 	orr.w	r3, r3, #6
 800c7c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c7c8:	bf00      	nop
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	e000ed00 	.word	0xe000ed00

0800c7d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fe fef6 	bl	800b5d4 <USBD_LL_Resume>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c7f8:	4a28      	ldr	r2, [pc, #160]	; (800c89c <USBD_LL_Init+0xac>)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a26      	ldr	r2, [pc, #152]	; (800c89c <USBD_LL_Init+0xac>)
 800c804:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c808:	4b24      	ldr	r3, [pc, #144]	; (800c89c <USBD_LL_Init+0xac>)
 800c80a:	4a25      	ldr	r2, [pc, #148]	; (800c8a0 <USBD_LL_Init+0xb0>)
 800c80c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c80e:	4b23      	ldr	r3, [pc, #140]	; (800c89c <USBD_LL_Init+0xac>)
 800c810:	2208      	movs	r2, #8
 800c812:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c814:	4b21      	ldr	r3, [pc, #132]	; (800c89c <USBD_LL_Init+0xac>)
 800c816:	2202      	movs	r2, #2
 800c818:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c81a:	4b20      	ldr	r3, [pc, #128]	; (800c89c <USBD_LL_Init+0xac>)
 800c81c:	2200      	movs	r2, #0
 800c81e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c820:	4b1e      	ldr	r3, [pc, #120]	; (800c89c <USBD_LL_Init+0xac>)
 800c822:	2200      	movs	r2, #0
 800c824:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c826:	4b1d      	ldr	r3, [pc, #116]	; (800c89c <USBD_LL_Init+0xac>)
 800c828:	2200      	movs	r2, #0
 800c82a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c82c:	481b      	ldr	r0, [pc, #108]	; (800c89c <USBD_LL_Init+0xac>)
 800c82e:	f7f9 fb33 	bl	8005e98 <HAL_PCD_Init>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d001      	beq.n	800c83c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c838:	f7f5 fe10 	bl	800245c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c842:	2318      	movs	r3, #24
 800c844:	2200      	movs	r2, #0
 800c846:	2100      	movs	r1, #0
 800c848:	f7fa ffa9 	bl	800779e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c852:	2358      	movs	r3, #88	; 0x58
 800c854:	2200      	movs	r2, #0
 800c856:	2180      	movs	r1, #128	; 0x80
 800c858:	f7fa ffa1 	bl	800779e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c862:	23c0      	movs	r3, #192	; 0xc0
 800c864:	2200      	movs	r2, #0
 800c866:	2181      	movs	r1, #129	; 0x81
 800c868:	f7fa ff99 	bl	800779e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c872:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c876:	2200      	movs	r2, #0
 800c878:	2101      	movs	r1, #1
 800c87a:	f7fa ff90 	bl	800779e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c884:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c888:	2200      	movs	r2, #0
 800c88a:	2182      	movs	r1, #130	; 0x82
 800c88c:	f7fa ff87 	bl	800779e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	3708      	adds	r7, #8
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	20001558 	.word	0x20001558
 800c8a0:	40005c00 	.word	0x40005c00

0800c8a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7f9 fbf7 	bl	80060ae <HAL_PCD_Start>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8c4:	7bfb      	ldrb	r3, [r7, #15]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 f94e 	bl	800cb68 <USBD_Get_USB_Status>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	4608      	mov	r0, r1
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	70fb      	strb	r3, [r7, #3]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	70bb      	strb	r3, [r7, #2]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c902:	78bb      	ldrb	r3, [r7, #2]
 800c904:	883a      	ldrh	r2, [r7, #0]
 800c906:	78f9      	ldrb	r1, [r7, #3]
 800c908:	f7f9 fd71 	bl	80063ee <HAL_PCD_EP_Open>
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	4618      	mov	r0, r3
 800c914:	f000 f928 	bl	800cb68 <USBD_Get_USB_Status>
 800c918:	4603      	mov	r3, r0
 800c91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c91c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b084      	sub	sp, #16
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	460b      	mov	r3, r1
 800c930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c936:	2300      	movs	r3, #0
 800c938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c940:	78fa      	ldrb	r2, [r7, #3]
 800c942:	4611      	mov	r1, r2
 800c944:	4618      	mov	r0, r3
 800c946:	f7f9 fdb8 	bl	80064ba <HAL_PCD_EP_Close>
 800c94a:	4603      	mov	r3, r0
 800c94c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
 800c950:	4618      	mov	r0, r3
 800c952:	f000 f909 	bl	800cb68 <USBD_Get_USB_Status>
 800c956:	4603      	mov	r3, r0
 800c958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c95a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c974:	2300      	movs	r3, #0
 800c976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c97e:	78fa      	ldrb	r2, [r7, #3]
 800c980:	4611      	mov	r1, r2
 800c982:	4618      	mov	r0, r3
 800c984:	f7f9 fe78 	bl	8006678 <HAL_PCD_EP_SetStall>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 f8ea 	bl	800cb68 <USBD_Get_USB_Status>
 800c994:	4603      	mov	r3, r0
 800c996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c998:	7bbb      	ldrb	r3, [r7, #14]
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9bc:	78fa      	ldrb	r2, [r7, #3]
 800c9be:	4611      	mov	r1, r2
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7f9 feb9 	bl	8006738 <HAL_PCD_EP_ClrStall>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 f8cb 	bl	800cb68 <USBD_Get_USB_Status>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c9f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	da0c      	bge.n	800ca16 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c9fc:	78fb      	ldrb	r3, [r7, #3]
 800c9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca02:	68f9      	ldr	r1, [r7, #12]
 800ca04:	1c5a      	adds	r2, r3, #1
 800ca06:	4613      	mov	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	00db      	lsls	r3, r3, #3
 800ca0e:	440b      	add	r3, r1
 800ca10:	3302      	adds	r3, #2
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	e00b      	b.n	800ca2e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca16:	78fb      	ldrb	r3, [r7, #3]
 800ca18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca1c:	68f9      	ldr	r1, [r7, #12]
 800ca1e:	4613      	mov	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	4413      	add	r3, r2
 800ca24:	00db      	lsls	r3, r3, #3
 800ca26:	440b      	add	r3, r1
 800ca28:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ca2c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3714      	adds	r7, #20
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bc80      	pop	{r7}
 800ca36:	4770      	bx	lr

0800ca38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca52:	78fa      	ldrb	r2, [r7, #3]
 800ca54:	4611      	mov	r1, r2
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7f9 fca4 	bl	80063a4 <HAL_PCD_SetAddress>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 f880 	bl	800cb68 <USBD_Get_USB_Status>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b086      	sub	sp, #24
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	60f8      	str	r0, [r7, #12]
 800ca7e:	607a      	str	r2, [r7, #4]
 800ca80:	461a      	mov	r2, r3
 800ca82:	460b      	mov	r3, r1
 800ca84:	72fb      	strb	r3, [r7, #11]
 800ca86:	4613      	mov	r3, r2
 800ca88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca98:	893b      	ldrh	r3, [r7, #8]
 800ca9a:	7af9      	ldrb	r1, [r7, #11]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	f7f9 fda8 	bl	80065f2 <HAL_PCD_EP_Transmit>
 800caa2:	4603      	mov	r3, r0
 800caa4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 f85d 	bl	800cb68 <USBD_Get_USB_Status>
 800caae:	4603      	mov	r3, r0
 800cab0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cab2:	7dbb      	ldrb	r3, [r7, #22]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3718      	adds	r7, #24
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	607a      	str	r2, [r7, #4]
 800cac6:	461a      	mov	r2, r3
 800cac8:	460b      	mov	r3, r1
 800caca:	72fb      	strb	r3, [r7, #11]
 800cacc:	4613      	mov	r3, r2
 800cace:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cade:	893b      	ldrh	r3, [r7, #8]
 800cae0:	7af9      	ldrb	r1, [r7, #11]
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	f7f9 fd31 	bl	800654a <HAL_PCD_EP_Receive>
 800cae8:	4603      	mov	r3, r0
 800caea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caec:	7dfb      	ldrb	r3, [r7, #23]
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 f83a 	bl	800cb68 <USBD_Get_USB_Status>
 800caf4:	4603      	mov	r3, r0
 800caf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800caf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb14:	78fa      	ldrb	r2, [r7, #3]
 800cb16:	4611      	mov	r1, r2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7f9 fd53 	bl	80065c4 <HAL_PCD_EP_GetRxCount>
 800cb1e:	4603      	mov	r3, r0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb30:	4b02      	ldr	r3, [pc, #8]	; (800cb3c <USBD_static_malloc+0x14>)
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	370c      	adds	r7, #12
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bc80      	pop	{r7}
 800cb3a:	4770      	bx	lr
 800cb3c:	20000244 	.word	0x20000244

0800cb40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]

}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bc80      	pop	{r7}
 800cb50:	4770      	bx	lr

0800cb52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb52:	b480      	push	{r7}
 800cb54:	b083      	sub	sp, #12
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cb5e:	bf00      	nop
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bc80      	pop	{r7}
 800cb66:	4770      	bx	lr

0800cb68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb76:	79fb      	ldrb	r3, [r7, #7]
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d817      	bhi.n	800cbac <USBD_Get_USB_Status+0x44>
 800cb7c:	a201      	add	r2, pc, #4	; (adr r2, 800cb84 <USBD_Get_USB_Status+0x1c>)
 800cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb82:	bf00      	nop
 800cb84:	0800cb95 	.word	0x0800cb95
 800cb88:	0800cb9b 	.word	0x0800cb9b
 800cb8c:	0800cba1 	.word	0x0800cba1
 800cb90:	0800cba7 	.word	0x0800cba7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73fb      	strb	r3, [r7, #15]
    break;
 800cb98:	e00b      	b.n	800cbb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb9e:	e008      	b.n	800cbb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cba0:	2301      	movs	r3, #1
 800cba2:	73fb      	strb	r3, [r7, #15]
    break;
 800cba4:	e005      	b.n	800cbb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cba6:	2302      	movs	r3, #2
 800cba8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbaa:	e002      	b.n	800cbb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cbac:	2302      	movs	r3, #2
 800cbae:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb0:	bf00      	nop
  }
  return usb_status;
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3714      	adds	r7, #20
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bc80      	pop	{r7}
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop

0800cbc0 <__errno>:
 800cbc0:	4b01      	ldr	r3, [pc, #4]	; (800cbc8 <__errno+0x8>)
 800cbc2:	6818      	ldr	r0, [r3, #0]
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	2000018c 	.word	0x2000018c

0800cbcc <__libc_init_array>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	2600      	movs	r6, #0
 800cbd0:	4d0c      	ldr	r5, [pc, #48]	; (800cc04 <__libc_init_array+0x38>)
 800cbd2:	4c0d      	ldr	r4, [pc, #52]	; (800cc08 <__libc_init_array+0x3c>)
 800cbd4:	1b64      	subs	r4, r4, r5
 800cbd6:	10a4      	asrs	r4, r4, #2
 800cbd8:	42a6      	cmp	r6, r4
 800cbda:	d109      	bne.n	800cbf0 <__libc_init_array+0x24>
 800cbdc:	f000 fc9e 	bl	800d51c <_init>
 800cbe0:	2600      	movs	r6, #0
 800cbe2:	4d0a      	ldr	r5, [pc, #40]	; (800cc0c <__libc_init_array+0x40>)
 800cbe4:	4c0a      	ldr	r4, [pc, #40]	; (800cc10 <__libc_init_array+0x44>)
 800cbe6:	1b64      	subs	r4, r4, r5
 800cbe8:	10a4      	asrs	r4, r4, #2
 800cbea:	42a6      	cmp	r6, r4
 800cbec:	d105      	bne.n	800cbfa <__libc_init_array+0x2e>
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbf4:	4798      	blx	r3
 800cbf6:	3601      	adds	r6, #1
 800cbf8:	e7ee      	b.n	800cbd8 <__libc_init_array+0xc>
 800cbfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbfe:	4798      	blx	r3
 800cc00:	3601      	adds	r6, #1
 800cc02:	e7f2      	b.n	800cbea <__libc_init_array+0x1e>
 800cc04:	0800dce8 	.word	0x0800dce8
 800cc08:	0800dce8 	.word	0x0800dce8
 800cc0c:	0800dce8 	.word	0x0800dce8
 800cc10:	0800dcec 	.word	0x0800dcec

0800cc14 <memcpy>:
 800cc14:	440a      	add	r2, r1
 800cc16:	4291      	cmp	r1, r2
 800cc18:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc1c:	d100      	bne.n	800cc20 <memcpy+0xc>
 800cc1e:	4770      	bx	lr
 800cc20:	b510      	push	{r4, lr}
 800cc22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc26:	4291      	cmp	r1, r2
 800cc28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc2c:	d1f9      	bne.n	800cc22 <memcpy+0xe>
 800cc2e:	bd10      	pop	{r4, pc}

0800cc30 <memmove>:
 800cc30:	4288      	cmp	r0, r1
 800cc32:	b510      	push	{r4, lr}
 800cc34:	eb01 0402 	add.w	r4, r1, r2
 800cc38:	d902      	bls.n	800cc40 <memmove+0x10>
 800cc3a:	4284      	cmp	r4, r0
 800cc3c:	4623      	mov	r3, r4
 800cc3e:	d807      	bhi.n	800cc50 <memmove+0x20>
 800cc40:	1e43      	subs	r3, r0, #1
 800cc42:	42a1      	cmp	r1, r4
 800cc44:	d008      	beq.n	800cc58 <memmove+0x28>
 800cc46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc4e:	e7f8      	b.n	800cc42 <memmove+0x12>
 800cc50:	4601      	mov	r1, r0
 800cc52:	4402      	add	r2, r0
 800cc54:	428a      	cmp	r2, r1
 800cc56:	d100      	bne.n	800cc5a <memmove+0x2a>
 800cc58:	bd10      	pop	{r4, pc}
 800cc5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc62:	e7f7      	b.n	800cc54 <memmove+0x24>

0800cc64 <memset>:
 800cc64:	4603      	mov	r3, r0
 800cc66:	4402      	add	r2, r0
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d100      	bne.n	800cc6e <memset+0xa>
 800cc6c:	4770      	bx	lr
 800cc6e:	f803 1b01 	strb.w	r1, [r3], #1
 800cc72:	e7f9      	b.n	800cc68 <memset+0x4>

0800cc74 <sniprintf>:
 800cc74:	b40c      	push	{r2, r3}
 800cc76:	b530      	push	{r4, r5, lr}
 800cc78:	4b17      	ldr	r3, [pc, #92]	; (800ccd8 <sniprintf+0x64>)
 800cc7a:	1e0c      	subs	r4, r1, #0
 800cc7c:	681d      	ldr	r5, [r3, #0]
 800cc7e:	b09d      	sub	sp, #116	; 0x74
 800cc80:	da08      	bge.n	800cc94 <sniprintf+0x20>
 800cc82:	238b      	movs	r3, #139	; 0x8b
 800cc84:	f04f 30ff 	mov.w	r0, #4294967295
 800cc88:	602b      	str	r3, [r5, #0]
 800cc8a:	b01d      	add	sp, #116	; 0x74
 800cc8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc90:	b002      	add	sp, #8
 800cc92:	4770      	bx	lr
 800cc94:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cc98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc9c:	bf0c      	ite	eq
 800cc9e:	4623      	moveq	r3, r4
 800cca0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cca4:	9304      	str	r3, [sp, #16]
 800cca6:	9307      	str	r3, [sp, #28]
 800cca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ccac:	9002      	str	r0, [sp, #8]
 800ccae:	9006      	str	r0, [sp, #24]
 800ccb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	ab21      	add	r3, sp, #132	; 0x84
 800ccb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ccba:	a902      	add	r1, sp, #8
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	f000 f897 	bl	800cdf0 <_svfiprintf_r>
 800ccc2:	1c43      	adds	r3, r0, #1
 800ccc4:	bfbc      	itt	lt
 800ccc6:	238b      	movlt	r3, #139	; 0x8b
 800ccc8:	602b      	strlt	r3, [r5, #0]
 800ccca:	2c00      	cmp	r4, #0
 800cccc:	d0dd      	beq.n	800cc8a <sniprintf+0x16>
 800ccce:	2200      	movs	r2, #0
 800ccd0:	9b02      	ldr	r3, [sp, #8]
 800ccd2:	701a      	strb	r2, [r3, #0]
 800ccd4:	e7d9      	b.n	800cc8a <sniprintf+0x16>
 800ccd6:	bf00      	nop
 800ccd8:	2000018c 	.word	0x2000018c

0800ccdc <strcat>:
 800ccdc:	4602      	mov	r2, r0
 800ccde:	b510      	push	{r4, lr}
 800cce0:	7814      	ldrb	r4, [r2, #0]
 800cce2:	4613      	mov	r3, r2
 800cce4:	3201      	adds	r2, #1
 800cce6:	2c00      	cmp	r4, #0
 800cce8:	d1fa      	bne.n	800cce0 <strcat+0x4>
 800ccea:	3b01      	subs	r3, #1
 800ccec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccf0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccf4:	2a00      	cmp	r2, #0
 800ccf6:	d1f9      	bne.n	800ccec <strcat+0x10>
 800ccf8:	bd10      	pop	{r4, pc}

0800ccfa <strcpy>:
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd00:	f803 2b01 	strb.w	r2, [r3], #1
 800cd04:	2a00      	cmp	r2, #0
 800cd06:	d1f9      	bne.n	800ccfc <strcpy+0x2>
 800cd08:	4770      	bx	lr

0800cd0a <strstr>:
 800cd0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd0c:	780c      	ldrb	r4, [r1, #0]
 800cd0e:	b164      	cbz	r4, 800cd2a <strstr+0x20>
 800cd10:	4603      	mov	r3, r0
 800cd12:	781a      	ldrb	r2, [r3, #0]
 800cd14:	4618      	mov	r0, r3
 800cd16:	1c5e      	adds	r6, r3, #1
 800cd18:	b90a      	cbnz	r2, 800cd1e <strstr+0x14>
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	e005      	b.n	800cd2a <strstr+0x20>
 800cd1e:	4294      	cmp	r4, r2
 800cd20:	d108      	bne.n	800cd34 <strstr+0x2a>
 800cd22:	460d      	mov	r5, r1
 800cd24:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800cd28:	b902      	cbnz	r2, 800cd2c <strstr+0x22>
 800cd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd2c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800cd30:	4297      	cmp	r7, r2
 800cd32:	d0f7      	beq.n	800cd24 <strstr+0x1a>
 800cd34:	4633      	mov	r3, r6
 800cd36:	e7ec      	b.n	800cd12 <strstr+0x8>

0800cd38 <__ssputs_r>:
 800cd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd3c:	688e      	ldr	r6, [r1, #8]
 800cd3e:	4682      	mov	sl, r0
 800cd40:	429e      	cmp	r6, r3
 800cd42:	460c      	mov	r4, r1
 800cd44:	4690      	mov	r8, r2
 800cd46:	461f      	mov	r7, r3
 800cd48:	d838      	bhi.n	800cdbc <__ssputs_r+0x84>
 800cd4a:	898a      	ldrh	r2, [r1, #12]
 800cd4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd50:	d032      	beq.n	800cdb8 <__ssputs_r+0x80>
 800cd52:	6825      	ldr	r5, [r4, #0]
 800cd54:	6909      	ldr	r1, [r1, #16]
 800cd56:	3301      	adds	r3, #1
 800cd58:	eba5 0901 	sub.w	r9, r5, r1
 800cd5c:	6965      	ldr	r5, [r4, #20]
 800cd5e:	444b      	add	r3, r9
 800cd60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd68:	106d      	asrs	r5, r5, #1
 800cd6a:	429d      	cmp	r5, r3
 800cd6c:	bf38      	it	cc
 800cd6e:	461d      	movcc	r5, r3
 800cd70:	0553      	lsls	r3, r2, #21
 800cd72:	d531      	bpl.n	800cdd8 <__ssputs_r+0xa0>
 800cd74:	4629      	mov	r1, r5
 800cd76:	f000 fb2b 	bl	800d3d0 <_malloc_r>
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	b950      	cbnz	r0, 800cd94 <__ssputs_r+0x5c>
 800cd7e:	230c      	movs	r3, #12
 800cd80:	f04f 30ff 	mov.w	r0, #4294967295
 800cd84:	f8ca 3000 	str.w	r3, [sl]
 800cd88:	89a3      	ldrh	r3, [r4, #12]
 800cd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd8e:	81a3      	strh	r3, [r4, #12]
 800cd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd94:	464a      	mov	r2, r9
 800cd96:	6921      	ldr	r1, [r4, #16]
 800cd98:	f7ff ff3c 	bl	800cc14 <memcpy>
 800cd9c:	89a3      	ldrh	r3, [r4, #12]
 800cd9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cda2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cda6:	81a3      	strh	r3, [r4, #12]
 800cda8:	6126      	str	r6, [r4, #16]
 800cdaa:	444e      	add	r6, r9
 800cdac:	6026      	str	r6, [r4, #0]
 800cdae:	463e      	mov	r6, r7
 800cdb0:	6165      	str	r5, [r4, #20]
 800cdb2:	eba5 0509 	sub.w	r5, r5, r9
 800cdb6:	60a5      	str	r5, [r4, #8]
 800cdb8:	42be      	cmp	r6, r7
 800cdba:	d900      	bls.n	800cdbe <__ssputs_r+0x86>
 800cdbc:	463e      	mov	r6, r7
 800cdbe:	4632      	mov	r2, r6
 800cdc0:	4641      	mov	r1, r8
 800cdc2:	6820      	ldr	r0, [r4, #0]
 800cdc4:	f7ff ff34 	bl	800cc30 <memmove>
 800cdc8:	68a3      	ldr	r3, [r4, #8]
 800cdca:	6822      	ldr	r2, [r4, #0]
 800cdcc:	1b9b      	subs	r3, r3, r6
 800cdce:	4432      	add	r2, r6
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	60a3      	str	r3, [r4, #8]
 800cdd4:	6022      	str	r2, [r4, #0]
 800cdd6:	e7db      	b.n	800cd90 <__ssputs_r+0x58>
 800cdd8:	462a      	mov	r2, r5
 800cdda:	f000 fb53 	bl	800d484 <_realloc_r>
 800cdde:	4606      	mov	r6, r0
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d1e1      	bne.n	800cda8 <__ssputs_r+0x70>
 800cde4:	4650      	mov	r0, sl
 800cde6:	6921      	ldr	r1, [r4, #16]
 800cde8:	f000 faa6 	bl	800d338 <_free_r>
 800cdec:	e7c7      	b.n	800cd7e <__ssputs_r+0x46>
	...

0800cdf0 <_svfiprintf_r>:
 800cdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	4698      	mov	r8, r3
 800cdf6:	898b      	ldrh	r3, [r1, #12]
 800cdf8:	4607      	mov	r7, r0
 800cdfa:	061b      	lsls	r3, r3, #24
 800cdfc:	460d      	mov	r5, r1
 800cdfe:	4614      	mov	r4, r2
 800ce00:	b09d      	sub	sp, #116	; 0x74
 800ce02:	d50e      	bpl.n	800ce22 <_svfiprintf_r+0x32>
 800ce04:	690b      	ldr	r3, [r1, #16]
 800ce06:	b963      	cbnz	r3, 800ce22 <_svfiprintf_r+0x32>
 800ce08:	2140      	movs	r1, #64	; 0x40
 800ce0a:	f000 fae1 	bl	800d3d0 <_malloc_r>
 800ce0e:	6028      	str	r0, [r5, #0]
 800ce10:	6128      	str	r0, [r5, #16]
 800ce12:	b920      	cbnz	r0, 800ce1e <_svfiprintf_r+0x2e>
 800ce14:	230c      	movs	r3, #12
 800ce16:	603b      	str	r3, [r7, #0]
 800ce18:	f04f 30ff 	mov.w	r0, #4294967295
 800ce1c:	e0d1      	b.n	800cfc2 <_svfiprintf_r+0x1d2>
 800ce1e:	2340      	movs	r3, #64	; 0x40
 800ce20:	616b      	str	r3, [r5, #20]
 800ce22:	2300      	movs	r3, #0
 800ce24:	9309      	str	r3, [sp, #36]	; 0x24
 800ce26:	2320      	movs	r3, #32
 800ce28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce2c:	2330      	movs	r3, #48	; 0x30
 800ce2e:	f04f 0901 	mov.w	r9, #1
 800ce32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cfdc <_svfiprintf_r+0x1ec>
 800ce3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce3e:	4623      	mov	r3, r4
 800ce40:	469a      	mov	sl, r3
 800ce42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce46:	b10a      	cbz	r2, 800ce4c <_svfiprintf_r+0x5c>
 800ce48:	2a25      	cmp	r2, #37	; 0x25
 800ce4a:	d1f9      	bne.n	800ce40 <_svfiprintf_r+0x50>
 800ce4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce50:	d00b      	beq.n	800ce6a <_svfiprintf_r+0x7a>
 800ce52:	465b      	mov	r3, fp
 800ce54:	4622      	mov	r2, r4
 800ce56:	4629      	mov	r1, r5
 800ce58:	4638      	mov	r0, r7
 800ce5a:	f7ff ff6d 	bl	800cd38 <__ssputs_r>
 800ce5e:	3001      	adds	r0, #1
 800ce60:	f000 80aa 	beq.w	800cfb8 <_svfiprintf_r+0x1c8>
 800ce64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce66:	445a      	add	r2, fp
 800ce68:	9209      	str	r2, [sp, #36]	; 0x24
 800ce6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f000 80a2 	beq.w	800cfb8 <_svfiprintf_r+0x1c8>
 800ce74:	2300      	movs	r3, #0
 800ce76:	f04f 32ff 	mov.w	r2, #4294967295
 800ce7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce7e:	f10a 0a01 	add.w	sl, sl, #1
 800ce82:	9304      	str	r3, [sp, #16]
 800ce84:	9307      	str	r3, [sp, #28]
 800ce86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce8a:	931a      	str	r3, [sp, #104]	; 0x68
 800ce8c:	4654      	mov	r4, sl
 800ce8e:	2205      	movs	r2, #5
 800ce90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce94:	4851      	ldr	r0, [pc, #324]	; (800cfdc <_svfiprintf_r+0x1ec>)
 800ce96:	f000 fa41 	bl	800d31c <memchr>
 800ce9a:	9a04      	ldr	r2, [sp, #16]
 800ce9c:	b9d8      	cbnz	r0, 800ced6 <_svfiprintf_r+0xe6>
 800ce9e:	06d0      	lsls	r0, r2, #27
 800cea0:	bf44      	itt	mi
 800cea2:	2320      	movmi	r3, #32
 800cea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cea8:	0711      	lsls	r1, r2, #28
 800ceaa:	bf44      	itt	mi
 800ceac:	232b      	movmi	r3, #43	; 0x2b
 800ceae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceb2:	f89a 3000 	ldrb.w	r3, [sl]
 800ceb6:	2b2a      	cmp	r3, #42	; 0x2a
 800ceb8:	d015      	beq.n	800cee6 <_svfiprintf_r+0xf6>
 800ceba:	4654      	mov	r4, sl
 800cebc:	2000      	movs	r0, #0
 800cebe:	f04f 0c0a 	mov.w	ip, #10
 800cec2:	9a07      	ldr	r2, [sp, #28]
 800cec4:	4621      	mov	r1, r4
 800cec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceca:	3b30      	subs	r3, #48	; 0x30
 800cecc:	2b09      	cmp	r3, #9
 800cece:	d94e      	bls.n	800cf6e <_svfiprintf_r+0x17e>
 800ced0:	b1b0      	cbz	r0, 800cf00 <_svfiprintf_r+0x110>
 800ced2:	9207      	str	r2, [sp, #28]
 800ced4:	e014      	b.n	800cf00 <_svfiprintf_r+0x110>
 800ced6:	eba0 0308 	sub.w	r3, r0, r8
 800ceda:	fa09 f303 	lsl.w	r3, r9, r3
 800cede:	4313      	orrs	r3, r2
 800cee0:	46a2      	mov	sl, r4
 800cee2:	9304      	str	r3, [sp, #16]
 800cee4:	e7d2      	b.n	800ce8c <_svfiprintf_r+0x9c>
 800cee6:	9b03      	ldr	r3, [sp, #12]
 800cee8:	1d19      	adds	r1, r3, #4
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	9103      	str	r1, [sp, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	bfbb      	ittet	lt
 800cef2:	425b      	neglt	r3, r3
 800cef4:	f042 0202 	orrlt.w	r2, r2, #2
 800cef8:	9307      	strge	r3, [sp, #28]
 800cefa:	9307      	strlt	r3, [sp, #28]
 800cefc:	bfb8      	it	lt
 800cefe:	9204      	strlt	r2, [sp, #16]
 800cf00:	7823      	ldrb	r3, [r4, #0]
 800cf02:	2b2e      	cmp	r3, #46	; 0x2e
 800cf04:	d10c      	bne.n	800cf20 <_svfiprintf_r+0x130>
 800cf06:	7863      	ldrb	r3, [r4, #1]
 800cf08:	2b2a      	cmp	r3, #42	; 0x2a
 800cf0a:	d135      	bne.n	800cf78 <_svfiprintf_r+0x188>
 800cf0c:	9b03      	ldr	r3, [sp, #12]
 800cf0e:	3402      	adds	r4, #2
 800cf10:	1d1a      	adds	r2, r3, #4
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	9203      	str	r2, [sp, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	bfb8      	it	lt
 800cf1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf1e:	9305      	str	r3, [sp, #20]
 800cf20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cfec <_svfiprintf_r+0x1fc>
 800cf24:	2203      	movs	r2, #3
 800cf26:	4650      	mov	r0, sl
 800cf28:	7821      	ldrb	r1, [r4, #0]
 800cf2a:	f000 f9f7 	bl	800d31c <memchr>
 800cf2e:	b140      	cbz	r0, 800cf42 <_svfiprintf_r+0x152>
 800cf30:	2340      	movs	r3, #64	; 0x40
 800cf32:	eba0 000a 	sub.w	r0, r0, sl
 800cf36:	fa03 f000 	lsl.w	r0, r3, r0
 800cf3a:	9b04      	ldr	r3, [sp, #16]
 800cf3c:	3401      	adds	r4, #1
 800cf3e:	4303      	orrs	r3, r0
 800cf40:	9304      	str	r3, [sp, #16]
 800cf42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf46:	2206      	movs	r2, #6
 800cf48:	4825      	ldr	r0, [pc, #148]	; (800cfe0 <_svfiprintf_r+0x1f0>)
 800cf4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf4e:	f000 f9e5 	bl	800d31c <memchr>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d038      	beq.n	800cfc8 <_svfiprintf_r+0x1d8>
 800cf56:	4b23      	ldr	r3, [pc, #140]	; (800cfe4 <_svfiprintf_r+0x1f4>)
 800cf58:	bb1b      	cbnz	r3, 800cfa2 <_svfiprintf_r+0x1b2>
 800cf5a:	9b03      	ldr	r3, [sp, #12]
 800cf5c:	3307      	adds	r3, #7
 800cf5e:	f023 0307 	bic.w	r3, r3, #7
 800cf62:	3308      	adds	r3, #8
 800cf64:	9303      	str	r3, [sp, #12]
 800cf66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf68:	4433      	add	r3, r6
 800cf6a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf6c:	e767      	b.n	800ce3e <_svfiprintf_r+0x4e>
 800cf6e:	460c      	mov	r4, r1
 800cf70:	2001      	movs	r0, #1
 800cf72:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf76:	e7a5      	b.n	800cec4 <_svfiprintf_r+0xd4>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f04f 0c0a 	mov.w	ip, #10
 800cf7e:	4619      	mov	r1, r3
 800cf80:	3401      	adds	r4, #1
 800cf82:	9305      	str	r3, [sp, #20]
 800cf84:	4620      	mov	r0, r4
 800cf86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf8a:	3a30      	subs	r2, #48	; 0x30
 800cf8c:	2a09      	cmp	r2, #9
 800cf8e:	d903      	bls.n	800cf98 <_svfiprintf_r+0x1a8>
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d0c5      	beq.n	800cf20 <_svfiprintf_r+0x130>
 800cf94:	9105      	str	r1, [sp, #20]
 800cf96:	e7c3      	b.n	800cf20 <_svfiprintf_r+0x130>
 800cf98:	4604      	mov	r4, r0
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfa0:	e7f0      	b.n	800cf84 <_svfiprintf_r+0x194>
 800cfa2:	ab03      	add	r3, sp, #12
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	462a      	mov	r2, r5
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	4b0f      	ldr	r3, [pc, #60]	; (800cfe8 <_svfiprintf_r+0x1f8>)
 800cfac:	a904      	add	r1, sp, #16
 800cfae:	f3af 8000 	nop.w
 800cfb2:	1c42      	adds	r2, r0, #1
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	d1d6      	bne.n	800cf66 <_svfiprintf_r+0x176>
 800cfb8:	89ab      	ldrh	r3, [r5, #12]
 800cfba:	065b      	lsls	r3, r3, #25
 800cfbc:	f53f af2c 	bmi.w	800ce18 <_svfiprintf_r+0x28>
 800cfc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfc2:	b01d      	add	sp, #116	; 0x74
 800cfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc8:	ab03      	add	r3, sp, #12
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	462a      	mov	r2, r5
 800cfce:	4638      	mov	r0, r7
 800cfd0:	4b05      	ldr	r3, [pc, #20]	; (800cfe8 <_svfiprintf_r+0x1f8>)
 800cfd2:	a904      	add	r1, sp, #16
 800cfd4:	f000 f87c 	bl	800d0d0 <_printf_i>
 800cfd8:	e7eb      	b.n	800cfb2 <_svfiprintf_r+0x1c2>
 800cfda:	bf00      	nop
 800cfdc:	0800dcb2 	.word	0x0800dcb2
 800cfe0:	0800dcbc 	.word	0x0800dcbc
 800cfe4:	00000000 	.word	0x00000000
 800cfe8:	0800cd39 	.word	0x0800cd39
 800cfec:	0800dcb8 	.word	0x0800dcb8

0800cff0 <_printf_common>:
 800cff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff4:	4616      	mov	r6, r2
 800cff6:	4699      	mov	r9, r3
 800cff8:	688a      	ldr	r2, [r1, #8]
 800cffa:	690b      	ldr	r3, [r1, #16]
 800cffc:	4607      	mov	r7, r0
 800cffe:	4293      	cmp	r3, r2
 800d000:	bfb8      	it	lt
 800d002:	4613      	movlt	r3, r2
 800d004:	6033      	str	r3, [r6, #0]
 800d006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d00a:	460c      	mov	r4, r1
 800d00c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d010:	b10a      	cbz	r2, 800d016 <_printf_common+0x26>
 800d012:	3301      	adds	r3, #1
 800d014:	6033      	str	r3, [r6, #0]
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	0699      	lsls	r1, r3, #26
 800d01a:	bf42      	ittt	mi
 800d01c:	6833      	ldrmi	r3, [r6, #0]
 800d01e:	3302      	addmi	r3, #2
 800d020:	6033      	strmi	r3, [r6, #0]
 800d022:	6825      	ldr	r5, [r4, #0]
 800d024:	f015 0506 	ands.w	r5, r5, #6
 800d028:	d106      	bne.n	800d038 <_printf_common+0x48>
 800d02a:	f104 0a19 	add.w	sl, r4, #25
 800d02e:	68e3      	ldr	r3, [r4, #12]
 800d030:	6832      	ldr	r2, [r6, #0]
 800d032:	1a9b      	subs	r3, r3, r2
 800d034:	42ab      	cmp	r3, r5
 800d036:	dc28      	bgt.n	800d08a <_printf_common+0x9a>
 800d038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d03c:	1e13      	subs	r3, r2, #0
 800d03e:	6822      	ldr	r2, [r4, #0]
 800d040:	bf18      	it	ne
 800d042:	2301      	movne	r3, #1
 800d044:	0692      	lsls	r2, r2, #26
 800d046:	d42d      	bmi.n	800d0a4 <_printf_common+0xb4>
 800d048:	4649      	mov	r1, r9
 800d04a:	4638      	mov	r0, r7
 800d04c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d050:	47c0      	blx	r8
 800d052:	3001      	adds	r0, #1
 800d054:	d020      	beq.n	800d098 <_printf_common+0xa8>
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	68e5      	ldr	r5, [r4, #12]
 800d05a:	f003 0306 	and.w	r3, r3, #6
 800d05e:	2b04      	cmp	r3, #4
 800d060:	bf18      	it	ne
 800d062:	2500      	movne	r5, #0
 800d064:	6832      	ldr	r2, [r6, #0]
 800d066:	f04f 0600 	mov.w	r6, #0
 800d06a:	68a3      	ldr	r3, [r4, #8]
 800d06c:	bf08      	it	eq
 800d06e:	1aad      	subeq	r5, r5, r2
 800d070:	6922      	ldr	r2, [r4, #16]
 800d072:	bf08      	it	eq
 800d074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d078:	4293      	cmp	r3, r2
 800d07a:	bfc4      	itt	gt
 800d07c:	1a9b      	subgt	r3, r3, r2
 800d07e:	18ed      	addgt	r5, r5, r3
 800d080:	341a      	adds	r4, #26
 800d082:	42b5      	cmp	r5, r6
 800d084:	d11a      	bne.n	800d0bc <_printf_common+0xcc>
 800d086:	2000      	movs	r0, #0
 800d088:	e008      	b.n	800d09c <_printf_common+0xac>
 800d08a:	2301      	movs	r3, #1
 800d08c:	4652      	mov	r2, sl
 800d08e:	4649      	mov	r1, r9
 800d090:	4638      	mov	r0, r7
 800d092:	47c0      	blx	r8
 800d094:	3001      	adds	r0, #1
 800d096:	d103      	bne.n	800d0a0 <_printf_common+0xb0>
 800d098:	f04f 30ff 	mov.w	r0, #4294967295
 800d09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a0:	3501      	adds	r5, #1
 800d0a2:	e7c4      	b.n	800d02e <_printf_common+0x3e>
 800d0a4:	2030      	movs	r0, #48	; 0x30
 800d0a6:	18e1      	adds	r1, r4, r3
 800d0a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0b2:	4422      	add	r2, r4
 800d0b4:	3302      	adds	r3, #2
 800d0b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0ba:	e7c5      	b.n	800d048 <_printf_common+0x58>
 800d0bc:	2301      	movs	r3, #1
 800d0be:	4622      	mov	r2, r4
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	47c0      	blx	r8
 800d0c6:	3001      	adds	r0, #1
 800d0c8:	d0e6      	beq.n	800d098 <_printf_common+0xa8>
 800d0ca:	3601      	adds	r6, #1
 800d0cc:	e7d9      	b.n	800d082 <_printf_common+0x92>
	...

0800d0d0 <_printf_i>:
 800d0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	7e27      	ldrb	r7, [r4, #24]
 800d0d8:	4691      	mov	r9, r2
 800d0da:	2f78      	cmp	r7, #120	; 0x78
 800d0dc:	4680      	mov	r8, r0
 800d0de:	469a      	mov	sl, r3
 800d0e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d0e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0e6:	d807      	bhi.n	800d0f8 <_printf_i+0x28>
 800d0e8:	2f62      	cmp	r7, #98	; 0x62
 800d0ea:	d80a      	bhi.n	800d102 <_printf_i+0x32>
 800d0ec:	2f00      	cmp	r7, #0
 800d0ee:	f000 80d9 	beq.w	800d2a4 <_printf_i+0x1d4>
 800d0f2:	2f58      	cmp	r7, #88	; 0x58
 800d0f4:	f000 80a4 	beq.w	800d240 <_printf_i+0x170>
 800d0f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d0fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d100:	e03a      	b.n	800d178 <_printf_i+0xa8>
 800d102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d106:	2b15      	cmp	r3, #21
 800d108:	d8f6      	bhi.n	800d0f8 <_printf_i+0x28>
 800d10a:	a001      	add	r0, pc, #4	; (adr r0, 800d110 <_printf_i+0x40>)
 800d10c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d110:	0800d169 	.word	0x0800d169
 800d114:	0800d17d 	.word	0x0800d17d
 800d118:	0800d0f9 	.word	0x0800d0f9
 800d11c:	0800d0f9 	.word	0x0800d0f9
 800d120:	0800d0f9 	.word	0x0800d0f9
 800d124:	0800d0f9 	.word	0x0800d0f9
 800d128:	0800d17d 	.word	0x0800d17d
 800d12c:	0800d0f9 	.word	0x0800d0f9
 800d130:	0800d0f9 	.word	0x0800d0f9
 800d134:	0800d0f9 	.word	0x0800d0f9
 800d138:	0800d0f9 	.word	0x0800d0f9
 800d13c:	0800d28b 	.word	0x0800d28b
 800d140:	0800d1ad 	.word	0x0800d1ad
 800d144:	0800d26d 	.word	0x0800d26d
 800d148:	0800d0f9 	.word	0x0800d0f9
 800d14c:	0800d0f9 	.word	0x0800d0f9
 800d150:	0800d2ad 	.word	0x0800d2ad
 800d154:	0800d0f9 	.word	0x0800d0f9
 800d158:	0800d1ad 	.word	0x0800d1ad
 800d15c:	0800d0f9 	.word	0x0800d0f9
 800d160:	0800d0f9 	.word	0x0800d0f9
 800d164:	0800d275 	.word	0x0800d275
 800d168:	680b      	ldr	r3, [r1, #0]
 800d16a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d16e:	1d1a      	adds	r2, r3, #4
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	600a      	str	r2, [r1, #0]
 800d174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d178:	2301      	movs	r3, #1
 800d17a:	e0a4      	b.n	800d2c6 <_printf_i+0x1f6>
 800d17c:	6825      	ldr	r5, [r4, #0]
 800d17e:	6808      	ldr	r0, [r1, #0]
 800d180:	062e      	lsls	r6, r5, #24
 800d182:	f100 0304 	add.w	r3, r0, #4
 800d186:	d50a      	bpl.n	800d19e <_printf_i+0xce>
 800d188:	6805      	ldr	r5, [r0, #0]
 800d18a:	600b      	str	r3, [r1, #0]
 800d18c:	2d00      	cmp	r5, #0
 800d18e:	da03      	bge.n	800d198 <_printf_i+0xc8>
 800d190:	232d      	movs	r3, #45	; 0x2d
 800d192:	426d      	negs	r5, r5
 800d194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d198:	230a      	movs	r3, #10
 800d19a:	485e      	ldr	r0, [pc, #376]	; (800d314 <_printf_i+0x244>)
 800d19c:	e019      	b.n	800d1d2 <_printf_i+0x102>
 800d19e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d1a2:	6805      	ldr	r5, [r0, #0]
 800d1a4:	600b      	str	r3, [r1, #0]
 800d1a6:	bf18      	it	ne
 800d1a8:	b22d      	sxthne	r5, r5
 800d1aa:	e7ef      	b.n	800d18c <_printf_i+0xbc>
 800d1ac:	680b      	ldr	r3, [r1, #0]
 800d1ae:	6825      	ldr	r5, [r4, #0]
 800d1b0:	1d18      	adds	r0, r3, #4
 800d1b2:	6008      	str	r0, [r1, #0]
 800d1b4:	0628      	lsls	r0, r5, #24
 800d1b6:	d501      	bpl.n	800d1bc <_printf_i+0xec>
 800d1b8:	681d      	ldr	r5, [r3, #0]
 800d1ba:	e002      	b.n	800d1c2 <_printf_i+0xf2>
 800d1bc:	0669      	lsls	r1, r5, #25
 800d1be:	d5fb      	bpl.n	800d1b8 <_printf_i+0xe8>
 800d1c0:	881d      	ldrh	r5, [r3, #0]
 800d1c2:	2f6f      	cmp	r7, #111	; 0x6f
 800d1c4:	bf0c      	ite	eq
 800d1c6:	2308      	moveq	r3, #8
 800d1c8:	230a      	movne	r3, #10
 800d1ca:	4852      	ldr	r0, [pc, #328]	; (800d314 <_printf_i+0x244>)
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1d2:	6866      	ldr	r6, [r4, #4]
 800d1d4:	2e00      	cmp	r6, #0
 800d1d6:	bfa8      	it	ge
 800d1d8:	6821      	ldrge	r1, [r4, #0]
 800d1da:	60a6      	str	r6, [r4, #8]
 800d1dc:	bfa4      	itt	ge
 800d1de:	f021 0104 	bicge.w	r1, r1, #4
 800d1e2:	6021      	strge	r1, [r4, #0]
 800d1e4:	b90d      	cbnz	r5, 800d1ea <_printf_i+0x11a>
 800d1e6:	2e00      	cmp	r6, #0
 800d1e8:	d04d      	beq.n	800d286 <_printf_i+0x1b6>
 800d1ea:	4616      	mov	r6, r2
 800d1ec:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1f0:	fb03 5711 	mls	r7, r3, r1, r5
 800d1f4:	5dc7      	ldrb	r7, [r0, r7]
 800d1f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1fa:	462f      	mov	r7, r5
 800d1fc:	42bb      	cmp	r3, r7
 800d1fe:	460d      	mov	r5, r1
 800d200:	d9f4      	bls.n	800d1ec <_printf_i+0x11c>
 800d202:	2b08      	cmp	r3, #8
 800d204:	d10b      	bne.n	800d21e <_printf_i+0x14e>
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	07df      	lsls	r7, r3, #31
 800d20a:	d508      	bpl.n	800d21e <_printf_i+0x14e>
 800d20c:	6923      	ldr	r3, [r4, #16]
 800d20e:	6861      	ldr	r1, [r4, #4]
 800d210:	4299      	cmp	r1, r3
 800d212:	bfde      	ittt	le
 800d214:	2330      	movle	r3, #48	; 0x30
 800d216:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d21a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d21e:	1b92      	subs	r2, r2, r6
 800d220:	6122      	str	r2, [r4, #16]
 800d222:	464b      	mov	r3, r9
 800d224:	4621      	mov	r1, r4
 800d226:	4640      	mov	r0, r8
 800d228:	f8cd a000 	str.w	sl, [sp]
 800d22c:	aa03      	add	r2, sp, #12
 800d22e:	f7ff fedf 	bl	800cff0 <_printf_common>
 800d232:	3001      	adds	r0, #1
 800d234:	d14c      	bne.n	800d2d0 <_printf_i+0x200>
 800d236:	f04f 30ff 	mov.w	r0, #4294967295
 800d23a:	b004      	add	sp, #16
 800d23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d240:	4834      	ldr	r0, [pc, #208]	; (800d314 <_printf_i+0x244>)
 800d242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d246:	680e      	ldr	r6, [r1, #0]
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d24e:	061f      	lsls	r7, r3, #24
 800d250:	600e      	str	r6, [r1, #0]
 800d252:	d514      	bpl.n	800d27e <_printf_i+0x1ae>
 800d254:	07d9      	lsls	r1, r3, #31
 800d256:	bf44      	itt	mi
 800d258:	f043 0320 	orrmi.w	r3, r3, #32
 800d25c:	6023      	strmi	r3, [r4, #0]
 800d25e:	b91d      	cbnz	r5, 800d268 <_printf_i+0x198>
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	f023 0320 	bic.w	r3, r3, #32
 800d266:	6023      	str	r3, [r4, #0]
 800d268:	2310      	movs	r3, #16
 800d26a:	e7af      	b.n	800d1cc <_printf_i+0xfc>
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	f043 0320 	orr.w	r3, r3, #32
 800d272:	6023      	str	r3, [r4, #0]
 800d274:	2378      	movs	r3, #120	; 0x78
 800d276:	4828      	ldr	r0, [pc, #160]	; (800d318 <_printf_i+0x248>)
 800d278:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d27c:	e7e3      	b.n	800d246 <_printf_i+0x176>
 800d27e:	065e      	lsls	r6, r3, #25
 800d280:	bf48      	it	mi
 800d282:	b2ad      	uxthmi	r5, r5
 800d284:	e7e6      	b.n	800d254 <_printf_i+0x184>
 800d286:	4616      	mov	r6, r2
 800d288:	e7bb      	b.n	800d202 <_printf_i+0x132>
 800d28a:	680b      	ldr	r3, [r1, #0]
 800d28c:	6826      	ldr	r6, [r4, #0]
 800d28e:	1d1d      	adds	r5, r3, #4
 800d290:	6960      	ldr	r0, [r4, #20]
 800d292:	600d      	str	r5, [r1, #0]
 800d294:	0635      	lsls	r5, r6, #24
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	d501      	bpl.n	800d29e <_printf_i+0x1ce>
 800d29a:	6018      	str	r0, [r3, #0]
 800d29c:	e002      	b.n	800d2a4 <_printf_i+0x1d4>
 800d29e:	0671      	lsls	r1, r6, #25
 800d2a0:	d5fb      	bpl.n	800d29a <_printf_i+0x1ca>
 800d2a2:	8018      	strh	r0, [r3, #0]
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	4616      	mov	r6, r2
 800d2a8:	6123      	str	r3, [r4, #16]
 800d2aa:	e7ba      	b.n	800d222 <_printf_i+0x152>
 800d2ac:	680b      	ldr	r3, [r1, #0]
 800d2ae:	1d1a      	adds	r2, r3, #4
 800d2b0:	600a      	str	r2, [r1, #0]
 800d2b2:	681e      	ldr	r6, [r3, #0]
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	6862      	ldr	r2, [r4, #4]
 800d2ba:	f000 f82f 	bl	800d31c <memchr>
 800d2be:	b108      	cbz	r0, 800d2c4 <_printf_i+0x1f4>
 800d2c0:	1b80      	subs	r0, r0, r6
 800d2c2:	6060      	str	r0, [r4, #4]
 800d2c4:	6863      	ldr	r3, [r4, #4]
 800d2c6:	6123      	str	r3, [r4, #16]
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2ce:	e7a8      	b.n	800d222 <_printf_i+0x152>
 800d2d0:	4632      	mov	r2, r6
 800d2d2:	4649      	mov	r1, r9
 800d2d4:	4640      	mov	r0, r8
 800d2d6:	6923      	ldr	r3, [r4, #16]
 800d2d8:	47d0      	blx	sl
 800d2da:	3001      	adds	r0, #1
 800d2dc:	d0ab      	beq.n	800d236 <_printf_i+0x166>
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	079b      	lsls	r3, r3, #30
 800d2e2:	d413      	bmi.n	800d30c <_printf_i+0x23c>
 800d2e4:	68e0      	ldr	r0, [r4, #12]
 800d2e6:	9b03      	ldr	r3, [sp, #12]
 800d2e8:	4298      	cmp	r0, r3
 800d2ea:	bfb8      	it	lt
 800d2ec:	4618      	movlt	r0, r3
 800d2ee:	e7a4      	b.n	800d23a <_printf_i+0x16a>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	4649      	mov	r1, r9
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	47d0      	blx	sl
 800d2fa:	3001      	adds	r0, #1
 800d2fc:	d09b      	beq.n	800d236 <_printf_i+0x166>
 800d2fe:	3501      	adds	r5, #1
 800d300:	68e3      	ldr	r3, [r4, #12]
 800d302:	9903      	ldr	r1, [sp, #12]
 800d304:	1a5b      	subs	r3, r3, r1
 800d306:	42ab      	cmp	r3, r5
 800d308:	dcf2      	bgt.n	800d2f0 <_printf_i+0x220>
 800d30a:	e7eb      	b.n	800d2e4 <_printf_i+0x214>
 800d30c:	2500      	movs	r5, #0
 800d30e:	f104 0619 	add.w	r6, r4, #25
 800d312:	e7f5      	b.n	800d300 <_printf_i+0x230>
 800d314:	0800dcc3 	.word	0x0800dcc3
 800d318:	0800dcd4 	.word	0x0800dcd4

0800d31c <memchr>:
 800d31c:	4603      	mov	r3, r0
 800d31e:	b510      	push	{r4, lr}
 800d320:	b2c9      	uxtb	r1, r1
 800d322:	4402      	add	r2, r0
 800d324:	4293      	cmp	r3, r2
 800d326:	4618      	mov	r0, r3
 800d328:	d101      	bne.n	800d32e <memchr+0x12>
 800d32a:	2000      	movs	r0, #0
 800d32c:	e003      	b.n	800d336 <memchr+0x1a>
 800d32e:	7804      	ldrb	r4, [r0, #0]
 800d330:	3301      	adds	r3, #1
 800d332:	428c      	cmp	r4, r1
 800d334:	d1f6      	bne.n	800d324 <memchr+0x8>
 800d336:	bd10      	pop	{r4, pc}

0800d338 <_free_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4605      	mov	r5, r0
 800d33c:	2900      	cmp	r1, #0
 800d33e:	d043      	beq.n	800d3c8 <_free_r+0x90>
 800d340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d344:	1f0c      	subs	r4, r1, #4
 800d346:	2b00      	cmp	r3, #0
 800d348:	bfb8      	it	lt
 800d34a:	18e4      	addlt	r4, r4, r3
 800d34c:	f000 f8d0 	bl	800d4f0 <__malloc_lock>
 800d350:	4a1e      	ldr	r2, [pc, #120]	; (800d3cc <_free_r+0x94>)
 800d352:	6813      	ldr	r3, [r2, #0]
 800d354:	4610      	mov	r0, r2
 800d356:	b933      	cbnz	r3, 800d366 <_free_r+0x2e>
 800d358:	6063      	str	r3, [r4, #4]
 800d35a:	6014      	str	r4, [r2, #0]
 800d35c:	4628      	mov	r0, r5
 800d35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d362:	f000 b8cb 	b.w	800d4fc <__malloc_unlock>
 800d366:	42a3      	cmp	r3, r4
 800d368:	d90a      	bls.n	800d380 <_free_r+0x48>
 800d36a:	6821      	ldr	r1, [r4, #0]
 800d36c:	1862      	adds	r2, r4, r1
 800d36e:	4293      	cmp	r3, r2
 800d370:	bf01      	itttt	eq
 800d372:	681a      	ldreq	r2, [r3, #0]
 800d374:	685b      	ldreq	r3, [r3, #4]
 800d376:	1852      	addeq	r2, r2, r1
 800d378:	6022      	streq	r2, [r4, #0]
 800d37a:	6063      	str	r3, [r4, #4]
 800d37c:	6004      	str	r4, [r0, #0]
 800d37e:	e7ed      	b.n	800d35c <_free_r+0x24>
 800d380:	461a      	mov	r2, r3
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	b10b      	cbz	r3, 800d38a <_free_r+0x52>
 800d386:	42a3      	cmp	r3, r4
 800d388:	d9fa      	bls.n	800d380 <_free_r+0x48>
 800d38a:	6811      	ldr	r1, [r2, #0]
 800d38c:	1850      	adds	r0, r2, r1
 800d38e:	42a0      	cmp	r0, r4
 800d390:	d10b      	bne.n	800d3aa <_free_r+0x72>
 800d392:	6820      	ldr	r0, [r4, #0]
 800d394:	4401      	add	r1, r0
 800d396:	1850      	adds	r0, r2, r1
 800d398:	4283      	cmp	r3, r0
 800d39a:	6011      	str	r1, [r2, #0]
 800d39c:	d1de      	bne.n	800d35c <_free_r+0x24>
 800d39e:	6818      	ldr	r0, [r3, #0]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	4401      	add	r1, r0
 800d3a4:	6011      	str	r1, [r2, #0]
 800d3a6:	6053      	str	r3, [r2, #4]
 800d3a8:	e7d8      	b.n	800d35c <_free_r+0x24>
 800d3aa:	d902      	bls.n	800d3b2 <_free_r+0x7a>
 800d3ac:	230c      	movs	r3, #12
 800d3ae:	602b      	str	r3, [r5, #0]
 800d3b0:	e7d4      	b.n	800d35c <_free_r+0x24>
 800d3b2:	6820      	ldr	r0, [r4, #0]
 800d3b4:	1821      	adds	r1, r4, r0
 800d3b6:	428b      	cmp	r3, r1
 800d3b8:	bf01      	itttt	eq
 800d3ba:	6819      	ldreq	r1, [r3, #0]
 800d3bc:	685b      	ldreq	r3, [r3, #4]
 800d3be:	1809      	addeq	r1, r1, r0
 800d3c0:	6021      	streq	r1, [r4, #0]
 800d3c2:	6063      	str	r3, [r4, #4]
 800d3c4:	6054      	str	r4, [r2, #4]
 800d3c6:	e7c9      	b.n	800d35c <_free_r+0x24>
 800d3c8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20000464 	.word	0x20000464

0800d3d0 <_malloc_r>:
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	1ccd      	adds	r5, r1, #3
 800d3d4:	f025 0503 	bic.w	r5, r5, #3
 800d3d8:	3508      	adds	r5, #8
 800d3da:	2d0c      	cmp	r5, #12
 800d3dc:	bf38      	it	cc
 800d3de:	250c      	movcc	r5, #12
 800d3e0:	2d00      	cmp	r5, #0
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	db01      	blt.n	800d3ea <_malloc_r+0x1a>
 800d3e6:	42a9      	cmp	r1, r5
 800d3e8:	d903      	bls.n	800d3f2 <_malloc_r+0x22>
 800d3ea:	230c      	movs	r3, #12
 800d3ec:	6033      	str	r3, [r6, #0]
 800d3ee:	2000      	movs	r0, #0
 800d3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3f2:	f000 f87d 	bl	800d4f0 <__malloc_lock>
 800d3f6:	4921      	ldr	r1, [pc, #132]	; (800d47c <_malloc_r+0xac>)
 800d3f8:	680a      	ldr	r2, [r1, #0]
 800d3fa:	4614      	mov	r4, r2
 800d3fc:	b99c      	cbnz	r4, 800d426 <_malloc_r+0x56>
 800d3fe:	4f20      	ldr	r7, [pc, #128]	; (800d480 <_malloc_r+0xb0>)
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	b923      	cbnz	r3, 800d40e <_malloc_r+0x3e>
 800d404:	4621      	mov	r1, r4
 800d406:	4630      	mov	r0, r6
 800d408:	f000 f862 	bl	800d4d0 <_sbrk_r>
 800d40c:	6038      	str	r0, [r7, #0]
 800d40e:	4629      	mov	r1, r5
 800d410:	4630      	mov	r0, r6
 800d412:	f000 f85d 	bl	800d4d0 <_sbrk_r>
 800d416:	1c43      	adds	r3, r0, #1
 800d418:	d123      	bne.n	800d462 <_malloc_r+0x92>
 800d41a:	230c      	movs	r3, #12
 800d41c:	4630      	mov	r0, r6
 800d41e:	6033      	str	r3, [r6, #0]
 800d420:	f000 f86c 	bl	800d4fc <__malloc_unlock>
 800d424:	e7e3      	b.n	800d3ee <_malloc_r+0x1e>
 800d426:	6823      	ldr	r3, [r4, #0]
 800d428:	1b5b      	subs	r3, r3, r5
 800d42a:	d417      	bmi.n	800d45c <_malloc_r+0x8c>
 800d42c:	2b0b      	cmp	r3, #11
 800d42e:	d903      	bls.n	800d438 <_malloc_r+0x68>
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	441c      	add	r4, r3
 800d434:	6025      	str	r5, [r4, #0]
 800d436:	e004      	b.n	800d442 <_malloc_r+0x72>
 800d438:	6863      	ldr	r3, [r4, #4]
 800d43a:	42a2      	cmp	r2, r4
 800d43c:	bf0c      	ite	eq
 800d43e:	600b      	streq	r3, [r1, #0]
 800d440:	6053      	strne	r3, [r2, #4]
 800d442:	4630      	mov	r0, r6
 800d444:	f000 f85a 	bl	800d4fc <__malloc_unlock>
 800d448:	f104 000b 	add.w	r0, r4, #11
 800d44c:	1d23      	adds	r3, r4, #4
 800d44e:	f020 0007 	bic.w	r0, r0, #7
 800d452:	1ac2      	subs	r2, r0, r3
 800d454:	d0cc      	beq.n	800d3f0 <_malloc_r+0x20>
 800d456:	1a1b      	subs	r3, r3, r0
 800d458:	50a3      	str	r3, [r4, r2]
 800d45a:	e7c9      	b.n	800d3f0 <_malloc_r+0x20>
 800d45c:	4622      	mov	r2, r4
 800d45e:	6864      	ldr	r4, [r4, #4]
 800d460:	e7cc      	b.n	800d3fc <_malloc_r+0x2c>
 800d462:	1cc4      	adds	r4, r0, #3
 800d464:	f024 0403 	bic.w	r4, r4, #3
 800d468:	42a0      	cmp	r0, r4
 800d46a:	d0e3      	beq.n	800d434 <_malloc_r+0x64>
 800d46c:	1a21      	subs	r1, r4, r0
 800d46e:	4630      	mov	r0, r6
 800d470:	f000 f82e 	bl	800d4d0 <_sbrk_r>
 800d474:	3001      	adds	r0, #1
 800d476:	d1dd      	bne.n	800d434 <_malloc_r+0x64>
 800d478:	e7cf      	b.n	800d41a <_malloc_r+0x4a>
 800d47a:	bf00      	nop
 800d47c:	20000464 	.word	0x20000464
 800d480:	20000468 	.word	0x20000468

0800d484 <_realloc_r>:
 800d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d486:	4607      	mov	r7, r0
 800d488:	4614      	mov	r4, r2
 800d48a:	460e      	mov	r6, r1
 800d48c:	b921      	cbnz	r1, 800d498 <_realloc_r+0x14>
 800d48e:	4611      	mov	r1, r2
 800d490:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d494:	f7ff bf9c 	b.w	800d3d0 <_malloc_r>
 800d498:	b922      	cbnz	r2, 800d4a4 <_realloc_r+0x20>
 800d49a:	f7ff ff4d 	bl	800d338 <_free_r>
 800d49e:	4625      	mov	r5, r4
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4a4:	f000 f830 	bl	800d508 <_malloc_usable_size_r>
 800d4a8:	42a0      	cmp	r0, r4
 800d4aa:	d20f      	bcs.n	800d4cc <_realloc_r+0x48>
 800d4ac:	4621      	mov	r1, r4
 800d4ae:	4638      	mov	r0, r7
 800d4b0:	f7ff ff8e 	bl	800d3d0 <_malloc_r>
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d0f2      	beq.n	800d4a0 <_realloc_r+0x1c>
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4622      	mov	r2, r4
 800d4be:	f7ff fba9 	bl	800cc14 <memcpy>
 800d4c2:	4631      	mov	r1, r6
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	f7ff ff37 	bl	800d338 <_free_r>
 800d4ca:	e7e9      	b.n	800d4a0 <_realloc_r+0x1c>
 800d4cc:	4635      	mov	r5, r6
 800d4ce:	e7e7      	b.n	800d4a0 <_realloc_r+0x1c>

0800d4d0 <_sbrk_r>:
 800d4d0:	b538      	push	{r3, r4, r5, lr}
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	4d05      	ldr	r5, [pc, #20]	; (800d4ec <_sbrk_r+0x1c>)
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	4608      	mov	r0, r1
 800d4da:	602b      	str	r3, [r5, #0]
 800d4dc:	f7f6 ff3e 	bl	800435c <_sbrk>
 800d4e0:	1c43      	adds	r3, r0, #1
 800d4e2:	d102      	bne.n	800d4ea <_sbrk_r+0x1a>
 800d4e4:	682b      	ldr	r3, [r5, #0]
 800d4e6:	b103      	cbz	r3, 800d4ea <_sbrk_r+0x1a>
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	bd38      	pop	{r3, r4, r5, pc}
 800d4ec:	20001844 	.word	0x20001844

0800d4f0 <__malloc_lock>:
 800d4f0:	4801      	ldr	r0, [pc, #4]	; (800d4f8 <__malloc_lock+0x8>)
 800d4f2:	f000 b811 	b.w	800d518 <__retarget_lock_acquire_recursive>
 800d4f6:	bf00      	nop
 800d4f8:	2000184c 	.word	0x2000184c

0800d4fc <__malloc_unlock>:
 800d4fc:	4801      	ldr	r0, [pc, #4]	; (800d504 <__malloc_unlock+0x8>)
 800d4fe:	f000 b80c 	b.w	800d51a <__retarget_lock_release_recursive>
 800d502:	bf00      	nop
 800d504:	2000184c 	.word	0x2000184c

0800d508 <_malloc_usable_size_r>:
 800d508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d50c:	1f18      	subs	r0, r3, #4
 800d50e:	2b00      	cmp	r3, #0
 800d510:	bfbc      	itt	lt
 800d512:	580b      	ldrlt	r3, [r1, r0]
 800d514:	18c0      	addlt	r0, r0, r3
 800d516:	4770      	bx	lr

0800d518 <__retarget_lock_acquire_recursive>:
 800d518:	4770      	bx	lr

0800d51a <__retarget_lock_release_recursive>:
 800d51a:	4770      	bx	lr

0800d51c <_init>:
 800d51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51e:	bf00      	nop
 800d520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d522:	bc08      	pop	{r3}
 800d524:	469e      	mov	lr, r3
 800d526:	4770      	bx	lr

0800d528 <_fini>:
 800d528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d52a:	bf00      	nop
 800d52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d52e:	bc08      	pop	{r3}
 800d530:	469e      	mov	lr, r3
 800d532:	4770      	bx	lr
