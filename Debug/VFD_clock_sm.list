
VFD_clock_sm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a6c  08007a6c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a6c  08007a6c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a6c  08007a6c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a6c  08007a6c  00017a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001378  2000017c  08007bf0  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014f4  08007bf0  000214f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cf5  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a0  00000000  00000000  00036e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0003a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  0003b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3bf  00000000  00000000  0003bf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001415b  00000000  00000000  0005631f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008918e  00000000  00000000  0006a47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3608  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d7c  00000000  00000000  000f365c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080079e4 	.word	0x080079e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080079e4 	.word	0x080079e4

0800014c <fifo_push>:
buff_t fifo_buffer[BUFF_SIZE];
uint32_t head_index = 0;
uint32_t tail_index = 0;

bool fifo_push(buff_t data)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if (fifo_length() >= BUFF_SIZE - 1)
 8000156:	f000 f859 	bl	800020c <fifo_length>
 800015a:	4603      	mov	r3, r0
 800015c:	2bfe      	cmp	r3, #254	; 0xfe
 800015e:	d901      	bls.n	8000164 <fifo_push+0x18>
		return 1; // too much data!
 8000160:	2301      	movs	r3, #1
 8000162:	e012      	b.n	800018a <fifo_push+0x3e>
	if (++tail_index == BUFF_SIZE)
 8000164:	4b0b      	ldr	r3, [pc, #44]	; (8000194 <fifo_push+0x48>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	3301      	adds	r3, #1
 800016a:	4a0a      	ldr	r2, [pc, #40]	; (8000194 <fifo_push+0x48>)
 800016c:	6013      	str	r3, [r2, #0]
 800016e:	4b09      	ldr	r3, [pc, #36]	; (8000194 <fifo_push+0x48>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000176:	d102      	bne.n	800017e <fifo_push+0x32>
		tail_index = 0;
 8000178:	4b06      	ldr	r3, [pc, #24]	; (8000194 <fifo_push+0x48>)
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
	fifo_buffer[tail_index] = data;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <fifo_push+0x48>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4905      	ldr	r1, [pc, #20]	; (8000198 <fifo_push+0x4c>)
 8000184:	79fa      	ldrb	r2, [r7, #7]
 8000186:	54ca      	strb	r2, [r1, r3]
	return 0;
 8000188:	2300      	movs	r3, #0
}
 800018a:	4618      	mov	r0, r3
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	2000019c 	.word	0x2000019c
 8000198:	200003c4 	.word	0x200003c4

0800019c <fifo_pop>:

buff_t fifo_pop(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	if (fifo_is_empty())
 80001a0:	f000 f820 	bl	80001e4 <fifo_is_empty>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d004      	beq.n	80001b4 <fifo_pop+0x18>
		return fifo_buffer[head_index]; // buffer is empty, return the last value
 80001aa:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <fifo_pop+0x40>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a0c      	ldr	r2, [pc, #48]	; (80001e0 <fifo_pop+0x44>)
 80001b0:	5cd3      	ldrb	r3, [r2, r3]
 80001b2:	e010      	b.n	80001d6 <fifo_pop+0x3a>
	if (++head_index == BUFF_SIZE)
 80001b4:	4b09      	ldr	r3, [pc, #36]	; (80001dc <fifo_pop+0x40>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	3301      	adds	r3, #1
 80001ba:	4a08      	ldr	r2, [pc, #32]	; (80001dc <fifo_pop+0x40>)
 80001bc:	6013      	str	r3, [r2, #0]
 80001be:	4b07      	ldr	r3, [pc, #28]	; (80001dc <fifo_pop+0x40>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c6:	d102      	bne.n	80001ce <fifo_pop+0x32>
		head_index = 0;
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <fifo_pop+0x40>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
	return fifo_buffer[head_index];
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <fifo_pop+0x40>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a03      	ldr	r2, [pc, #12]	; (80001e0 <fifo_pop+0x44>)
 80001d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000198 	.word	0x20000198
 80001e0:	200003c4 	.word	0x200003c4

080001e4 <fifo_is_empty>:

bool fifo_is_empty(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
	return head_index == tail_index;
 80001e8:	4b06      	ldr	r3, [pc, #24]	; (8000204 <fifo_is_empty+0x20>)
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <fifo_is_empty+0x24>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	bf0c      	ite	eq
 80001f4:	2301      	moveq	r3, #1
 80001f6:	2300      	movne	r3, #0
 80001f8:	b2db      	uxtb	r3, r3
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	20000198 	.word	0x20000198
 8000208:	2000019c 	.word	0x2000019c

0800020c <fifo_length>:

uint32_t fifo_length(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	if (tail_index >= head_index)
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <fifo_length+0x34>)
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <fifo_length+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	429a      	cmp	r2, r3
 800021a:	d305      	bcc.n	8000228 <fifo_length+0x1c>
		return tail_index - head_index;
 800021c:	4b08      	ldr	r3, [pc, #32]	; (8000240 <fifo_length+0x34>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <fifo_length+0x38>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	1ad3      	subs	r3, r2, r3
 8000226:	e006      	b.n	8000236 <fifo_length+0x2a>
	else
		return tail_index + BUFF_SIZE - head_index;
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <fifo_length+0x34>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b05      	ldr	r3, [pc, #20]	; (8000244 <fifo_length+0x38>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	1ad3      	subs	r3, r2, r3
 8000232:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
 8000236:	4618      	mov	r0, r3
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	2000019c 	.word	0x2000019c
 8000244:	20000198 	.word	0x20000198

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f000 fa9b 	bl	8000788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f823 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 f8e1 	bl	800041c <MX_GPIO_Init>
  MX_I2C1_Init();
 800025a:	f000 f87b 	bl	8000354 <MX_I2C1_Init>
  MX_SPI2_Init();
 800025e:	f000 f8a7 	bl	80003b0 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000262:	f006 fee5 	bl	8007030 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, 1); // we have initialized USB, pull it up!
 8000266:	2201      	movs	r2, #1
 8000268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800026c:	480a      	ldr	r0, [pc, #40]	; (8000298 <main+0x50>)
 800026e:	f000 fd7f 	bl	8000d70 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while (!fifo_is_empty())
 8000272:	e008      	b.n	8000286 <main+0x3e>
	  {
		  uint8_t buf = fifo_pop();
 8000274:	f7ff ff92 	bl	800019c <fifo_pop>
 8000278:	4603      	mov	r3, r0
 800027a:	71fb      	strb	r3, [r7, #7]
		  CDC_Transmit_FS(&buf, 1);
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	2101      	movs	r1, #1
 8000280:	4618      	mov	r0, r3
 8000282:	f006 ffa5 	bl	80071d0 <CDC_Transmit_FS>
	  while (!fifo_is_empty())
 8000286:	f7ff ffad 	bl	80001e4 <fifo_is_empty>
 800028a:	4603      	mov	r3, r0
 800028c:	f083 0301 	eor.w	r3, r3, #1
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b00      	cmp	r3, #0
 8000294:	d1ee      	bne.n	8000274 <main+0x2c>
 8000296:	e7f6      	b.n	8000286 <main+0x3e>
 8000298:	40010800 	.word	0x40010800

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b094      	sub	sp, #80	; 0x50
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f007 fb92 	bl	80079d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80002d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	2301      	movs	r3, #1
 80002de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e0:	2302      	movs	r3, #2
 80002e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 fb5d 	bl	80029b4 <HAL_RCC_OscConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000300:	f000 f922 	bl	8000548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	230f      	movs	r3, #15
 8000306:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000308:	2302      	movs	r3, #2
 800030a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000314:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031a:	f107 0314 	add.w	r3, r7, #20
 800031e:	2102      	movs	r1, #2
 8000320:	4618      	mov	r0, r3
 8000322:	f002 fdc7 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800032c:	f000 f90c 	bl	8000548 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000330:	2310      	movs	r3, #16
 8000332:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4618      	mov	r0, r3
 800033c:	f002 ff42 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000346:	f000 f8ff 	bl	8000548 <Error_Handler>
  }
}
 800034a:	bf00      	nop
 800034c:	3750      	adds	r7, #80	; 0x50
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_I2C1_Init+0x50>)
 800035a:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <MX_I2C1_Init+0x54>)
 800035c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000360:	4a12      	ldr	r2, [pc, #72]	; (80003ac <MX_I2C1_Init+0x58>)
 8000362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_I2C1_Init+0x50>)
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000372:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000376:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <MX_I2C1_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_I2C1_Init+0x50>)
 800038c:	2200      	movs	r2, #0
 800038e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_I2C1_Init+0x50>)
 8000392:	f000 fd05 	bl	8000da0 <HAL_I2C_Init>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800039c:	f000 f8d4 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	2000051c 	.word	0x2000051c
 80003a8:	40005400 	.word	0x40005400
 80003ac:	000186a0 	.word	0x000186a0

080003b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_SPI2_Init+0x64>)
 80003b6:	4a18      	ldr	r2, [pc, #96]	; (8000418 <MX_SPI2_Init+0x68>)
 80003b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003ba:	4b16      	ldr	r3, [pc, #88]	; (8000414 <MX_SPI2_Init+0x64>)
 80003bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_SPI2_Init+0x64>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_SPI2_Init+0x64>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_SPI2_Init+0x64>)
 80003d0:	2202      	movs	r2, #2
 80003d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_SPI2_Init+0x64>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_SPI2_Init+0x64>)
 80003dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_SPI2_Init+0x64>)
 80003e4:	2218      	movs	r2, #24
 80003e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <MX_SPI2_Init+0x64>)
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_SPI2_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <MX_SPI2_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_SPI2_Init+0x64>)
 80003fc:	220a      	movs	r2, #10
 80003fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_SPI2_Init+0x64>)
 8000402:	f002 ff95 	bl	8003330 <HAL_SPI_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800040c:	f000 f89c 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200004c4 	.word	0x200004c4
 8000418:	40003800 	.word	0x40003800

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000430:	4b41      	ldr	r3, [pc, #260]	; (8000538 <MX_GPIO_Init+0x11c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a40      	ldr	r2, [pc, #256]	; (8000538 <MX_GPIO_Init+0x11c>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b3e      	ldr	r3, [pc, #248]	; (8000538 <MX_GPIO_Init+0x11c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000448:	4b3b      	ldr	r3, [pc, #236]	; (8000538 <MX_GPIO_Init+0x11c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a3a      	ldr	r2, [pc, #232]	; (8000538 <MX_GPIO_Init+0x11c>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b38      	ldr	r3, [pc, #224]	; (8000538 <MX_GPIO_Init+0x11c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0320 	and.w	r3, r3, #32
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000460:	4b35      	ldr	r3, [pc, #212]	; (8000538 <MX_GPIO_Init+0x11c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a34      	ldr	r2, [pc, #208]	; (8000538 <MX_GPIO_Init+0x11c>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b32      	ldr	r3, [pc, #200]	; (8000538 <MX_GPIO_Init+0x11c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0308 	and.w	r3, r3, #8
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	4b2f      	ldr	r3, [pc, #188]	; (8000538 <MX_GPIO_Init+0x11c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a2e      	ldr	r2, [pc, #184]	; (8000538 <MX_GPIO_Init+0x11c>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b2c      	ldr	r3, [pc, #176]	; (8000538 <MX_GPIO_Init+0x11c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	603b      	str	r3, [r7, #0]
 800048e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000496:	4829      	ldr	r0, [pc, #164]	; (800053c <MX_GPIO_Init+0x120>)
 8000498:	f000 fc6a 	bl	8000d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|PT6315_STB_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80004a2:	4827      	ldr	r0, [pc, #156]	; (8000540 <MX_GPIO_Init+0x124>)
 80004a4:	f000 fc64 	bl	8000d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ae:	4825      	ldr	r0, [pc, #148]	; (8000544 <MX_GPIO_Init+0x128>)
 80004b0:	f000 fc5e 	bl	8000d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2120      	movs	r1, #32
 80004b8:	4821      	ldr	r0, [pc, #132]	; (8000540 <MX_GPIO_Init+0x124>)
 80004ba:	f000 fc59 	bl	8000d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2302      	movs	r3, #2
 80004ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	4819      	ldr	r0, [pc, #100]	; (800053c <MX_GPIO_Init+0x120>)
 80004d8:	f000 fac6 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1_Pin PB2_Pin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 80004dc:	2306      	movs	r3, #6
 80004de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4814      	ldr	r0, [pc, #80]	; (8000540 <MX_GPIO_Init+0x124>)
 80004f0:	f000 faba 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nRF_CSn_Pin HV_EN_Pin PT6315_STB_Pin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 80004f4:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2302      	movs	r3, #2
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <MX_GPIO_Init+0x124>)
 800050e:	f000 faab 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PU_Pin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4806      	ldr	r0, [pc, #24]	; (8000544 <MX_GPIO_Init+0x128>)
 800052c:	f000 fa9c 	bl	8000a68 <HAL_GPIO_Init>

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	40011000 	.word	0x40011000
 8000540:	40010c00 	.word	0x40010c00
 8000544:	40010800 	.word	0x40010800

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054c:	b672      	cpsid	i
}
 800054e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	e7fe      	b.n	8000550 <Error_Handler+0x8>
	...

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_MspInit+0x5c>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <HAL_MspInit+0x5c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_MspInit+0x5c>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <HAL_MspInit+0x5c>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <HAL_MspInit+0x5c>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <HAL_MspInit+0x5c>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_MspInit+0x60>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_MspInit+0x60>)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40010000 	.word	0x40010000

080005b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <HAL_I2C_MspInit+0x70>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d123      	bne.n	8000620 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <HAL_I2C_MspInit+0x74>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <HAL_I2C_MspInit+0x74>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_I2C_MspInit+0x74>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0308 	and.w	r3, r3, #8
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005f0:	23c0      	movs	r3, #192	; 0xc0
 80005f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f4:	2312      	movs	r3, #18
 80005f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f8:	2303      	movs	r3, #3
 80005fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	4619      	mov	r1, r3
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_I2C_MspInit+0x78>)
 8000604:	f000 fa30 	bl	8000a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <HAL_I2C_MspInit+0x74>)
 800060a:	69db      	ldr	r3, [r3, #28]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_I2C_MspInit+0x74>)
 800060e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000612:	61d3      	str	r3, [r2, #28]
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_I2C_MspInit+0x74>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40005400 	.word	0x40005400
 800062c:	40021000 	.word	0x40021000
 8000630:	40010c00 	.word	0x40010c00

08000634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d131      	bne.n	80006b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	61d3      	str	r3, [r2, #28]
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000684:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <HAL_SPI_MspInit+0x94>)
 800069a:	f000 f9e5 	bl	8000a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800069e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_SPI_MspInit+0x94>)
 80006b4:	f000 f9d8 	bl	8000a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40003800 	.word	0x40003800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010c00 	.word	0x40010c00

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000712:	f000 f87f 	bl	8000814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000722:	f000 fdb2 	bl	800128a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20001208 	.word	0x20001208

08000730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	; (8000774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	; (8000780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000762:	f7ff ffe5 	bl	8000730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000766:	f007 f911 	bl	800798c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fd6d 	bl	8000248 <main>
  bx lr
 800076e:	4770      	bx	lr
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000778:	08007a74 	.word	0x08007a74
  ldr r2, =_sbss
 800077c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000780:	200014f4 	.word	0x200014f4

08000784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_2_IRQHandler>
	...

08000788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_Init+0x28>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_Init+0x28>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f923 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	200f      	movs	r0, #15
 80007a0:	f000 f808 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a4:	f7ff fed6 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x54>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x58>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f93b 	bl	8000a4e <HAL_SYSTICK_Config>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e00e      	b.n	8000800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d80a      	bhi.n	80007fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f000 f903 	bl	80009fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <HAL_InitTick+0x5c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000000 	.word	0x20000000
 800080c:	20000008 	.word	0x20000008
 8000810:	20000004 	.word	0x20000004

08000814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x1c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_IncTick+0x20>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a03      	ldr	r2, [pc, #12]	; (8000834 <HAL_IncTick+0x20>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000008 	.word	0x20000008
 8000834:	20000570 	.word	0x20000570

08000838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <HAL_GetTick+0x10>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000570 	.word	0x20000570

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	db0b      	blt.n	80008da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f003 021f 	and.w	r2, r3, #31
 80008c8:	4906      	ldr	r1, [pc, #24]	; (80008e4 <__NVIC_EnableIRQ+0x34>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	095b      	lsrs	r3, r3, #5
 80008d0:	2001      	movs	r0, #1
 80008d2:	fa00 f202 	lsl.w	r2, r0, r2
 80008d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100

080008e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db0a      	blt.n	8000912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <__NVIC_SetPriority+0x4c>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	440b      	add	r3, r1
 800090c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000910:	e00a      	b.n	8000928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4908      	ldr	r1, [pc, #32]	; (8000938 <__NVIC_SetPriority+0x50>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	3b04      	subs	r3, #4
 8000920:	0112      	lsls	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	440b      	add	r3, r1
 8000926:	761a      	strb	r2, [r3, #24]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093c:	b480      	push	{r7}
 800093e:	b089      	sub	sp, #36	; 0x24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f1c3 0307 	rsb	r3, r3, #7
 8000956:	2b04      	cmp	r3, #4
 8000958:	bf28      	it	cs
 800095a:	2304      	movcs	r3, #4
 800095c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3304      	adds	r3, #4
 8000962:	2b06      	cmp	r3, #6
 8000964:	d902      	bls.n	800096c <NVIC_EncodePriority+0x30>
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3b03      	subs	r3, #3
 800096a:	e000      	b.n	800096e <NVIC_EncodePriority+0x32>
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	f04f 32ff 	mov.w	r2, #4294967295
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43da      	mvns	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000984:	f04f 31ff 	mov.w	r1, #4294967295
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43d9      	mvns	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	4313      	orrs	r3, r2
         );
}
 8000996:	4618      	mov	r0, r3
 8000998:	3724      	adds	r7, #36	; 0x24
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b0:	d301      	bcc.n	80009b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00f      	b.n	80009d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <SysTick_Config+0x40>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009be:	210f      	movs	r1, #15
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f7ff ff90 	bl	80008e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <SysTick_Config+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SysTick_Config+0x40>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff2d 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0c:	f7ff ff42 	bl	8000894 <__NVIC_GetPriorityGrouping>
 8000a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff ff90 	bl	800093c <NVIC_EncodePriority>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff5f 	bl	80008e8 <__NVIC_SetPriority>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff35 	bl	80008b0 <__NVIC_EnableIRQ>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ffa2 	bl	80009a0 <SysTick_Config>
 8000a5c:	4603      	mov	r3, r0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b08b      	sub	sp, #44	; 0x2c
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7a:	e169      	b.n	8000d50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	f040 8158 	bne.w	8000d4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	4a9a      	ldr	r2, [pc, #616]	; (8000d08 <HAL_GPIO_Init+0x2a0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d05e      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000aa4:	4a98      	ldr	r2, [pc, #608]	; (8000d08 <HAL_GPIO_Init+0x2a0>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d875      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000aaa:	4a98      	ldr	r2, [pc, #608]	; (8000d0c <HAL_GPIO_Init+0x2a4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d058      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000ab0:	4a96      	ldr	r2, [pc, #600]	; (8000d0c <HAL_GPIO_Init+0x2a4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d86f      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ab6:	4a96      	ldr	r2, [pc, #600]	; (8000d10 <HAL_GPIO_Init+0x2a8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d052      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000abc:	4a94      	ldr	r2, [pc, #592]	; (8000d10 <HAL_GPIO_Init+0x2a8>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d869      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ac2:	4a94      	ldr	r2, [pc, #592]	; (8000d14 <HAL_GPIO_Init+0x2ac>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d04c      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000ac8:	4a92      	ldr	r2, [pc, #584]	; (8000d14 <HAL_GPIO_Init+0x2ac>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d863      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ace:	4a92      	ldr	r2, [pc, #584]	; (8000d18 <HAL_GPIO_Init+0x2b0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d046      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000ad4:	4a90      	ldr	r2, [pc, #576]	; (8000d18 <HAL_GPIO_Init+0x2b0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d85d      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ada:	2b12      	cmp	r3, #18
 8000adc:	d82a      	bhi.n	8000b34 <HAL_GPIO_Init+0xcc>
 8000ade:	2b12      	cmp	r3, #18
 8000ae0:	d859      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ae2:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <HAL_GPIO_Init+0x80>)
 8000ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae8:	08000b63 	.word	0x08000b63
 8000aec:	08000b3d 	.word	0x08000b3d
 8000af0:	08000b4f 	.word	0x08000b4f
 8000af4:	08000b91 	.word	0x08000b91
 8000af8:	08000b97 	.word	0x08000b97
 8000afc:	08000b97 	.word	0x08000b97
 8000b00:	08000b97 	.word	0x08000b97
 8000b04:	08000b97 	.word	0x08000b97
 8000b08:	08000b97 	.word	0x08000b97
 8000b0c:	08000b97 	.word	0x08000b97
 8000b10:	08000b97 	.word	0x08000b97
 8000b14:	08000b97 	.word	0x08000b97
 8000b18:	08000b97 	.word	0x08000b97
 8000b1c:	08000b97 	.word	0x08000b97
 8000b20:	08000b97 	.word	0x08000b97
 8000b24:	08000b97 	.word	0x08000b97
 8000b28:	08000b97 	.word	0x08000b97
 8000b2c:	08000b45 	.word	0x08000b45
 8000b30:	08000b59 	.word	0x08000b59
 8000b34:	4a79      	ldr	r2, [pc, #484]	; (8000d1c <HAL_GPIO_Init+0x2b4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d013      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b3a:	e02c      	b.n	8000b96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	623b      	str	r3, [r7, #32]
          break;
 8000b42:	e029      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	623b      	str	r3, [r7, #32]
          break;
 8000b4c:	e024      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	3308      	adds	r3, #8
 8000b54:	623b      	str	r3, [r7, #32]
          break;
 8000b56:	e01f      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	330c      	adds	r3, #12
 8000b5e:	623b      	str	r3, [r7, #32]
          break;
 8000b60:	e01a      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	623b      	str	r3, [r7, #32]
          break;
 8000b6e:	e013      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d105      	bne.n	8000b84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	611a      	str	r2, [r3, #16]
          break;
 8000b82:	e009      	b.n	8000b98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b84:	2308      	movs	r3, #8
 8000b86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	615a      	str	r2, [r3, #20]
          break;
 8000b8e:	e003      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
          break;
 8000b94:	e000      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          break;
 8000b96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	2bff      	cmp	r3, #255	; 0xff
 8000b9c:	d801      	bhi.n	8000ba2 <HAL_GPIO_Init+0x13a>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	e001      	b.n	8000ba6 <HAL_GPIO_Init+0x13e>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2bff      	cmp	r3, #255	; 0xff
 8000bac:	d802      	bhi.n	8000bb4 <HAL_GPIO_Init+0x14c>
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x152>
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	3b08      	subs	r3, #8
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	401a      	ands	r2, r3
 8000bcc:	6a39      	ldr	r1, [r7, #32]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 80b1 	beq.w	8000d4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000be8:	4b4d      	ldr	r3, [pc, #308]	; (8000d20 <HAL_GPIO_Init+0x2b8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a4c      	ldr	r2, [pc, #304]	; (8000d20 <HAL_GPIO_Init+0x2b8>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b4a      	ldr	r3, [pc, #296]	; (8000d20 <HAL_GPIO_Init+0x2b8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c00:	4a48      	ldr	r2, [pc, #288]	; (8000d24 <HAL_GPIO_Init+0x2bc>)
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a40      	ldr	r2, [pc, #256]	; (8000d28 <HAL_GPIO_Init+0x2c0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d013      	beq.n	8000c54 <HAL_GPIO_Init+0x1ec>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a3f      	ldr	r2, [pc, #252]	; (8000d2c <HAL_GPIO_Init+0x2c4>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d00d      	beq.n	8000c50 <HAL_GPIO_Init+0x1e8>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a3e      	ldr	r2, [pc, #248]	; (8000d30 <HAL_GPIO_Init+0x2c8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d007      	beq.n	8000c4c <HAL_GPIO_Init+0x1e4>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <HAL_GPIO_Init+0x2cc>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d101      	bne.n	8000c48 <HAL_GPIO_Init+0x1e0>
 8000c44:	2303      	movs	r3, #3
 8000c46:	e006      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c48:	2304      	movs	r3, #4
 8000c4a:	e004      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e002      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c50:	2301      	movs	r3, #1
 8000c52:	e000      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c54:	2300      	movs	r3, #0
 8000c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c58:	f002 0203 	and.w	r2, r2, #3
 8000c5c:	0092      	lsls	r2, r2, #2
 8000c5e:	4093      	lsls	r3, r2
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c66:	492f      	ldr	r1, [pc, #188]	; (8000d24 <HAL_GPIO_Init+0x2bc>)
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	492c      	ldr	r1, [pc, #176]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	600b      	str	r3, [r1, #0]
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4928      	ldr	r1, [pc, #160]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d006      	beq.n	8000cb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	4922      	ldr	r1, [pc, #136]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	604b      	str	r3, [r1, #4]
 8000cb4:	e006      	b.n	8000cc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	491e      	ldr	r1, [pc, #120]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	4918      	ldr	r1, [pc, #96]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	608b      	str	r3, [r1, #8]
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	4914      	ldr	r1, [pc, #80]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d021      	beq.n	8000d3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	490e      	ldr	r1, [pc, #56]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	60cb      	str	r3, [r1, #12]
 8000d04:	e021      	b.n	8000d4a <HAL_GPIO_Init+0x2e2>
 8000d06:	bf00      	nop
 8000d08:	10320000 	.word	0x10320000
 8000d0c:	10310000 	.word	0x10310000
 8000d10:	10220000 	.word	0x10220000
 8000d14:	10210000 	.word	0x10210000
 8000d18:	10120000 	.word	0x10120000
 8000d1c:	10110000 	.word	0x10110000
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	40010c00 	.word	0x40010c00
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40011400 	.word	0x40011400
 8000d38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_GPIO_Init+0x304>)
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	4909      	ldr	r1, [pc, #36]	; (8000d6c <HAL_GPIO_Init+0x304>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f47f ae8e 	bne.w	8000a7c <HAL_GPIO_Init+0x14>
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	372c      	adds	r7, #44	; 0x2c
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40010400 	.word	0x40010400

08000d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d80:	787b      	ldrb	r3, [r7, #1]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d8c:	e003      	b.n	8000d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	041a      	lsls	r2, r3, #16
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	611a      	str	r2, [r3, #16]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e12b      	b.n	800100a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d106      	bne.n	8000dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fbf6 	bl	80005b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2224      	movs	r2, #36	; 0x24
 8000dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0201 	bic.w	r2, r2, #1
 8000de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e04:	f002 f9ac 	bl	8003160 <HAL_RCC_GetPCLK1Freq>
 8000e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4a81      	ldr	r2, [pc, #516]	; (8001014 <HAL_I2C_Init+0x274>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d807      	bhi.n	8000e24 <HAL_I2C_Init+0x84>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4a80      	ldr	r2, [pc, #512]	; (8001018 <HAL_I2C_Init+0x278>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	bf94      	ite	ls
 8000e1c:	2301      	movls	r3, #1
 8000e1e:	2300      	movhi	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	e006      	b.n	8000e32 <HAL_I2C_Init+0x92>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4a7d      	ldr	r2, [pc, #500]	; (800101c <HAL_I2C_Init+0x27c>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	bf94      	ite	ls
 8000e2c:	2301      	movls	r3, #1
 8000e2e:	2300      	movhi	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e0e7      	b.n	800100a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4a78      	ldr	r2, [pc, #480]	; (8001020 <HAL_I2C_Init+0x280>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	0c9b      	lsrs	r3, r3, #18
 8000e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4a6a      	ldr	r2, [pc, #424]	; (8001014 <HAL_I2C_Init+0x274>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d802      	bhi.n	8000e74 <HAL_I2C_Init+0xd4>
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	3301      	adds	r3, #1
 8000e72:	e009      	b.n	8000e88 <HAL_I2C_Init+0xe8>
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e7a:	fb02 f303 	mul.w	r3, r2, r3
 8000e7e:	4a69      	ldr	r2, [pc, #420]	; (8001024 <HAL_I2C_Init+0x284>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	099b      	lsrs	r3, r3, #6
 8000e86:	3301      	adds	r3, #1
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	495c      	ldr	r1, [pc, #368]	; (8001014 <HAL_I2C_Init+0x274>)
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d819      	bhi.n	8000edc <HAL_I2C_Init+0x13c>
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	1e59      	subs	r1, r3, #1
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb6:	1c59      	adds	r1, r3, #1
 8000eb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ebc:	400b      	ands	r3, r1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00a      	beq.n	8000ed8 <HAL_I2C_Init+0x138>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	1e59      	subs	r1, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed6:	e051      	b.n	8000f7c <HAL_I2C_Init+0x1dc>
 8000ed8:	2304      	movs	r3, #4
 8000eda:	e04f      	b.n	8000f7c <HAL_I2C_Init+0x1dc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d111      	bne.n	8000f08 <HAL_I2C_Init+0x168>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1e58      	subs	r0, r3, #1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6859      	ldr	r1, [r3, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	440b      	add	r3, r1
 8000ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf0c      	ite	eq
 8000f00:	2301      	moveq	r3, #1
 8000f02:	2300      	movne	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	e012      	b.n	8000f2e <HAL_I2C_Init+0x18e>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	1e58      	subs	r0, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6859      	ldr	r1, [r3, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	0099      	lsls	r1, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bf0c      	ite	eq
 8000f28:	2301      	moveq	r3, #1
 8000f2a:	2300      	movne	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_I2C_Init+0x196>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e022      	b.n	8000f7c <HAL_I2C_Init+0x1dc>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10e      	bne.n	8000f5c <HAL_I2C_Init+0x1bc>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1e58      	subs	r0, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6859      	ldr	r1, [r3, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	440b      	add	r3, r1
 8000f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f50:	3301      	adds	r3, #1
 8000f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f5a:	e00f      	b.n	8000f7c <HAL_I2C_Init+0x1dc>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1e58      	subs	r0, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6859      	ldr	r1, [r3, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	0099      	lsls	r1, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	6809      	ldr	r1, [r1, #0]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69da      	ldr	r2, [r3, #28]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	6911      	ldr	r1, [r2, #16]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68d2      	ldr	r2, [r2, #12]
 8000fb6:	4311      	orrs	r1, r2
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695a      	ldr	r2, [r3, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	000186a0 	.word	0x000186a0
 8001018:	001e847f 	.word	0x001e847f
 800101c:	003d08ff 	.word	0x003d08ff
 8001020:	431bde83 	.word	0x431bde83
 8001024:	10624dd3 	.word	0x10624dd3

08001028 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b08b      	sub	sp, #44	; 0x2c
 800102c:	af06      	add	r7, sp, #24
 800102e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0fd      	b.n	8001236 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f006 f9f2 	bl	8007438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2203      	movs	r2, #3
 8001058:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fa0f 	bl	8003484 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	687e      	ldr	r6, [r7, #4]
 800106e:	466d      	mov	r5, sp
 8001070:	f106 0410 	add.w	r4, r6, #16
 8001074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	602b      	str	r3, [r5, #0]
 800107c:	1d33      	adds	r3, r6, #4
 800107e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f002 f9d9 	bl	8003438 <USB_CoreInit>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2202      	movs	r2, #2
 8001090:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e0ce      	b.n	8001236 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 fa0a 	bl	80034b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e04c      	b.n	8001144 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	3301      	adds	r3, #1
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	440b      	add	r3, r1
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	b298      	uxth	r0, r3
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	3336      	adds	r3, #54	; 0x36
 80010e8:	4602      	mov	r2, r0
 80010ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	440b      	add	r3, r1
 80010fc:	3303      	adds	r3, #3
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	3338      	adds	r3, #56	; 0x38
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	333c      	adds	r3, #60	; 0x3c
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	3340      	adds	r3, #64	; 0x40
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	3301      	adds	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	429a      	cmp	r2, r3
 800114c:	d3ad      	bcc.n	80010aa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e044      	b.n	80011de <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	440b      	add	r3, r1
 8001162:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	3301      	adds	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3b5      	bcc.n	8001154 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	687e      	ldr	r6, [r7, #4]
 80011f0:	466d      	mov	r5, sp
 80011f2:	f106 0410 	add.w	r4, r6, #16
 80011f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	602b      	str	r3, [r5, #0]
 80011fe:	1d33      	adds	r3, r6, #4
 8001200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f002 f964 	bl	80034d0 <USB_DevInit>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00d      	b.n	8001236 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f004 fad5 	bl	80057de <USB_DevDisconnect>

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800123e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <HAL_PCD_Start+0x16>
 8001250:	2302      	movs	r3, #2
 8001252:	e016      	b.n	8001282 <HAL_PCD_Start+0x44>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f002 f8f9 	bl	8003458 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001266:	2101      	movs	r1, #1
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f006 fb58 	bl	800791e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f004 faa9 	bl	80057ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b088      	sub	sp, #32
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f004 faab 	bl	80057f2 <USB_ReadInterrupts>
 800129c:	4603      	mov	r3, r0
 800129e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012a6:	d102      	bne.n	80012ae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 fb61 	bl	8001970 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fa9d 	bl	80057f2 <USB_ReadInterrupts>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c2:	d112      	bne.n	80012ea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012d6:	b292      	uxth	r2, r2
 80012d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f006 f926 	bl	800752e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012e2:	2100      	movs	r1, #0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f925 	bl	8001534 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 fa7f 	bl	80057f2 <USB_ReadInterrupts>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012fe:	d10b      	bne.n	8001318 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001312:	b292      	uxth	r2, r2
 8001314:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fa68 	bl	80057f2 <USB_ReadInterrupts>
 8001322:	4603      	mov	r3, r0
 8001324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800132c:	d10b      	bne.n	8001346 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001340:	b292      	uxth	r2, r2
 8001342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f004 fa51 	bl	80057f2 <USB_ReadInterrupts>
 8001350:	4603      	mov	r3, r0
 8001352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800135a:	d126      	bne.n	80013aa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0204 	bic.w	r2, r2, #4
 800136e:	b292      	uxth	r2, r2
 8001370:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0208 	bic.w	r2, r2, #8
 8001386:	b292      	uxth	r2, r2
 8001388:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f006 f907 	bl	80075a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800139a:	b29a      	uxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013a4:	b292      	uxth	r2, r2
 80013a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f004 fa1f 	bl	80057f2 <USB_ReadInterrupts>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013be:	f040 8084 	bne.w	80014ca <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	77fb      	strb	r3, [r7, #31]
 80013c6:	e011      	b.n	80013ec <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	441a      	add	r2, r3
 80013d4:	7ffb      	ldrb	r3, [r7, #31]
 80013d6:	8812      	ldrh	r2, [r2, #0]
 80013d8:	b292      	uxth	r2, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	f107 0120 	add.w	r1, r7, #32
 80013e0:	440b      	add	r3, r1
 80013e2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	3301      	adds	r3, #1
 80013ea:	77fb      	strb	r3, [r7, #31]
 80013ec:	7ffb      	ldrb	r3, [r7, #31]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	d9ea      	bls.n	80013c8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	b292      	uxth	r2, r2
 8001406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001412:	b29a      	uxth	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0201 	bic.w	r2, r2, #1
 800141c:	b292      	uxth	r2, r2
 800141e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001422:	bf00      	nop
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800142c:	b29b      	uxth	r3, r3
 800142e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f6      	beq.n	8001424 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800143e:	b29a      	uxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001448:	b292      	uxth	r2, r2
 800144a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	77fb      	strb	r3, [r7, #31]
 8001452:	e010      	b.n	8001476 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001454:	7ffb      	ldrb	r3, [r7, #31]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	4611      	mov	r1, r2
 800145c:	7ffa      	ldrb	r2, [r7, #31]
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	440a      	add	r2, r1
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	f107 0120 	add.w	r1, r7, #32
 8001468:	440b      	add	r3, r1
 800146a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800146e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001470:	7ffb      	ldrb	r3, [r7, #31]
 8001472:	3301      	adds	r3, #1
 8001474:	77fb      	strb	r3, [r7, #31]
 8001476:	7ffb      	ldrb	r3, [r7, #31]
 8001478:	2b07      	cmp	r3, #7
 800147a:	d9eb      	bls.n	8001454 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001484:	b29a      	uxth	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0208 	orr.w	r2, r2, #8
 800148e:	b292      	uxth	r2, r2
 8001490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a6:	b292      	uxth	r2, r2
 80014a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0204 	orr.w	r2, r2, #4
 80014be:	b292      	uxth	r2, r2
 80014c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f006 f851 	bl	800756c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 f98f 	bl	80057f2 <USB_ReadInterrupts>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014de:	d10e      	bne.n	80014fe <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014f2:	b292      	uxth	r2, r2
 80014f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f006 f80a 	bl	8007512 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f004 f975 	bl	80057f2 <USB_ReadInterrupts>
 8001508:	4603      	mov	r3, r0
 800150a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001512:	d10b      	bne.n	800152c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001526:	b292      	uxth	r2, r2
 8001528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_PCD_SetAddress+0x1a>
 800154a:	2302      	movs	r3, #2
 800154c:	e013      	b.n	8001576 <HAL_PCD_SetAddress+0x42>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f004 f91c 	bl	80057a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	4608      	mov	r0, r1
 8001588:	4611      	mov	r1, r2
 800158a:	461a      	mov	r2, r3
 800158c:	4603      	mov	r3, r0
 800158e:	70fb      	strb	r3, [r7, #3]
 8001590:	460b      	mov	r3, r1
 8001592:	803b      	strh	r3, [r7, #0]
 8001594:	4613      	mov	r3, r2
 8001596:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800159c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da0e      	bge.n	80015c2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	705a      	strb	r2, [r3, #1]
 80015c0:	e00e      	b.n	80015e0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	f003 0207 	and.w	r2, r3, #7
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015ec:	883a      	ldrh	r2, [r7, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	78ba      	ldrb	r2, [r7, #2]
 80015f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	785b      	ldrb	r3, [r3, #1]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b29a      	uxth	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800160a:	78bb      	ldrb	r3, [r7, #2]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d102      	bne.n	8001616 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_PCD_EP_Open+0xa6>
 8001620:	2302      	movs	r3, #2
 8001622:	e00e      	b.n	8001642 <HAL_PCD_EP_Open+0xc4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	4618      	mov	r0, r3
 8001634:	f001 ff6c 	bl	8003510 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001640:	7afb      	ldrb	r3, [r7, #11]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da0e      	bge.n	800167c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2201      	movs	r2, #1
 8001678:	705a      	strb	r2, [r3, #1]
 800167a:	e00e      	b.n	800169a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	f003 0207 	and.w	r2, r3, #7
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_PCD_EP_Close+0x6a>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e00e      	b.n	80016d2 <HAL_PCD_EP_Close+0x88>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fa8e 	bl	8003be4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	460b      	mov	r3, r1
 80016e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ea:	7afb      	ldrb	r3, [r7, #11]
 80016ec:	f003 0207 	and.w	r2, r3, #7
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2200      	movs	r2, #0
 8001718:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800171a:	7afb      	ldrb	r3, [r7, #11]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	b2da      	uxtb	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	2b00      	cmp	r3, #0
 800172e:	d106      	bne.n	800173e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6979      	ldr	r1, [r7, #20]
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fc40 	bl	8003fbc <USB_EPStartXfer>
 800173c:	e005      	b.n	800174a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6979      	ldr	r1, [r7, #20]
 8001744:	4618      	mov	r0, r3
 8001746:	f002 fc39 	bl	8003fbc <USB_EPStartXfer>
  }

  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	f003 0207 	and.w	r2, r3, #7
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	440b      	add	r3, r1
 8001772:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	460b      	mov	r3, r1
 8001790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001792:	7afb      	ldrb	r3, [r7, #11]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4413      	add	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2201      	movs	r2, #1
 80017cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ce:	7afb      	ldrb	r3, [r7, #11]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d106      	bne.n	80017f2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6979      	ldr	r1, [r7, #20]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fbe6 	bl	8003fbc <USB_EPStartXfer>
 80017f0:	e005      	b.n	80017fe <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6979      	ldr	r1, [r7, #20]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fbdf 	bl	8003fbc <USB_EPStartXfer>
  }

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	f003 0207 	and.w	r2, r3, #7
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	d901      	bls.n	8001826 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e04c      	b.n	80018c0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800182a:	2b00      	cmp	r3, #0
 800182c:	da0e      	bge.n	800184c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	705a      	strb	r2, [r3, #1]
 800184a:	e00c      	b.n	8001866 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2201      	movs	r2, #1
 800186a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_PCD_EP_SetStall+0x7e>
 8001882:	2302      	movs	r3, #2
 8001884:	e01c      	b.n	80018c0 <HAL_PCD_EP_SetStall+0xb8>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68f9      	ldr	r1, [r7, #12]
 8001894:	4618      	mov	r0, r3
 8001896:	f003 fe88 	bl	80055aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d108      	bne.n	80018b6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f003 ffad 	bl	8005810 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	f003 020f 	and.w	r2, r3, #15
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d901      	bls.n	80018e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e040      	b.n	8001968 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da0e      	bge.n	800190c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]
 800190a:	e00e      	b.n	800192a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 0207 	and.w	r2, r3, #7
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	b2da      	uxtb	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_PCD_EP_ClrStall+0x82>
 8001946:	2302      	movs	r3, #2
 8001948:	e00e      	b.n	8001968 <HAL_PCD_EP_ClrStall+0xa0>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68f9      	ldr	r1, [r7, #12]
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fe76 	bl	800564a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001978:	e2ec      	b.n	8001f54 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001982:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001984:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001990:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001994:	2b00      	cmp	r3, #0
 8001996:	f040 8161 	bne.w	8001c5c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800199a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d152      	bne.n	8001a4a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019b4:	81fb      	strh	r3, [r7, #14]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	89fb      	ldrh	r3, [r7, #14]
 80019bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3328      	adds	r3, #40	; 0x28
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	3302      	adds	r3, #2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	441a      	add	r2, r3
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f005 fd67 	bl	80074de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 829b 	beq.w	8001f54 <PCD_EP_ISR_Handler+0x5e4>
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 8296 	bne.w	8001f54 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b292      	uxth	r2, r2
 8001a3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a48:	e284      	b.n	8001f54 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d034      	beq.n	8001ace <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	3306      	adds	r3, #6
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	f003 ff04 	bl	80058b0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	823b      	strh	r3, [r7, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	8a3a      	ldrh	r2, [r7, #16]
 8001abe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f005 fcdc 	bl	8007484 <HAL_PCD_SetupStageCallback>
 8001acc:	e242      	b.n	8001f54 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ace:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f280 823e 	bge.w	8001f54 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	83bb      	strh	r3, [r7, #28]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	8bba      	ldrh	r2, [r7, #28]
 8001aee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001af2:	b292      	uxth	r2, r2
 8001af4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3306      	adds	r3, #6
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d019      	beq.n	8001b5e <PCD_EP_ISR_Handler+0x1ee>
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d015      	beq.n	8001b5e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	6959      	ldr	r1, [r3, #20]
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	f003 feb4 	bl	80058b0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	695a      	ldr	r2, [r3, #20]
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	441a      	add	r2, r3
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b56:	2100      	movs	r1, #0
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f005 fca5 	bl	80074a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 81f2 	bne.w	8001f54 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4413      	add	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d112      	bne.n	8001bbe <PCD_EP_ISR_Handler+0x24e>
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	801a      	strh	r2, [r3, #0]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	801a      	strh	r2, [r3, #0]
 8001bbc:	e02f      	b.n	8001c1e <PCD_EP_ISR_Handler+0x2ae>
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8001bc4:	d813      	bhi.n	8001bee <PCD_EP_ISR_Handler+0x27e>
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <PCD_EP_ISR_Handler+0x270>
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	3301      	adds	r3, #1
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
 8001be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	029b      	lsls	r3, r3, #10
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	801a      	strh	r2, [r3, #0]
 8001bec:	e017      	b.n	8001c1e <PCD_EP_ISR_Handler+0x2ae>
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <PCD_EP_ISR_Handler+0x298>
 8001c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c04:	3b01      	subs	r3, #1
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
 8001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	029b      	lsls	r3, r3, #10
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2e:	827b      	strh	r3, [r7, #18]
 8001c30:	8a7b      	ldrh	r3, [r7, #18]
 8001c32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c36:	827b      	strh	r3, [r7, #18]
 8001c38:	8a7b      	ldrh	r3, [r7, #18]
 8001c3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c3e:	827b      	strh	r3, [r7, #18]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	8a7b      	ldrh	r3, [r7, #18]
 8001c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	8013      	strh	r3, [r2, #0]
 8001c5a:	e17b      	b.n	8001f54 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c6e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f280 80ea 	bge.w	8001e4c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c8e:	4013      	ands	r3, r2
 8001c90:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001caa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	7b1b      	ldrb	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d122      	bne.n	8001d0e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3306      	adds	r3, #6
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001cf2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8087 	beq.w	8001e08 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	6959      	ldr	r1, [r3, #20]
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	88da      	ldrh	r2, [r3, #6]
 8001d06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d08:	f003 fdd2 	bl	80058b0 <USB_ReadPMA>
 8001d0c:	e07c      	b.n	8001e08 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	78db      	ldrb	r3, [r3, #3]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d108      	bne.n	8001d28 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f927 	bl	8001f70 <HAL_PCD_EP_DB_Receive>
 8001d22:	4603      	mov	r3, r0
 8001d24:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001d26:	e06f      	b.n	8001e08 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d42:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	441a      	add	r2, r3
 8001d52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d021      	beq.n	8001dc6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	3302      	adds	r3, #2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001daa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001dac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02a      	beq.n	8001e08 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	6959      	ldr	r1, [r3, #20]
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	891a      	ldrh	r2, [r3, #8]
 8001dbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dc0:	f003 fd76 	bl	80058b0 <USB_ReadPMA>
 8001dc4:	e020      	b.n	8001e08 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3306      	adds	r3, #6
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dee:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001df0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	6959      	ldr	r1, [r3, #20]
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	895a      	ldrh	r2, [r3, #10]
 8001e02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e04:	f003 fd54 	bl	80058b0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e0e:	441a      	add	r2, r3
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e1a:	441a      	add	r2, r3
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <PCD_EP_ISR_Handler+0x4c2>
 8001e28:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d206      	bcs.n	8001e40 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4619      	mov	r1, r3
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f005 fb35 	bl	80074a8 <HAL_PCD_DataOutStageCallback>
 8001e3e:	e005      	b.n	8001e4c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 f8b8 	bl	8003fbc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d07e      	beq.n	8001f54 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e84:	843b      	strh	r3, [r7, #32]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	441a      	add	r2, r3
 8001e94:	8c3b      	ldrh	r3, [r7, #32]
 8001e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	78db      	ldrb	r3, [r3, #3]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d00c      	beq.n	8001ec4 <PCD_EP_ISR_Handler+0x554>
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	78db      	ldrb	r3, [r3, #3]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d146      	bne.n	8001f48 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001eba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d141      	bne.n	8001f48 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eec:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	8bfb      	ldrh	r3, [r7, #30]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d906      	bls.n	8001f06 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	8bfb      	ldrh	r3, [r7, #30]
 8001efe:	1ad2      	subs	r2, r2, r3
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	619a      	str	r2, [r3, #24]
 8001f04:	e002      	b.n	8001f0c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d106      	bne.n	8001f22 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f005 fadf 	bl	80074de <HAL_PCD_DataInStageCallback>
 8001f20:	e018      	b.n	8001f54 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	8bfb      	ldrh	r3, [r7, #30]
 8001f28:	441a      	add	r2, r3
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	8bfb      	ldrh	r3, [r7, #30]
 8001f34:	441a      	add	r2, r3
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 f83b 	bl	8003fbc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001f46:	e005      	b.n	8001f54 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f91b 	bl	800218a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f6ff ad0a 	blt.w	800197a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3738      	adds	r7, #56	; 0x38
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d07e      	beq.n	8002086 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	8b7b      	ldrh	r3, [r7, #26]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d306      	bcc.n	8001fca <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	8b7b      	ldrh	r3, [r7, #26]
 8001fc2:	1ad2      	subs	r2, r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	619a      	str	r2, [r3, #24]
 8001fc8:	e002      	b.n	8001fd0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d123      	bne.n	8002020 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	833b      	strh	r3, [r7, #24]
 8001ff4:	8b3b      	ldrh	r3, [r7, #24]
 8001ff6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ffa:	833b      	strh	r3, [r7, #24]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	441a      	add	r2, r3
 800200a:	8b3b      	ldrh	r3, [r7, #24]
 800200c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201c:	b29b      	uxth	r3, r3
 800201e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01f      	beq.n	800206a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002044:	82fb      	strh	r3, [r7, #22]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	441a      	add	r2, r3
 8002054:	8afb      	ldrh	r3, [r7, #22]
 8002056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800205a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800205e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002062:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002066:	b29b      	uxth	r3, r3
 8002068:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800206a:	8b7b      	ldrh	r3, [r7, #26]
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8087 	beq.w	8002180 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	6959      	ldr	r1, [r3, #20]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	891a      	ldrh	r2, [r3, #8]
 800207e:	8b7b      	ldrh	r3, [r7, #26]
 8002080:	f003 fc16 	bl	80058b0 <USB_ReadPMA>
 8002084:	e07c      	b.n	8002180 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	3306      	adds	r3, #6
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	699a      	ldr	r2, [r3, #24]
 80020b4:	8b7b      	ldrh	r3, [r7, #26]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d306      	bcc.n	80020c8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	8b7b      	ldrh	r3, [r7, #26]
 80020c0:	1ad2      	subs	r2, r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	619a      	str	r2, [r3, #24]
 80020c6:	e002      	b.n	80020ce <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d123      	bne.n	800211e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f0:	83fb      	strh	r3, [r7, #30]
 80020f2:	8bfb      	ldrh	r3, [r7, #30]
 80020f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020f8:	83fb      	strh	r3, [r7, #30]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	441a      	add	r2, r3
 8002108:	8bfb      	ldrh	r3, [r7, #30]
 800210a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800210e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211a:	b29b      	uxth	r3, r3
 800211c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d11f      	bne.n	8002168 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	83bb      	strh	r3, [r7, #28]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	8bbb      	ldrh	r3, [r7, #28]
 8002154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800215c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002160:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002164:	b29b      	uxth	r3, r3
 8002166:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002168:	8b7b      	ldrh	r3, [r7, #26]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	6959      	ldr	r1, [r3, #20]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	895a      	ldrh	r2, [r3, #10]
 800217a:	8b7b      	ldrh	r3, [r7, #26]
 800217c:	f003 fb98 	bl	80058b0 <USB_ReadPMA>
    }
  }

  return count;
 8002180:	8b7b      	ldrh	r3, [r7, #26]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b0a2      	sub	sp, #136	; 0x88
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	4613      	mov	r3, r2
 8002196:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 81c7 	beq.w	8002532 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	3302      	adds	r3, #2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021d8:	429a      	cmp	r2, r3
 80021da:	d907      	bls.n	80021ec <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021e4:	1ad2      	subs	r2, r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	619a      	str	r2, [r3, #24]
 80021ea:	e002      	b.n	80021f2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 80b9 	bne.w	800236e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d126      	bne.n	8002252 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	4413      	add	r3, r2
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	011a      	lsls	r2, r3, #4
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	4413      	add	r3, r2
 8002226:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002236:	b29a      	uxth	r2, r3
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	801a      	strh	r2, [r3, #0]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800224a:	b29a      	uxth	r2, r3
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	801a      	strh	r2, [r3, #0]
 8002250:	e01a      	b.n	8002288 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	785b      	ldrb	r3, [r3, #1]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d116      	bne.n	8002288 <HAL_PCD_EP_DB_Transmit+0xfe>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002268:	b29b      	uxth	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	4413      	add	r3, r2
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	011a      	lsls	r2, r3, #4
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	4413      	add	r3, r2
 800227c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	2200      	movs	r2, #0
 8002286:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	623b      	str	r3, [r7, #32]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d126      	bne.n	80022e4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	4413      	add	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	011a      	lsls	r2, r3, #4
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	4413      	add	r3, r2
 80022b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022dc:	b29a      	uxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	e017      	b.n	8002314 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d113      	bne.n	8002314 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	4413      	add	r3, r2
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	011a      	lsls	r2, r3, #4
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	4413      	add	r3, r2
 8002308:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	2200      	movs	r2, #0
 8002312:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f005 f8df 	bl	80074de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 82d4 	beq.w	80028d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002346:	827b      	strh	r3, [r7, #18]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	441a      	add	r2, r3
 8002356:	8a7b      	ldrh	r3, [r7, #18]
 8002358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800235c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002368:	b29b      	uxth	r3, r3
 800236a:	8013      	strh	r3, [r2, #0]
 800236c:	e2b2      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d021      	beq.n	80023bc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	441a      	add	r2, r3
 80023a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80023a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	f040 8286 	bne.w	80028d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023d0:	441a      	add	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	69da      	ldr	r2, [r3, #28]
 80023da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023de:	441a      	add	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	6a1a      	ldr	r2, [r3, #32]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d309      	bcc.n	8002404 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	6a1a      	ldr	r2, [r3, #32]
 80023fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fc:	1ad2      	subs	r2, r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	621a      	str	r2, [r3, #32]
 8002402:	e015      	b.n	8002430 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800240c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002410:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800241a:	e009      	b.n	8002430 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	785b      	ldrb	r3, [r3, #1]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d155      	bne.n	80024e4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	63bb      	str	r3, [r7, #56]	; 0x38
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244c:	4413      	add	r3, r2
 800244e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	011a      	lsls	r2, r3, #4
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	4413      	add	r3, r2
 800245a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
 8002460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002462:	2b00      	cmp	r3, #0
 8002464:	d112      	bne.n	800248c <HAL_PCD_EP_DB_Transmit+0x302>
 8002466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002470:	b29a      	uxth	r2, r3
 8002472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002474:	801a      	strh	r2, [r3, #0]
 8002476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002484:	b29a      	uxth	r2, r3
 8002486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	e047      	b.n	800251c <HAL_PCD_EP_DB_Transmit+0x392>
 800248c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800248e:	2b3e      	cmp	r3, #62	; 0x3e
 8002490:	d811      	bhi.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	64bb      	str	r3, [r7, #72]	; 0x48
 8002498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80024a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a4:	3301      	adds	r3, #1
 80024a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80024a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	029b      	lsls	r3, r3, #10
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	e032      	b.n	800251c <HAL_PCD_EP_DB_Transmit+0x392>
 80024b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80024bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d102      	bne.n	80024cc <HAL_PCD_EP_DB_Transmit+0x342>
 80024c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c8:	3b01      	subs	r3, #1
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80024cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	029b      	lsls	r3, r3, #10
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024dc:	b29a      	uxth	r2, r3
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	e01b      	b.n	800251c <HAL_PCD_EP_DB_Transmit+0x392>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	785b      	ldrb	r3, [r3, #1]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d117      	bne.n	800251c <HAL_PCD_EP_DB_Transmit+0x392>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	643b      	str	r3, [r7, #64]	; 0x40
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002500:	4413      	add	r3, r2
 8002502:	643b      	str	r3, [r7, #64]	; 0x40
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	011a      	lsls	r2, r3, #4
 800250a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800250c:	4413      	add	r3, r2
 800250e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002516:	b29a      	uxth	r2, r3
 8002518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	6959      	ldr	r1, [r3, #20]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	891a      	ldrh	r2, [r3, #8]
 8002528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800252a:	b29b      	uxth	r3, r3
 800252c:	f003 f97b 	bl	8005826 <USB_WritePMA>
 8002530:	e1d0      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253a:	b29b      	uxth	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	3306      	adds	r3, #6
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002566:	429a      	cmp	r2, r3
 8002568:	d307      	bcc.n	800257a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002572:	1ad2      	subs	r2, r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	619a      	str	r2, [r3, #24]
 8002578:	e002      	b.n	8002580 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 80c4 	bne.w	8002712 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d126      	bne.n	80025e0 <HAL_PCD_EP_DB_Transmit+0x456>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a6:	4413      	add	r3, r2
 80025a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	011a      	lsls	r2, r3, #4
 80025b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b2:	4413      	add	r3, r2
 80025b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d8:	b29a      	uxth	r2, r3
 80025da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	e01a      	b.n	8002616 <HAL_PCD_EP_DB_Transmit+0x48c>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d116      	bne.n	8002616 <HAL_PCD_EP_DB_Transmit+0x48c>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	677b      	str	r3, [r7, #116]	; 0x74
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025fc:	4413      	add	r3, r2
 80025fe:	677b      	str	r3, [r7, #116]	; 0x74
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	011a      	lsls	r2, r3, #4
 8002606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002608:	4413      	add	r3, r2
 800260a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800260e:	673b      	str	r3, [r7, #112]	; 0x70
 8002610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002612:	2200      	movs	r2, #0
 8002614:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	67bb      	str	r3, [r7, #120]	; 0x78
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	785b      	ldrb	r3, [r3, #1]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d12f      	bne.n	8002684 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800263c:	4413      	add	r3, r2
 800263e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	011a      	lsls	r2, r3, #4
 8002648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800264c:	4413      	add	r3, r2
 800264e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002662:	b29a      	uxth	r2, r3
 8002664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002668:	801a      	strh	r2, [r3, #0]
 800266a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800267a:	b29a      	uxth	r2, r3
 800267c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	e017      	b.n	80026b4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d113      	bne.n	80026b4 <HAL_PCD_EP_DB_Transmit+0x52a>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800269a:	4413      	add	r3, r2
 800269c:	67bb      	str	r3, [r7, #120]	; 0x78
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	011a      	lsls	r2, r3, #4
 80026a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026a6:	4413      	add	r3, r2
 80026a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026b0:	2200      	movs	r2, #0
 80026b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f004 ff0f 	bl	80074de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 8104 	bne.w	80028d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	441a      	add	r2, r3
 80026f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270c:	b29b      	uxth	r3, r3
 800270e:	8013      	strh	r3, [r2, #0]
 8002710:	e0e0      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d121      	bne.n	8002760 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	b29b      	uxth	r3, r3
 800272e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002736:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	441a      	add	r2, r3
 8002748:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800274c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275c:	b29b      	uxth	r3, r3
 800275e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002766:	2b01      	cmp	r3, #1
 8002768:	f040 80b4 	bne.w	80028d4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002774:	441a      	add	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002782:	441a      	add	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	6a1a      	ldr	r2, [r3, #32]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d309      	bcc.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	6a1a      	ldr	r2, [r3, #32]
 800279e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a0:	1ad2      	subs	r2, r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	621a      	str	r2, [r3, #32]
 80027a6:	e015      	b.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d107      	bne.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80027b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027be:	e009      	b.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	667b      	str	r3, [r7, #100]	; 0x64
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d155      	bne.n	800288e <HAL_PCD_EP_DB_Transmit+0x704>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f6:	4413      	add	r3, r2
 80027f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	011a      	lsls	r2, r3, #4
 8002800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002802:	4413      	add	r3, r2
 8002804:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002808:	65bb      	str	r3, [r7, #88]	; 0x58
 800280a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800280c:	2b00      	cmp	r3, #0
 800280e:	d112      	bne.n	8002836 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800281a:	b29a      	uxth	r2, r3
 800281c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281e:	801a      	strh	r2, [r3, #0]
 8002820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282e:	b29a      	uxth	r2, r3
 8002830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	e044      	b.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002838:	2b3e      	cmp	r3, #62	; 0x3e
 800283a:	d811      	bhi.n	8002860 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800283c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	657b      	str	r3, [r7, #84]	; 0x54
 8002842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800284c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284e:	3301      	adds	r3, #1
 8002850:	657b      	str	r3, [r7, #84]	; 0x54
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	b29b      	uxth	r3, r3
 8002856:	029b      	lsls	r3, r3, #10
 8002858:	b29a      	uxth	r2, r3
 800285a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	e02f      	b.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	657b      	str	r3, [r7, #84]	; 0x54
 8002866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002872:	3b01      	subs	r3, #1
 8002874:	657b      	str	r3, [r7, #84]	; 0x54
 8002876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002878:	b29b      	uxth	r3, r3
 800287a:	029b      	lsls	r3, r3, #10
 800287c:	b29b      	uxth	r3, r3
 800287e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002886:	b29a      	uxth	r2, r3
 8002888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	e018      	b.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x736>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	785b      	ldrb	r3, [r3, #1]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d114      	bne.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x736>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289e:	b29b      	uxth	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a4:	4413      	add	r3, r2
 80028a6:	667b      	str	r3, [r7, #100]	; 0x64
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	011a      	lsls	r2, r3, #4
 80028ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b0:	4413      	add	r3, r2
 80028b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028b6:	663b      	str	r3, [r7, #96]	; 0x60
 80028b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028be:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	6959      	ldr	r1, [r3, #20]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	895a      	ldrh	r2, [r3, #10]
 80028cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f002 ffa9 	bl	8005826 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ee:	823b      	strh	r3, [r7, #16]
 80028f0:	8a3b      	ldrh	r3, [r7, #16]
 80028f2:	f083 0310 	eor.w	r3, r3, #16
 80028f6:	823b      	strh	r3, [r7, #16]
 80028f8:	8a3b      	ldrh	r3, [r7, #16]
 80028fa:	f083 0320 	eor.w	r3, r3, #32
 80028fe:	823b      	strh	r3, [r7, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	441a      	add	r2, r3
 800290e:	8a3b      	ldrh	r3, [r7, #16]
 8002910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002920:	b29b      	uxth	r3, r3
 8002922:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3788      	adds	r7, #136	; 0x88
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800292e:	b480      	push	{r7}
 8002930:	b087      	sub	sp, #28
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	817b      	strh	r3, [r7, #10]
 800293c:	4613      	mov	r3, r2
 800293e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002940:	897b      	ldrh	r3, [r7, #10]
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	e009      	b.n	8002978 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002964:	897a      	ldrh	r2, [r7, #10]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4413      	add	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002978:	893b      	ldrh	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	b29a      	uxth	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	80da      	strh	r2, [r3, #6]
 800298c:	e00b      	b.n	80029a6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2201      	movs	r2, #1
 8002992:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	b29a      	uxth	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e26c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8087 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d4:	4b92      	ldr	r3, [pc, #584]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d00c      	beq.n	80029fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029e0:	4b8f      	ldr	r3, [pc, #572]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d112      	bne.n	8002a12 <HAL_RCC_OscConfig+0x5e>
 80029ec:	4b8c      	ldr	r3, [pc, #560]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f8:	d10b      	bne.n	8002a12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fa:	4b89      	ldr	r3, [pc, #548]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d06c      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x12c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d168      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e246      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x76>
 8002a1c:	4b80      	ldr	r3, [pc, #512]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a7f      	ldr	r2, [pc, #508]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	e02e      	b.n	8002a88 <HAL_RCC_OscConfig+0xd4>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x98>
 8002a32:	4b7b      	ldr	r3, [pc, #492]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7a      	ldr	r2, [pc, #488]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b78      	ldr	r3, [pc, #480]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a77      	ldr	r2, [pc, #476]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e01d      	b.n	8002a88 <HAL_RCC_OscConfig+0xd4>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0xbc>
 8002a56:	4b72      	ldr	r3, [pc, #456]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a71      	ldr	r2, [pc, #452]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b6f      	ldr	r3, [pc, #444]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a6e      	ldr	r2, [pc, #440]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0xd4>
 8002a70:	4b6b      	ldr	r3, [pc, #428]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6a      	ldr	r2, [pc, #424]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b68      	ldr	r3, [pc, #416]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a67      	ldr	r2, [pc, #412]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d013      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fd fed2 	bl	8000838 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fd fece 	bl	8000838 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e1fa      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b5d      	ldr	r3, [pc, #372]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0xe4>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fd febe 	bl	8000838 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fd feba 	bl	8000838 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e1e6      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x10c>
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d063      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aee:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002afa:	4b49      	ldr	r3, [pc, #292]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d11c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x18c>
 8002b06:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d116      	bne.n	8002b40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	4b43      	ldr	r3, [pc, #268]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_RCC_OscConfig+0x176>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e1ba      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4939      	ldr	r1, [pc, #228]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	e03a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fd fe73 	bl	8000838 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b56:	f7fd fe6f 	bl	8000838 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e19b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b68:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b74:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4927      	ldr	r1, [pc, #156]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
 8002b88:	e015      	b.n	8002bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fd fe52 	bl	8000838 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b98:	f7fd fe4e 	bl	8000838 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e17a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03a      	beq.n	8002c38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d019      	beq.n	8002bfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd0:	f7fd fe32 	bl	8000838 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7fd fe2e 	bl	8000838 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e15a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f000 fac6 	bl	8003188 <RCC_Delay>
 8002bfc:	e01c      	b.n	8002c38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_RCC_OscConfig+0x274>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c04:	f7fd fe18 	bl	8000838 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0a:	e00f      	b.n	8002c2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fd fe14 	bl	8000838 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d908      	bls.n	8002c2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e140      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
 8002c24:	42420000 	.word	0x42420000
 8002c28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	4b9e      	ldr	r3, [pc, #632]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e9      	bne.n	8002c0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a6 	beq.w	8002d92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4a:	4b97      	ldr	r3, [pc, #604]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	4b94      	ldr	r3, [pc, #592]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a93      	ldr	r2, [pc, #588]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c60:	61d3      	str	r3, [r2, #28]
 8002c62:	4b91      	ldr	r3, [pc, #580]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b8e      	ldr	r3, [pc, #568]	; (8002eac <HAL_RCC_OscConfig+0x4f8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d118      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7e:	4b8b      	ldr	r3, [pc, #556]	; (8002eac <HAL_RCC_OscConfig+0x4f8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a8a      	ldr	r2, [pc, #552]	; (8002eac <HAL_RCC_OscConfig+0x4f8>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8a:	f7fd fdd5 	bl	8000838 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7fd fdd1 	bl	8000838 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b64      	cmp	r3, #100	; 0x64
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0fd      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	4b81      	ldr	r3, [pc, #516]	; (8002eac <HAL_RCC_OscConfig+0x4f8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x312>
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4a7a      	ldr	r2, [pc, #488]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6213      	str	r3, [r2, #32]
 8002cc4:	e02d      	b.n	8002d22 <HAL_RCC_OscConfig+0x36e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x334>
 8002cce:	4b76      	ldr	r3, [pc, #472]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4a75      	ldr	r2, [pc, #468]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	6213      	str	r3, [r2, #32]
 8002cda:	4b73      	ldr	r3, [pc, #460]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a72      	ldr	r2, [pc, #456]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002ce0:	f023 0304 	bic.w	r3, r3, #4
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	e01c      	b.n	8002d22 <HAL_RCC_OscConfig+0x36e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d10c      	bne.n	8002d0a <HAL_RCC_OscConfig+0x356>
 8002cf0:	4b6d      	ldr	r3, [pc, #436]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4a6c      	ldr	r2, [pc, #432]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6213      	str	r3, [r2, #32]
 8002cfc:	4b6a      	ldr	r3, [pc, #424]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a69      	ldr	r2, [pc, #420]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	e00b      	b.n	8002d22 <HAL_RCC_OscConfig+0x36e>
 8002d0a:	4b67      	ldr	r3, [pc, #412]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a66      	ldr	r2, [pc, #408]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6213      	str	r3, [r2, #32]
 8002d16:	4b64      	ldr	r3, [pc, #400]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4a63      	ldr	r2, [pc, #396]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	f023 0304 	bic.w	r3, r3, #4
 8002d20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d015      	beq.n	8002d56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2a:	f7fd fd85 	bl	8000838 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fd fd81 	bl	8000838 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0ab      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	4b57      	ldr	r3, [pc, #348]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ee      	beq.n	8002d32 <HAL_RCC_OscConfig+0x37e>
 8002d54:	e014      	b.n	8002d80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fd fd6f 	bl	8000838 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fd fd6b 	bl	8000838 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e095      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d74:	4b4c      	ldr	r3, [pc, #304]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ee      	bne.n	8002d5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d105      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d86:	4b48      	ldr	r3, [pc, #288]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4a47      	ldr	r2, [pc, #284]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8081 	beq.w	8002e9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9c:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d061      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d146      	bne.n	8002e3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b3f      	ldr	r3, [pc, #252]	; (8002eb0 <HAL_RCC_OscConfig+0x4fc>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fd fd3f 	bl	8000838 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fd fd3b 	bl	8000838 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e067      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd0:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d108      	bne.n	8002df8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002de6:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	492d      	ldr	r1, [pc, #180]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a19      	ldr	r1, [r3, #32]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	4927      	ldr	r1, [pc, #156]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_RCC_OscConfig+0x4fc>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fd fd0f 	bl	8000838 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fd fd0b 	bl	8000838 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e037      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x46a>
 8002e3c:	e02f      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_RCC_OscConfig+0x4fc>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fd fcf8 	bl	8000838 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fd fcf4 	bl	8000838 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e020      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x498>
 8002e6a:	e018      	b.n	8002e9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e013      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	42420060 	.word	0x42420060

08002eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0d0      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b67      	ldr	r3, [pc, #412]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 0207 	bic.w	r2, r3, #7
 8002ede:	4965      	ldr	r1, [pc, #404]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b8      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f10:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a58      	ldr	r2, [pc, #352]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f28:	4b53      	ldr	r3, [pc, #332]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a52      	ldr	r2, [pc, #328]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b50      	ldr	r3, [pc, #320]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	494d      	ldr	r1, [pc, #308]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d040      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d115      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07f      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e073      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06b      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b39      	ldr	r3, [pc, #228]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4936      	ldr	r1, [pc, #216]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7fd fc48 	bl	8000838 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fd fc44 	bl	8000838 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e053      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d210      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 0207 	bic.w	r2, r3, #7
 8002fea:	4922      	ldr	r1, [pc, #136]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e032      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4916      	ldr	r1, [pc, #88]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	490e      	ldr	r1, [pc, #56]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003042:	f000 f821 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	490a      	ldr	r1, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	5ccb      	ldrb	r3, [r1, r3]
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	4a09      	ldr	r2, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1cc>)
 800305c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x1d0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fba6 	bl	80007b4 <HAL_InitTick>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000
 8003078:	40021000 	.word	0x40021000
 800307c:	08007a54 	.word	0x08007a54
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b490      	push	{r4, r7}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800308e:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003090:	1d3c      	adds	r4, r7, #4
 8003092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003094:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003098:	f240 2301 	movw	r3, #513	; 0x201
 800309c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030b2:	4b22      	ldr	r3, [pc, #136]	; (800313c <HAL_RCC_GetSysClockFreq+0xb4>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d002      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x40>
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0x46>
 80030c6:	e02d      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ca:	623b      	str	r3, [r7, #32]
      break;
 80030cc:	e02d      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	0c9b      	lsrs	r3, r3, #18
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030da:	4413      	add	r3, r2
 80030dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d013      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <HAL_RCC_GetSysClockFreq+0xb4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	0c5b      	lsrs	r3, r3, #17
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030fa:	4413      	add	r3, r2
 80030fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003100:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003106:	fb02 f203 	mul.w	r2, r2, r3
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	e004      	b.n	800311e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	623b      	str	r3, [r7, #32]
      break;
 8003122:	e002      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003126:	623b      	str	r3, [r7, #32]
      break;
 8003128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312a:	6a3b      	ldr	r3, [r7, #32]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3728      	adds	r7, #40	; 0x28
 8003130:	46bd      	mov	sp, r7
 8003132:	bc90      	pop	{r4, r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	080079fc 	.word	0x080079fc
 800313c:	40021000 	.word	0x40021000
 8003140:	00f42400 	.word	0x00f42400
 8003144:	003d0900 	.word	0x003d0900
 8003148:	007a1200 	.word	0x007a1200

0800314c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003150:	4b02      	ldr	r3, [pc, #8]	; (800315c <HAL_RCC_GetHCLKFreq+0x10>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	20000000 	.word	0x20000000

08003160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003164:	f7ff fff2 	bl	800314c <HAL_RCC_GetHCLKFreq>
 8003168:	4602      	mov	r2, r0
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	4903      	ldr	r1, [pc, #12]	; (8003184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	08007a64 	.word	0x08007a64

08003188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <RCC_Delay+0x34>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <RCC_Delay+0x38>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0a5b      	lsrs	r3, r3, #9
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a4:	bf00      	nop
  }
  while (Delay --);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	60fa      	str	r2, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f9      	bne.n	80031a4 <RCC_Delay+0x1c>
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	20000000 	.word	0x20000000
 80031c0:	10624dd3 	.word	0x10624dd3

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d07d      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e4:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10d      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f0:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fa:	61d3      	str	r3, [r2, #28]
 80031fc:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d118      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003218:	4b43      	ldr	r3, [pc, #268]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a42      	ldr	r2, [pc, #264]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003224:	f7fd fb08 	bl	8000838 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	e008      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fd fb04 	bl	8000838 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e06d      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323e:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800324a:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003252:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d02e      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	429a      	cmp	r2, r3
 8003266:	d027      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003268:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003270:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800327e:	4a29      	ldr	r2, [pc, #164]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d014      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fd fad3 	bl	8000838 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	e00a      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fd facf 	bl	8000838 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e036      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ee      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b8:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4917      	ldr	r1, [pc, #92]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4a13      	ldr	r2, [pc, #76]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	490b      	ldr	r1, [pc, #44]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003306:	4b07      	ldr	r3, [pc, #28]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4904      	ldr	r1, [pc, #16]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	40007000 	.word	0x40007000
 800332c:	42420440 	.word	0x42420440

08003330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e076      	b.n	8003430 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	d108      	bne.n	800335c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003352:	d009      	beq.n	8003368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	61da      	str	r2, [r3, #28]
 800335a:	e005      	b.n	8003368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd f956 	bl	8000634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	ea42 0103 	orr.w	r1, r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	0c1a      	lsrs	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f002 0204 	and.w	r2, r2, #4
 800340e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003438:	b084      	sub	sp, #16
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	f107 0014 	add.w	r0, r7, #20
 8003446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	b004      	add	sp, #16
 8003456:	4770      	bx	lr

08003458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003468:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800346c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800348c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003490:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	b29b      	uxth	r3, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	4013      	ands	r3, r2
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034d0:	b084      	sub	sp, #16
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	f107 0014 	add.w	r0, r7, #20
 80034de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	b004      	add	sp, #16
 800350e:	4770      	bx	lr

08003510 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003510:	b480      	push	{r7}
 8003512:	b09b      	sub	sp, #108	; 0x6c
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	78db      	ldrb	r3, [r3, #3]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d81f      	bhi.n	8003582 <USB_ActivateEndpoint+0x72>
 8003542:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <USB_ActivateEndpoint+0x38>)
 8003544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003548:	08003559 	.word	0x08003559
 800354c:	08003575 	.word	0x08003575
 8003550:	0800358b 	.word	0x0800358b
 8003554:	08003567 	.word	0x08003567
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003558:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800355c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003560:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003564:	e012      	b.n	800358c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003566:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800356a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800356e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003572:	e00b      	b.n	800358c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003574:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003578:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800357c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003580:	e004      	b.n	800358c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003588:	e000      	b.n	800358c <USB_ActivateEndpoint+0x7c>
      break;
 800358a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	441a      	add	r2, r3
 8003596:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800359a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800359e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	441a      	add	r2, r3
 80035dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80035e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	7b1b      	ldrb	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f040 8149 	bne.w	8003890 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	785b      	ldrb	r3, [r3, #1]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8084 	beq.w	8003710 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003612:	b29b      	uxth	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	4413      	add	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	011a      	lsls	r2, r3, #4
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	88db      	ldrh	r3, [r3, #6]
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	b29b      	uxth	r3, r3
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	81fb      	strh	r3, [r7, #14]
 800364a:	89fb      	ldrh	r3, [r7, #14]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <USB_ActivateEndpoint+0x17c>
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	81bb      	strh	r3, [r7, #12]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	441a      	add	r2, r3
 8003676:	89bb      	ldrh	r3, [r7, #12]
 8003678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800367c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003688:	b29b      	uxth	r3, r3
 800368a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	78db      	ldrb	r3, [r3, #3]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d020      	beq.n	80036d6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036aa:	813b      	strh	r3, [r7, #8]
 80036ac:	893b      	ldrh	r3, [r7, #8]
 80036ae:	f083 0320 	eor.w	r3, r3, #32
 80036b2:	813b      	strh	r3, [r7, #8]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	893b      	ldrh	r3, [r7, #8]
 80036c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	8013      	strh	r3, [r2, #0]
 80036d4:	e27f      	b.n	8003bd6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ec:	817b      	strh	r3, [r7, #10]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	441a      	add	r2, r3
 80036f8:	897b      	ldrh	r3, [r7, #10]
 80036fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370a:	b29b      	uxth	r3, r3
 800370c:	8013      	strh	r3, [r2, #0]
 800370e:	e262      	b.n	8003bd6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371a:	b29b      	uxth	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	4413      	add	r3, r2
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	011a      	lsls	r2, r3, #4
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	4413      	add	r3, r2
 800372e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	88db      	ldrh	r3, [r3, #6]
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	b29b      	uxth	r3, r3
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800374e:	b29b      	uxth	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	4413      	add	r3, r2
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	011a      	lsls	r2, r3, #4
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	4413      	add	r3, r2
 8003762:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003766:	623b      	str	r3, [r7, #32]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d112      	bne.n	8003796 <USB_ActivateEndpoint+0x286>
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800377a:	b29a      	uxth	r2, r3
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800378a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800378e:	b29a      	uxth	r2, r3
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	801a      	strh	r2, [r3, #0]
 8003794:	e02f      	b.n	80037f6 <USB_ActivateEndpoint+0x2e6>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b3e      	cmp	r3, #62	; 0x3e
 800379c:	d813      	bhi.n	80037c6 <USB_ActivateEndpoint+0x2b6>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	663b      	str	r3, [r7, #96]	; 0x60
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <USB_ActivateEndpoint+0x2a8>
 80037b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b4:	3301      	adds	r3, #1
 80037b6:	663b      	str	r3, [r7, #96]	; 0x60
 80037b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	b29a      	uxth	r2, r3
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	801a      	strh	r2, [r3, #0]
 80037c4:	e017      	b.n	80037f6 <USB_ActivateEndpoint+0x2e6>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	663b      	str	r3, [r7, #96]	; 0x60
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <USB_ActivateEndpoint+0x2d0>
 80037da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037dc:	3b01      	subs	r3, #1
 80037de:	663b      	str	r3, [r7, #96]	; 0x60
 80037e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	029b      	lsls	r3, r3, #10
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	83fb      	strh	r3, [r7, #30]
 8003804:	8bfb      	ldrh	r3, [r7, #30]
 8003806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01b      	beq.n	8003846 <USB_ActivateEndpoint+0x336>
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003824:	83bb      	strh	r3, [r7, #28]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	441a      	add	r2, r3
 8003830:	8bbb      	ldrh	r3, [r7, #28]
 8003832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800383a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800383e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003842:	b29b      	uxth	r3, r3
 8003844:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385c:	837b      	strh	r3, [r7, #26]
 800385e:	8b7b      	ldrh	r3, [r7, #26]
 8003860:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003864:	837b      	strh	r3, [r7, #26]
 8003866:	8b7b      	ldrh	r3, [r7, #26]
 8003868:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800386c:	837b      	strh	r3, [r7, #26]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	441a      	add	r2, r3
 8003878:	8b7b      	ldrh	r3, [r7, #26]
 800387a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800387e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388a:	b29b      	uxth	r3, r3
 800388c:	8013      	strh	r3, [r2, #0]
 800388e:	e1a2      	b.n	8003bd6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	441a      	add	r2, r3
 80038b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80038b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038dc:	4413      	add	r3, r2
 80038de:	65bb      	str	r3, [r7, #88]	; 0x58
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	011a      	lsls	r2, r3, #4
 80038e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ee:	657b      	str	r3, [r7, #84]	; 0x54
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	891b      	ldrh	r3, [r3, #8]
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	653b      	str	r3, [r7, #80]	; 0x50
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390a:	b29b      	uxth	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003910:	4413      	add	r3, r2
 8003912:	653b      	str	r3, [r7, #80]	; 0x50
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	011a      	lsls	r2, r3, #4
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391c:	4413      	add	r3, r2
 800391e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	895b      	ldrh	r3, [r3, #10]
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	b29b      	uxth	r3, r3
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003932:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f040 8091 	bne.w	8003a60 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800394c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800394e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01b      	beq.n	800398e <USB_ActivateEndpoint+0x47e>
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29b      	uxth	r3, r3
 8003964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	441a      	add	r2, r3
 8003978:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800397a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800397e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398a:	b29b      	uxth	r3, r3
 800398c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	873b      	strh	r3, [r7, #56]	; 0x38
 800399c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01b      	beq.n	80039de <USB_ActivateEndpoint+0x4ce>
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	441a      	add	r2, r3
 80039c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039da:	b29b      	uxth	r3, r3
 80039dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80039f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80039f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80039fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80039fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	441a      	add	r2, r3
 8003a10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a3c:	867b      	strh	r3, [r7, #50]	; 0x32
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	8013      	strh	r3, [r2, #0]
 8003a5e:	e0ba      	b.n	8003bd6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003a70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01d      	beq.n	8003ab8 <USB_ActivateEndpoint+0x5a8>
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	441a      	add	r2, r3
 8003aa0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ac8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01d      	beq.n	8003b10 <USB_ActivateEndpoint+0x600>
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	78db      	ldrb	r3, [r3, #3]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d024      	beq.n	8003b62 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003b32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b36:	f083 0320 	eor.w	r3, r3, #32
 8003b3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	441a      	add	r2, r3
 8003b48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	8013      	strh	r3, [r2, #0]
 8003b60:	e01d      	b.n	8003b9e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	441a      	add	r2, r3
 8003bc0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003bd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	376c      	adds	r7, #108	; 0x6c
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b08d      	sub	sp, #52	; 0x34
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	7b1b      	ldrb	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f040 808e 	bne.w	8003d14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d044      	beq.n	8003c8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	81bb      	strh	r3, [r7, #12]
 8003c0e:	89bb      	ldrh	r3, [r7, #12]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01b      	beq.n	8003c50 <USB_DeactivateEndpoint+0x6c>
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	817b      	strh	r3, [r7, #10]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	897b      	ldrh	r3, [r7, #10]
 8003c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c66:	813b      	strh	r3, [r7, #8]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	893b      	ldrh	r3, [r7, #8]
 8003c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8013      	strh	r3, [r2, #0]
 8003c88:	e192      	b.n	8003fb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	827b      	strh	r3, [r7, #18]
 8003c98:	8a7b      	ldrh	r3, [r7, #18]
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01b      	beq.n	8003cda <USB_DeactivateEndpoint+0xf6>
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb8:	823b      	strh	r3, [r7, #16]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	441a      	add	r2, r3
 8003cc4:	8a3b      	ldrh	r3, [r7, #16]
 8003cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf0:	81fb      	strh	r3, [r7, #14]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	441a      	add	r2, r3
 8003cfc:	89fb      	ldrh	r3, [r7, #14]
 8003cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	8013      	strh	r3, [r2, #0]
 8003d12:	e14d      	b.n	8003fb0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f040 80a5 	bne.w	8003e68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	843b      	strh	r3, [r7, #32]
 8003d2c:	8c3b      	ldrh	r3, [r7, #32]
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01b      	beq.n	8003d6e <USB_DeactivateEndpoint+0x18a>
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4c:	83fb      	strh	r3, [r7, #30]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	441a      	add	r2, r3
 8003d58:	8bfb      	ldrh	r3, [r7, #30]
 8003d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	83bb      	strh	r3, [r7, #28]
 8003d7c:	8bbb      	ldrh	r3, [r7, #28]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01b      	beq.n	8003dbe <USB_DeactivateEndpoint+0x1da>
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9c:	837b      	strh	r3, [r7, #26]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	441a      	add	r2, r3
 8003da8:	8b7b      	ldrh	r3, [r7, #26]
 8003daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	833b      	strh	r3, [r7, #24]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	441a      	add	r2, r3
 8003de0:	8b3b      	ldrh	r3, [r7, #24]
 8003de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0c:	82fb      	strh	r3, [r7, #22]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	441a      	add	r2, r3
 8003e18:	8afb      	ldrh	r3, [r7, #22]
 8003e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e44:	82bb      	strh	r3, [r7, #20]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	8abb      	ldrh	r3, [r7, #20]
 8003e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	8013      	strh	r3, [r2, #0]
 8003e66:	e0a3      	b.n	8003fb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01b      	beq.n	8003eb8 <USB_DeactivateEndpoint+0x2d4>
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	441a      	add	r2, r3
 8003ea2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003ec6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01b      	beq.n	8003f08 <USB_DeactivateEndpoint+0x324>
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	853b      	strh	r3, [r7, #40]	; 0x28
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	441a      	add	r2, r3
 8003f2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	441a      	add	r2, r3
 8003f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3734      	adds	r7, #52	; 0x34
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b0cc      	sub	sp, #304	; 0x130
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	6018      	str	r0, [r3, #0]
 8003fc6:	463b      	mov	r3, r7
 8003fc8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fca:	463b      	mov	r3, r7
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	f040 872e 	bne.w	8004e32 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	463b      	mov	r3, r7
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d905      	bls.n	8003ff2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003fe6:	463b      	mov	r3, r7
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003ff0:	e004      	b.n	8003ffc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003ff2:	463b      	mov	r3, r7
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ffc:	463b      	mov	r3, r7
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	7b1b      	ldrb	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d134      	bne.n	8004070 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004006:	463b      	mov	r3, r7
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6959      	ldr	r1, [r3, #20]
 800400c:	463b      	mov	r3, r7
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	88da      	ldrh	r2, [r3, #6]
 8004012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004016:	b29b      	uxth	r3, r3
 8004018:	1d38      	adds	r0, r7, #4
 800401a:	6800      	ldr	r0, [r0, #0]
 800401c:	f001 fc03 	bl	8005826 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004020:	f107 0310 	add.w	r3, r7, #16
 8004024:	1d3a      	adds	r2, r7, #4
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	4619      	mov	r1, r3
 8004036:	f107 0310 	add.w	r3, r7, #16
 800403a:	f107 0210 	add.w	r2, r7, #16
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	440a      	add	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	463b      	mov	r3, r7
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	011a      	lsls	r2, r3, #4
 800404c:	f107 0310 	add.w	r3, r7, #16
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4413      	add	r3, r2
 8004054:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004058:	f107 030c 	add.w	r3, r7, #12
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004062:	b29a      	uxth	r2, r3
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	f000 beac 	b.w	8004dc8 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004070:	463b      	mov	r3, r7
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	78db      	ldrb	r3, [r3, #3]
 8004076:	2b02      	cmp	r3, #2
 8004078:	f040 838c 	bne.w	8004794 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800407c:	463b      	mov	r3, r7
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	463b      	mov	r3, r7
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	429a      	cmp	r2, r3
 800408a:	f240 8330 	bls.w	80046ee <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	463b      	mov	r3, r7
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	463b      	mov	r3, r7
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	441a      	add	r2, r3
 80040ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80040d2:	463b      	mov	r3, r7
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a1a      	ldr	r2, [r3, #32]
 80040d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040dc:	1ad2      	subs	r2, r2, r3
 80040de:	463b      	mov	r3, r7
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040e4:	1d3b      	adds	r3, r7, #4
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	463b      	mov	r3, r7
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 819e 	beq.w	800443c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004100:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004104:	1d3a      	adds	r2, r7, #4
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	463b      	mov	r3, r7
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	785b      	ldrb	r3, [r3, #1]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d17a      	bne.n	800420a <USB_EPStartXfer+0x24e>
 8004114:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004118:	1d3a      	adds	r2, r7, #4
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	4619      	mov	r1, r3
 800412a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800412e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	440a      	add	r2, r1
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	463b      	mov	r3, r7
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	011a      	lsls	r2, r3, #4
 8004140:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4413      	add	r3, r2
 8004148:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800414c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11a      	bne.n	8004190 <USB_EPStartXfer+0x1d4>
 800415a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004168:	b29a      	uxth	r2, r3
 800416a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	801a      	strh	r2, [r3, #0]
 8004172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004184:	b29a      	uxth	r2, r3
 8004186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	801a      	strh	r2, [r3, #0]
 800418e:	e062      	b.n	8004256 <USB_EPStartXfer+0x29a>
 8004190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004194:	2b3e      	cmp	r3, #62	; 0x3e
 8004196:	d819      	bhi.n	80041cc <USB_EPStartXfer+0x210>
 8004198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <USB_EPStartXfer+0x1fc>
 80041ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041b2:	3301      	adds	r3, #1
 80041b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041bc:	b29b      	uxth	r3, r3
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	801a      	strh	r2, [r3, #0]
 80041ca:	e044      	b.n	8004256 <USB_EPStartXfer+0x29a>
 80041cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <USB_EPStartXfer+0x230>
 80041e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041e6:	3b01      	subs	r3, #1
 80041e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041fe:	b29a      	uxth	r2, r3
 8004200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	e025      	b.n	8004256 <USB_EPStartXfer+0x29a>
 800420a:	463b      	mov	r3, r7
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	785b      	ldrb	r3, [r3, #1]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d120      	bne.n	8004256 <USB_EPStartXfer+0x29a>
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800421c:	b29b      	uxth	r3, r3
 800421e:	4619      	mov	r1, r3
 8004220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004224:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	440a      	add	r2, r1
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	463b      	mov	r3, r7
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	011a      	lsls	r2, r3, #4
 8004236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4413      	add	r3, r2
 800423e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800424c:	b29a      	uxth	r2, r3
 800424e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004256:	463b      	mov	r3, r7
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	895b      	ldrh	r3, [r3, #10]
 800425c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004260:	463b      	mov	r3, r7
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6959      	ldr	r1, [r3, #20]
 8004266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800426a:	b29b      	uxth	r3, r3
 800426c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004270:	1d38      	adds	r0, r7, #4
 8004272:	6800      	ldr	r0, [r0, #0]
 8004274:	f001 fad7 	bl	8005826 <USB_WritePMA>
            ep->xfer_buff += len;
 8004278:	463b      	mov	r3, r7
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004282:	441a      	add	r2, r3
 8004284:	463b      	mov	r3, r7
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800428a:	463b      	mov	r3, r7
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	463b      	mov	r3, r7
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	429a      	cmp	r2, r3
 8004298:	d909      	bls.n	80042ae <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800429a:	463b      	mov	r3, r7
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042a4:	1ad2      	subs	r2, r2, r3
 80042a6:	463b      	mov	r3, r7
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	621a      	str	r2, [r3, #32]
 80042ac:	e008      	b.n	80042c0 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80042ae:	463b      	mov	r3, r7
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80042b8:	463b      	mov	r3, r7
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2200      	movs	r2, #0
 80042be:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042c0:	463b      	mov	r3, r7
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	785b      	ldrb	r3, [r3, #1]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d17a      	bne.n	80043c0 <USB_EPStartXfer+0x404>
 80042ca:	f107 0318 	add.w	r3, r7, #24
 80042ce:	1d3a      	adds	r2, r7, #4
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042dc:	b29b      	uxth	r3, r3
 80042de:	4619      	mov	r1, r3
 80042e0:	f107 0318 	add.w	r3, r7, #24
 80042e4:	f107 0218 	add.w	r2, r7, #24
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	440a      	add	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	463b      	mov	r3, r7
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	011a      	lsls	r2, r3, #4
 80042f6:	f107 0318 	add.w	r3, r7, #24
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4413      	add	r3, r2
 80042fe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004302:	f107 0314 	add.w	r3, r7, #20
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11a      	bne.n	8004346 <USB_EPStartXfer+0x38a>
 8004310:	f107 0314 	add.w	r3, r7, #20
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800431e:	b29a      	uxth	r2, r3
 8004320:	f107 0314 	add.w	r3, r7, #20
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	801a      	strh	r2, [r3, #0]
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800433a:	b29a      	uxth	r2, r3
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	e067      	b.n	8004416 <USB_EPStartXfer+0x45a>
 8004346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800434a:	2b3e      	cmp	r3, #62	; 0x3e
 800434c:	d819      	bhi.n	8004382 <USB_EPStartXfer+0x3c6>
 800434e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <USB_EPStartXfer+0x3b2>
 8004364:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004368:	3301      	adds	r3, #1
 800436a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800436e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004372:	b29b      	uxth	r3, r3
 8004374:	029b      	lsls	r3, r3, #10
 8004376:	b29a      	uxth	r2, r3
 8004378:	f107 0314 	add.w	r3, r7, #20
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	e049      	b.n	8004416 <USB_EPStartXfer+0x45a>
 8004382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800438c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <USB_EPStartXfer+0x3e6>
 8004398:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800439c:	3b01      	subs	r3, #1
 800439e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80043a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	029b      	lsls	r3, r3, #10
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	f107 0314 	add.w	r3, r7, #20
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	801a      	strh	r2, [r3, #0]
 80043be:	e02a      	b.n	8004416 <USB_EPStartXfer+0x45a>
 80043c0:	463b      	mov	r3, r7
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	785b      	ldrb	r3, [r3, #1]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d125      	bne.n	8004416 <USB_EPStartXfer+0x45a>
 80043ca:	f107 0320 	add.w	r3, r7, #32
 80043ce:	1d3a      	adds	r2, r7, #4
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043dc:	b29b      	uxth	r3, r3
 80043de:	4619      	mov	r1, r3
 80043e0:	f107 0320 	add.w	r3, r7, #32
 80043e4:	f107 0220 	add.w	r2, r7, #32
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	440a      	add	r2, r1
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	463b      	mov	r3, r7
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	011a      	lsls	r2, r3, #4
 80043f6:	f107 0320 	add.w	r3, r7, #32
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4413      	add	r3, r2
 80043fe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004402:	f107 031c 	add.w	r3, r7, #28
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800440c:	b29a      	uxth	r2, r3
 800440e:	f107 031c 	add.w	r3, r7, #28
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004416:	463b      	mov	r3, r7
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	891b      	ldrh	r3, [r3, #8]
 800441c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004420:	463b      	mov	r3, r7
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6959      	ldr	r1, [r3, #20]
 8004426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800442a:	b29b      	uxth	r3, r3
 800442c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004430:	1d38      	adds	r0, r7, #4
 8004432:	6800      	ldr	r0, [r0, #0]
 8004434:	f001 f9f7 	bl	8005826 <USB_WritePMA>
 8004438:	f000 bcc6 	b.w	8004dc8 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800443c:	463b      	mov	r3, r7
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	785b      	ldrb	r3, [r3, #1]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d164      	bne.n	8004510 <USB_EPStartXfer+0x554>
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	64bb      	str	r3, [r7, #72]	; 0x48
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004454:	b29b      	uxth	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445a:	4413      	add	r3, r2
 800445c:	64bb      	str	r3, [r7, #72]	; 0x48
 800445e:	463b      	mov	r3, r7
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	011a      	lsls	r2, r3, #4
 8004466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004468:	4413      	add	r3, r2
 800446a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800446e:	647b      	str	r3, [r7, #68]	; 0x44
 8004470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d112      	bne.n	800449e <USB_EPStartXfer+0x4e2>
 8004478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004482:	b29a      	uxth	r2, r3
 8004484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004496:	b29a      	uxth	r2, r3
 8004498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449a:	801a      	strh	r2, [r3, #0]
 800449c:	e057      	b.n	800454e <USB_EPStartXfer+0x592>
 800449e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044a2:	2b3e      	cmp	r3, #62	; 0x3e
 80044a4:	d817      	bhi.n	80044d6 <USB_EPStartXfer+0x51a>
 80044a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <USB_EPStartXfer+0x50a>
 80044bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80044c0:	3301      	adds	r3, #1
 80044c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	029b      	lsls	r3, r3, #10
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	e03b      	b.n	800454e <USB_EPStartXfer+0x592>
 80044d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <USB_EPStartXfer+0x53a>
 80044ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80044f0:	3b01      	subs	r3, #1
 80044f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	029b      	lsls	r3, r3, #10
 80044fe:	b29b      	uxth	r3, r3
 8004500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004508:	b29a      	uxth	r2, r3
 800450a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450c:	801a      	strh	r2, [r3, #0]
 800450e:	e01e      	b.n	800454e <USB_EPStartXfer+0x592>
 8004510:	463b      	mov	r3, r7
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	785b      	ldrb	r3, [r3, #1]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d119      	bne.n	800454e <USB_EPStartXfer+0x592>
 800451a:	1d3b      	adds	r3, r7, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	653b      	str	r3, [r7, #80]	; 0x50
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004528:	b29b      	uxth	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452e:	4413      	add	r3, r2
 8004530:	653b      	str	r3, [r7, #80]	; 0x50
 8004532:	463b      	mov	r3, r7
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	011a      	lsls	r2, r3, #4
 800453a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453c:	4413      	add	r3, r2
 800453e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004548:	b29a      	uxth	r2, r3
 800454a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800454c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800454e:	463b      	mov	r3, r7
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	891b      	ldrh	r3, [r3, #8]
 8004554:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004558:	463b      	mov	r3, r7
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6959      	ldr	r1, [r3, #20]
 800455e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004562:	b29b      	uxth	r3, r3
 8004564:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004568:	1d38      	adds	r0, r7, #4
 800456a:	6800      	ldr	r0, [r0, #0]
 800456c:	f001 f95b 	bl	8005826 <USB_WritePMA>
            ep->xfer_buff += len;
 8004570:	463b      	mov	r3, r7
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800457a:	441a      	add	r2, r3
 800457c:	463b      	mov	r3, r7
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004582:	463b      	mov	r3, r7
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	463b      	mov	r3, r7
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	429a      	cmp	r2, r3
 8004590:	d909      	bls.n	80045a6 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004592:	463b      	mov	r3, r7
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800459c:	1ad2      	subs	r2, r2, r3
 800459e:	463b      	mov	r3, r7
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	621a      	str	r2, [r3, #32]
 80045a4:	e008      	b.n	80045b8 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80045a6:	463b      	mov	r3, r7
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80045b0:	463b      	mov	r3, r7
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2200      	movs	r2, #0
 80045b6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045b8:	1d3b      	adds	r3, r7, #4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
 80045be:	463b      	mov	r3, r7
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d164      	bne.n	8004692 <USB_EPStartXfer+0x6d6>
 80045c8:	1d3b      	adds	r3, r7, #4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	4413      	add	r3, r2
 80045de:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e0:	463b      	mov	r3, r7
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	011a      	lsls	r2, r3, #4
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	4413      	add	r3, r2
 80045ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
 80045f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d112      	bne.n	8004620 <USB_EPStartXfer+0x664>
 80045fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004604:	b29a      	uxth	r2, r3
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004618:	b29a      	uxth	r2, r3
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	e054      	b.n	80046ca <USB_EPStartXfer+0x70e>
 8004620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004624:	2b3e      	cmp	r3, #62	; 0x3e
 8004626:	d817      	bhi.n	8004658 <USB_EPStartXfer+0x69c>
 8004628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <USB_EPStartXfer+0x68c>
 800463e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004642:	3301      	adds	r3, #1
 8004644:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004648:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800464c:	b29b      	uxth	r3, r3
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	b29a      	uxth	r2, r3
 8004652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	e038      	b.n	80046ca <USB_EPStartXfer+0x70e>
 8004658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <USB_EPStartXfer+0x6bc>
 800466e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004672:	3b01      	subs	r3, #1
 8004674:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004678:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800467c:	b29b      	uxth	r3, r3
 800467e:	029b      	lsls	r3, r3, #10
 8004680:	b29b      	uxth	r3, r3
 8004682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800468a:	b29a      	uxth	r2, r3
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	801a      	strh	r2, [r3, #0]
 8004690:	e01b      	b.n	80046ca <USB_EPStartXfer+0x70e>
 8004692:	463b      	mov	r3, r7
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d116      	bne.n	80046ca <USB_EPStartXfer+0x70e>
 800469c:	1d3b      	adds	r3, r7, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046aa:	4413      	add	r3, r2
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40
 80046ae:	463b      	mov	r3, r7
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	011a      	lsls	r2, r3, #4
 80046b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b8:	4413      	add	r3, r2
 80046ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046ca:	463b      	mov	r3, r7
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	895b      	ldrh	r3, [r3, #10]
 80046d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046d4:	463b      	mov	r3, r7
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6959      	ldr	r1, [r3, #20]
 80046da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80046e4:	1d38      	adds	r0, r7, #4
 80046e6:	6800      	ldr	r0, [r0, #0]
 80046e8:	f001 f89d 	bl	8005826 <USB_WritePMA>
 80046ec:	e36c      	b.n	8004dc8 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80046ee:	463b      	mov	r3, r7
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	463b      	mov	r3, r7
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004716:	1d3b      	adds	r3, r7, #4
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	463b      	mov	r3, r7
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474a:	b29b      	uxth	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004750:	4413      	add	r3, r2
 8004752:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	011a      	lsls	r2, r3, #4
 800475c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475e:	4413      	add	r3, r2
 8004760:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004764:	65bb      	str	r3, [r7, #88]	; 0x58
 8004766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800476a:	b29a      	uxth	r2, r3
 800476c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800476e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004770:	463b      	mov	r3, r7
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	891b      	ldrh	r3, [r3, #8]
 8004776:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800477a:	463b      	mov	r3, r7
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6959      	ldr	r1, [r3, #20]
 8004780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004784:	b29b      	uxth	r3, r3
 8004786:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800478a:	1d38      	adds	r0, r7, #4
 800478c:	6800      	ldr	r0, [r0, #0]
 800478e:	f001 f84a 	bl	8005826 <USB_WritePMA>
 8004792:	e319      	b.n	8004dc8 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	463b      	mov	r3, r7
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	463b      	mov	r3, r7
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80047c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80047d8:	463b      	mov	r3, r7
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047e2:	1ad2      	subs	r2, r2, r3
 80047e4:	463b      	mov	r3, r7
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	463b      	mov	r3, r7
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8162 	beq.w	8004aca <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004806:	1d3b      	adds	r3, r7, #4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800480e:	463b      	mov	r3, r7
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	785b      	ldrb	r3, [r3, #1]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d164      	bne.n	80048e2 <USB_EPStartXfer+0x926>
 8004818:	1d3b      	adds	r3, r7, #4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	67bb      	str	r3, [r7, #120]	; 0x78
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800482c:	4413      	add	r3, r2
 800482e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004830:	463b      	mov	r3, r7
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	011a      	lsls	r2, r3, #4
 8004838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800483a:	4413      	add	r3, r2
 800483c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004840:	677b      	str	r3, [r7, #116]	; 0x74
 8004842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d112      	bne.n	8004870 <USB_EPStartXfer+0x8b4>
 800484a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004854:	b29a      	uxth	r2, r3
 8004856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004868:	b29a      	uxth	r2, r3
 800486a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486c:	801a      	strh	r2, [r3, #0]
 800486e:	e057      	b.n	8004920 <USB_EPStartXfer+0x964>
 8004870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004874:	2b3e      	cmp	r3, #62	; 0x3e
 8004876:	d817      	bhi.n	80048a8 <USB_EPStartXfer+0x8ec>
 8004878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d004      	beq.n	8004898 <USB_EPStartXfer+0x8dc>
 800488e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004892:	3301      	adds	r3, #1
 8004894:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004898:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800489c:	b29b      	uxth	r3, r3
 800489e:	029b      	lsls	r3, r3, #10
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	e03b      	b.n	8004920 <USB_EPStartXfer+0x964>
 80048a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80048b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d104      	bne.n	80048c8 <USB_EPStartXfer+0x90c>
 80048be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80048c2:	3b01      	subs	r3, #1
 80048c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80048c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	029b      	lsls	r3, r3, #10
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048da:	b29a      	uxth	r2, r3
 80048dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	e01e      	b.n	8004920 <USB_EPStartXfer+0x964>
 80048e2:	463b      	mov	r3, r7
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d119      	bne.n	8004920 <USB_EPStartXfer+0x964>
 80048ec:	1d3b      	adds	r3, r7, #4
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048fc:	4413      	add	r3, r2
 80048fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004902:	463b      	mov	r3, r7
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	011a      	lsls	r2, r3, #4
 800490a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800490e:	4413      	add	r3, r2
 8004910:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004914:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800491a:	b29a      	uxth	r2, r3
 800491c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800491e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004920:	463b      	mov	r3, r7
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	895b      	ldrh	r3, [r3, #10]
 8004926:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800492a:	463b      	mov	r3, r7
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6959      	ldr	r1, [r3, #20]
 8004930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004934:	b29b      	uxth	r3, r3
 8004936:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800493a:	1d38      	adds	r0, r7, #4
 800493c:	6800      	ldr	r0, [r0, #0]
 800493e:	f000 ff72 	bl	8005826 <USB_WritePMA>
          ep->xfer_buff += len;
 8004942:	463b      	mov	r3, r7
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800494c:	441a      	add	r2, r3
 800494e:	463b      	mov	r3, r7
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004954:	463b      	mov	r3, r7
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	463b      	mov	r3, r7
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	429a      	cmp	r2, r3
 8004962:	d909      	bls.n	8004978 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8004964:	463b      	mov	r3, r7
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	463b      	mov	r3, r7
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	621a      	str	r2, [r3, #32]
 8004976:	e008      	b.n	800498a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8004978:	463b      	mov	r3, r7
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004982:	463b      	mov	r3, r7
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800498a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 821a 	beq.w	8004dc8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004994:	463b      	mov	r3, r7
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	785b      	ldrb	r3, [r3, #1]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d164      	bne.n	8004a68 <USB_EPStartXfer+0xaac>
 800499e:	1d3b      	adds	r3, r7, #4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a4:	1d3b      	adds	r3, r7, #4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049b2:	4413      	add	r3, r2
 80049b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80049b6:	463b      	mov	r3, r7
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	011a      	lsls	r2, r3, #4
 80049be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049c0:	4413      	add	r3, r2
 80049c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049c6:	667b      	str	r3, [r7, #100]	; 0x64
 80049c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d112      	bne.n	80049f6 <USB_EPStartXfer+0xa3a>
 80049d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	e057      	b.n	8004aa6 <USB_EPStartXfer+0xaea>
 80049f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049fa:	2b3e      	cmp	r3, #62	; 0x3e
 80049fc:	d817      	bhi.n	8004a2e <USB_EPStartXfer+0xa72>
 80049fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <USB_EPStartXfer+0xa62>
 8004a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	e03b      	b.n	8004aa6 <USB_EPStartXfer+0xaea>
 8004a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <USB_EPStartXfer+0xa92>
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	029b      	lsls	r3, r3, #10
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a64:	801a      	strh	r2, [r3, #0]
 8004a66:	e01e      	b.n	8004aa6 <USB_EPStartXfer+0xaea>
 8004a68:	463b      	mov	r3, r7
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d119      	bne.n	8004aa6 <USB_EPStartXfer+0xaea>
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	673b      	str	r3, [r7, #112]	; 0x70
 8004a78:	1d3b      	adds	r3, r7, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a86:	4413      	add	r3, r2
 8004a88:	673b      	str	r3, [r7, #112]	; 0x70
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	011a      	lsls	r2, r3, #4
 8004a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a94:	4413      	add	r3, r2
 8004a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	891b      	ldrh	r3, [r3, #8]
 8004aac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6959      	ldr	r1, [r3, #20]
 8004ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ac0:	1d38      	adds	r0, r7, #4
 8004ac2:	6800      	ldr	r0, [r0, #0]
 8004ac4:	f000 feaf 	bl	8005826 <USB_WritePMA>
 8004ac8:	e17e      	b.n	8004dc8 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004aca:	463b      	mov	r3, r7
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d16f      	bne.n	8004bb4 <USB_EPStartXfer+0xbf8>
 8004ad4:	1d3b      	adds	r3, r7, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004aec:	4413      	add	r3, r2
 8004aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004af2:	463b      	mov	r3, r7
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	011a      	lsls	r2, r3, #4
 8004afa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004afe:	4413      	add	r3, r2
 8004b00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d116      	bne.n	8004b3e <USB_EPStartXfer+0xb82>
 8004b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b22:	801a      	strh	r2, [r3, #0]
 8004b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	e05f      	b.n	8004bfe <USB_EPStartXfer+0xc42>
 8004b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b42:	2b3e      	cmp	r3, #62	; 0x3e
 8004b44:	d818      	bhi.n	8004b78 <USB_EPStartXfer+0xbbc>
 8004b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <USB_EPStartXfer+0xbaa>
 8004b5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b60:	3301      	adds	r3, #1
 8004b62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004b66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	029b      	lsls	r3, r3, #10
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b74:	801a      	strh	r2, [r3, #0]
 8004b76:	e042      	b.n	8004bfe <USB_EPStartXfer+0xc42>
 8004b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <USB_EPStartXfer+0xbdc>
 8004b8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b92:	3b01      	subs	r3, #1
 8004b94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004b98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	029b      	lsls	r3, r3, #10
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	e024      	b.n	8004bfe <USB_EPStartXfer+0xc42>
 8004bb4:	463b      	mov	r3, r7
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	785b      	ldrb	r3, [r3, #1]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d11f      	bne.n	8004bfe <USB_EPStartXfer+0xc42>
 8004bbe:	1d3b      	adds	r3, r7, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bc6:	1d3b      	adds	r3, r7, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bdc:	463b      	mov	r3, r7
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	011a      	lsls	r2, r3, #4
 8004be4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004be8:	4413      	add	r3, r2
 8004bea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bfc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004bfe:	463b      	mov	r3, r7
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	891b      	ldrh	r3, [r3, #8]
 8004c04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c08:	463b      	mov	r3, r7
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6959      	ldr	r1, [r3, #20]
 8004c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c18:	1d38      	adds	r0, r7, #4
 8004c1a:	6800      	ldr	r0, [r0, #0]
 8004c1c:	f000 fe03 	bl	8005826 <USB_WritePMA>
          ep->xfer_buff += len;
 8004c20:	463b      	mov	r3, r7
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c2a:	441a      	add	r2, r3
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004c32:	463b      	mov	r3, r7
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a1a      	ldr	r2, [r3, #32]
 8004c38:	463b      	mov	r3, r7
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d909      	bls.n	8004c56 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8004c42:	463b      	mov	r3, r7
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4c:	1ad2      	subs	r2, r2, r3
 8004c4e:	463b      	mov	r3, r7
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	621a      	str	r2, [r3, #32]
 8004c54:	e008      	b.n	8004c68 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8004c56:	463b      	mov	r3, r7
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004c60:	463b      	mov	r3, r7
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2200      	movs	r2, #0
 8004c66:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80ab 	beq.w	8004dc8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c7a:	463b      	mov	r3, r7
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d16f      	bne.n	8004d64 <USB_EPStartXfer+0xda8>
 8004c84:	1d3b      	adds	r3, r7, #4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	011a      	lsls	r2, r3, #4
 8004caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cae:	4413      	add	r3, r2
 8004cb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d116      	bne.n	8004cee <USB_EPStartXfer+0xd32>
 8004cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	e05b      	b.n	8004da6 <USB_EPStartXfer+0xdea>
 8004cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf2:	2b3e      	cmp	r3, #62	; 0x3e
 8004cf4:	d818      	bhi.n	8004d28 <USB_EPStartXfer+0xd6c>
 8004cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <USB_EPStartXfer+0xd5a>
 8004d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d10:	3301      	adds	r3, #1
 8004d12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	029b      	lsls	r3, r3, #10
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	e03e      	b.n	8004da6 <USB_EPStartXfer+0xdea>
 8004d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <USB_EPStartXfer+0xd8c>
 8004d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d42:	3b01      	subs	r3, #1
 8004d44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	029b      	lsls	r3, r3, #10
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	e020      	b.n	8004da6 <USB_EPStartXfer+0xdea>
 8004d64:	463b      	mov	r3, r7
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d11b      	bne.n	8004da6 <USB_EPStartXfer+0xdea>
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d7e:	4413      	add	r3, r2
 8004d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d84:	463b      	mov	r3, r7
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	011a      	lsls	r2, r3, #4
 8004d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d90:	4413      	add	r3, r2
 8004d92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004da4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004da6:	463b      	mov	r3, r7
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	895b      	ldrh	r3, [r3, #10]
 8004dac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004db0:	463b      	mov	r3, r7
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6959      	ldr	r1, [r3, #20]
 8004db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004dc0:	1d38      	adds	r0, r7, #4
 8004dc2:	6800      	ldr	r0, [r0, #0]
 8004dc4:	f000 fd2f 	bl	8005826 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	463b      	mov	r3, r7
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f107 020a 	add.w	r2, r7, #10
 8004dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de6:	8013      	strh	r3, [r2, #0]
 8004de8:	f107 030a 	add.w	r3, r7, #10
 8004dec:	f107 020a 	add.w	r2, r7, #10
 8004df0:	8812      	ldrh	r2, [r2, #0]
 8004df2:	f082 0210 	eor.w	r2, r2, #16
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	f107 030a 	add.w	r3, r7, #10
 8004dfc:	f107 020a 	add.w	r2, r7, #10
 8004e00:	8812      	ldrh	r2, [r2, #0]
 8004e02:	f082 0220 	eor.w	r2, r2, #32
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	441a      	add	r2, r3
 8004e16:	f107 030a 	add.w	r3, r7, #10
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8013      	strh	r3, [r2, #0]
 8004e30:	e3b5      	b.n	800559e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004e32:	463b      	mov	r3, r7
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	7b1b      	ldrb	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 8090 	bne.w	8004f5e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004e3e:	463b      	mov	r3, r7
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	463b      	mov	r3, r7
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d90e      	bls.n	8004e6c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8004e4e:	463b      	mov	r3, r7
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004e58:	463b      	mov	r3, r7
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e62:	1ad2      	subs	r2, r2, r3
 8004e64:	463b      	mov	r3, r7
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	619a      	str	r2, [r3, #24]
 8004e6a:	e008      	b.n	8004e7e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004e76:	463b      	mov	r3, r7
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004e7e:	1d3b      	adds	r3, r7, #4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e86:	1d3b      	adds	r3, r7, #4
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e96:	4413      	add	r3, r2
 8004e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	011a      	lsls	r2, r3, #4
 8004ea4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <USB_EPStartXfer+0xf2c>
 8004eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	e32c      	b.n	8005542 <USB_EPStartXfer+0x1586>
 8004ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eec:	2b3e      	cmp	r3, #62	; 0x3e
 8004eee:	d818      	bhi.n	8004f22 <USB_EPStartXfer+0xf66>
 8004ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d004      	beq.n	8004f10 <USB_EPStartXfer+0xf54>
 8004f06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004f10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	029b      	lsls	r3, r3, #10
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f1e:	801a      	strh	r2, [r3, #0]
 8004f20:	e30f      	b.n	8005542 <USB_EPStartXfer+0x1586>
 8004f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <USB_EPStartXfer+0xf86>
 8004f38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004f42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	029b      	lsls	r3, r3, #10
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e2f1      	b.n	8005542 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004f5e:	463b      	mov	r3, r7
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	78db      	ldrb	r3, [r3, #3]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	f040 818f 	bne.w	8005288 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d175      	bne.n	8005060 <USB_EPStartXfer+0x10a4>
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f7c:	1d3b      	adds	r3, r7, #4
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f92:	463b      	mov	r3, r7
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	011a      	lsls	r2, r3, #4
 8004f9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fa8:	463b      	mov	r3, r7
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d116      	bne.n	8004fe0 <USB_EPStartXfer+0x1024>
 8004fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fc4:	801a      	strh	r2, [r3, #0]
 8004fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	e065      	b.n	80050ac <USB_EPStartXfer+0x10f0>
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fe8:	d81a      	bhi.n	8005020 <USB_EPStartXfer+0x1064>
 8004fea:	463b      	mov	r3, r7
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <USB_EPStartXfer+0x1052>
 8005004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005008:	3301      	adds	r3, #1
 800500a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800500e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005012:	b29b      	uxth	r3, r3
 8005014:	029b      	lsls	r3, r3, #10
 8005016:	b29a      	uxth	r2, r3
 8005018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	e045      	b.n	80050ac <USB_EPStartXfer+0x10f0>
 8005020:	463b      	mov	r3, r7
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800502c:	463b      	mov	r3, r7
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2b00      	cmp	r3, #0
 8005038:	d104      	bne.n	8005044 <USB_EPStartXfer+0x1088>
 800503a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800503e:	3b01      	subs	r3, #1
 8005040:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005048:	b29b      	uxth	r3, r3
 800504a:	029b      	lsls	r3, r3, #10
 800504c:	b29b      	uxth	r3, r3
 800504e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005056:	b29a      	uxth	r2, r3
 8005058:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	e025      	b.n	80050ac <USB_EPStartXfer+0x10f0>
 8005060:	463b      	mov	r3, r7
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d120      	bne.n	80050ac <USB_EPStartXfer+0x10f0>
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800507a:	b29b      	uxth	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005082:	4413      	add	r3, r2
 8005084:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005088:	463b      	mov	r3, r7
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	011a      	lsls	r2, r3, #4
 8005090:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005094:	4413      	add	r3, r2
 8005096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800509a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	1d3b      	adds	r3, r7, #4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050b4:	463b      	mov	r3, r7
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d175      	bne.n	80051aa <USB_EPStartXfer+0x11ee>
 80050be:	1d3b      	adds	r3, r7, #4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050d6:	4413      	add	r3, r2
 80050d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80050dc:	463b      	mov	r3, r7
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	011a      	lsls	r2, r3, #4
 80050e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050e8:	4413      	add	r3, r2
 80050ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050f2:	463b      	mov	r3, r7
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d116      	bne.n	800512a <USB_EPStartXfer+0x116e>
 80050fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005108:	b29a      	uxth	r2, r3
 800510a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005120:	b29a      	uxth	r2, r3
 8005122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005126:	801a      	strh	r2, [r3, #0]
 8005128:	e061      	b.n	80051ee <USB_EPStartXfer+0x1232>
 800512a:	463b      	mov	r3, r7
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b3e      	cmp	r3, #62	; 0x3e
 8005132:	d81a      	bhi.n	800516a <USB_EPStartXfer+0x11ae>
 8005134:	463b      	mov	r3, r7
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005140:	463b      	mov	r3, r7
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <USB_EPStartXfer+0x119c>
 800514e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005152:	3301      	adds	r3, #1
 8005154:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005158:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800515c:	b29b      	uxth	r3, r3
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	b29a      	uxth	r2, r3
 8005162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	e041      	b.n	80051ee <USB_EPStartXfer+0x1232>
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005176:	463b      	mov	r3, r7
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <USB_EPStartXfer+0x11d2>
 8005184:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005188:	3b01      	subs	r3, #1
 800518a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800518e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005192:	b29b      	uxth	r3, r3
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	b29b      	uxth	r3, r3
 8005198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	e021      	b.n	80051ee <USB_EPStartXfer+0x1232>
 80051aa:	463b      	mov	r3, r7
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d11c      	bne.n	80051ee <USB_EPStartXfer+0x1232>
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051bc:	b29b      	uxth	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051c4:	4413      	add	r3, r2
 80051c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051ca:	463b      	mov	r3, r7
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	011a      	lsls	r2, r3, #4
 80051d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051d6:	4413      	add	r3, r2
 80051d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051e0:	463b      	mov	r3, r7
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051ec:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 81a4 	beq.w	8005542 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80051fa:	1d3b      	adds	r3, r7, #4
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	463b      	mov	r3, r7
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800520e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <USB_EPStartXfer+0x126a>
 800521a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005226:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800522e:	2b00      	cmp	r3, #0
 8005230:	f040 8187 	bne.w	8005542 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005234:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 8180 	bne.w	8005542 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	463b      	mov	r3, r7
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	463b      	mov	r3, r7
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005282:	b29b      	uxth	r3, r3
 8005284:	8013      	strh	r3, [r2, #0]
 8005286:	e15c      	b.n	8005542 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005288:	463b      	mov	r3, r7
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	78db      	ldrb	r3, [r3, #3]
 800528e:	2b01      	cmp	r3, #1
 8005290:	f040 8155 	bne.w	800553e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005294:	463b      	mov	r3, r7
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	463b      	mov	r3, r7
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d90e      	bls.n	80052c2 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80052a4:	463b      	mov	r3, r7
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80052ae:	463b      	mov	r3, r7
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b8:	1ad2      	subs	r2, r2, r3
 80052ba:	463b      	mov	r3, r7
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	619a      	str	r2, [r3, #24]
 80052c0:	e008      	b.n	80052d4 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80052c2:	463b      	mov	r3, r7
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80052cc:	463b      	mov	r3, r7
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2200      	movs	r2, #0
 80052d2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80052d4:	463b      	mov	r3, r7
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d16f      	bne.n	80053be <USB_EPStartXfer+0x1402>
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80052e6:	1d3b      	adds	r3, r7, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	461a      	mov	r2, r3
 80052f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052f6:	4413      	add	r3, r2
 80052f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80052fc:	463b      	mov	r3, r7
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	011a      	lsls	r2, r3, #4
 8005304:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005308:	4413      	add	r3, r2
 800530a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800530e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d116      	bne.n	8005348 <USB_EPStartXfer+0x138c>
 800531a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005326:	b29a      	uxth	r2, r3
 8005328:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533e:	b29a      	uxth	r2, r3
 8005340:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	e05f      	b.n	8005408 <USB_EPStartXfer+0x144c>
 8005348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534c:	2b3e      	cmp	r3, #62	; 0x3e
 800534e:	d818      	bhi.n	8005382 <USB_EPStartXfer+0x13c6>
 8005350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800535a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <USB_EPStartXfer+0x13b4>
 8005366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800536a:	3301      	adds	r3, #1
 800536c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005374:	b29b      	uxth	r3, r3
 8005376:	029b      	lsls	r3, r3, #10
 8005378:	b29a      	uxth	r2, r3
 800537a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	e042      	b.n	8005408 <USB_EPStartXfer+0x144c>
 8005382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800538c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <USB_EPStartXfer+0x13e6>
 8005398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800539c:	3b01      	subs	r3, #1
 800539e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e024      	b.n	8005408 <USB_EPStartXfer+0x144c>
 80053be:	463b      	mov	r3, r7
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d11f      	bne.n	8005408 <USB_EPStartXfer+0x144c>
 80053c8:	1d3b      	adds	r3, r7, #4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053d0:	1d3b      	adds	r3, r7, #4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d8:	b29b      	uxth	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e0:	4413      	add	r3, r2
 80053e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053e6:	463b      	mov	r3, r7
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	011a      	lsls	r2, r3, #4
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f2:	4413      	add	r3, r2
 80053f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005400:	b29a      	uxth	r2, r3
 8005402:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	1d3b      	adds	r3, r7, #4
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005410:	463b      	mov	r3, r7
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	785b      	ldrb	r3, [r3, #1]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d16f      	bne.n	80054fa <USB_EPStartXfer+0x153e>
 800541a:	1d3b      	adds	r3, r7, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005422:	1d3b      	adds	r3, r7, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542a:	b29b      	uxth	r3, r3
 800542c:	461a      	mov	r2, r3
 800542e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005432:	4413      	add	r3, r2
 8005434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005438:	463b      	mov	r3, r7
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	011a      	lsls	r2, r3, #4
 8005440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005444:	4413      	add	r3, r2
 8005446:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800544a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800544e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d116      	bne.n	8005484 <USB_EPStartXfer+0x14c8>
 8005456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005462:	b29a      	uxth	r2, r3
 8005464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547a:	b29a      	uxth	r2, r3
 800547c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005480:	801a      	strh	r2, [r3, #0]
 8005482:	e05e      	b.n	8005542 <USB_EPStartXfer+0x1586>
 8005484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005488:	2b3e      	cmp	r3, #62	; 0x3e
 800548a:	d818      	bhi.n	80054be <USB_EPStartXfer+0x1502>
 800548c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005490:	085b      	lsrs	r3, r3, #1
 8005492:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <USB_EPStartXfer+0x14f0>
 80054a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054a6:	3301      	adds	r3, #1
 80054a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	029b      	lsls	r3, r3, #10
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	e041      	b.n	8005542 <USB_EPStartXfer+0x1586>
 80054be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d104      	bne.n	80054de <USB_EPStartXfer+0x1522>
 80054d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054d8:	3b01      	subs	r3, #1
 80054da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	029b      	lsls	r3, r3, #10
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e023      	b.n	8005542 <USB_EPStartXfer+0x1586>
 80054fa:	463b      	mov	r3, r7
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d11e      	bne.n	8005542 <USB_EPStartXfer+0x1586>
 8005504:	1d3b      	adds	r3, r7, #4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550c:	b29b      	uxth	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005514:	4413      	add	r3, r2
 8005516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800551a:	463b      	mov	r3, r7
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	011a      	lsls	r2, r3, #4
 8005522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005526:	4413      	add	r3, r2
 8005528:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800552c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005534:	b29a      	uxth	r2, r3
 8005536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e001      	b.n	8005542 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e02e      	b.n	80055a0 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	463b      	mov	r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005560:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005564:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005568:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800556c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005570:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005574:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005578:	1d3b      	adds	r3, r7, #4
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	441a      	add	r2, r3
 8005586:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800558a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559a:	b29b      	uxth	r3, r3
 800559c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	785b      	ldrb	r3, [r3, #1]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d2:	81bb      	strh	r3, [r7, #12]
 80055d4:	89bb      	ldrh	r3, [r7, #12]
 80055d6:	f083 0310 	eor.w	r3, r3, #16
 80055da:	81bb      	strh	r3, [r7, #12]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	89bb      	ldrh	r3, [r7, #12]
 80055e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	8013      	strh	r3, [r2, #0]
 80055fc:	e01f      	b.n	800563e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005614:	81fb      	strh	r3, [r7, #14]
 8005616:	89fb      	ldrh	r3, [r7, #14]
 8005618:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800561c:	81fb      	strh	r3, [r7, #14]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	441a      	add	r2, r3
 8005628:	89fb      	ldrh	r3, [r7, #14]
 800562a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563a:	b29b      	uxth	r3, r3
 800563c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800564a:	b480      	push	{r7}
 800564c:	b087      	sub	sp, #28
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	7b1b      	ldrb	r3, [r3, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	f040 809d 	bne.w	8005798 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	785b      	ldrb	r3, [r3, #1]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d04c      	beq.n	8005700 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	823b      	strh	r3, [r7, #16]
 8005674:	8a3b      	ldrh	r3, [r7, #16]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01b      	beq.n	80056b6 <USB_EPClearStall+0x6c>
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005694:	81fb      	strh	r3, [r7, #14]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	89fb      	ldrh	r3, [r7, #14]
 80056a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	78db      	ldrb	r3, [r3, #3]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d06c      	beq.n	8005798 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d4:	81bb      	strh	r3, [r7, #12]
 80056d6:	89bb      	ldrh	r3, [r7, #12]
 80056d8:	f083 0320 	eor.w	r3, r3, #32
 80056dc:	81bb      	strh	r3, [r7, #12]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	441a      	add	r2, r3
 80056e8:	89bb      	ldrh	r3, [r7, #12]
 80056ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	8013      	strh	r3, [r2, #0]
 80056fe:	e04b      	b.n	8005798 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	82fb      	strh	r3, [r7, #22]
 800570e:	8afb      	ldrh	r3, [r7, #22]
 8005710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01b      	beq.n	8005750 <USB_EPClearStall+0x106>
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	82bb      	strh	r3, [r7, #20]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	8abb      	ldrh	r3, [r7, #20]
 800573c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574c:	b29b      	uxth	r3, r3
 800574e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005766:	827b      	strh	r3, [r7, #18]
 8005768:	8a7b      	ldrh	r3, [r7, #18]
 800576a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800576e:	827b      	strh	r3, [r7, #18]
 8005770:	8a7b      	ldrh	r3, [r7, #18]
 8005772:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005776:	827b      	strh	r3, [r7, #18]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	8a7b      	ldrh	r3, [r7, #18]
 8005784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800578c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005794:	b29b      	uxth	r3, r3
 8005796:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2280      	movs	r2, #128	; 0x80
 80057ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr

080057ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr

080057de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b085      	sub	sp, #20
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005800:	b29b      	uxth	r3, r3
 8005802:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005804:	68fb      	ldr	r3, [r7, #12]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005826:	b480      	push	{r7}
 8005828:	b08d      	sub	sp, #52	; 0x34
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	4611      	mov	r1, r2
 8005832:	461a      	mov	r2, r3
 8005834:	460b      	mov	r3, r1
 8005836:	80fb      	strh	r3, [r7, #6]
 8005838:	4613      	mov	r3, r2
 800583a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800583c:	88bb      	ldrh	r3, [r7, #4]
 800583e:	3301      	adds	r3, #1
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	005a      	lsls	r2, r3, #1
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800585e:	e01e      	b.n	800589e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	3301      	adds	r3, #1
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	b29b      	uxth	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	b29a      	uxth	r2, r3
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	3302      	adds	r3, #2
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	3302      	adds	r3, #2
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	3301      	adds	r3, #1
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	3b01      	subs	r3, #1
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1dd      	bne.n	8005860 <USB_WritePMA+0x3a>
  }
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	3734      	adds	r7, #52	; 0x34
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr

080058b0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b08b      	sub	sp, #44	; 0x2c
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	4611      	mov	r1, r2
 80058bc:	461a      	mov	r2, r3
 80058be:	460b      	mov	r3, r1
 80058c0:	80fb      	strh	r3, [r7, #6]
 80058c2:	4613      	mov	r3, r2
 80058c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80058c6:	88bb      	ldrh	r3, [r7, #4]
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	005a      	lsls	r2, r3, #1
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24
 80058e8:	e01b      	b.n	8005922 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	3302      	adds	r3, #2
 80058f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	3301      	adds	r3, #1
 8005904:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	0a1b      	lsrs	r3, r3, #8
 800590a:	b2da      	uxtb	r2, r3
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	3302      	adds	r3, #2
 800591a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	3b01      	subs	r3, #1
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e0      	bne.n	80058ea <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005928:	88bb      	ldrh	r3, [r7, #4]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	b2da      	uxtb	r2, r3
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	701a      	strb	r2, [r3, #0]
  }
}
 8005944:	bf00      	nop
 8005946:	372c      	adds	r7, #44	; 0x2c
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	460b      	mov	r3, r1
 8005958:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	7c1b      	ldrb	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d115      	bne.n	8005992 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800596a:	2202      	movs	r2, #2
 800596c:	2181      	movs	r1, #129	; 0x81
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f001 fe99 	bl	80076a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800597a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800597e:	2202      	movs	r2, #2
 8005980:	2101      	movs	r1, #1
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 fe8f 	bl	80076a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005990:	e012      	b.n	80059b8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	2202      	movs	r2, #2
 8005996:	2181      	movs	r1, #129	; 0x81
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 fe84 	bl	80076a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059a4:	2340      	movs	r3, #64	; 0x40
 80059a6:	2202      	movs	r2, #2
 80059a8:	2101      	movs	r1, #1
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 fe7b 	bl	80076a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059b8:	2308      	movs	r3, #8
 80059ba:	2203      	movs	r2, #3
 80059bc:	2182      	movs	r1, #130	; 0x82
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fe71 	bl	80076a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059ce:	f001 ff91 	bl	80078f4 <USBD_static_malloc>
 80059d2:	4602      	mov	r2, r0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d102      	bne.n	80059ea <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
 80059e8:	e026      	b.n	8005a38 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	7c1b      	ldrb	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d109      	bne.n	8005a28 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a1e:	2101      	movs	r1, #1
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 ff31 	bl	8007888 <USBD_LL_PrepareReceive>
 8005a26:	e007      	b.n	8005a38 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a2e:	2340      	movs	r3, #64	; 0x40
 8005a30:	2101      	movs	r1, #1
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 ff28 	bl	8007888 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a52:	2181      	movs	r1, #129	; 0x81
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 fe4c 	bl	80076f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a60:	2101      	movs	r1, #1
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 fe45 	bl	80076f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a70:	2182      	movs	r1, #130	; 0x82
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 fe3d 	bl	80076f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00e      	beq.n	8005aa6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 ff37 	bl	800790c <USBD_static_free>
    pdev->pClassData = NULL;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d039      	beq.n	8005b4e <USBD_CDC_Setup+0x9e>
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d17f      	bne.n	8005bde <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	88db      	ldrh	r3, [r3, #6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d029      	beq.n	8005b3a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	b25b      	sxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	da11      	bge.n	8005b14 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005afc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	88d2      	ldrh	r2, [r2, #6]
 8005b02:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b04:	6939      	ldr	r1, [r7, #16]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	88db      	ldrh	r3, [r3, #6]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 fa0a 	bl	8006f26 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005b12:	e06b      	b.n	8005bec <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	785a      	ldrb	r2, [r3, #1]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	88db      	ldrh	r3, [r3, #6]
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b2a:	6939      	ldr	r1, [r7, #16]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	88db      	ldrh	r3, [r3, #6]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 fa25 	bl	8006f82 <USBD_CtlPrepareRx>
      break;
 8005b38:	e058      	b.n	8005bec <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	7850      	ldrb	r0, [r2, #1]
 8005b46:	2200      	movs	r2, #0
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	4798      	blx	r3
      break;
 8005b4c:	e04e      	b.n	8005bec <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	2b0b      	cmp	r3, #11
 8005b54:	d02e      	beq.n	8005bb4 <USBD_CDC_Setup+0x104>
 8005b56:	2b0b      	cmp	r3, #11
 8005b58:	dc38      	bgt.n	8005bcc <USBD_CDC_Setup+0x11c>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <USBD_CDC_Setup+0xb4>
 8005b5e:	2b0a      	cmp	r3, #10
 8005b60:	d014      	beq.n	8005b8c <USBD_CDC_Setup+0xdc>
 8005b62:	e033      	b.n	8005bcc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d107      	bne.n	8005b7e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005b6e:	f107 030c 	add.w	r3, r7, #12
 8005b72:	2202      	movs	r2, #2
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 f9d5 	bl	8006f26 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b7c:	e02e      	b.n	8005bdc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 f966 	bl	8006e52 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b86:	2302      	movs	r3, #2
 8005b88:	75fb      	strb	r3, [r7, #23]
          break;
 8005b8a:	e027      	b.n	8005bdc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d107      	bne.n	8005ba6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b96:	f107 030f 	add.w	r3, r7, #15
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 f9c1 	bl	8006f26 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ba4:	e01a      	b.n	8005bdc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 f952 	bl	8006e52 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8005bb2:	e013      	b.n	8005bdc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d00d      	beq.n	8005bda <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f946 	bl	8006e52 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005bca:	e006      	b.n	8005bda <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 f93f 	bl	8006e52 <USBD_CtlError>
          ret = USBD_FAIL;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	75fb      	strb	r3, [r7, #23]
          break;
 8005bd8:	e000      	b.n	8005bdc <USBD_CDC_Setup+0x12c>
          break;
 8005bda:	bf00      	nop
      }
      break;
 8005bdc:	e006      	b.n	8005bec <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 f936 	bl	8006e52 <USBD_CtlError>
      ret = USBD_FAIL;
 8005be6:	2302      	movs	r3, #2
 8005be8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bea:	bf00      	nop
  }

  return ret;
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c08:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c10:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d03a      	beq.n	8005c92 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	331c      	adds	r3, #28
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d029      	beq.n	8005c86 <USBD_CDC_DataIn+0x90>
 8005c32:	78fa      	ldrb	r2, [r7, #3]
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	331c      	adds	r3, #28
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	78f9      	ldrb	r1, [r7, #3]
 8005c46:	68b8      	ldr	r0, [r7, #8]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	4403      	add	r3, r0
 8005c52:	3338      	adds	r3, #56	; 0x38
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c5a:	fb03 f301 	mul.w	r3, r3, r1
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d110      	bne.n	8005c86 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005c64:	78fa      	ldrb	r2, [r7, #3]
 8005c66:	6879      	ldr	r1, [r7, #4]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	331c      	adds	r3, #28
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c78:	78f9      	ldrb	r1, [r7, #3]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 fddf 	bl	8007842 <USBD_LL_Transmit>
 8005c84:	e003      	b.n	8005c8e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e000      	b.n	8005c94 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005c92:	2302      	movs	r3, #2
  }
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fe0a 	bl	80078ce <USBD_LL_GetRxDataSize>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4798      	blx	r3

    return USBD_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005ce8:	2302      	movs	r3, #2
  }
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d00:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d015      	beq.n	8005d38 <USBD_CDC_EP0_RxReady+0x46>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d12:	2bff      	cmp	r3, #255	; 0xff
 8005d14:	d010      	beq.n	8005d38 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d24:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d2c:	b292      	uxth	r2, r2
 8005d2e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	22ff      	movs	r2, #255	; 0xff
 8005d34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2243      	movs	r2, #67	; 0x43
 8005d50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005d52:	4b03      	ldr	r3, [pc, #12]	; (8005d60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	20000094 	.word	0x20000094

08005d64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2243      	movs	r2, #67	; 0x43
 8005d70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005d72:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20000050 	.word	0x20000050

08005d84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2243      	movs	r2, #67	; 0x43
 8005d90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005d92:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	200000d8 	.word	0x200000d8

08005da4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	220a      	movs	r2, #10
 8005db0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005db2:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	2000000c 	.word	0x2000000c

08005dc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e04:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr

08005e22 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e32:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01c      	beq.n	8005e9c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d115      	bne.n	8005e98 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2181      	movs	r1, #129	; 0x81
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f001 fcd7 	bl	8007842 <USBD_LL_Transmit>

      return USBD_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	e002      	b.n	8005e9e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005e9c:	2302      	movs	r3, #2
  }
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d017      	beq.n	8005ef0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	7c1b      	ldrb	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 fcd7 	bl	8007888 <USBD_LL_PrepareReceive>
 8005eda:	e007      	b.n	8005eec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ee2:	2340      	movs	r3, #64	; 0x40
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f001 fcce 	bl	8007888 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	4613      	mov	r3, r2
 8005f06:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e01a      	b.n	8005f48 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	79fa      	ldrb	r2, [r7, #7]
 8005f3e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f001 fb3b 	bl	80075bc <USBD_LL_Init>

  return USBD_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d006      	beq.n	8005f72 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]
 8005f70:	e001      	b.n	8005f76 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005f72:	2302      	movs	r3, #2
 8005f74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr

08005f82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 fb70 	bl	8007670 <USBD_LL_Start>

  return USBD_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr

08005fae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00c      	beq.n	8005fe2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	78fa      	ldrb	r2, [r7, #3]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	78fa      	ldrb	r2, [r7, #3]
 8006002:	4611      	mov	r1, r2
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3

  return USBD_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fed8 	bl	8006dda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006038:	461a      	mov	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2b02      	cmp	r3, #2
 800604c:	d016      	beq.n	800607c <USBD_LL_SetupStage+0x6a>
 800604e:	2b02      	cmp	r3, #2
 8006050:	d81c      	bhi.n	800608c <USBD_LL_SetupStage+0x7a>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <USBD_LL_SetupStage+0x4a>
 8006056:	2b01      	cmp	r3, #1
 8006058:	d008      	beq.n	800606c <USBD_LL_SetupStage+0x5a>
 800605a:	e017      	b.n	800608c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f9cb 	bl	8006400 <USBD_StdDevReq>
      break;
 800606a:	e01a      	b.n	80060a2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa2d 	bl	80064d4 <USBD_StdItfReq>
      break;
 800607a:	e012      	b.n	80060a2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fa6d 	bl	8006564 <USBD_StdEPReq>
      break;
 800608a:	e00a      	b.n	80060a2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006092:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006096:	b2db      	uxtb	r3, r3
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 fb48 	bl	8007730 <USBD_LL_StallEP>
      break;
 80060a0:	bf00      	nop
  }

  return USBD_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	460b      	mov	r3, r1
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80060ba:	7afb      	ldrb	r3, [r7, #11]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d14b      	bne.n	8006158 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d134      	bne.n	800613c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d919      	bls.n	8006112 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d203      	bcs.n	8006100 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	e002      	b.n	8006106 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006104:	b29b      	uxth	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 ff57 	bl	8006fbe <USBD_CtlContinueRx>
 8006110:	e038      	b.n	8006184 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006124:	2b03      	cmp	r3, #3
 8006126:	d105      	bne.n	8006134 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 ff54 	bl	8006fe2 <USBD_CtlSendStatus>
 800613a:	e023      	b.n	8006184 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006142:	2b05      	cmp	r3, #5
 8006144:	d11e      	bne.n	8006184 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800614e:	2100      	movs	r1, #0
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f001 faed 	bl	8007730 <USBD_LL_StallEP>
 8006156:	e015      	b.n	8006184 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00d      	beq.n	8006180 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800616a:	2b03      	cmp	r3, #3
 800616c:	d108      	bne.n	8006180 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	7afa      	ldrb	r2, [r7, #11]
 8006178:	4611      	mov	r1, r2
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	4798      	blx	r3
 800617e:	e001      	b.n	8006184 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006180:	2302      	movs	r3, #2
 8006182:	e000      	b.n	8006186 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b086      	sub	sp, #24
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	460b      	mov	r3, r1
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800619c:	7afb      	ldrb	r3, [r7, #11]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d17f      	bne.n	80062a2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3314      	adds	r3, #20
 80061a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d15c      	bne.n	800626c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d915      	bls.n	80061ea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	1ad2      	subs	r2, r2, r3
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fec1 	bl	8006f5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061dc:	2300      	movs	r3, #0
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f001 fb50 	bl	8007888 <USBD_LL_PrepareReceive>
 80061e8:	e04e      	b.n	8006288 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	6912      	ldr	r2, [r2, #16]
 80061f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80061f6:	fb02 f201 	mul.w	r2, r2, r1
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d11c      	bne.n	800623a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006208:	429a      	cmp	r2, r3
 800620a:	d316      	bcc.n	800623a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006216:	429a      	cmp	r2, r3
 8006218:	d20f      	bcs.n	800623a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 fe9d 	bl	8006f5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800622c:	2300      	movs	r3, #0
 800622e:	2200      	movs	r2, #0
 8006230:	2100      	movs	r1, #0
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f001 fb28 	bl	8007888 <USBD_LL_PrepareReceive>
 8006238:	e026      	b.n	8006288 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800624c:	2b03      	cmp	r3, #3
 800624e:	d105      	bne.n	800625c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800625c:	2180      	movs	r1, #128	; 0x80
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f001 fa66 	bl	8007730 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 fecf 	bl	8007008 <USBD_CtlReceiveStatus>
 800626a:	e00d      	b.n	8006288 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006272:	2b04      	cmp	r3, #4
 8006274:	d004      	beq.n	8006280 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800627c:	2b00      	cmp	r3, #0
 800627e:	d103      	bne.n	8006288 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006280:	2180      	movs	r1, #128	; 0x80
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f001 fa54 	bl	8007730 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800628e:	2b01      	cmp	r3, #1
 8006290:	d11d      	bne.n	80062ce <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff fe81 	bl	8005f9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062a0:	e015      	b.n	80062ce <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00d      	beq.n	80062ca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d108      	bne.n	80062ca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	7afa      	ldrb	r2, [r7, #11]
 80062c2:	4611      	mov	r1, r2
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	4798      	blx	r3
 80062c8:	e001      	b.n	80062ce <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062ca:	2302      	movs	r3, #2
 80062cc:	e000      	b.n	80062d0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062e0:	2340      	movs	r3, #64	; 0x40
 80062e2:	2200      	movs	r2, #0
 80062e4:	2100      	movs	r1, #0
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 f9dd 	bl	80076a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2240      	movs	r2, #64	; 0x40
 80062f8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062fc:	2340      	movs	r3, #64	; 0x40
 80062fe:	2200      	movs	r2, #0
 8006300:	2180      	movs	r1, #128	; 0x80
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 f9cf 	bl	80076a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2240      	movs	r2, #64	; 0x40
 8006312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d009      	beq.n	8006350 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6852      	ldr	r2, [r2, #4]
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	4611      	mov	r1, r2
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
  }

  return USBD_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	460b      	mov	r3, r1
 8006364:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	78fa      	ldrb	r2, [r7, #3]
 800636a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2204      	movs	r2, #4
 8006390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr

080063a0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d105      	bne.n	80063be <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr

080063ca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d10b      	bne.n	80063f4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d005      	beq.n	8006426 <USBD_StdDevReq+0x26>
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d84f      	bhi.n	80064be <USBD_StdDevReq+0xbe>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <USBD_StdDevReq+0x36>
 8006422:	2b20      	cmp	r3, #32
 8006424:	d14b      	bne.n	80064be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
      break;
 8006434:	e048      	b.n	80064c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	785b      	ldrb	r3, [r3, #1]
 800643a:	2b09      	cmp	r3, #9
 800643c:	d839      	bhi.n	80064b2 <USBD_StdDevReq+0xb2>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <USBD_StdDevReq+0x44>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006495 	.word	0x08006495
 8006448:	080064a9 	.word	0x080064a9
 800644c:	080064b3 	.word	0x080064b3
 8006450:	0800649f 	.word	0x0800649f
 8006454:	080064b3 	.word	0x080064b3
 8006458:	08006477 	.word	0x08006477
 800645c:	0800646d 	.word	0x0800646d
 8006460:	080064b3 	.word	0x080064b3
 8006464:	0800648b 	.word	0x0800648b
 8006468:	08006481 	.word	0x08006481
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f9dc 	bl	800682c <USBD_GetDescriptor>
          break;
 8006474:	e022      	b.n	80064bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fb3f 	bl	8006afc <USBD_SetAddress>
          break;
 800647e:	e01d      	b.n	80064bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fb7e 	bl	8006b84 <USBD_SetConfig>
          break;
 8006488:	e018      	b.n	80064bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fc07 	bl	8006ca0 <USBD_GetConfig>
          break;
 8006492:	e013      	b.n	80064bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fc37 	bl	8006d0a <USBD_GetStatus>
          break;
 800649c:	e00e      	b.n	80064bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fc65 	bl	8006d70 <USBD_SetFeature>
          break;
 80064a6:	e009      	b.n	80064bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fc74 	bl	8006d98 <USBD_ClrFeature>
          break;
 80064b0:	e004      	b.n	80064bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fccc 	bl	8006e52 <USBD_CtlError>
          break;
 80064ba:	bf00      	nop
      }
      break;
 80064bc:	e004      	b.n	80064c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fcc6 	bl	8006e52 <USBD_CtlError>
      break;
 80064c6:	bf00      	nop
  }

  return ret;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop

080064d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064ea:	2b40      	cmp	r3, #64	; 0x40
 80064ec:	d005      	beq.n	80064fa <USBD_StdItfReq+0x26>
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d82e      	bhi.n	8006550 <USBD_StdItfReq+0x7c>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <USBD_StdItfReq+0x26>
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d12a      	bne.n	8006550 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006500:	3b01      	subs	r3, #1
 8006502:	2b02      	cmp	r3, #2
 8006504:	d81d      	bhi.n	8006542 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	889b      	ldrh	r3, [r3, #4]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b01      	cmp	r3, #1
 800650e:	d813      	bhi.n	8006538 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
 800651e:	4603      	mov	r3, r0
 8006520:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	88db      	ldrh	r3, [r3, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d110      	bne.n	800654c <USBD_StdItfReq+0x78>
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10d      	bne.n	800654c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fd56 	bl	8006fe2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006536:	e009      	b.n	800654c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fc89 	bl	8006e52 <USBD_CtlError>
          break;
 8006540:	e004      	b.n	800654c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fc84 	bl	8006e52 <USBD_CtlError>
          break;
 800654a:	e000      	b.n	800654e <USBD_StdItfReq+0x7a>
          break;
 800654c:	bf00      	nop
      }
      break;
 800654e:	e004      	b.n	800655a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fc7d 	bl	8006e52 <USBD_CtlError>
      break;
 8006558:	bf00      	nop
  }

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	889b      	ldrh	r3, [r3, #4]
 8006576:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d007      	beq.n	8006594 <USBD_StdEPReq+0x30>
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	f200 8146 	bhi.w	8006816 <USBD_StdEPReq+0x2b2>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <USBD_StdEPReq+0x40>
 800658e:	2b20      	cmp	r3, #32
 8006590:	f040 8141 	bne.w	8006816 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
      break;
 80065a2:	e13d      	b.n	8006820 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d10a      	bne.n	80065c6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	e12d      	b.n	8006822 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d007      	beq.n	80065de <USBD_StdEPReq+0x7a>
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	f300 811b 	bgt.w	800680a <USBD_StdEPReq+0x2a6>
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d072      	beq.n	80066be <USBD_StdEPReq+0x15a>
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d03a      	beq.n	8006652 <USBD_StdEPReq+0xee>
 80065dc:	e115      	b.n	800680a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d002      	beq.n	80065ee <USBD_StdEPReq+0x8a>
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d015      	beq.n	8006618 <USBD_StdEPReq+0xb4>
 80065ec:	e02b      	b.n	8006646 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00c      	beq.n	800660e <USBD_StdEPReq+0xaa>
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	2b80      	cmp	r3, #128	; 0x80
 80065f8:	d009      	beq.n	800660e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 f896 	bl	8007730 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006604:	2180      	movs	r1, #128	; 0x80
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 f892 	bl	8007730 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800660c:	e020      	b.n	8006650 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fc1e 	bl	8006e52 <USBD_CtlError>
              break;
 8006616:	e01b      	b.n	8006650 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	885b      	ldrh	r3, [r3, #2]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10e      	bne.n	800663e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <USBD_StdEPReq+0xda>
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	2b80      	cmp	r3, #128	; 0x80
 800662a:	d008      	beq.n	800663e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	88db      	ldrh	r3, [r3, #6]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 f879 	bl	8007730 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fccf 	bl	8006fe2 <USBD_CtlSendStatus>

              break;
 8006644:	e004      	b.n	8006650 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fc02 	bl	8006e52 <USBD_CtlError>
              break;
 800664e:	bf00      	nop
          }
          break;
 8006650:	e0e0      	b.n	8006814 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006658:	2b02      	cmp	r3, #2
 800665a:	d002      	beq.n	8006662 <USBD_StdEPReq+0xfe>
 800665c:	2b03      	cmp	r3, #3
 800665e:	d015      	beq.n	800668c <USBD_StdEPReq+0x128>
 8006660:	e026      	b.n	80066b0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00c      	beq.n	8006682 <USBD_StdEPReq+0x11e>
 8006668:	7bbb      	ldrb	r3, [r7, #14]
 800666a:	2b80      	cmp	r3, #128	; 0x80
 800666c:	d009      	beq.n	8006682 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f001 f85c 	bl	8007730 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006678:	2180      	movs	r1, #128	; 0x80
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 f858 	bl	8007730 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006680:	e01c      	b.n	80066bc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fbe4 	bl	8006e52 <USBD_CtlError>
              break;
 800668a:	e017      	b.n	80066bc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	885b      	ldrh	r3, [r3, #2]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d112      	bne.n	80066ba <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 f863 	bl	800776e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fc9a 	bl	8006fe2 <USBD_CtlSendStatus>
              }
              break;
 80066ae:	e004      	b.n	80066ba <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fbcd 	bl	8006e52 <USBD_CtlError>
              break;
 80066b8:	e000      	b.n	80066bc <USBD_StdEPReq+0x158>
              break;
 80066ba:	bf00      	nop
          }
          break;
 80066bc:	e0aa      	b.n	8006814 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d002      	beq.n	80066ce <USBD_StdEPReq+0x16a>
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d032      	beq.n	8006732 <USBD_StdEPReq+0x1ce>
 80066cc:	e097      	b.n	80067fe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <USBD_StdEPReq+0x180>
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d004      	beq.n	80066e4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fbb8 	bl	8006e52 <USBD_CtlError>
                break;
 80066e2:	e091      	b.n	8006808 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	da0b      	bge.n	8006704 <USBD_StdEPReq+0x1a0>
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	3310      	adds	r3, #16
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	4413      	add	r3, r2
 8006700:	3304      	adds	r3, #4
 8006702:	e00b      	b.n	800671c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	4413      	add	r3, r2
 800671a:	3304      	adds	r3, #4
 800671c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2202      	movs	r2, #2
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fbfb 	bl	8006f26 <USBD_CtlSendData>
              break;
 8006730:	e06a      	b.n	8006808 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006732:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006736:	2b00      	cmp	r3, #0
 8006738:	da11      	bge.n	800675e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800673a:	7bbb      	ldrb	r3, [r7, #14]
 800673c:	f003 020f 	and.w	r2, r3, #15
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	3318      	adds	r3, #24
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d117      	bne.n	8006784 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fb7b 	bl	8006e52 <USBD_CtlError>
                  break;
 800675c:	e054      	b.n	8006808 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	f003 020f 	and.w	r2, r3, #15
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fb68 	bl	8006e52 <USBD_CtlError>
                  break;
 8006782:	e041      	b.n	8006808 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006788:	2b00      	cmp	r3, #0
 800678a:	da0b      	bge.n	80067a4 <USBD_StdEPReq+0x240>
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	3310      	adds	r3, #16
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	3304      	adds	r3, #4
 80067a2:	e00b      	b.n	80067bc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	3304      	adds	r3, #4
 80067bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067be:	7bbb      	ldrb	r3, [r7, #14]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <USBD_StdEPReq+0x266>
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d103      	bne.n	80067d2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	e00e      	b.n	80067f0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 ffe8 	bl	80077ac <USBD_LL_IsStallEP>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2201      	movs	r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	e002      	b.n	80067f0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2202      	movs	r2, #2
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fb95 	bl	8006f26 <USBD_CtlSendData>
              break;
 80067fc:	e004      	b.n	8006808 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fb26 	bl	8006e52 <USBD_CtlError>
              break;
 8006806:	bf00      	nop
          }
          break;
 8006808:	e004      	b.n	8006814 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fb20 	bl	8006e52 <USBD_CtlError>
          break;
 8006812:	bf00      	nop
      }
      break;
 8006814:	e004      	b.n	8006820 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fb1a 	bl	8006e52 <USBD_CtlError>
      break;
 800681e:	bf00      	nop
  }

  return ret;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	885b      	ldrh	r3, [r3, #2]
 8006846:	0a1b      	lsrs	r3, r3, #8
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	2b06      	cmp	r3, #6
 800684e:	f200 8128 	bhi.w	8006aa2 <USBD_GetDescriptor+0x276>
 8006852:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <USBD_GetDescriptor+0x2c>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	08006875 	.word	0x08006875
 800685c:	0800688d 	.word	0x0800688d
 8006860:	080068cd 	.word	0x080068cd
 8006864:	08006aa3 	.word	0x08006aa3
 8006868:	08006aa3 	.word	0x08006aa3
 800686c:	08006a43 	.word	0x08006a43
 8006870:	08006a6f 	.word	0x08006a6f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	7c12      	ldrb	r2, [r2, #16]
 8006880:	f107 0108 	add.w	r1, r7, #8
 8006884:	4610      	mov	r0, r2
 8006886:	4798      	blx	r3
 8006888:	60f8      	str	r0, [r7, #12]
      break;
 800688a:	e112      	b.n	8006ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7c1b      	ldrb	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10d      	bne.n	80068b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689c:	f107 0208 	add.w	r2, r7, #8
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3301      	adds	r3, #1
 80068aa:	2202      	movs	r2, #2
 80068ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068ae:	e100      	b.n	8006ab2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	f107 0208 	add.w	r2, r7, #8
 80068bc:	4610      	mov	r0, r2
 80068be:	4798      	blx	r3
 80068c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3301      	adds	r3, #1
 80068c6:	2202      	movs	r2, #2
 80068c8:	701a      	strb	r2, [r3, #0]
      break;
 80068ca:	e0f2      	b.n	8006ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	885b      	ldrh	r3, [r3, #2]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	f200 80ac 	bhi.w	8006a30 <USBD_GetDescriptor+0x204>
 80068d8:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <USBD_GetDescriptor+0xb4>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	080068f9 	.word	0x080068f9
 80068e4:	0800692d 	.word	0x0800692d
 80068e8:	08006961 	.word	0x08006961
 80068ec:	08006995 	.word	0x08006995
 80068f0:	080069c9 	.word	0x080069c9
 80068f4:	080069fd 	.word	0x080069fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00b      	beq.n	800691c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	7c12      	ldrb	r2, [r2, #16]
 8006910:	f107 0108 	add.w	r1, r7, #8
 8006914:	4610      	mov	r0, r2
 8006916:	4798      	blx	r3
 8006918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800691a:	e091      	b.n	8006a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa97 	bl	8006e52 <USBD_CtlError>
            err++;
 8006924:	7afb      	ldrb	r3, [r7, #11]
 8006926:	3301      	adds	r3, #1
 8006928:	72fb      	strb	r3, [r7, #11]
          break;
 800692a:	e089      	b.n	8006a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	7c12      	ldrb	r2, [r2, #16]
 8006944:	f107 0108 	add.w	r1, r7, #8
 8006948:	4610      	mov	r0, r2
 800694a:	4798      	blx	r3
 800694c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800694e:	e077      	b.n	8006a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fa7d 	bl	8006e52 <USBD_CtlError>
            err++;
 8006958:	7afb      	ldrb	r3, [r7, #11]
 800695a:	3301      	adds	r3, #1
 800695c:	72fb      	strb	r3, [r7, #11]
          break;
 800695e:	e06f      	b.n	8006a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00b      	beq.n	8006984 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	7c12      	ldrb	r2, [r2, #16]
 8006978:	f107 0108 	add.w	r1, r7, #8
 800697c:	4610      	mov	r0, r2
 800697e:	4798      	blx	r3
 8006980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006982:	e05d      	b.n	8006a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fa63 	bl	8006e52 <USBD_CtlError>
            err++;
 800698c:	7afb      	ldrb	r3, [r7, #11]
 800698e:	3301      	adds	r3, #1
 8006990:	72fb      	strb	r3, [r7, #11]
          break;
 8006992:	e055      	b.n	8006a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	7c12      	ldrb	r2, [r2, #16]
 80069ac:	f107 0108 	add.w	r1, r7, #8
 80069b0:	4610      	mov	r0, r2
 80069b2:	4798      	blx	r3
 80069b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069b6:	e043      	b.n	8006a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa49 	bl	8006e52 <USBD_CtlError>
            err++;
 80069c0:	7afb      	ldrb	r3, [r7, #11]
 80069c2:	3301      	adds	r3, #1
 80069c4:	72fb      	strb	r3, [r7, #11]
          break;
 80069c6:	e03b      	b.n	8006a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	7c12      	ldrb	r2, [r2, #16]
 80069e0:	f107 0108 	add.w	r1, r7, #8
 80069e4:	4610      	mov	r0, r2
 80069e6:	4798      	blx	r3
 80069e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ea:	e029      	b.n	8006a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fa2f 	bl	8006e52 <USBD_CtlError>
            err++;
 80069f4:	7afb      	ldrb	r3, [r7, #11]
 80069f6:	3301      	adds	r3, #1
 80069f8:	72fb      	strb	r3, [r7, #11]
          break;
 80069fa:	e021      	b.n	8006a40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	7c12      	ldrb	r2, [r2, #16]
 8006a14:	f107 0108 	add.w	r1, r7, #8
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4798      	blx	r3
 8006a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a1e:	e00f      	b.n	8006a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa15 	bl	8006e52 <USBD_CtlError>
            err++;
 8006a28:	7afb      	ldrb	r3, [r7, #11]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a2e:	e007      	b.n	8006a40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa0d 	bl	8006e52 <USBD_CtlError>
          err++;
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a3e:	e038      	b.n	8006ab2 <USBD_GetDescriptor+0x286>
 8006a40:	e037      	b.n	8006ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	7c1b      	ldrb	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a52:	f107 0208 	add.w	r2, r7, #8
 8006a56:	4610      	mov	r0, r2
 8006a58:	4798      	blx	r3
 8006a5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a5c:	e029      	b.n	8006ab2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9f6 	bl	8006e52 <USBD_CtlError>
        err++;
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a6c:	e021      	b.n	8006ab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7c1b      	ldrb	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10d      	bne.n	8006a92 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	f107 0208 	add.w	r2, r7, #8
 8006a82:	4610      	mov	r0, r2
 8006a84:	4798      	blx	r3
 8006a86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a90:	e00f      	b.n	8006ab2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f9dc 	bl	8006e52 <USBD_CtlError>
        err++;
 8006a9a:	7afb      	ldrb	r3, [r7, #11]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	72fb      	strb	r3, [r7, #11]
      break;
 8006aa0:	e007      	b.n	8006ab2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f9d4 	bl	8006e52 <USBD_CtlError>
      err++;
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	3301      	adds	r3, #1
 8006aae:	72fb      	strb	r3, [r7, #11]
      break;
 8006ab0:	bf00      	nop
  }

  if (err != 0U)
 8006ab2:	7afb      	ldrb	r3, [r7, #11]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d11c      	bne.n	8006af2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ab8:	893b      	ldrh	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d011      	beq.n	8006ae2 <USBD_GetDescriptor+0x2b6>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	88db      	ldrh	r3, [r3, #6]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00d      	beq.n	8006ae2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	88da      	ldrh	r2, [r3, #6]
 8006aca:	893b      	ldrh	r3, [r7, #8]
 8006acc:	4293      	cmp	r3, r2
 8006ace:	bf28      	it	cs
 8006ad0:	4613      	movcs	r3, r2
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ad6:	893b      	ldrh	r3, [r7, #8]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fa22 	bl	8006f26 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	88db      	ldrh	r3, [r3, #6]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fa79 	bl	8006fe2 <USBD_CtlSendStatus>
 8006af0:	e000      	b.n	8006af4 <USBD_GetDescriptor+0x2c8>
    return;
 8006af2:	bf00      	nop
    }
  }
}
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop

08006afc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	889b      	ldrh	r3, [r3, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d130      	bne.n	8006b70 <USBD_SetAddress+0x74>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	88db      	ldrh	r3, [r3, #6]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d12c      	bne.n	8006b70 <USBD_SetAddress+0x74>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	885b      	ldrh	r3, [r3, #2]
 8006b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b1c:	d828      	bhi.n	8006b70 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	885b      	ldrh	r3, [r3, #2]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d104      	bne.n	8006b3e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f98b 	bl	8006e52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3c:	e01d      	b.n	8006b7a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	7bfa      	ldrb	r2, [r7, #15]
 8006b42:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fe5a 	bl	8007804 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fa46 	bl	8006fe2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d004      	beq.n	8006b66 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b64:	e009      	b.n	8006b7a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6e:	e004      	b.n	8006b7a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f96d 	bl	8006e52 <USBD_CtlError>
  }
}
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	885b      	ldrh	r3, [r3, #2]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <USBD_SetConfig+0x118>)
 8006b96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b98:	4b40      	ldr	r3, [pc, #256]	; (8006c9c <USBD_SetConfig+0x118>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d904      	bls.n	8006baa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f955 	bl	8006e52 <USBD_CtlError>
 8006ba8:	e075      	b.n	8006c96 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d002      	beq.n	8006bba <USBD_SetConfig+0x36>
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d023      	beq.n	8006c00 <USBD_SetConfig+0x7c>
 8006bb8:	e062      	b.n	8006c80 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006bba:	4b38      	ldr	r3, [pc, #224]	; (8006c9c <USBD_SetConfig+0x118>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01a      	beq.n	8006bf8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006bc2:	4b36      	ldr	r3, [pc, #216]	; (8006c9c <USBD_SetConfig+0x118>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2203      	movs	r2, #3
 8006bd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bd4:	4b31      	ldr	r3, [pc, #196]	; (8006c9c <USBD_SetConfig+0x118>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff f9e7 	bl	8005fae <USBD_SetClassConfig>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d104      	bne.n	8006bf0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f932 	bl	8006e52 <USBD_CtlError>
            return;
 8006bee:	e052      	b.n	8006c96 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f9f6 	bl	8006fe2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006bf6:	e04e      	b.n	8006c96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f9f2 	bl	8006fe2 <USBD_CtlSendStatus>
        break;
 8006bfe:	e04a      	b.n	8006c96 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c00:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <USBD_SetConfig+0x118>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d112      	bne.n	8006c2e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c10:	4b22      	ldr	r3, [pc, #136]	; (8006c9c <USBD_SetConfig+0x118>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c1a:	4b20      	ldr	r3, [pc, #128]	; (8006c9c <USBD_SetConfig+0x118>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff f9e3 	bl	8005fec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f9db 	bl	8006fe2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c2c:	e033      	b.n	8006c96 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c2e:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <USBD_SetConfig+0x118>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d01d      	beq.n	8006c78 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff f9d1 	bl	8005fec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c4a:	4b14      	ldr	r3, [pc, #80]	; (8006c9c <USBD_SetConfig+0x118>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c54:	4b11      	ldr	r3, [pc, #68]	; (8006c9c <USBD_SetConfig+0x118>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff f9a7 	bl	8005fae <USBD_SetClassConfig>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d104      	bne.n	8006c70 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f8f2 	bl	8006e52 <USBD_CtlError>
            return;
 8006c6e:	e012      	b.n	8006c96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f9b6 	bl	8006fe2 <USBD_CtlSendStatus>
        break;
 8006c76:	e00e      	b.n	8006c96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f9b2 	bl	8006fe2 <USBD_CtlSendStatus>
        break;
 8006c7e:	e00a      	b.n	8006c96 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f8e5 	bl	8006e52 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006c88:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <USBD_SetConfig+0x118>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff f9ac 	bl	8005fec <USBD_ClrClassConfig>
        break;
 8006c94:	bf00      	nop
    }
  }
}
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	200001a0 	.word	0x200001a0

08006ca0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	88db      	ldrh	r3, [r3, #6]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d004      	beq.n	8006cbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f8cc 	bl	8006e52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cba:	e022      	b.n	8006d02 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	dc02      	bgt.n	8006ccc <USBD_GetConfig+0x2c>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dc03      	bgt.n	8006cd2 <USBD_GetConfig+0x32>
 8006cca:	e015      	b.n	8006cf8 <USBD_GetConfig+0x58>
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d00b      	beq.n	8006ce8 <USBD_GetConfig+0x48>
 8006cd0:	e012      	b.n	8006cf8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3308      	adds	r3, #8
 8006cdc:	2201      	movs	r2, #1
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f920 	bl	8006f26 <USBD_CtlSendData>
        break;
 8006ce6:	e00c      	b.n	8006d02 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3304      	adds	r3, #4
 8006cec:	2201      	movs	r2, #1
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f918 	bl	8006f26 <USBD_CtlSendData>
        break;
 8006cf6:	e004      	b.n	8006d02 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f8a9 	bl	8006e52 <USBD_CtlError>
        break;
 8006d00:	bf00      	nop
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d81e      	bhi.n	8006d5e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	88db      	ldrh	r3, [r3, #6]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d004      	beq.n	8006d32 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f891 	bl	8006e52 <USBD_CtlError>
        break;
 8006d30:	e01a      	b.n	8006d68 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f043 0202 	orr.w	r2, r3, #2
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	330c      	adds	r3, #12
 8006d52:	2202      	movs	r2, #2
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f8e5 	bl	8006f26 <USBD_CtlSendData>
      break;
 8006d5c:	e004      	b.n	8006d68 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f876 	bl	8006e52 <USBD_CtlError>
      break;
 8006d66:	bf00      	nop
  }
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	885b      	ldrh	r3, [r3, #2]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d106      	bne.n	8006d90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f929 	bl	8006fe2 <USBD_CtlSendStatus>
  }
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	3b01      	subs	r3, #1
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d80b      	bhi.n	8006dc6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	885b      	ldrh	r3, [r3, #2]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d10c      	bne.n	8006dd0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f90f 	bl	8006fe2 <USBD_CtlSendStatus>
      }
      break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f842 	bl	8006e52 <USBD_CtlError>
      break;
 8006dce:	e000      	b.n	8006dd2 <USBD_ClrFeature+0x3a>
      break;
 8006dd0:	bf00      	nop
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781a      	ldrb	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	785a      	ldrb	r2, [r3, #1]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	3302      	adds	r3, #2
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	3303      	adds	r3, #3
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	4413      	add	r3, r2
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	3304      	adds	r3, #4
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	3305      	adds	r3, #5
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	4413      	add	r3, r2
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	3306      	adds	r3, #6
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	3307      	adds	r3, #7
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	4413      	add	r3, r2
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	80da      	strh	r2, [r3, #6]

}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006e5c:	2180      	movs	r1, #128	; 0x80
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fc66 	bl	8007730 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006e64:	2100      	movs	r1, #0
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fc62 	bl	8007730 <USBD_LL_StallEP>
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d032      	beq.n	8006ef0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f834 	bl	8006ef8 <USBD_GetLen>
 8006e90:	4603      	mov	r3, r0
 8006e92:	3301      	adds	r3, #1
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	75fa      	strb	r2, [r7, #23]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	7812      	ldrb	r2, [r2, #0]
 8006eae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	75fa      	strb	r2, [r7, #23]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4413      	add	r3, r2
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006ec0:	e012      	b.n	8006ee8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	60fa      	str	r2, [r7, #12]
 8006ec8:	7dfa      	ldrb	r2, [r7, #23]
 8006eca:	1c51      	adds	r1, r2, #1
 8006ecc:	75f9      	strb	r1, [r7, #23]
 8006ece:	4611      	mov	r1, r2
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	440a      	add	r2, r1
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	75fa      	strb	r2, [r7, #23]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e8      	bne.n	8006ec2 <USBD_GetString+0x4e>
    }
  }
}
 8006ef0:	bf00      	nop
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f04:	e005      	b.n	8006f12 <USBD_GetLen+0x1a>
  {
    len++;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f5      	bne.n	8006f06 <USBD_GetLen+0xe>
  }

  return len;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr

08006f26 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	4613      	mov	r3, r2
 8006f32:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f3c:	88fa      	ldrh	r2, [r7, #6]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fc77 	bl	8007842 <USBD_LL_Transmit>

  return USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	2100      	movs	r1, #0
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fc65 	bl	8007842 <USBD_LL_Transmit>

  return USBD_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2203      	movs	r2, #3
 8006f94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f98:	88fa      	ldrh	r2, [r7, #6]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006fa0:	88fa      	ldrh	r2, [r7, #6]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	2100      	movs	r1, #0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fc6a 	bl	8007888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 fc58 	bl	8007888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2204      	movs	r2, #4
 8006fee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fc22 	bl	8007842 <USBD_LL_Transmit>

  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2205      	movs	r2, #5
 8007014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007018:	2300      	movs	r3, #0
 800701a:	2200      	movs	r2, #0
 800701c:	2100      	movs	r1, #0
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fc32 	bl	8007888 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007034:	2200      	movs	r2, #0
 8007036:	4912      	ldr	r1, [pc, #72]	; (8007080 <MX_USB_DEVICE_Init+0x50>)
 8007038:	4812      	ldr	r0, [pc, #72]	; (8007084 <MX_USB_DEVICE_Init+0x54>)
 800703a:	f7fe ff5e 	bl	8005efa <USBD_Init>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007044:	f7f9 fa80 	bl	8000548 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007048:	490f      	ldr	r1, [pc, #60]	; (8007088 <MX_USB_DEVICE_Init+0x58>)
 800704a:	480e      	ldr	r0, [pc, #56]	; (8007084 <MX_USB_DEVICE_Init+0x54>)
 800704c:	f7fe ff80 	bl	8005f50 <USBD_RegisterClass>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007056:	f7f9 fa77 	bl	8000548 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800705a:	490c      	ldr	r1, [pc, #48]	; (800708c <MX_USB_DEVICE_Init+0x5c>)
 800705c:	4809      	ldr	r0, [pc, #36]	; (8007084 <MX_USB_DEVICE_Init+0x54>)
 800705e:	f7fe feb1 	bl	8005dc4 <USBD_CDC_RegisterInterface>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007068:	f7f9 fa6e 	bl	8000548 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800706c:	4805      	ldr	r0, [pc, #20]	; (8007084 <MX_USB_DEVICE_Init+0x54>)
 800706e:	f7fe ff88 	bl	8005f82 <USBD_Start>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007078:	f7f9 fa66 	bl	8000548 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800707c:	bf00      	nop
 800707e:	bd80      	pop	{r7, pc}
 8007080:	2000012c 	.word	0x2000012c
 8007084:	20000574 	.word	0x20000574
 8007088:	20000018 	.word	0x20000018
 800708c:	2000011c 	.word	0x2000011c

08007090 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007094:	2200      	movs	r2, #0
 8007096:	4905      	ldr	r1, [pc, #20]	; (80070ac <CDC_Init_FS+0x1c>)
 8007098:	4805      	ldr	r0, [pc, #20]	; (80070b0 <CDC_Init_FS+0x20>)
 800709a:	f7fe fea9 	bl	8005df0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800709e:	4905      	ldr	r1, [pc, #20]	; (80070b4 <CDC_Init_FS+0x24>)
 80070a0:	4803      	ldr	r0, [pc, #12]	; (80070b0 <CDC_Init_FS+0x20>)
 80070a2:	f7fe febe 	bl	8005e22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000c20 	.word	0x20000c20
 80070b0:	20000574 	.word	0x20000574
 80070b4:	20000838 	.word	0x20000838

080070b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070be:	4618      	mov	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr
	...

080070c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	6039      	str	r1, [r7, #0]
 80070d2:	71fb      	strb	r3, [r7, #7]
 80070d4:	4613      	mov	r3, r2
 80070d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	2b23      	cmp	r3, #35	; 0x23
 80070dc:	d84a      	bhi.n	8007174 <CDC_Control_FS+0xac>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <CDC_Control_FS+0x1c>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	08007175 	.word	0x08007175
 80070e8:	08007175 	.word	0x08007175
 80070ec:	08007175 	.word	0x08007175
 80070f0:	08007175 	.word	0x08007175
 80070f4:	08007175 	.word	0x08007175
 80070f8:	08007175 	.word	0x08007175
 80070fc:	08007175 	.word	0x08007175
 8007100:	08007175 	.word	0x08007175
 8007104:	08007175 	.word	0x08007175
 8007108:	08007175 	.word	0x08007175
 800710c:	08007175 	.word	0x08007175
 8007110:	08007175 	.word	0x08007175
 8007114:	08007175 	.word	0x08007175
 8007118:	08007175 	.word	0x08007175
 800711c:	08007175 	.word	0x08007175
 8007120:	08007175 	.word	0x08007175
 8007124:	08007175 	.word	0x08007175
 8007128:	08007175 	.word	0x08007175
 800712c:	08007175 	.word	0x08007175
 8007130:	08007175 	.word	0x08007175
 8007134:	08007175 	.word	0x08007175
 8007138:	08007175 	.word	0x08007175
 800713c:	08007175 	.word	0x08007175
 8007140:	08007175 	.word	0x08007175
 8007144:	08007175 	.word	0x08007175
 8007148:	08007175 	.word	0x08007175
 800714c:	08007175 	.word	0x08007175
 8007150:	08007175 	.word	0x08007175
 8007154:	08007175 	.word	0x08007175
 8007158:	08007175 	.word	0x08007175
 800715c:	08007175 	.word	0x08007175
 8007160:	08007175 	.word	0x08007175
 8007164:	08007175 	.word	0x08007175
 8007168:	08007175 	.word	0x08007175
 800716c:	08007175 	.word	0x08007175
 8007170:	08007175 	.word	0x08007175
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007174:	bf00      	nop
  }

  return (USBD_OK);
 8007176:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop

08007184 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < (*Len); i++)
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e009      	b.n	80071a8 <CDC_Receive_FS+0x24>
	  fifo_push(Buf[i]);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	4413      	add	r3, r2
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f7f8 ffd5 	bl	800014c <fifo_push>
  for (int i = 0; i < (*Len); i++)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3301      	adds	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d8f0      	bhi.n	8007194 <CDC_Receive_FS+0x10>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	4805      	ldr	r0, [pc, #20]	; (80071cc <CDC_Receive_FS+0x48>)
 80071b6:	f7fe fe34 	bl	8005e22 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071ba:	4804      	ldr	r0, [pc, #16]	; (80071cc <CDC_Receive_FS+0x48>)
 80071bc:	f7fe fe73 	bl	8005ea6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80071c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000574 	.word	0x20000574

080071d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80071e0:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <CDC_Transmit_FS+0x48>)
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e00b      	b.n	800720e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80071f6:	887b      	ldrh	r3, [r7, #2]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4806      	ldr	r0, [pc, #24]	; (8007218 <CDC_Transmit_FS+0x48>)
 80071fe:	f7fe fdf7 	bl	8005df0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007202:	4805      	ldr	r0, [pc, #20]	; (8007218 <CDC_Transmit_FS+0x48>)
 8007204:	f7fe fe20 	bl	8005e48 <USBD_CDC_TransmitPacket>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000574 	.word	0x20000574

0800721c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	6039      	str	r1, [r7, #0]
 8007226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2212      	movs	r2, #18
 800722c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800722e:	4b03      	ldr	r3, [pc, #12]	; (800723c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	20000148 	.word	0x20000148

08007240 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	6039      	str	r1, [r7, #0]
 800724a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2204      	movs	r2, #4
 8007250:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007252:	4b03      	ldr	r3, [pc, #12]	; (8007260 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	2000015c 	.word	0x2000015c

08007264 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	6039      	str	r1, [r7, #0]
 800726e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007270:	79fb      	ldrb	r3, [r7, #7]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d105      	bne.n	8007282 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	4907      	ldr	r1, [pc, #28]	; (8007298 <USBD_FS_ProductStrDescriptor+0x34>)
 800727a:	4808      	ldr	r0, [pc, #32]	; (800729c <USBD_FS_ProductStrDescriptor+0x38>)
 800727c:	f7ff fdfa 	bl	8006e74 <USBD_GetString>
 8007280:	e004      	b.n	800728c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	4904      	ldr	r1, [pc, #16]	; (8007298 <USBD_FS_ProductStrDescriptor+0x34>)
 8007286:	4805      	ldr	r0, [pc, #20]	; (800729c <USBD_FS_ProductStrDescriptor+0x38>)
 8007288:	f7ff fdf4 	bl	8006e74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800728c:	4b02      	ldr	r3, [pc, #8]	; (8007298 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20001008 	.word	0x20001008
 800729c:	08007a0c 	.word	0x08007a0c

080072a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	6039      	str	r1, [r7, #0]
 80072aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	4904      	ldr	r1, [pc, #16]	; (80072c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80072b0:	4804      	ldr	r0, [pc, #16]	; (80072c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072b2:	f7ff fddf 	bl	8006e74 <USBD_GetString>
  return USBD_StrDesc;
 80072b6:	4b02      	ldr	r3, [pc, #8]	; (80072c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20001008 	.word	0x20001008
 80072c4:	08007a24 	.word	0x08007a24

080072c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	6039      	str	r1, [r7, #0]
 80072d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	221a      	movs	r2, #26
 80072d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072da:	f000 f843 	bl	8007364 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072de:	4b02      	ldr	r3, [pc, #8]	; (80072e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20000160 	.word	0x20000160

080072ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	6039      	str	r1, [r7, #0]
 80072f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	4907      	ldr	r1, [pc, #28]	; (8007320 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007302:	4808      	ldr	r0, [pc, #32]	; (8007324 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007304:	f7ff fdb6 	bl	8006e74 <USBD_GetString>
 8007308:	e004      	b.n	8007314 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	4904      	ldr	r1, [pc, #16]	; (8007320 <USBD_FS_ConfigStrDescriptor+0x34>)
 800730e:	4805      	ldr	r0, [pc, #20]	; (8007324 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007310:	f7ff fdb0 	bl	8006e74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007314:	4b02      	ldr	r3, [pc, #8]	; (8007320 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20001008 	.word	0x20001008
 8007324:	08007a38 	.word	0x08007a38

08007328 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	6039      	str	r1, [r7, #0]
 8007332:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d105      	bne.n	8007346 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	4907      	ldr	r1, [pc, #28]	; (800735c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800733e:	4808      	ldr	r0, [pc, #32]	; (8007360 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007340:	f7ff fd98 	bl	8006e74 <USBD_GetString>
 8007344:	e004      	b.n	8007350 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	4904      	ldr	r1, [pc, #16]	; (800735c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800734a:	4805      	ldr	r0, [pc, #20]	; (8007360 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800734c:	f7ff fd92 	bl	8006e74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007350:	4b02      	ldr	r3, [pc, #8]	; (800735c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20001008 	.word	0x20001008
 8007360:	08007a44 	.word	0x08007a44

08007364 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800736a:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <Get_SerialNum+0x44>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007370:	4b0e      	ldr	r3, [pc, #56]	; (80073ac <Get_SerialNum+0x48>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007376:	4b0e      	ldr	r3, [pc, #56]	; (80073b0 <Get_SerialNum+0x4c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4413      	add	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d009      	beq.n	800739e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800738a:	2208      	movs	r2, #8
 800738c:	4909      	ldr	r1, [pc, #36]	; (80073b4 <Get_SerialNum+0x50>)
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f814 	bl	80073bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007394:	2204      	movs	r2, #4
 8007396:	4908      	ldr	r1, [pc, #32]	; (80073b8 <Get_SerialNum+0x54>)
 8007398:	68b8      	ldr	r0, [r7, #8]
 800739a:	f000 f80f 	bl	80073bc <IntToUnicode>
  }
}
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	1ffff7e8 	.word	0x1ffff7e8
 80073ac:	1ffff7ec 	.word	0x1ffff7ec
 80073b0:	1ffff7f0 	.word	0x1ffff7f0
 80073b4:	20000162 	.word	0x20000162
 80073b8:	20000172 	.word	0x20000172

080073bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80073ce:	2300      	movs	r3, #0
 80073d0:	75fb      	strb	r3, [r7, #23]
 80073d2:	e027      	b.n	8007424 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	0f1b      	lsrs	r3, r3, #28
 80073d8:	2b09      	cmp	r3, #9
 80073da:	d80b      	bhi.n	80073f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	0f1b      	lsrs	r3, r3, #28
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	4619      	mov	r1, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	440b      	add	r3, r1
 80073ec:	3230      	adds	r2, #48	; 0x30
 80073ee:	b2d2      	uxtb	r2, r2
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	e00a      	b.n	800740a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	0f1b      	lsrs	r3, r3, #28
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	4619      	mov	r1, r3
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	440b      	add	r3, r1
 8007404:	3237      	adds	r2, #55	; 0x37
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007410:	7dfb      	ldrb	r3, [r7, #23]
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	3301      	adds	r3, #1
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	4413      	add	r3, r2
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	3301      	adds	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]
 8007424:	7dfa      	ldrb	r2, [r7, #23]
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	429a      	cmp	r2, r3
 800742a:	d3d3      	bcc.n	80073d4 <IntToUnicode+0x18>
  }
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr

08007438 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a0d      	ldr	r2, [pc, #52]	; (800747c <HAL_PCD_MspInit+0x44>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d113      	bne.n	8007472 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800744a:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <HAL_PCD_MspInit+0x48>)
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	4a0c      	ldr	r2, [pc, #48]	; (8007480 <HAL_PCD_MspInit+0x48>)
 8007450:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007454:	61d3      	str	r3, [r2, #28]
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <HAL_PCD_MspInit+0x48>)
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007462:	2200      	movs	r2, #0
 8007464:	2100      	movs	r1, #0
 8007466:	2014      	movs	r0, #20
 8007468:	f7f9 fac7 	bl	80009fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800746c:	2014      	movs	r0, #20
 800746e:	f7f9 fae0 	bl	8000a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40005c00 	.word	0x40005c00
 8007480:	40021000 	.word	0x40021000

08007484 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f7fe fdb9 	bl	8006012 <USBD_LL_SetupStage>
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	440b      	add	r3, r1
 80074c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	4619      	mov	r1, r3
 80074d2:	f7fe fdeb 	bl	80060ac <USBD_LL_DataOutStage>
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	440b      	add	r3, r1
 80074fe:	333c      	adds	r3, #60	; 0x3c
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	4619      	mov	r1, r3
 8007506:	f7fe fe42 	bl	800618e <USBD_LL_DataInStage>
}
 800750a:	bf00      	nop
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe ff52 	bl	80063ca <USBD_LL_SOF>
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007536:	2301      	movs	r3, #1
 8007538:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b02      	cmp	r3, #2
 8007540:	d001      	beq.n	8007546 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007542:	f7f9 f801 	bl	8000548 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800754c:	7bfa      	ldrb	r2, [r7, #15]
 800754e:	4611      	mov	r1, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe ff02 	bl	800635a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe febb 	bl	80062d8 <USBD_LL_Reset>
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe fefc 	bl	8006378 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007588:	4b04      	ldr	r3, [pc, #16]	; (800759c <HAL_PCD_SuspendCallback+0x30>)
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	4a03      	ldr	r2, [pc, #12]	; (800759c <HAL_PCD_SuspendCallback+0x30>)
 800758e:	f043 0306 	orr.w	r3, r3, #6
 8007592:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	e000ed00 	.word	0xe000ed00

080075a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fef6 	bl	80063a0 <USBD_LL_Resume>
}
 80075b4:	bf00      	nop
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80075c4:	4a28      	ldr	r2, [pc, #160]	; (8007668 <USBD_LL_Init+0xac>)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a26      	ldr	r2, [pc, #152]	; (8007668 <USBD_LL_Init+0xac>)
 80075d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80075d4:	4b24      	ldr	r3, [pc, #144]	; (8007668 <USBD_LL_Init+0xac>)
 80075d6:	4a25      	ldr	r2, [pc, #148]	; (800766c <USBD_LL_Init+0xb0>)
 80075d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80075da:	4b23      	ldr	r3, [pc, #140]	; (8007668 <USBD_LL_Init+0xac>)
 80075dc:	2208      	movs	r2, #8
 80075de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80075e0:	4b21      	ldr	r3, [pc, #132]	; (8007668 <USBD_LL_Init+0xac>)
 80075e2:	2202      	movs	r2, #2
 80075e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <USBD_LL_Init+0xac>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80075ec:	4b1e      	ldr	r3, [pc, #120]	; (8007668 <USBD_LL_Init+0xac>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80075f2:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <USBD_LL_Init+0xac>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80075f8:	481b      	ldr	r0, [pc, #108]	; (8007668 <USBD_LL_Init+0xac>)
 80075fa:	f7f9 fd15 	bl	8001028 <HAL_PCD_Init>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007604:	f7f8 ffa0 	bl	8000548 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800760e:	2318      	movs	r3, #24
 8007610:	2200      	movs	r2, #0
 8007612:	2100      	movs	r1, #0
 8007614:	f7fb f98b 	bl	800292e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800761e:	2358      	movs	r3, #88	; 0x58
 8007620:	2200      	movs	r2, #0
 8007622:	2180      	movs	r1, #128	; 0x80
 8007624:	f7fb f983 	bl	800292e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800762e:	23c0      	movs	r3, #192	; 0xc0
 8007630:	2200      	movs	r2, #0
 8007632:	2181      	movs	r1, #129	; 0x81
 8007634:	f7fb f97b 	bl	800292e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800763e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007642:	2200      	movs	r2, #0
 8007644:	2101      	movs	r1, #1
 8007646:	f7fb f972 	bl	800292e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007654:	2200      	movs	r2, #0
 8007656:	2182      	movs	r1, #130	; 0x82
 8007658:	f7fb f969 	bl	800292e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20001208 	.word	0x20001208
 800766c:	40005c00 	.word	0x40005c00

08007670 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007686:	4618      	mov	r0, r3
 8007688:	f7f9 fdd9 	bl	800123e <HAL_PCD_Start>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 f94e 	bl	8007934 <USBD_Get_USB_Status>
 8007698:	4603      	mov	r3, r0
 800769a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800769c:	7bbb      	ldrb	r3, [r7, #14]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	4608      	mov	r0, r1
 80076b0:	4611      	mov	r1, r2
 80076b2:	461a      	mov	r2, r3
 80076b4:	4603      	mov	r3, r0
 80076b6:	70fb      	strb	r3, [r7, #3]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70bb      	strb	r3, [r7, #2]
 80076bc:	4613      	mov	r3, r2
 80076be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076ce:	78bb      	ldrb	r3, [r7, #2]
 80076d0:	883a      	ldrh	r2, [r7, #0]
 80076d2:	78f9      	ldrb	r1, [r7, #3]
 80076d4:	f7f9 ff53 	bl	800157e <HAL_PCD_EP_Open>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 f928 	bl	8007934 <USBD_Get_USB_Status>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	460b      	mov	r3, r1
 80076fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800770c:	78fa      	ldrb	r2, [r7, #3]
 800770e:	4611      	mov	r1, r2
 8007710:	4618      	mov	r0, r3
 8007712:	f7f9 ff9a 	bl	800164a <HAL_PCD_EP_Close>
 8007716:	4603      	mov	r3, r0
 8007718:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	4618      	mov	r0, r3
 800771e:	f000 f909 	bl	8007934 <USBD_Get_USB_Status>
 8007722:	4603      	mov	r3, r0
 8007724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007726:	7bbb      	ldrb	r3, [r7, #14]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800774a:	78fa      	ldrb	r2, [r7, #3]
 800774c:	4611      	mov	r1, r2
 800774e:	4618      	mov	r0, r3
 8007750:	f7fa f85a 	bl	8001808 <HAL_PCD_EP_SetStall>
 8007754:	4603      	mov	r3, r0
 8007756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	4618      	mov	r0, r3
 800775c:	f000 f8ea 	bl	8007934 <USBD_Get_USB_Status>
 8007760:	4603      	mov	r3, r0
 8007762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007764:	7bbb      	ldrb	r3, [r7, #14]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007788:	78fa      	ldrb	r2, [r7, #3]
 800778a:	4611      	mov	r1, r2
 800778c:	4618      	mov	r0, r3
 800778e:	f7fa f89b 	bl	80018c8 <HAL_PCD_EP_ClrStall>
 8007792:	4603      	mov	r3, r0
 8007794:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 f8cb 	bl	8007934 <USBD_Get_USB_Status>
 800779e:	4603      	mov	r3, r0
 80077a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	da0c      	bge.n	80077e2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ce:	68f9      	ldr	r1, [r7, #12]
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	440b      	add	r3, r1
 80077dc:	3302      	adds	r3, #2
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	e00b      	b.n	80077fa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077e2:	78fb      	ldrb	r3, [r7, #3]
 80077e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077e8:	68f9      	ldr	r1, [r7, #12]
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	440b      	add	r3, r1
 80077f4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80077f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr

08007804 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f7f9 fe86 	bl	8001534 <HAL_PCD_SetAddress>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f880 	bl	8007934 <USBD_Get_USB_Status>
 8007834:	4603      	mov	r3, r0
 8007836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007838:	7bbb      	ldrb	r3, [r7, #14]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b086      	sub	sp, #24
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	461a      	mov	r2, r3
 800784e:	460b      	mov	r3, r1
 8007850:	72fb      	strb	r3, [r7, #11]
 8007852:	4613      	mov	r3, r2
 8007854:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007864:	893b      	ldrh	r3, [r7, #8]
 8007866:	7af9      	ldrb	r1, [r7, #11]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	f7f9 ff8a 	bl	8001782 <HAL_PCD_EP_Transmit>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	4618      	mov	r0, r3
 8007876:	f000 f85d 	bl	8007934 <USBD_Get_USB_Status>
 800787a:	4603      	mov	r3, r0
 800787c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800787e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	607a      	str	r2, [r7, #4]
 8007892:	461a      	mov	r2, r3
 8007894:	460b      	mov	r3, r1
 8007896:	72fb      	strb	r3, [r7, #11]
 8007898:	4613      	mov	r3, r2
 800789a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078aa:	893b      	ldrh	r3, [r7, #8]
 80078ac:	7af9      	ldrb	r1, [r7, #11]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	f7f9 ff13 	bl	80016da <HAL_PCD_EP_Receive>
 80078b4:	4603      	mov	r3, r0
 80078b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f83a 	bl	8007934 <USBD_Get_USB_Status>
 80078c0:	4603      	mov	r3, r0
 80078c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	460b      	mov	r3, r1
 80078d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078e0:	78fa      	ldrb	r2, [r7, #3]
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7f9 ff35 	bl	8001754 <HAL_PCD_EP_GetRxCount>
 80078ea:	4603      	mov	r3, r0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078fc:	4b02      	ldr	r3, [pc, #8]	; (8007908 <USBD_static_malloc+0x14>)
}
 80078fe:	4618      	mov	r0, r3
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr
 8007908:	200001a4 	.word	0x200001a4

0800790c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]

}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr

0800791e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	2b03      	cmp	r3, #3
 8007946:	d817      	bhi.n	8007978 <USBD_Get_USB_Status+0x44>
 8007948:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <USBD_Get_USB_Status+0x1c>)
 800794a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794e:	bf00      	nop
 8007950:	08007961 	.word	0x08007961
 8007954:	08007967 	.word	0x08007967
 8007958:	0800796d 	.word	0x0800796d
 800795c:	08007973 	.word	0x08007973
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	73fb      	strb	r3, [r7, #15]
    break;
 8007964:	e00b      	b.n	800797e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007966:	2302      	movs	r3, #2
 8007968:	73fb      	strb	r3, [r7, #15]
    break;
 800796a:	e008      	b.n	800797e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800796c:	2301      	movs	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
    break;
 8007970:	e005      	b.n	800797e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007972:	2302      	movs	r3, #2
 8007974:	73fb      	strb	r3, [r7, #15]
    break;
 8007976:	e002      	b.n	800797e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007978:	2302      	movs	r3, #2
 800797a:	73fb      	strb	r3, [r7, #15]
    break;
 800797c:	bf00      	nop
  }
  return usb_status;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop

0800798c <__libc_init_array>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	2600      	movs	r6, #0
 8007990:	4d0c      	ldr	r5, [pc, #48]	; (80079c4 <__libc_init_array+0x38>)
 8007992:	4c0d      	ldr	r4, [pc, #52]	; (80079c8 <__libc_init_array+0x3c>)
 8007994:	1b64      	subs	r4, r4, r5
 8007996:	10a4      	asrs	r4, r4, #2
 8007998:	42a6      	cmp	r6, r4
 800799a:	d109      	bne.n	80079b0 <__libc_init_array+0x24>
 800799c:	f000 f822 	bl	80079e4 <_init>
 80079a0:	2600      	movs	r6, #0
 80079a2:	4d0a      	ldr	r5, [pc, #40]	; (80079cc <__libc_init_array+0x40>)
 80079a4:	4c0a      	ldr	r4, [pc, #40]	; (80079d0 <__libc_init_array+0x44>)
 80079a6:	1b64      	subs	r4, r4, r5
 80079a8:	10a4      	asrs	r4, r4, #2
 80079aa:	42a6      	cmp	r6, r4
 80079ac:	d105      	bne.n	80079ba <__libc_init_array+0x2e>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b4:	4798      	blx	r3
 80079b6:	3601      	adds	r6, #1
 80079b8:	e7ee      	b.n	8007998 <__libc_init_array+0xc>
 80079ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80079be:	4798      	blx	r3
 80079c0:	3601      	adds	r6, #1
 80079c2:	e7f2      	b.n	80079aa <__libc_init_array+0x1e>
 80079c4:	08007a6c 	.word	0x08007a6c
 80079c8:	08007a6c 	.word	0x08007a6c
 80079cc:	08007a6c 	.word	0x08007a6c
 80079d0:	08007a70 	.word	0x08007a70

080079d4 <memset>:
 80079d4:	4603      	mov	r3, r0
 80079d6:	4402      	add	r2, r0
 80079d8:	4293      	cmp	r3, r2
 80079da:	d100      	bne.n	80079de <memset+0xa>
 80079dc:	4770      	bx	lr
 80079de:	f803 1b01 	strb.w	r1, [r3], #1
 80079e2:	e7f9      	b.n	80079d8 <memset+0x4>

080079e4 <_init>:
 80079e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e6:	bf00      	nop
 80079e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ea:	bc08      	pop	{r3}
 80079ec:	469e      	mov	lr, r3
 80079ee:	4770      	bx	lr

080079f0 <_fini>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	bf00      	nop
 80079f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f6:	bc08      	pop	{r3}
 80079f8:	469e      	mov	lr, r3
 80079fa:	4770      	bx	lr
